(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = global || self, global['location-conflation'] = factory());
}(this, (function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var quickselect = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
		 module.exports = factory() ;
	}(commonjsGlobal, (function () {
	function quickselect(arr, k, left, right, compare) {
	    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);
	}

	function quickselectStep(arr, k, left, right, compare) {

	    while (right > left) {
	        if (right - left > 600) {
	            var n = right - left + 1;
	            var m = k - left + 1;
	            var z = Math.log(n);
	            var s = 0.5 * Math.exp(2 * z / 3);
	            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
	            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
	            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
	            quickselectStep(arr, k, newLeft, newRight, compare);
	        }

	        var t = arr[k];
	        var i = left;
	        var j = right;

	        swap(arr, left, k);
	        if (compare(arr[right], t) > 0) swap(arr, left, right);

	        while (i < j) {
	            swap(arr, i, j);
	            i++;
	            j--;
	            while (compare(arr[i], t) < 0) i++;
	            while (compare(arr[j], t) > 0) j--;
	        }

	        if (compare(arr[left], t) === 0) swap(arr, left, j);
	        else {
	            j++;
	            swap(arr, j, right);
	        }

	        if (j <= k) left = j + 1;
	        if (k <= j) right = j - 1;
	    }
	}

	function swap(arr, i, j) {
	    var tmp = arr[i];
	    arr[i] = arr[j];
	    arr[j] = tmp;
	}

	function defaultCompare(a, b) {
	    return a < b ? -1 : a > b ? 1 : 0;
	}

	return quickselect;

	})));
	});

	var rbush_1 = rbush;
	var default_1 = rbush;



	function rbush(maxEntries, format) {
	    if (!(this instanceof rbush)) return new rbush(maxEntries, format);

	    // max entries in a node is 9 by default; min node fill is 40% for best performance
	    this._maxEntries = Math.max(4, maxEntries || 9);
	    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));

	    if (format) {
	        this._initFormat(format);
	    }

	    this.clear();
	}

	rbush.prototype = {

	    all: function () {
	        return this._all(this.data, []);
	    },

	    search: function (bbox) {

	        var node = this.data,
	            result = [],
	            toBBox = this.toBBox;

	        if (!intersects(bbox, node)) return result;

	        var nodesToSearch = [],
	            i, len, child, childBBox;

	        while (node) {
	            for (i = 0, len = node.children.length; i < len; i++) {

	                child = node.children[i];
	                childBBox = node.leaf ? toBBox(child) : child;

	                if (intersects(bbox, childBBox)) {
	                    if (node.leaf) result.push(child);
	                    else if (contains(bbox, childBBox)) this._all(child, result);
	                    else nodesToSearch.push(child);
	                }
	            }
	            node = nodesToSearch.pop();
	        }

	        return result;
	    },

	    collides: function (bbox) {

	        var node = this.data,
	            toBBox = this.toBBox;

	        if (!intersects(bbox, node)) return false;

	        var nodesToSearch = [],
	            i, len, child, childBBox;

	        while (node) {
	            for (i = 0, len = node.children.length; i < len; i++) {

	                child = node.children[i];
	                childBBox = node.leaf ? toBBox(child) : child;

	                if (intersects(bbox, childBBox)) {
	                    if (node.leaf || contains(bbox, childBBox)) return true;
	                    nodesToSearch.push(child);
	                }
	            }
	            node = nodesToSearch.pop();
	        }

	        return false;
	    },

	    load: function (data) {
	        if (!(data && data.length)) return this;

	        if (data.length < this._minEntries) {
	            for (var i = 0, len = data.length; i < len; i++) {
	                this.insert(data[i]);
	            }
	            return this;
	        }

	        // recursively build the tree with the given data from scratch using OMT algorithm
	        var node = this._build(data.slice(), 0, data.length - 1, 0);

	        if (!this.data.children.length) {
	            // save as is if tree is empty
	            this.data = node;

	        } else if (this.data.height === node.height) {
	            // split root if trees have the same height
	            this._splitRoot(this.data, node);

	        } else {
	            if (this.data.height < node.height) {
	                // swap trees if inserted one is bigger
	                var tmpNode = this.data;
	                this.data = node;
	                node = tmpNode;
	            }

	            // insert the small tree into the large tree at appropriate level
	            this._insert(node, this.data.height - node.height - 1, true);
	        }

	        return this;
	    },

	    insert: function (item) {
	        if (item) this._insert(item, this.data.height - 1);
	        return this;
	    },

	    clear: function () {
	        this.data = createNode([]);
	        return this;
	    },

	    remove: function (item, equalsFn) {
	        if (!item) return this;

	        var node = this.data,
	            bbox = this.toBBox(item),
	            path = [],
	            indexes = [],
	            i, parent, index, goingUp;

	        // depth-first iterative tree traversal
	        while (node || path.length) {

	            if (!node) { // go up
	                node = path.pop();
	                parent = path[path.length - 1];
	                i = indexes.pop();
	                goingUp = true;
	            }

	            if (node.leaf) { // check current node
	                index = findItem(item, node.children, equalsFn);

	                if (index !== -1) {
	                    // item found, remove the item and condense tree upwards
	                    node.children.splice(index, 1);
	                    path.push(node);
	                    this._condense(path);
	                    return this;
	                }
	            }

	            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down
	                path.push(node);
	                indexes.push(i);
	                i = 0;
	                parent = node;
	                node = node.children[0];

	            } else if (parent) { // go right
	                i++;
	                node = parent.children[i];
	                goingUp = false;

	            } else node = null; // nothing found
	        }

	        return this;
	    },

	    toBBox: function (item) { return item; },

	    compareMinX: compareNodeMinX,
	    compareMinY: compareNodeMinY,

	    toJSON: function () { return this.data; },

	    fromJSON: function (data) {
	        this.data = data;
	        return this;
	    },

	    _all: function (node, result) {
	        var nodesToSearch = [];
	        while (node) {
	            if (node.leaf) result.push.apply(result, node.children);
	            else nodesToSearch.push.apply(nodesToSearch, node.children);

	            node = nodesToSearch.pop();
	        }
	        return result;
	    },

	    _build: function (items, left, right, height) {

	        var N = right - left + 1,
	            M = this._maxEntries,
	            node;

	        if (N <= M) {
	            // reached leaf level; return leaf
	            node = createNode(items.slice(left, right + 1));
	            calcBBox(node, this.toBBox);
	            return node;
	        }

	        if (!height) {
	            // target height of the bulk-loaded tree
	            height = Math.ceil(Math.log(N) / Math.log(M));

	            // target number of root entries to maximize storage utilization
	            M = Math.ceil(N / Math.pow(M, height - 1));
	        }

	        node = createNode([]);
	        node.leaf = false;
	        node.height = height;

	        // split the items into M mostly square tiles

	        var N2 = Math.ceil(N / M),
	            N1 = N2 * Math.ceil(Math.sqrt(M)),
	            i, j, right2, right3;

	        multiSelect(items, left, right, N1, this.compareMinX);

	        for (i = left; i <= right; i += N1) {

	            right2 = Math.min(i + N1 - 1, right);

	            multiSelect(items, i, right2, N2, this.compareMinY);

	            for (j = i; j <= right2; j += N2) {

	                right3 = Math.min(j + N2 - 1, right2);

	                // pack each entry recursively
	                node.children.push(this._build(items, j, right3, height - 1));
	            }
	        }

	        calcBBox(node, this.toBBox);

	        return node;
	    },

	    _chooseSubtree: function (bbox, node, level, path) {

	        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;

	        while (true) {
	            path.push(node);

	            if (node.leaf || path.length - 1 === level) break;

	            minArea = minEnlargement = Infinity;

	            for (i = 0, len = node.children.length; i < len; i++) {
	                child = node.children[i];
	                area = bboxArea(child);
	                enlargement = enlargedArea(bbox, child) - area;

	                // choose entry with the least area enlargement
	                if (enlargement < minEnlargement) {
	                    minEnlargement = enlargement;
	                    minArea = area < minArea ? area : minArea;
	                    targetNode = child;

	                } else if (enlargement === minEnlargement) {
	                    // otherwise choose one with the smallest area
	                    if (area < minArea) {
	                        minArea = area;
	                        targetNode = child;
	                    }
	                }
	            }

	            node = targetNode || node.children[0];
	        }

	        return node;
	    },

	    _insert: function (item, level, isNode) {

	        var toBBox = this.toBBox,
	            bbox = isNode ? item : toBBox(item),
	            insertPath = [];

	        // find the best node for accommodating the item, saving all nodes along the path too
	        var node = this._chooseSubtree(bbox, this.data, level, insertPath);

	        // put the item into the node
	        node.children.push(item);
	        extend(node, bbox);

	        // split on node overflow; propagate upwards if necessary
	        while (level >= 0) {
	            if (insertPath[level].children.length > this._maxEntries) {
	                this._split(insertPath, level);
	                level--;
	            } else break;
	        }

	        // adjust bboxes along the insertion path
	        this._adjustParentBBoxes(bbox, insertPath, level);
	    },

	    // split overflowed node into two
	    _split: function (insertPath, level) {

	        var node = insertPath[level],
	            M = node.children.length,
	            m = this._minEntries;

	        this._chooseSplitAxis(node, m, M);

	        var splitIndex = this._chooseSplitIndex(node, m, M);

	        var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
	        newNode.height = node.height;
	        newNode.leaf = node.leaf;

	        calcBBox(node, this.toBBox);
	        calcBBox(newNode, this.toBBox);

	        if (level) insertPath[level - 1].children.push(newNode);
	        else this._splitRoot(node, newNode);
	    },

	    _splitRoot: function (node, newNode) {
	        // split root node
	        this.data = createNode([node, newNode]);
	        this.data.height = node.height + 1;
	        this.data.leaf = false;
	        calcBBox(this.data, this.toBBox);
	    },

	    _chooseSplitIndex: function (node, m, M) {

	        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;

	        minOverlap = minArea = Infinity;

	        for (i = m; i <= M - m; i++) {
	            bbox1 = distBBox(node, 0, i, this.toBBox);
	            bbox2 = distBBox(node, i, M, this.toBBox);

	            overlap = intersectionArea(bbox1, bbox2);
	            area = bboxArea(bbox1) + bboxArea(bbox2);

	            // choose distribution with minimum overlap
	            if (overlap < minOverlap) {
	                minOverlap = overlap;
	                index = i;

	                minArea = area < minArea ? area : minArea;

	            } else if (overlap === minOverlap) {
	                // otherwise choose distribution with minimum area
	                if (area < minArea) {
	                    minArea = area;
	                    index = i;
	                }
	            }
	        }

	        return index;
	    },

	    // sorts node children by the best axis for split
	    _chooseSplitAxis: function (node, m, M) {

	        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,
	            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,
	            xMargin = this._allDistMargin(node, m, M, compareMinX),
	            yMargin = this._allDistMargin(node, m, M, compareMinY);

	        // if total distributions margin value is minimal for x, sort by minX,
	        // otherwise it's already sorted by minY
	        if (xMargin < yMargin) node.children.sort(compareMinX);
	    },

	    // total margin of all possible split distributions where each node is at least m full
	    _allDistMargin: function (node, m, M, compare) {

	        node.children.sort(compare);

	        var toBBox = this.toBBox,
	            leftBBox = distBBox(node, 0, m, toBBox),
	            rightBBox = distBBox(node, M - m, M, toBBox),
	            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),
	            i, child;

	        for (i = m; i < M - m; i++) {
	            child = node.children[i];
	            extend(leftBBox, node.leaf ? toBBox(child) : child);
	            margin += bboxMargin(leftBBox);
	        }

	        for (i = M - m - 1; i >= m; i--) {
	            child = node.children[i];
	            extend(rightBBox, node.leaf ? toBBox(child) : child);
	            margin += bboxMargin(rightBBox);
	        }

	        return margin;
	    },

	    _adjustParentBBoxes: function (bbox, path, level) {
	        // adjust bboxes along the given tree path
	        for (var i = level; i >= 0; i--) {
	            extend(path[i], bbox);
	        }
	    },

	    _condense: function (path) {
	        // go through the path, removing empty nodes and updating bboxes
	        for (var i = path.length - 1, siblings; i >= 0; i--) {
	            if (path[i].children.length === 0) {
	                if (i > 0) {
	                    siblings = path[i - 1].children;
	                    siblings.splice(siblings.indexOf(path[i]), 1);

	                } else this.clear();

	            } else calcBBox(path[i], this.toBBox);
	        }
	    },

	    _initFormat: function (format) {
	        // data format (minX, minY, maxX, maxY accessors)

	        // uses eval-type function compilation instead of just accepting a toBBox function
	        // because the algorithms are very sensitive to sorting functions performance,
	        // so they should be dead simple and without inner calls

	        var compareArr = ['return a', ' - b', ';'];

	        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));
	        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));

	        this.toBBox = new Function('a',
	            'return {minX: a' + format[0] +
	            ', minY: a' + format[1] +
	            ', maxX: a' + format[2] +
	            ', maxY: a' + format[3] + '};');
	    }
	};

	function findItem(item, items, equalsFn) {
	    if (!equalsFn) return items.indexOf(item);

	    for (var i = 0; i < items.length; i++) {
	        if (equalsFn(item, items[i])) return i;
	    }
	    return -1;
	}

	// calculate node's bbox from bboxes of its children
	function calcBBox(node, toBBox) {
	    distBBox(node, 0, node.children.length, toBBox, node);
	}

	// min bounding rectangle of node children from k to p-1
	function distBBox(node, k, p, toBBox, destNode) {
	    if (!destNode) destNode = createNode(null);
	    destNode.minX = Infinity;
	    destNode.minY = Infinity;
	    destNode.maxX = -Infinity;
	    destNode.maxY = -Infinity;

	    for (var i = k, child; i < p; i++) {
	        child = node.children[i];
	        extend(destNode, node.leaf ? toBBox(child) : child);
	    }

	    return destNode;
	}

	function extend(a, b) {
	    a.minX = Math.min(a.minX, b.minX);
	    a.minY = Math.min(a.minY, b.minY);
	    a.maxX = Math.max(a.maxX, b.maxX);
	    a.maxY = Math.max(a.maxY, b.maxY);
	    return a;
	}

	function compareNodeMinX(a, b) { return a.minX - b.minX; }
	function compareNodeMinY(a, b) { return a.minY - b.minY; }

	function bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }
	function bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }

	function enlargedArea(a, b) {
	    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *
	           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
	}

	function intersectionArea(a, b) {
	    var minX = Math.max(a.minX, b.minX),
	        minY = Math.max(a.minY, b.minY),
	        maxX = Math.min(a.maxX, b.maxX),
	        maxY = Math.min(a.maxY, b.maxY);

	    return Math.max(0, maxX - minX) *
	           Math.max(0, maxY - minY);
	}

	function contains(a, b) {
	    return a.minX <= b.minX &&
	           a.minY <= b.minY &&
	           b.maxX <= a.maxX &&
	           b.maxY <= a.maxY;
	}

	function intersects(a, b) {
	    return b.minX <= a.maxX &&
	           b.minY <= a.maxY &&
	           b.maxX >= a.minX &&
	           b.maxY >= a.minY;
	}

	function createNode(children) {
	    return {
	        children: children,
	        height: 1,
	        leaf: true,
	        minX: Infinity,
	        minY: Infinity,
	        maxX: -Infinity,
	        maxY: -Infinity
	    };
	}

	// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
	// combines selection algorithm with binary divide & conquer approach

	function multiSelect(arr, left, right, n, compare) {
	    var stack = [left, right],
	        mid;

	    while (stack.length) {
	        right = stack.pop();
	        left = stack.pop();

	        if (right - left <= n) continue;

	        mid = left + Math.ceil((right - left) / n / 2) * n;
	        quickselect(arr, mid, left, right, compare);

	        stack.push(left, mid, mid, right);
	    }
	}
	rbush_1.default = default_1;

	var lineclip_1 = lineclip;

	lineclip.polyline = lineclip;
	lineclip.polygon = polygonclip;


	// Cohen-Sutherland line clippign algorithm, adapted to efficiently
	// handle polylines rather than just segments

	function lineclip(points, bbox, result) {

	    var len = points.length,
	        codeA = bitCode(points[0], bbox),
	        part = [],
	        i, a, b, codeB, lastCode;

	    if (!result) result = [];

	    for (i = 1; i < len; i++) {
	        a = points[i - 1];
	        b = points[i];
	        codeB = lastCode = bitCode(b, bbox);

	        while (true) {

	            if (!(codeA | codeB)) { // accept
	                part.push(a);

	                if (codeB !== lastCode) { // segment went outside
	                    part.push(b);

	                    if (i < len - 1) { // start a new line
	                        result.push(part);
	                        part = [];
	                    }
	                } else if (i === len - 1) {
	                    part.push(b);
	                }
	                break;

	            } else if (codeA & codeB) { // trivial reject
	                break;

	            } else if (codeA) { // a outside, intersect with clip edge
	                a = intersect(a, b, codeA, bbox);
	                codeA = bitCode(a, bbox);

	            } else { // b outside
	                b = intersect(a, b, codeB, bbox);
	                codeB = bitCode(b, bbox);
	            }
	        }

	        codeA = lastCode;
	    }

	    if (part.length) result.push(part);

	    return result;
	}

	// Sutherland-Hodgeman polygon clipping algorithm

	function polygonclip(points, bbox) {

	    var result, edge, prev, prevInside, i, p, inside;

	    // clip against each side of the clip rectangle
	    for (edge = 1; edge <= 8; edge *= 2) {
	        result = [];
	        prev = points[points.length - 1];
	        prevInside = !(bitCode(prev, bbox) & edge);

	        for (i = 0; i < points.length; i++) {
	            p = points[i];
	            inside = !(bitCode(p, bbox) & edge);

	            // if segment goes through the clip window, add an intersection
	            if (inside !== prevInside) result.push(intersect(prev, p, edge, bbox));

	            if (inside) result.push(p); // add a point if it's inside

	            prev = p;
	            prevInside = inside;
	        }

	        points = result;

	        if (!points.length) break;
	    }

	    return result;
	}

	// intersect a segment against one of the 4 lines that make up the bbox

	function intersect(a, b, edge, bbox) {
	    return edge & 8 ? [a[0] + (b[0] - a[0]) * (bbox[3] - a[1]) / (b[1] - a[1]), bbox[3]] : // top
	           edge & 4 ? [a[0] + (b[0] - a[0]) * (bbox[1] - a[1]) / (b[1] - a[1]), bbox[1]] : // bottom
	           edge & 2 ? [bbox[2], a[1] + (b[1] - a[1]) * (bbox[2] - a[0]) / (b[0] - a[0])] : // right
	           edge & 1 ? [bbox[0], a[1] + (b[1] - a[1]) * (bbox[0] - a[0]) / (b[0] - a[0])] : // left
	           null;
	}

	// bit code reflects the point position relative to the bbox:

	//         left  mid  right
	//    top  1001  1000  1010
	//    mid  0001  0000  0010
	// bottom  0101  0100  0110

	function bitCode(p, bbox) {
	    var code = 0;

	    if (p[0] < bbox[0]) code |= 1; // left
	    else if (p[0] > bbox[2]) code |= 2; // right

	    if (p[1] < bbox[1]) code |= 4; // bottom
	    else if (p[1] > bbox[3]) code |= 8; // top

	    return code;
	}

	var whichPolygon_1 = whichPolygon;

	function whichPolygon(data) {
	    var bboxes = [];
	    for (var i = 0; i < data.features.length; i++) {
	        var feature = data.features[i];
	        var coords = feature.geometry.coordinates;

	        if (feature.geometry.type === 'Polygon') {
	            bboxes.push(treeItem(coords, feature.properties));

	        } else if (feature.geometry.type === 'MultiPolygon') {
	            for (var j = 0; j < coords.length; j++) {
	                bboxes.push(treeItem(coords[j], feature.properties));
	            }
	        }
	    }

	    var tree = rbush_1().load(bboxes);

	    function query(p, multi) {
	        var output = [],
	            result = tree.search({
	                minX: p[0],
	                minY: p[1],
	                maxX: p[0],
	                maxY: p[1]
	            });
	        for (var i = 0; i < result.length; i++) {
	            if (insidePolygon(result[i].coords, p)) {
	                if (multi)
	                    output.push(result[i].props);
	                else
	                    return result[i].props;
	            }
	        }
	        return multi && output.length ? output : null;
	    }

	    query.tree = tree;
	    query.bbox = function queryBBox(bbox) {
	        var output = [];
	        var result = tree.search({
	            minX: bbox[0],
	            minY: bbox[1],
	            maxX: bbox[2],
	            maxY: bbox[3]
	        });
	        for (var i = 0; i < result.length; i++) {
	            if (polygonIntersectsBBox(result[i].coords, bbox)) {
	                output.push(result[i].props);
	            }
	        }
	        return output;
	    };

	    return query;
	}

	function polygonIntersectsBBox(polygon, bbox) {
	    var bboxCenter = [
	        (bbox[0] + bbox[2]) / 2,
	        (bbox[1] + bbox[3]) / 2
	    ];
	    if (insidePolygon(polygon, bboxCenter)) return true;
	    for (var i = 0; i < polygon.length; i++) {
	        if (lineclip_1(polygon[i], bbox).length > 0) return true;
	    }
	    return false;
	}

	// ray casting algorithm for detecting if point is in polygon
	function insidePolygon(rings, p) {
	    var inside = false;
	    for (var i = 0, len = rings.length; i < len; i++) {
	        var ring = rings[i];
	        for (var j = 0, len2 = ring.length, k = len2 - 1; j < len2; k = j++) {
	            if (rayIntersect(p, ring[j], ring[k])) inside = !inside;
	        }
	    }
	    return inside;
	}

	function rayIntersect(p, p1, p2) {
	    return ((p1[1] > p[1]) !== (p2[1] > p[1])) && (p[0] < (p2[0] - p1[0]) * (p[1] - p1[1]) / (p2[1] - p1[1]) + p1[0]);
	}

	function treeItem(coords, props) {
	    var item = {
	        minX: Infinity,
	        minY: Infinity,
	        maxX: -Infinity,
	        maxY: -Infinity,
	        coords: coords,
	        props: props
	    };

	    for (var i = 0; i < coords[0].length; i++) {
	        var p = coords[0][i];
	        item.minX = Math.min(item.minX, p[0]);
	        item.minY = Math.min(item.minY, p[1]);
	        item.maxX = Math.max(item.maxX, p[0]);
	        item.maxY = Math.max(item.maxY, p[1]);
	    }
	    return item;
	}

	var type = "FeatureCollection";
	var features = [{type:"Feature",properties:{m49:"017",wikidata:"Q27433",nameEn:"Middle Africa",groups:["202","002"],level:"intermediateRegion"},geometry:null},{type:"Feature",properties:{m49:"001",wikidata:"Q2",nameEn:"World",aliases:["Earth","Planet"],level:"world"},geometry:null},{type:"Feature",properties:{m49:"039",wikidata:"Q27449",nameEn:"Southern Europe",groups:["150"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"680",wikidata:"Q3405693",nameEn:"Sark",country:"GB",groups:["GG","830","154","150"],level:"subterritory",driveSide:"left",roadSpeedUnit:"mph",callingCodes:["44 01481"]},geometry:{type:"MultiPolygon",coordinates:[[[[-2.36485,49.48223],[-2.09454,49.46288],[-2.65349,49.15373],[-2.36485,49.48223]]]]}},{type:"Feature",properties:{m49:"005",wikidata:"Q18",nameEn:"South America",groups:["419","019"],level:"intermediateRegion"},geometry:null},{type:"Feature",properties:{m49:"143",wikidata:"Q27275",nameEn:"Central Asia",groups:["142"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"009",wikidata:"Q538",nameEn:"Oceania",level:"region"},geometry:null},{type:"Feature",properties:{m49:"150",wikidata:"Q46",nameEn:"Europe",level:"region"},geometry:null},{type:"Feature",properties:{m49:"061",wikidata:"Q35942",nameEn:"Polynesia",groups:["009"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"154",wikidata:"Q27479",nameEn:"Northern Europe",groups:["150"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"014",wikidata:"Q27407",nameEn:"Eastern Africa",groups:["202","002"],level:"intermediateRegion"},geometry:null},{type:"Feature",properties:{m49:"202",wikidata:"Q132959",nameEn:"Sub-Saharan Africa",groups:["002"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"053",wikidata:"Q45256",nameEn:"Australia and New Zealand",aliases:["Australasia"],groups:["009"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"830",wikidata:"Q42314",nameEn:"Channel Islands",groups:["150","154"],level:"intermediateRegion"},geometry:null},{type:"Feature",properties:{m49:"011",wikidata:"Q4412",nameEn:"Western Africa",groups:["202","002"],level:"intermediateRegion"},geometry:null},{type:"Feature",properties:{m49:"029",wikidata:"Q664609",nameEn:"Caribbean",groups:["419","019","003"],level:"intermediateRegion"},geometry:null},{type:"Feature",properties:{m49:"013",wikidata:"Q27611",nameEn:"Central America",groups:["419","019","003"],level:"intermediateRegion"},geometry:null},{type:"Feature",properties:{m49:"002",wikidata:"Q15",nameEn:"Africa",level:"region"},geometry:null},{type:"Feature",properties:{m49:"021",wikidata:"Q2017699",nameEn:"Northern America",groups:["019","003"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"142",wikidata:"Q48",nameEn:"Asia",level:"region"},geometry:null},{type:"Feature",properties:{m49:"035",wikidata:"Q11708",nameEn:"South-eastern Asia",groups:["142"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"151",wikidata:"Q27468",nameEn:"Eastern Europe",groups:["150"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"018",wikidata:"Q27394",nameEn:"Southern Africa",groups:["202","002"],level:"intermediateRegion"},geometry:null},{type:"Feature",properties:{m49:"419",wikidata:"Q72829598",nameEn:"Latin America and the Caribbean",groups:["019"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"034",wikidata:"Q771405",nameEn:"Southern Asia",groups:["142"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"057",wikidata:"Q3359409",nameEn:"Micronesia",groups:["009"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"054",wikidata:"Q37394",nameEn:"Melanesia",groups:["009"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"015",wikidata:"Q27381",nameEn:"Northern Africa",groups:["002"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"030",wikidata:"Q27231",nameEn:"Eastern Asia",groups:["142"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"003",wikidata:"Q49",nameEn:"North America",groups:["019"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"019",wikidata:"Q828",nameEn:"Americas",level:"region"},geometry:null},{type:"Feature",properties:{m49:"155",wikidata:"Q27496",nameEn:"Western Europe",groups:["150"],level:"subregion"},geometry:null},{type:"Feature",properties:{m49:"145",wikidata:"Q27293",nameEn:"Western Asia",groups:["142"],level:"subregion"},geometry:null},{type:"Feature",properties:{iso1A2:"IO",iso1A3:"IOT",iso1N3:"086",wikidata:"Q43448",nameEn:"British Indian Ocean Territory",country:"GB",groups:["014","202","002"],callingCodes:["246"]},geometry:{type:"MultiPolygon",coordinates:[[[[70.64754,-4.95745],[73.70488,-4.92492],[70.67958,-8.2663],[70.64754,-4.95745]]]]}},{type:"Feature",properties:{iso1A2:"KW",iso1A3:"KWT",iso1N3:"414",wikidata:"Q817",nameEn:"Kuwait",groups:["145","142"],callingCodes:["965"]},geometry:{type:"MultiPolygon",coordinates:[[[[49.00421,28.81495],[48.42991,28.53628],[47.70561,28.5221],[47.59863,28.66798],[47.58376,28.83382],[47.46202,29.0014],[46.5527,29.10283],[46.89695,29.50584],[47.15166,30.01044],[47.37192,30.10421],[47.7095,30.10453],[48.01114,29.98906],[48.06782,30.02906],[48.17332,30.02448],[48.40479,29.85763],[48.59531,29.66815],[49.00421,28.81495]]]]}},{type:"Feature",properties:{iso1A2:"ZW",iso1A3:"ZWE",iso1N3:"716",wikidata:"Q954",nameEn:"Zimbabwe",groups:["014","202","002"],driveSide:"left",callingCodes:["263"]},geometry:{type:"MultiPolygon",coordinates:[[[[30.41902,-15.62269],[30.42568,-15.9962],[30.91597,-15.99924],[30.97761,-16.05848],[31.13171,-15.98019],[31.30563,-16.01193],[31.42451,-16.15154],[31.67988,-16.19595],[31.90223,-16.34388],[31.91324,-16.41569],[32.02772,-16.43892],[32.28529,-16.43892],[32.42838,-16.4727],[32.71017,-16.59932],[32.69917,-16.66893],[32.78943,-16.70267],[32.97655,-16.70689],[32.91051,-16.89446],[32.84113,-16.92259],[32.96554,-17.11971],[33.00517,-17.30477],[33.0426,-17.3468],[32.96554,-17.48964],[32.98536,-17.55891],[33.0492,-17.60298],[32.94133,-17.99705],[33.03159,-18.35054],[33.02278,-18.4696],[32.88629,-18.51344],[32.88629,-18.58023],[32.95013,-18.69079],[32.9017,-18.7992],[32.82465,-18.77419],[32.70137,-18.84712],[32.73439,-18.92628],[32.69917,-18.94293],[32.72118,-19.02204],[32.84006,-19.0262],[32.87088,-19.09279],[32.85107,-19.29238],[32.77966,-19.36098],[32.78282,-19.47513],[32.84446,-19.48343],[32.84666,-19.68462],[32.95013,-19.67219],[33.06461,-19.77787],[33.01178,-20.02007],[32.93032,-20.03868],[32.85987,-20.16686],[32.85987,-20.27841],[32.66174,-20.56106],[32.55167,-20.56312],[32.48122,-20.63319],[32.51644,-20.91929],[32.37115,-21.133],[32.48236,-21.32873],[32.41234,-21.31246],[31.38336,-22.36919],[31.30611,-22.422],[31.16344,-22.32599],[31.08932,-22.34884],[30.86696,-22.28907],[30.6294,-22.32599],[30.48686,-22.31368],[30.38614,-22.34533],[30.28351,-22.35587],[30.2265,-22.2961],[30.13147,-22.30841],[29.92242,-22.19408],[29.76848,-22.14128],[29.64609,-22.12917],[29.37703,-22.19581],[29.3533,-22.18363],[29.24648,-22.05967],[29.1974,-22.07472],[29.14501,-22.07275],[29.08495,-22.04867],[29.04108,-22.00563],[29.02191,-21.95665],[29.02191,-21.90647],[29.04023,-21.85864],[29.07763,-21.81877],[28.58114,-21.63455],[28.49942,-21.66634],[28.29416,-21.59037],[28.01669,-21.57624],[27.91407,-21.31621],[27.69171,-21.08409],[27.72972,-20.51735],[27.69361,-20.48531],[27.28865,-20.49873],[27.29831,-20.28935],[27.21278,-20.08244],[26.72246,-19.92707],[26.17227,-19.53709],[25.96226,-19.08152],[25.99837,-19.02943],[25.94326,-18.90362],[25.82353,-18.82808],[25.79217,-18.6355],[25.68859,-18.56165],[25.53465,-18.39041],[25.39972,-18.12691],[25.31799,-18.07091],[25.23909,-17.90832],[25.26433,-17.79571],[25.51646,-17.86232],[25.6827,-17.81987],[25.85738,-17.91403],[25.85892,-17.97726],[26.08925,-17.98168],[26.0908,-17.93021],[26.21601,-17.88608],[26.55918,-17.99638],[26.68403,-18.07411],[26.74314,-18.0199],[26.89926,-17.98756],[27.14196,-17.81398],[27.30736,-17.60487],[27.61377,-17.34378],[27.62795,-17.24365],[27.83141,-16.96274],[28.73725,-16.5528],[28.76199,-16.51575],[28.81454,-16.48611],[28.8501,-16.04537],[28.9243,-15.93987],[29.01298,-15.93805],[29.21955,-15.76589],[29.4437,-15.68702],[29.8317,-15.6126],[30.35574,-15.6513],[30.41902,-15.62269]]]]}},{type:"Feature",properties:{iso1A2:"KY",iso1A3:"CYM",iso1N3:"136",wikidata:"Q5785",nameEn:"Cayman Islands",country:"GB",groups:["029","003","419","019"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["1 345"]},geometry:{type:"MultiPolygon",coordinates:[[[[-82.11509,19.60401],[-79.32727,20.06742],[-80.36068,18.11751],[-82.11509,19.60401]]]]}},{type:"Feature",properties:{iso1A2:"AD",iso1A3:"AND",iso1N3:"020",wikidata:"Q228",nameEn:"Andorra",groups:["039","150"],callingCodes:["376"]},geometry:{type:"MultiPolygon",coordinates:[[[[1.72515,42.50338],[1.70571,42.48867],[1.66826,42.50779],[1.65674,42.47125],[1.58933,42.46275],[1.57953,42.44957],[1.55937,42.45808],[1.55073,42.43299],[1.5127,42.42959],[1.44529,42.43724],[1.43838,42.47848],[1.41648,42.48315],[1.46661,42.50949],[1.44759,42.54431],[1.41245,42.53539],[1.4234,42.55959],[1.44529,42.56722],[1.42512,42.58292],[1.44197,42.60217],[1.47986,42.61346],[1.46718,42.63296],[1.48043,42.65203],[1.50867,42.64483],[1.55418,42.65669],[1.60085,42.62703],[1.63485,42.62957],[1.6625,42.61982],[1.68267,42.62533],[1.73452,42.61515],[1.72588,42.59098],[1.7858,42.57698],[1.73683,42.55492],[1.72515,42.50338]]]]}},{type:"Feature",properties:{iso1A2:"KZ",iso1A3:"KAZ",iso1N3:"398",wikidata:"Q232",nameEn:"Kazakhstan",groups:["143","142"],callingCodes:["7"]},geometry:{type:"MultiPolygon",coordinates:[[[[68.90865,55.38148],[69.34224,55.36344],[69.74917,55.35545],[70.19179,55.1476],[70.76493,55.3027],[70.96009,55.10558],[71.08288,54.71253],[71.24185,54.64965],[71.08706,54.33376],[71.10379,54.13326],[71.96141,54.17736],[72.17477,54.36303],[72.43415,53.92685],[72.71026,54.1161],[73.37963,53.96132],[73.74778,54.07194],[73.68921,53.86522],[73.25412,53.61532],[73.39218,53.44623],[75.07405,53.80831],[75.43398,53.98652],[75.3668,54.07439],[76.91052,54.4677],[76.82266,54.1798],[76.44076,54.16017],[76.54243,53.99329],[77.90383,53.29807],[79.11255,52.01171],[80.08138,50.77658],[80.4127,50.95581],[80.44819,51.20855],[80.80318,51.28262],[81.16999,51.15662],[81.06091,50.94833],[81.41248,50.97524],[81.46581,50.77658],[81.94999,50.79307],[82.55443,50.75412],[83.14607,51.00796],[83.8442,50.87375],[84.29385,50.27257],[84.99198,50.06793],[85.24047,49.60239],[86.18709,49.50259],[86.63674,49.80136],[86.79056,49.74787],[86.61307,49.60239],[86.82606,49.51796],[87.03071,49.25142],[87.31465,49.23603],[87.28386,49.11626],[86.87238,49.12432],[86.73568,48.99918],[86.75343,48.70331],[86.38069,48.46064],[85.73581,48.3939],[85.5169,48.05493],[85.61067,47.49753],[85.69696,47.2898],[85.54294,47.06171],[85.22443,47.04816],[84.93995,46.87399],[84.73077,47.01394],[83.92184,46.98912],[83.04622,47.19053],[82.21792,45.56619],[82.58474,45.40027],[82.51374,45.1755],[81.73278,45.3504],[80.11169,45.03352],[79.8987,44.89957],[80.38384,44.63073],[80.40229,44.23319],[80.40031,44.10986],[80.75156,43.44948],[80.69718,43.32589],[80.77771,43.30065],[80.78817,43.14235],[80.62913,43.141],[80.3735,43.01557],[80.58999,42.9011],[80.38169,42.83142],[80.26886,42.8366],[80.16892,42.61137],[80.26841,42.23797],[80.17807,42.21166],[79.97364,42.42816],[79.52921,42.44778],[79.19763,42.804],[78.91502,42.76839],[78.48469,42.89649],[75.82823,42.94848],[75.72174,42.79672],[75.29966,42.86183],[75.22619,42.85528],[74.88756,42.98612],[74.75,42.99029],[74.70331,43.02519],[74.64615,43.05881],[74.57491,43.13702],[74.22489,43.24657],[73.55634,43.03071],[73.50992,42.82356],[73.44393,42.43098],[71.88792,42.83578],[71.62405,42.76613],[71.53272,42.8014],[71.2724,42.77853],[71.22785,42.69248],[71.17807,42.67381],[71.15232,42.60486],[70.97717,42.50147],[70.85973,42.30188],[70.94483,42.26238],[69.49545,41.545],[69.45751,41.56863],[69.39485,41.51518],[69.45081,41.46246],[69.37468,41.46555],[69.35554,41.47211],[69.29778,41.43673],[69.25059,41.46693],[69.23332,41.45847],[69.22671,41.46298],[69.20439,41.45391],[69.18528,41.45175],[69.17701,41.43769],[69.15137,41.43078],[69.05006,41.36183],[69.01308,41.22804],[68.7217,41.05025],[68.73945,40.96989],[68.65662,40.93861],[68.62221,41.03019],[68.49983,40.99669],[68.58444,40.91447],[68.63,40.59358],[68.49983,40.56437],[67.96736,40.83798],[68.1271,41.0324],[68.08273,41.08148],[67.98511,41.02794],[67.9644,41.14611],[66.69129,41.1311],[66.53302,41.87388],[66.00546,41.94455],[66.09482,42.93426],[65.85194,42.85481],[65.53277,43.31856],[65.18666,43.48835],[64.96464,43.74748],[64.53885,43.56941],[63.34656,43.64003],[62.01711,43.51008],[61.01475,44.41383],[58.59711,45.58671],[55.97842,44.99622],[55.97832,44.99622],[55.97822,44.99617],[55.97811,44.99617],[55.97801,44.99612],[55.97801,44.99607],[55.97791,44.99607],[55.9778,44.99607],[55.9777,44.99601],[55.9777,44.99596],[55.9776,44.99591],[55.97749,44.99591],[55.97739,44.99591],[55.97739,44.99586],[55.97729,44.99586],[55.97718,44.99581],[55.97708,44.99576],[55.97698,44.9957],[55.97698,44.99565],[55.97687,44.9956],[55.97677,44.9956],[55.97677,44.99555],[55.97677,44.9955],[55.97667,44.99545],[55.97656,44.99539],[55.97646,44.99534],[55.97646,44.99529],[55.97636,44.99524],[55.97636,44.99519],[55.97625,44.99514],[55.97615,44.99508],[55.97615,44.99503],[55.97615,44.99498],[55.97615,44.99493],[55.97615,44.99483],[55.97615,44.99477],[55.97605,44.99477],[55.97605,44.99467],[55.97605,44.99462],[55.97605,44.99457],[55.97605,44.99452],[55.97594,44.99446],[55.97584,44.99441],[55.97584,44.99436],[55.97584,44.99431],[55.97584,44.99426],[55.97584,44.99421],[55.97584,44.99415],[55.97584,44.99405],[55.97584,44.994],[55.97584,44.9939],[55.97584,44.99384],[55.97584,44.99374],[55.97584,44.99369],[55.97584,44.99359],[55.97584,44.99353],[55.97584,44.99348],[55.97584,44.99343],[55.97584,44.99338],[55.97584,44.99328],[55.97584,44.99322],[56.00314,41.32584],[55.45471,41.25609],[54.95182,41.92424],[54.20635,42.38477],[52.97575,42.1308],[52.47884,41.78034],[52.26048,41.69249],[49.2134,44.84989],[49.88945,46.04554],[49.32259,46.26944],[49.16518,46.38542],[48.54988,46.56267],[48.51142,46.69268],[49.01136,46.72716],[48.52326,47.4102],[48.45173,47.40818],[48.15348,47.74545],[47.64973,47.76559],[47.41689,47.83687],[47.38731,47.68176],[47.12107,47.83687],[47.11516,48.27188],[46.49011,48.43019],[46.78392,48.95352],[46.91104,48.99715],[47.01458,49.07085],[47.04416,49.17152],[46.98795,49.23531],[46.78398,49.34026],[46.9078,49.86707],[47.18319,49.93721],[47.34589,50.09308],[47.30448,50.30894],[47.58551,50.47867],[48.10044,50.09242],[48.24519,49.86099],[48.42564,49.82283],[48.68352,49.89546],[48.90782,50.02281],[48.57946,50.63278],[48.86936,50.61589],[49.12673,50.78639],[49.41959,50.85927],[49.39001,51.09396],[49.76866,51.11067],[49.97277,51.2405],[50.26859,51.28677],[50.59695,51.61859],[51.26254,51.68466],[51.301,51.48799],[51.77431,51.49536],[51.8246,51.67916],[52.36119,51.74161],[52.54329,51.48444],[53.46165,51.49445],[53.69299,51.23466],[54.12248,51.11542],[54.46331,50.85554],[54.41894,50.61214],[54.55797,50.52006],[54.71476,50.61214],[54.56685,51.01958],[54.72067,51.03261],[55.67774,50.54508],[56.11398,50.7471],[56.17906,50.93204],[57.17302,51.11253],[57.44221,50.88354],[57.74986,50.93017],[57.75578,51.13852],[58.3208,51.15151],[58.87974,50.70852],[59.48928,50.64216],[59.51886,50.49937],[59.81172,50.54451],[60.01288,50.8163],[60.17262,50.83312],[60.31914,50.67705],[60.81833,50.6629],[61.4431,50.80679],[61.56889,51.23679],[61.6813,51.25716],[61.55114,51.32746],[61.50677,51.40687],[60.95655,51.48615],[60.92401,51.61124],[60.5424,51.61675],[60.36787,51.66815],[60.50986,51.7964],[60.09867,51.87135],[59.99809,51.98263],[60.19925,51.99173],[60.48915,52.15175],[60.72581,52.15538],[60.78201,52.22067],[61.05417,52.35096],[60.98021,52.50068],[60.84709,52.52228],[60.84118,52.63912],[60.71693,52.66245],[60.71989,52.75923],[61.05842,52.92217],[61.23462,53.03227],[62.0422,52.96105],[62.12799,52.99133],[62.14574,53.09626],[61.19024,53.30536],[61.14291,53.41481],[61.29082,53.50992],[61.37957,53.45887],[61.57185,53.50112],[61.55706,53.57144],[60.90626,53.62937],[61.22574,53.80268],[61.14283,53.90063],[60.99796,53.93699],[61.26863,53.92797],[61.3706,54.08464],[61.47603,54.08048],[61.56941,53.95703],[61.65318,54.02445],[62.03913,53.94768],[62.00966,54.04134],[62.38535,54.03961],[62.45931,53.90737],[62.56876,53.94047],[62.58651,54.05871],[63.80604,54.27079],[63.91224,54.20013],[64.02715,54.22679],[63.97686,54.29763],[64.97216,54.4212],[65.11033,54.33028],[65.24663,54.35721],[65.20174,54.55216],[68.21308,54.98645],[68.26661,55.09226],[68.19206,55.18823],[68.90865,55.38148]]]]}},{type:"Feature",properties:{iso1A2:"AF",iso1A3:"AFG",iso1N3:"004",wikidata:"Q889",nameEn:"Afghanistan",groups:["034","142"],callingCodes:["93"]},geometry:{type:"MultiPolygon",coordinates:[[[[70.61526,38.34774],[70.64966,38.34999],[70.69189,38.37031],[70.6761,38.39144],[70.67438,38.40597],[70.69807,38.41861],[70.72485,38.4131],[70.75455,38.4252],[70.77132,38.45548],[70.78581,38.45502],[70.78702,38.45031],[70.79766,38.44944],[70.80521,38.44447],[70.81697,38.44507],[70.82538,38.45394],[70.84376,38.44688],[70.88719,38.46826],[70.92728,38.43021],[70.98693,38.48862],[71.03545,38.44779],[71.0556,38.40176],[71.09542,38.42517],[71.10592,38.42077],[71.10957,38.40671],[71.1451,38.40106],[71.21291,38.32797],[71.33114,38.30339],[71.33869,38.27335],[71.37803,38.25641],[71.36444,38.15358],[71.29878,38.04429],[71.28922,38.01272],[71.27622,37.99946],[71.27278,37.96496],[71.24969,37.93031],[71.2809,37.91995],[71.296,37.93403],[71.32871,37.88564],[71.51565,37.95349],[71.58843,37.92425],[71.59255,37.79956],[71.55752,37.78677],[71.54324,37.77104],[71.53053,37.76534],[71.55234,37.73209],[71.54186,37.69691],[71.51972,37.61945],[71.5065,37.60912],[71.49693,37.53527],[71.50616,37.50733],[71.5256,37.47971],[71.49612,37.4279],[71.47685,37.40281],[71.4862,37.33405],[71.49821,37.31975],[71.50674,37.31502],[71.48536,37.26017],[71.4824,37.24921],[71.48339,37.23937],[71.47386,37.2269],[71.4555,37.21418],[71.4494,37.18137],[71.44127,37.11856],[71.43097,37.05855],[71.45578,37.03094],[71.46923,36.99925],[71.48481,36.93218],[71.51502,36.89128],[71.57195,36.74943],[71.67083,36.67346],[71.83229,36.68084],[72.31676,36.98115],[72.54095,37.00007],[72.66381,37.02014],[72.79693,37.22222],[73.06884,37.31729],[73.29633,37.46495],[73.77197,37.4417],[73.76647,37.33913],[73.61129,37.27469],[73.64974,37.23643],[73.82552,37.22659],[73.8564,37.26158],[74.20308,37.34208],[74.23339,37.41116],[74.41055,37.3948],[74.56161,37.37734],[74.68383,37.3948],[74.8294,37.3435],[74.88887,37.23275],[74.80605,37.21565],[74.49981,37.24518],[74.56453,37.03023],[74.53739,36.96224],[74.43389,37.00977],[74.04856,36.82648],[73.82685,36.91421],[72.6323,36.84601],[72.18135,36.71838],[71.80267,36.49924],[71.60491,36.39429],[71.19505,36.04134],[71.37969,35.95865],[71.55273,35.71483],[71.49917,35.6267],[71.65435,35.4479],[71.54294,35.31037],[71.5541,35.28776],[71.67495,35.21262],[71.52938,35.09023],[71.55273,35.02615],[71.49917,35.00478],[71.50329,34.97328],[71.29472,34.87728],[71.28356,34.80882],[71.08718,34.69034],[71.11602,34.63047],[71.0089,34.54568],[71.02401,34.44835],[71.17662,34.36769],[71.12815,34.26619],[71.13078,34.16503],[71.09453,34.13524],[71.09307,34.11961],[71.06933,34.10564],[71.07345,34.06242],[70.88119,33.97933],[70.54336,33.9463],[69.90203,34.04194],[69.87307,33.9689],[69.85671,33.93719],[70.00503,33.73528],[70.14236,33.71701],[70.14785,33.6553],[70.20141,33.64387],[70.17062,33.53535],[70.32775,33.34496],[70.13686,33.21064],[70.07369,33.22557],[70.02563,33.14282],[69.85259,33.09451],[69.79766,33.13247],[69.71526,33.09911],[69.57656,33.09911],[69.49004,33.01509],[69.49854,32.88843],[69.5436,32.8768],[69.47082,32.85834],[69.38018,32.76601],[69.43649,32.7302],[69.44747,32.6678],[69.38155,32.56601],[69.2868,32.53938],[69.23599,32.45946],[69.27932,32.29119],[69.27032,32.14141],[69.3225,31.93186],[69.20577,31.85957],[69.11514,31.70782],[69.00939,31.62249],[68.95995,31.64822],[68.91078,31.59687],[68.79997,31.61665],[68.6956,31.75687],[68.57475,31.83158],[68.44222,31.76446],[68.27605,31.75863],[68.25614,31.80357],[68.1655,31.82691],[68.00071,31.6564],[67.86887,31.63536],[67.72056,31.52304],[67.58323,31.52772],[67.62374,31.40473],[67.7748,31.4188],[67.78854,31.33203],[67.29964,31.19586],[67.03323,31.24519],[67.04147,31.31561],[66.83273,31.26867],[66.72561,31.20526],[66.68166,31.07597],[66.58175,30.97532],[66.42645,30.95309],[66.39194,30.9408],[66.28413,30.57001],[66.34869,30.404],[66.23609,30.06321],[66.36042,29.9583],[66.24175,29.85181],[65.04005,29.53957],[64.62116,29.58903],[64.19796,29.50407],[64.12966,29.39157],[63.5876,29.50456],[62.47751,29.40782],[60.87231,29.86514],[61.80829,30.84224],[61.78268,30.92724],[61.8335,30.97669],[61.83257,31.0452],[61.80957,31.12576],[61.80569,31.16167],[61.70929,31.37391],[60.84541,31.49561],[60.86191,32.22565],[60.56485,33.12944],[60.88908,33.50219],[60.91133,33.55596],[60.69573,33.56054],[60.57762,33.59772],[60.5485,33.73422],[60.5838,33.80793],[60.50209,34.13992],[60.66502,34.31539],[60.91321,34.30411],[60.72316,34.52857],[60.99922,34.63064],[61.00197,34.70631],[61.06926,34.82139],[61.12831,35.09938],[61.0991,35.27845],[61.18187,35.30249],[61.27371,35.61482],[61.58742,35.43803],[61.77693,35.41341],[61.97743,35.4604],[62.05709,35.43803],[62.15871,35.33278],[62.29191,35.25964],[62.29878,35.13312],[62.48006,35.28796],[62.62288,35.22067],[62.74098,35.25432],[62.90853,35.37086],[63.0898,35.43131],[63.12276,35.53196],[63.10079,35.63024],[63.23262,35.67487],[63.10318,35.81782],[63.12276,35.86208],[63.29579,35.85985],[63.53475,35.90881],[63.56496,35.95106],[63.98519,36.03773],[64.05385,36.10433],[64.43288,36.24401],[64.57295,36.34362],[64.62514,36.44311],[64.61141,36.6351],[64.97945,37.21913],[65.51778,37.23881],[65.64263,37.34388],[65.64137,37.45061],[65.72274,37.55438],[66.30993,37.32409],[66.55743,37.35409],[66.64699,37.32958],[66.95598,37.40162],[67.08232,37.35469],[67.13039,37.27168],[67.2224,37.24545],[67.2581,37.17216],[67.51868,37.26102],[67.78329,37.1834],[67.7803,37.08978],[67.87917,37.0591],[68.02194,36.91923],[68.18542,37.02074],[68.27605,37.00977],[68.29253,37.10621],[68.41201,37.10402],[68.41888,37.13906],[68.61851,37.19815],[68.6798,37.27906],[68.81438,37.23862],[68.80889,37.32494],[68.91189,37.26704],[68.88168,37.33368],[68.96407,37.32603],[69.03274,37.25174],[69.25152,37.09426],[69.39529,37.16752],[69.45022,37.23315],[69.36645,37.40462],[69.44954,37.4869],[69.51888,37.5844],[69.80041,37.5746],[69.84435,37.60616],[69.93362,37.61378],[69.95971,37.5659],[70.15015,37.52519],[70.28243,37.66706],[70.27694,37.81258],[70.1863,37.84296],[70.17206,37.93276],[70.4898,38.12546],[70.54673,38.24541],[70.60407,38.28046],[70.61526,38.34774]]]]}},{type:"Feature",properties:{iso1A2:"LA",iso1A3:"LAO",iso1N3:"418",wikidata:"Q819",nameEn:"Laos",groups:["035","142"],callingCodes:["856"]},geometry:{type:"MultiPolygon",coordinates:[[[[102.1245,22.43372],[102.14099,22.40092],[102.18712,22.30403],[102.51734,22.02676],[102.49092,21.99002],[102.62301,21.91447],[102.67145,21.65894],[102.74189,21.66713],[102.82115,21.73667],[102.81894,21.83888],[102.85637,21.84501],[102.86077,21.71213],[102.97965,21.74076],[102.98846,21.58936],[102.86297,21.4255],[102.94223,21.46034],[102.88939,21.3107],[102.80794,21.25736],[102.89825,21.24707],[102.97745,21.05821],[103.03469,21.05821],[103.12055,20.89994],[103.21497,20.89832],[103.38032,20.79501],[103.45737,20.82382],[103.68633,20.66324],[103.73478,20.6669],[103.82282,20.8732],[103.98024,20.91531],[104.11121,20.96779],[104.27412,20.91433],[104.63957,20.6653],[104.38199,20.47155],[104.40621,20.3849],[104.47886,20.37459],[104.66158,20.47774],[104.72102,20.40554],[104.62195,20.36633],[104.61315,20.24452],[104.86852,20.14121],[104.91695,20.15567],[104.9874,20.09573],[104.8465,19.91783],[104.8355,19.80395],[104.68359,19.72729],[104.64837,19.62365],[104.53169,19.61743],[104.41281,19.70035],[104.23229,19.70242],[104.06498,19.66926],[104.05617,19.61743],[104.10832,19.51575],[104.06058,19.43484],[103.87125,19.31854],[104.5361,18.97747],[104.64617,18.85668],[105.12829,18.70453],[105.19654,18.64196],[105.1327,18.58355],[105.10408,18.43533],[105.15942,18.38691],[105.38366,18.15315],[105.46292,18.22008],[105.64784,17.96687],[105.60381,17.89356],[105.76612,17.67147],[105.85744,17.63221],[106.09019,17.36399],[106.18991,17.28227],[106.24444,17.24714],[106.29287,17.3018],[106.31929,17.20509],[106.43597,17.01362],[106.50862,16.9673],[106.55045,17.0031],[106.54824,16.92729],[106.51963,16.92097],[106.52183,16.87884],[106.55265,16.86831],[106.55485,16.68704],[106.59013,16.62259],[106.58267,16.6012],[106.61477,16.60713],[106.66052,16.56892],[106.65832,16.47816],[106.74418,16.41904],[106.84104,16.55415],[106.88727,16.52671],[106.88067,16.43594],[106.96638,16.34938],[106.97385,16.30204],[107.02597,16.31132],[107.09091,16.3092],[107.15035,16.26271],[107.14595,16.17816],[107.25822,16.13587],[107.33968,16.05549],[107.44975,16.08511],[107.46296,16.01106],[107.39471,15.88829],[107.34188,15.89464],[107.21419,15.83747],[107.21859,15.74638],[107.27143,15.71459],[107.27583,15.62769],[107.34408,15.62345],[107.3815,15.49832],[107.50699,15.48771],[107.53341,15.40496],[107.62367,15.42193],[107.60605,15.37524],[107.62587,15.2266],[107.58844,15.20111],[107.61926,15.13949],[107.61486,15.0566],[107.46516,15.00982],[107.48277,14.93751],[107.59285,14.87795],[107.51579,14.79282],[107.54361,14.69092],[107.47238,14.61523],[107.44435,14.52785],[107.37897,14.54443],[107.3276,14.58812],[107.29803,14.58963],[107.26534,14.54292],[107.256,14.48716],[107.21241,14.48716],[107.17038,14.41782],[107.09722,14.3937],[107.03962,14.45099],[107.04585,14.41782],[106.98825,14.36806],[106.9649,14.3198],[106.90574,14.33639],[106.8497,14.29416],[106.80767,14.31226],[106.73762,14.42687],[106.63333,14.44194],[106.59908,14.50977],[106.57106,14.50525],[106.54148,14.59565],[106.50723,14.58963],[106.45898,14.55045],[106.47766,14.50977],[106.43874,14.52032],[106.40916,14.45249],[106.32355,14.44043],[106.25194,14.48415],[106.21302,14.36203],[106.00131,14.36957],[105.99509,14.32734],[106.02311,14.30623],[106.04801,14.20363],[106.10872,14.18401],[106.11962,14.11307],[106.18656,14.06324],[106.16632,14.01794],[106.10094,13.98471],[106.10405,13.9137],[105.90791,13.92881],[105.78182,14.02247],[105.78338,14.08438],[105.5561,14.15684],[105.44869,14.10703],[105.36775,14.09948],[105.2759,14.17496],[105.20894,14.34967],[105.43783,14.43865],[105.53864,14.55731],[105.5121,14.80802],[105.61162,15.00037],[105.46661,15.13132],[105.58043,15.32724],[105.50662,15.32054],[105.4692,15.33709],[105.47635,15.3796],[105.58191,15.41031],[105.60446,15.53301],[105.61756,15.68792],[105.46573,15.74742],[105.42285,15.76971],[105.37959,15.84074],[105.34115,15.92737],[105.38508,15.987],[105.42001,16.00657],[105.06204,16.09792],[105.00262,16.25627],[104.88057,16.37311],[104.73349,16.565],[104.76099,16.69302],[104.7397,16.81005],[104.76442,16.84752],[104.7373,16.91125],[104.73712,17.01404],[104.80716,17.19025],[104.80061,17.39367],[104.69867,17.53038],[104.45404,17.66788],[104.35432,17.82871],[104.2757,17.86139],[104.21776,17.99335],[104.10927,18.10826],[104.06533,18.21656],[103.97725,18.33631],[103.93916,18.33914],[103.85642,18.28666],[103.82449,18.33979],[103.699,18.34125],[103.60957,18.40528],[103.47773,18.42841],[103.41044,18.4486],[103.30977,18.4341],[103.24779,18.37807],[103.23818,18.34875],[103.29757,18.30475],[103.17093,18.2618],[103.14994,18.23172],[103.1493,18.17799],[103.07343,18.12351],[103.07823,18.03833],[103.0566,18.00144],[103.01998,17.97095],[102.9912,17.9949],[102.95812,18.0054],[102.86323,17.97531],[102.81988,17.94233],[102.79044,17.93612],[102.75954,17.89561],[102.68538,17.86653],[102.67543,17.84529],[102.69946,17.81686],[102.68194,17.80151],[102.59485,17.83537],[102.5896,17.84889],[102.61432,17.92273],[102.60971,17.95411],[102.59234,17.96127],[102.45523,17.97106],[102.11359,18.21532],[101.88485,18.02474],[101.78087,18.07559],[101.72294,17.92867],[101.44667,17.7392],[101.15108,17.47586],[100.96541,17.57926],[101.02185,17.87637],[101.1793,18.0544],[101.19118,18.2125],[101.15108,18.25624],[101.18227,18.34367],[101.06047,18.43247],[101.27585,18.68875],[101.22832,18.73377],[101.25803,18.89545],[101.35606,19.04716],[101.261,19.12717],[101.24911,19.33334],[101.20604,19.35296],[101.21347,19.46223],[101.26991,19.48324],[101.26545,19.59242],[101.08928,19.59748],[100.90302,19.61901],[100.77231,19.48324],[100.64606,19.55884],[100.58219,19.49164],[100.49604,19.53504],[100.398,19.75047],[100.5094,19.87904],[100.58808,20.15791],[100.55218,20.17741],[100.51052,20.14928],[100.47567,20.19133],[100.4537,20.19971],[100.44992,20.23644],[100.41473,20.25625],[100.37439,20.35156],[100.33383,20.4028],[100.25769,20.3992],[100.22076,20.31598],[100.16668,20.2986],[100.1712,20.24324],[100.11785,20.24787],[100.09337,20.26293],[100.09999,20.31614],[100.08404,20.36626],[100.1957,20.68247],[100.36375,20.82783],[100.51079,20.82194],[100.60112,20.8347],[100.64628,20.88279],[100.50974,20.88574],[100.55281,21.02796],[100.63578,21.05639],[100.72716,21.31786],[100.80173,21.2934],[101.00234,21.39612],[101.16198,21.52808],[101.15156,21.56129],[101.2124,21.56422],[101.19349,21.41959],[101.26912,21.36482],[101.2229,21.23271],[101.29326,21.17254],[101.54563,21.25668],[101.6068,21.23329],[101.59491,21.18621],[101.60886,21.17947],[101.66977,21.20004],[101.70548,21.14911],[101.7622,21.14813],[101.79266,21.19025],[101.76745,21.21571],[101.83887,21.20983],[101.84412,21.25291],[101.74014,21.30967],[101.74224,21.48276],[101.7727,21.51794],[101.7475,21.5873],[101.80001,21.57461],[101.83257,21.61562],[101.74555,21.72852],[101.7791,21.83019],[101.62566,21.96574],[101.57525,22.13026],[101.60675,22.13513],[101.53638,22.24794],[101.56789,22.28876],[101.61306,22.27515],[101.68973,22.46843],[101.7685,22.50337],[101.86828,22.38397],[101.90714,22.38688],[101.91344,22.44417],[101.98487,22.42766],[102.03633,22.46164],[102.1245,22.43372]]]]}},{type:"Feature",properties:{iso1A2:"AI",iso1A3:"AIA",iso1N3:"660",wikidata:"Q25228",nameEn:"Anguilla",country:"GB",groups:["029","003","419","019"],driveSide:"left",callingCodes:["1 264"]},geometry:{type:"MultiPolygon",coordinates:[[[[-63.83866,18.82518],[-62.46233,19.00569],[-62.75637,18.13489],[-62.86666,18.19278],[-63.35989,18.06012],[-63.83866,18.82518]]]]}},{type:"Feature",properties:{iso1A2:"LB",iso1A3:"LBN",iso1N3:"422",wikidata:"Q822",nameEn:"Lebanon",aliases:["RL"],groups:["145","142"],callingCodes:["961"]},geometry:{type:"MultiPolygon",coordinates:[[[[35.94816,33.47886],[35.88668,33.43183],[35.82577,33.40479],[35.81324,33.36354],[35.77477,33.33609],[35.62019,33.27278],[35.62283,33.24226],[35.58502,33.26653],[35.58326,33.28381],[35.56523,33.28969],[35.55555,33.25844],[35.54544,33.25513],[35.54808,33.236],[35.5362,33.23196],[35.54228,33.19865],[35.52573,33.11921],[35.50335,33.114],[35.50272,33.09056],[35.448,33.09264],[35.43059,33.06659],[35.35223,33.05617],[35.31429,33.10515],[35.1924,33.08743],[35.10645,33.09318],[34.78515,33.20368],[35.48515,34.70851],[35.97386,34.63322],[35.98718,34.64977],[36.29165,34.62991],[36.32399,34.69334],[36.35135,34.68516],[36.35384,34.65447],[36.42941,34.62505],[36.46003,34.6378],[36.45299,34.59438],[36.41429,34.61175],[36.39846,34.55672],[36.3369,34.52629],[36.34745,34.5002],[36.4442,34.50165],[36.46179,34.46541],[36.55853,34.41609],[36.53039,34.3798],[36.56556,34.31881],[36.60778,34.31009],[36.58667,34.27667],[36.59195,34.2316],[36.62537,34.20251],[36.5128,34.09916],[36.50576,34.05982],[36.41078,34.05253],[36.28589,33.91981],[36.38263,33.86579],[36.3967,33.83365],[36.14517,33.85118],[36.06778,33.82927],[35.9341,33.6596],[36.05723,33.57904],[35.94465,33.52774],[35.94816,33.47886]]]]}},{type:"Feature",properties:{iso1A2:"AM",iso1A3:"ARM",iso1N3:"051",wikidata:"Q399",nameEn:"Armenia",groups:["145","142"],callingCodes:["374"]},geometry:{type:"MultiPolygon",coordinates:[[[[45.0133,41.29747],[45.05497,41.2464],[45.02932,41.2101],[45.05201,41.19211],[45.11811,41.19967],[45.1969,41.168],[45.19942,41.13299],[45.08028,41.10917],[45.06784,41.05379],[45.12923,41.06059],[45.1313,41.09369],[45.1634,41.08082],[45.16493,41.05068],[45.1994,41.04518],[45.25897,41.0027],[45.26162,41.0228],[45.28859,41.03757],[45.35677,40.99784],[45.39725,41.02603],[45.44083,41.01663],[45.40814,40.97904],[45.60584,40.87436],[45.55914,40.78366],[45.4206,40.7424],[45.35366,40.65979],[45.45484,40.57707],[45.42994,40.53804],[45.65098,40.37696],[45.95609,40.27846],[45.97944,40.181],[45.83779,39.98925],[45.78642,40.03218],[45.59806,40.0131],[45.60895,39.97733],[45.7833,39.9475],[45.82533,39.82925],[45.96543,39.78859],[46.18493,39.60533],[46.40286,39.63651],[46.42465,39.57534],[46.52117,39.58734],[46.57098,39.56694],[46.57721,39.54414],[46.51027,39.52373],[46.53051,39.47809],[46.4013,39.45405],[46.37795,39.42039],[46.43244,39.35181],[46.50093,39.33736],[46.56476,39.24942],[46.63481,39.23013],[46.58032,39.21204],[46.54141,39.15895],[46.52584,39.18912],[46.44022,39.19636],[46.54296,39.07078],[46.51805,38.94982],[46.53497,38.86548],[46.34059,38.92076],[46.20601,38.85262],[46.14785,38.84206],[46.06973,39.0744],[46.02303,39.09978],[45.99774,39.28931],[45.79225,39.3695],[45.83,39.46487],[45.80804,39.56716],[45.70547,39.60174],[45.46992,39.49888],[45.29606,39.57654],[45.30385,39.61373],[45.23535,39.61373],[45.21784,39.58074],[45.17464,39.58614],[45.18554,39.67846],[45.06604,39.79277],[44.92869,39.72157],[44.88354,39.74432],[44.75779,39.7148],[44.61845,39.8281],[44.46635,39.97733],[44.26973,40.04866],[44.1778,40.02845],[44.1057,40.03555],[43.92307,40.01787],[43.65688,40.11199],[43.65221,40.14889],[43.71136,40.16673],[43.59928,40.34019],[43.60862,40.43267],[43.54791,40.47413],[43.63664,40.54159],[43.7425,40.66805],[43.74872,40.7365],[43.67712,40.84846],[43.67712,40.93084],[43.58683,40.98961],[43.47319,41.02251],[43.44984,41.0988],[43.4717,41.12611],[43.67712,41.13398],[43.74717,41.1117],[43.84835,41.16329],[44.16591,41.19141],[44.18148,41.24644],[44.32139,41.2079],[44.34337,41.20312],[44.34417,41.2382],[44.46791,41.18204],[44.59322,41.1933],[44.61462,41.24018],[44.72814,41.20338],[44.82084,41.21513],[44.87887,41.20195],[44.89911,41.21366],[44.84358,41.23088],[44.81749,41.23488],[44.80053,41.25949],[44.81437,41.30371],[44.93493,41.25685],[45.0133,41.29747]],[[45.21324,40.9817],[45.23095,40.97828],[45.23487,41.00226],[45.20625,41.01484],[45.18382,41.0066],[45.19312,40.98998],[45.20518,40.99348],[45.21219,40.99001],[45.21324,40.9817]],[[45.00864,41.03411],[45.03792,41.03938],[45.04517,41.06653],[45.03406,41.07931],[45.00864,41.09407],[44.97169,41.09176],[44.95383,41.07553],[44.96031,41.06345],[44.9903,41.05657],[45.00864,41.03411]]],[[[45.50279,40.58424],[45.47927,40.65023],[45.51825,40.67382],[45.56071,40.64765],[45.50279,40.58424]]]]}},{type:"Feature",properties:{iso1A2:"LC",iso1A3:"LCA",iso1N3:"662",wikidata:"Q760",nameEn:"St. Lucia",aliases:["WL"],groups:["029","003","419","019"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["1 758"]},geometry:{type:"MultiPolygon",coordinates:[[[[-60.5958,14.23076],[-60.70539,13.41452],[-61.43129,13.68336],[-61.26561,14.25664],[-60.5958,14.23076]]]]}},{type:"Feature",properties:{iso1A2:"AQ",iso1A3:"ATA",iso1N3:"010",wikidata:"Q51",nameEn:"Antarctica",level:"region",callingCodes:["672"]},geometry:{type:"MultiPolygon",coordinates:[[[[180,-60],[180,-90],[-180,-90],[-180,-60],[180,-60]]]]}},{type:"Feature",properties:{iso1A2:"LI",iso1A3:"LIE",iso1N3:"438",wikidata:"Q347",nameEn:"Liechtenstein",aliases:["FL"],groups:["155","150"],callingCodes:["423"]},geometry:{type:"MultiPolygon",coordinates:[[[[9.60717,47.06091],[9.55721,47.04762],[9.54041,47.06495],[9.47548,47.05257],[9.47139,47.06402],[9.51362,47.08505],[9.52089,47.10019],[9.51044,47.13727],[9.48774,47.17402],[9.4891,47.19346],[9.50318,47.22153],[9.52406,47.24959],[9.53116,47.27029],[9.56766,47.24281],[9.55176,47.22585],[9.56981,47.21926],[9.58264,47.20673],[9.56539,47.17124],[9.62623,47.14685],[9.63395,47.08443],[9.61216,47.07732],[9.60717,47.06091]]]]}},{type:"Feature",properties:{iso1A2:"AS",iso1A3:"ASM",iso1N3:"016",wikidata:"Q16641",nameEn:"American Samoa",country:"US",groups:["061","009"],roadSpeedUnit:"mph",callingCodes:["1 684"]},geometry:{type:"MultiPolygon",coordinates:[[[[-174.18596,-12.48057],[-174.17993,-10.13616],[-167.75195,-10.12005],[-167.73854,-14.92809],[-171.14262,-14.93704],[-171.14953,-12.4725],[-174.18596,-12.48057]]]]}},{type:"Feature",properties:{iso1A2:"LK",iso1A3:"LKA",iso1N3:"144",wikidata:"Q854",nameEn:"Sri Lanka",groups:["034","142"],driveSide:"left",callingCodes:["94"]},geometry:{type:"MultiPolygon",coordinates:[[[[76.25812,4.62435],[79.50447,8.91876],[79.42124,9.80115],[80.48418,10.20786],[85.15017,5.21497],[76.25812,4.62435]]]]}},{type:"Feature",properties:{iso1A2:"AU",iso1A3:"AUS",iso1N3:"036",wikidata:"Q408",nameEn:"Australia",groups:["053","009"],driveSide:"left",callingCodes:["61"]},geometry:{type:"MultiPolygon",coordinates:[[[[156.55918,-21.85134],[165.46901,-28.32101],[159.69067,-56.28945],[96.7091,-25.20343],[127.55165,-9.05052],[140.88922,-9.34945],[142.0601,-9.56571],[142.0953,-9.23534],[142.1462,-9.19923],[142.23304,-9.19253],[142.31447,-9.24611],[142.5723,-9.35994],[142.81927,-9.31709],[144.30183,-9.48146],[158.60851,-15.7108],[156.55918,-21.85134]]]]}},{type:"Feature",properties:{iso1A2:"LR",iso1A3:"LBR",iso1N3:"430",wikidata:"Q1014",nameEn:"Liberia",groups:["011","202","002"],callingCodes:["231"]},geometry:{type:"MultiPolygon",coordinates:[[[[-8.47114,7.55676],[-8.41935,7.51203],[-8.37458,7.25794],[-8.29249,7.1691],[-8.31736,6.82837],[-8.59456,6.50612],[-8.48652,6.43797],[-8.45666,6.49977],[-8.38453,6.35887],[-8.3298,6.36381],[-8.17557,6.28222],[-8.00642,6.31684],[-7.90692,6.27728],[-7.83478,6.20309],[-7.8497,6.08932],[-7.79747,6.07696],[-7.78254,5.99037],[-7.70294,5.90625],[-7.67309,5.94337],[-7.48155,5.80974],[-7.46165,5.84934],[-7.43677,5.84687],[-7.43926,5.74787],[-7.37209,5.61173],[-7.43428,5.42355],[-7.36463,5.32944],[-7.46165,5.26256],[-7.48901,5.14118],[-7.55369,5.08667],[-7.53876,4.94294],[-7.59349,4.8909],[-7.53259,4.35145],[-7.52774,3.7105],[-12.15048,6.15992],[-11.50429,6.92704],[-11.4027,6.97746],[-11.29417,7.21576],[-10.60422,7.7739],[-10.60492,8.04072],[-10.57523,8.04829],[-10.51554,8.1393],[-10.45023,8.15627],[-10.35227,8.15223],[-10.29839,8.21283],[-10.31635,8.28554],[-10.30084,8.30008],[-10.27575,8.48711],[-10.203,8.47991],[-10.14579,8.52665],[-10.05375,8.50697],[-10.05873,8.42578],[-9.77763,8.54633],[-9.47415,8.35195],[-9.50898,8.18455],[-9.41445,8.02448],[-9.44928,7.9284],[-9.35724,7.74111],[-9.37465,7.62032],[-9.48161,7.37122],[-9.41943,7.41809],[-9.305,7.42056],[-9.20798,7.38109],[-9.18311,7.30461],[-9.09107,7.1985],[-8.93435,7.2824],[-8.85724,7.26019],[-8.8448,7.35149],[-8.72789,7.51429],[-8.67814,7.69428],[-8.55874,7.70167],[-8.55874,7.62525],[-8.47114,7.55676]]]]}},{type:"Feature",properties:{iso1A2:"AX",iso1A3:"ALA",iso1N3:"248",wikidata:"Q5689",nameEn:"Åland Islands",country:"FI",groups:["EU","154","150"],callingCodes:["358 18","358 457"]},geometry:{type:"MultiPolygon",coordinates:[[[[19.08191,60.19152],[19.23413,60.61414],[20.96741,60.71528],[21.15143,60.54555],[21.08159,60.20167],[21.02509,60.12142],[21.35468,59.67511],[20.5104,59.15546],[19.08191,60.19152]]]]}},{type:"Feature",properties:{iso1A2:"LS",iso1A3:"LSO",iso1N3:"426",wikidata:"Q1013",nameEn:"Lesotho",groups:["018","202","002"],driveSide:"left",callingCodes:["266"]},geometry:{type:"MultiPolygon",coordinates:[[[[29.33204,-29.45598],[29.28545,-29.58456],[29.12553,-29.76266],[29.16548,-29.91706],[28.9338,-30.05072],[28.80222,-30.10579],[28.68627,-30.12885],[28.399,-30.1592],[28.2319,-30.28476],[28.12073,-30.68072],[27.74814,-30.60635],[27.69467,-30.55862],[27.67819,-30.53437],[27.6521,-30.51707],[27.62137,-30.50509],[27.56781,-30.44562],[27.56901,-30.42504],[27.45452,-30.32239],[27.38108,-30.33456],[27.36649,-30.27246],[27.37293,-30.19401],[27.40778,-30.14577],[27.32555,-30.14785],[27.29603,-30.05473],[27.22719,-30.00718],[27.09489,-29.72796],[27.01016,-29.65439],[27.33464,-29.48161],[27.4358,-29.33465],[27.47254,-29.31968],[27.45125,-29.29708],[27.48679,-29.29349],[27.54258,-29.25575],[27.5158,-29.2261],[27.55974,-29.18954],[27.75458,-28.89839],[27.8907,-28.91612],[27.88933,-28.88156],[27.9392,-28.84864],[27.98675,-28.8787],[28.02503,-28.85991],[28.1317,-28.7293],[28.2348,-28.69471],[28.30518,-28.69531],[28.40612,-28.6215],[28.65091,-28.57025],[28.68043,-28.58744],[29.40524,-29.21246],[29.44883,-29.3772],[29.33204,-29.45598]]]]}},{type:"Feature",properties:{iso1A2:"BA",iso1A3:"BIH",iso1N3:"070",wikidata:"Q225",nameEn:"Bosnia and Herzegovina",groups:["039","150"],callingCodes:["387"]},geometry:{type:"MultiPolygon",coordinates:[[[[17.84826,45.04489],[17.87148,45.04645],[17.93706,45.08016],[17.97336,45.12245],[17.97834,45.13831],[17.99479,45.14958],[18.01594,45.15163],[18.03121,45.12632],[18.1624,45.07654],[18.24387,45.13699],[18.32077,45.1021],[18.41896,45.11083],[18.47939,45.05871],[18.65723,45.07544],[18.78357,44.97741],[18.80661,44.93561],[18.76369,44.93707],[18.76347,44.90669],[18.8704,44.85097],[19.01994,44.85493],[19.18183,44.92055],[19.36722,44.88164],[19.32543,44.74058],[19.26388,44.65412],[19.16699,44.52197],[19.13369,44.52521],[19.12278,44.50132],[19.14837,44.45253],[19.14681,44.41463],[19.11785,44.40313],[19.10749,44.39421],[19.10704,44.38249],[19.10365,44.37795],[19.10298,44.36924],[19.11865,44.36712],[19.1083,44.3558],[19.11547,44.34218],[19.13556,44.338],[19.13332,44.31492],[19.16741,44.28648],[19.18328,44.28383],[19.20508,44.2917],[19.23306,44.26097],[19.26945,44.26957],[19.32464,44.27185],[19.34773,44.23244],[19.3588,44.18353],[19.40927,44.16722],[19.43905,44.13088],[19.47338,44.15034],[19.48386,44.14332],[19.47321,44.1193],[19.51167,44.08158],[19.55999,44.06894],[19.57467,44.04716],[19.61991,44.05254],[19.61836,44.01464],[19.56498,43.99922],[19.52515,43.95573],[19.38439,43.96611],[19.24363,44.01502],[19.23465,43.98764],[19.3986,43.79668],[19.5176,43.71403],[19.50455,43.58385],[19.42696,43.57987],[19.41941,43.54056],[19.36653,43.60921],[19.33426,43.58833],[19.2553,43.5938],[19.24774,43.53061],[19.22807,43.5264],[19.15685,43.53943],[19.13933,43.5282],[19.04934,43.50384],[19.01078,43.55806],[18.91379,43.50299],[18.95469,43.49367],[18.96053,43.45042],[19.01078,43.43854],[19.04071,43.397],[19.08673,43.31453],[19.08206,43.29668],[19.04233,43.30008],[19.00844,43.24988],[18.95001,43.29327],[18.95819,43.32899],[18.90911,43.36383],[18.83912,43.34795],[18.84794,43.33735],[18.85342,43.32426],[18.76538,43.29838],[18.6976,43.25243],[18.71747,43.2286],[18.66605,43.2056],[18.64735,43.14766],[18.66254,43.03928],[18.52232,43.01451],[18.49076,42.95553],[18.49661,42.89306],[18.4935,42.86433],[18.47633,42.85829],[18.45921,42.81682],[18.47324,42.74992],[18.56789,42.72074],[18.55221,42.69045],[18.54603,42.69171],[18.54841,42.68328],[18.57373,42.64429],[18.52232,42.62279],[18.55504,42.58409],[18.53751,42.57376],[18.49778,42.58409],[18.43735,42.55921],[18.36197,42.61423],[18.24318,42.6112],[17.88201,42.83668],[17.80854,42.9182],[17.7948,42.89556],[17.68151,42.92725],[17.6444,42.88641],[17.5392,42.92787],[17.70879,42.97223],[17.64268,43.08595],[17.46986,43.16559],[17.286,43.33065],[17.25579,43.40353],[17.29699,43.44542],[17.24411,43.49376],[17.15828,43.49376],[17.00585,43.58037],[16.80736,43.76011],[16.75316,43.77157],[16.70922,43.84887],[16.55472,43.95326],[16.50528,44.0244],[16.43629,44.02826],[16.43662,44.07523],[16.36864,44.08263],[16.18688,44.27012],[16.21346,44.35231],[16.12969,44.38275],[16.16814,44.40679],[16.10566,44.52586],[16.03012,44.55572],[16.00884,44.58605],[16.05828,44.61538],[15.89348,44.74964],[15.8255,44.71501],[15.72584,44.82334],[15.79472,44.8455],[15.76096,44.87045],[15.74723,44.96818],[15.78568,44.97401],[15.74585,45.0638],[15.78842,45.11519],[15.76371,45.16508],[15.83512,45.22459],[15.98412,45.23088],[16.12153,45.09616],[16.29036,44.99732],[16.35404,45.00241],[16.35863,45.03529],[16.3749,45.05206],[16.38219,45.05139],[16.38309,45.05955],[16.40023,45.1147],[16.4634,45.14522],[16.49155,45.21153],[16.52982,45.22713],[16.5501,45.2212],[16.56559,45.22307],[16.60194,45.23042],[16.64962,45.20714],[16.74845,45.20393],[16.78219,45.19002],[16.81137,45.18434],[16.83804,45.18951],[16.92405,45.27607],[16.9385,45.22742],[17.0415,45.20759],[17.18438,45.14764],[17.24325,45.146],[17.25131,45.14957],[17.26815,45.18444],[17.32092,45.16246],[17.33573,45.14521],[17.41229,45.13335],[17.4498,45.16119],[17.45615,45.12523],[17.47589,45.12656],[17.51469,45.10791],[17.59104,45.10816],[17.66571,45.13408],[17.84826,45.04489]]]]}},{type:"Feature",properties:{iso1A2:"LT",iso1A3:"LTU",iso1N3:"440",wikidata:"Q37",nameEn:"Lithuania",groups:["EU","154","150"],callingCodes:["370"]},geometry:{type:"MultiPolygon",coordinates:[[[[24.89005,56.46666],[25.05762,56.26742],[25.09325,56.1878],[25.23099,56.19147],[25.39751,56.15707],[25.53621,56.16663],[25.68588,56.14725],[25.69246,56.08892],[25.81773,56.05444],[25.85893,56.00188],[25.90047,56.0013],[26.03815,55.95884],[26.18509,55.86813],[26.39561,55.71156],[26.46661,55.70375],[26.58248,55.6754],[26.63231,55.67968],[26.63167,55.57887],[26.55094,55.5093],[26.5522,55.40277],[26.44937,55.34832],[26.5709,55.32572],[26.6714,55.33902],[26.80929,55.31642],[26.83266,55.30444],[26.835,55.28182],[26.73017,55.24226],[26.72983,55.21788],[26.68075,55.19787],[26.69243,55.16718],[26.54753,55.14181],[26.51481,55.16051],[26.46249,55.12814],[26.35121,55.1525],[26.30628,55.12536],[26.23202,55.10439],[26.26941,55.08032],[26.20397,54.99729],[26.13386,54.98924],[26.05907,54.94631],[25.99129,54.95705],[25.89462,54.93438],[25.74122,54.80108],[25.75977,54.57252],[25.68045,54.5321],[25.64813,54.48704],[25.62203,54.4656],[25.63371,54.42075],[25.5376,54.33158],[25.55425,54.31591],[25.68513,54.31727],[25.78553,54.23327],[25.78563,54.15747],[25.71084,54.16704],[25.64875,54.1259],[25.54724,54.14925],[25.51452,54.17799],[25.56823,54.25212],[25.509,54.30267],[25.35559,54.26544],[25.22705,54.26271],[25.19199,54.219],[25.0728,54.13419],[24.991,54.14241],[24.96894,54.17589],[24.77131,54.11091],[24.85311,54.02862],[24.74279,53.96663],[24.69185,53.96543],[24.69652,54.01901],[24.62275,54.00217],[24.44411,53.90076],[24.34128,53.90076],[24.19638,53.96405],[23.98837,53.92554],[23.95098,53.9613],[23.81309,53.94205],[23.80543,53.89558],[23.71726,53.93379],[23.61677,53.92691],[23.51284,53.95052],[23.48261,53.98855],[23.52702,54.04622],[23.49196,54.14764],[23.45223,54.17775],[23.42418,54.17911],[23.39525,54.21672],[23.3494,54.25155],[23.24656,54.25701],[23.15938,54.29894],[23.15526,54.31076],[23.13905,54.31567],[23.104,54.29794],[23.04323,54.31567],[23.05726,54.34565],[22.99649,54.35927],[23.00584,54.38514],[22.83756,54.40827],[22.79705,54.36264],[22.7253,54.41732],[22.70208,54.45312],[22.67788,54.532],[22.71293,54.56454],[22.68021,54.58486],[22.7522,54.63525],[22.74225,54.64339],[22.75467,54.6483],[22.73397,54.66604],[22.73631,54.72952],[22.87317,54.79492],[22.85083,54.88711],[22.76422,54.92521],[22.68723,54.9811],[22.65451,54.97037],[22.60075,55.01863],[22.58907,55.07085],[22.47688,55.04408],[22.31562,55.0655],[22.14267,55.05345],[22.11697,55.02131],[22.06087,55.02935],[22.02582,55.05078],[22.03984,55.07888],[21.99543,55.08691],[21.96505,55.07353],[21.85521,55.09493],[21.64954,55.1791],[21.55605,55.20311],[21.51095,55.18507],[21.46766,55.21115],[21.38446,55.29348],[21.35465,55.28427],[21.26425,55.24456],[20.95181,55.27994],[20.60454,55.40986],[20.68447,56.04073],[21.15016,56.07818],[21.24644,56.16917],[21.49736,56.29106],[21.57888,56.31406],[21.74558,56.33181],[22.00548,56.41508],[22.09728,56.42851],[22.3361,56.4016],[22.56441,56.39305],[22.69354,56.36284],[22.83048,56.367],[22.96988,56.41213],[23.09531,56.30511],[23.17312,56.36795],[23.31606,56.3827],[23.40486,56.37689],[23.49803,56.34307],[23.75726,56.37282],[24.02657,56.3231],[24.13139,56.24881],[24.32334,56.30226],[24.42746,56.26522],[24.58143,56.29125],[24.57353,56.31525],[24.70022,56.40483],[24.83686,56.41565],[24.89005,56.46666]]]]}},{type:"Feature",properties:{iso1A2:"BD",iso1A3:"BGD",iso1N3:"050",wikidata:"Q902",nameEn:"Bangladesh",groups:["034","142"],driveSide:"left",callingCodes:["880"]},geometry:{type:"MultiPolygon",coordinates:[[[[89.15869,26.13708],[89.35953,26.0077],[89.53515,26.00382],[89.57101,25.9682],[89.63968,26.22595],[89.70201,26.15138],[89.73581,26.15818],[89.77865,26.08387],[89.77728,26.04254],[89.86592,25.93115],[89.80585,25.82489],[89.84388,25.70042],[89.86129,25.61714],[89.81208,25.37244],[89.84086,25.31854],[89.83371,25.29548],[89.87629,25.28337],[89.90478,25.31038],[90.1155,25.22686],[90.40034,25.1534],[90.65042,25.17788],[90.87427,25.15799],[91.25517,25.20677],[91.63648,25.12846],[92.0316,25.1834],[92.33957,25.07593],[92.39147,25.01471],[92.49887,24.88796],[92.38626,24.86055],[92.25854,24.9191],[92.15796,24.54435],[92.11662,24.38997],[91.96603,24.3799],[91.89258,24.14674],[91.82596,24.22345],[91.76004,24.23848],[91.73257,24.14703],[91.65292,24.22095],[91.63782,24.1132],[91.55542,24.08687],[91.37414,24.10693],[91.35741,23.99072],[91.29587,24.0041],[91.22308,23.89616],[91.25192,23.83463],[91.15579,23.6599],[91.28293,23.37538],[91.36453,23.06612],[91.40848,23.07117],[91.4035,23.27522],[91.46615,23.2328],[91.54993,23.01051],[91.61571,22.93929],[91.7324,23.00043],[91.81634,23.08001],[91.76417,23.26619],[91.84789,23.42235],[91.95642,23.47361],[91.95093,23.73284],[92.04706,23.64229],[92.15417,23.73409],[92.26541,23.70392],[92.38214,23.28705],[92.37665,22.9435],[92.5181,22.71441],[92.60029,22.1522],[92.56616,22.13554],[92.60949,21.97638],[92.62187,21.87037],[92.59775,21.6092],[92.68152,21.28454],[92.60187,21.24615],[92.55105,21.3856],[92.43158,21.37025],[92.37939,21.47764],[92.20087,21.337],[92.17752,21.17445],[92.26071,21.05697],[92.37665,20.72172],[92.28464,20.63179],[92.31348,20.57137],[92.4302,20.5688],[92.39837,20.38919],[89.13606,21.42955],[89.13927,21.60785],[89.03553,21.77397],[89.07114,22.15335],[88.9367,22.58527],[88.94614,22.66941],[88.9151,22.75228],[88.96713,22.83346],[88.87063,22.95235],[88.88327,23.03885],[88.86377,23.08759],[88.99148,23.21134],[88.71133,23.2492],[88.79254,23.46028],[88.79351,23.50535],[88.74841,23.47361],[88.56507,23.64044],[88.58087,23.87105],[88.66189,23.87607],[88.73743,23.91751],[88.6976,24.14703],[88.74841,24.1959],[88.68801,24.31464],[88.50934,24.32474],[88.12296,24.51301],[88.08786,24.63232],[88.00683,24.66477],[88.15515,24.85806],[88.14004,24.93529],[88.21832,24.96642],[88.27325,24.88796],[88.33917,24.86803],[88.46277,25.07468],[88.44766,25.20149],[88.94067,25.18534],[89.00463,25.26583],[89.01105,25.30303],[88.85278,25.34679],[88.81296,25.51546],[88.677,25.46959],[88.4559,25.59227],[88.45103,25.66245],[88.242,25.80811],[88.13138,25.78773],[88.08804,25.91334],[88.16581,26.0238],[88.1844,26.14417],[88.34757,26.22216],[88.35153,26.29123],[88.51649,26.35923],[88.48749,26.45855],[88.36938,26.48683],[88.35153,26.45241],[88.33093,26.48929],[88.41196,26.63837],[88.4298,26.54489],[88.62144,26.46783],[88.69485,26.38353],[88.67837,26.26291],[88.78961,26.31093],[88.85004,26.23211],[89.05328,26.2469],[88.91321,26.37984],[88.92357,26.40711],[88.95612,26.4564],[89.08899,26.38845],[89.15869,26.13708]]]]}},{type:"Feature",properties:{iso1A2:"LU",iso1A3:"LUX",iso1N3:"442",wikidata:"Q32",nameEn:"Luxembourg",groups:["EU","155","150"],callingCodes:["352"]},geometry:{type:"MultiPolygon",coordinates:[[[[6.1379,50.12964],[6.12055,50.09171],[6.11274,50.05916],[6.13458,50.04141],[6.13044,50.02929],[6.14666,50.02207],[6.13794,50.01466],[6.13273,50.02019],[6.1295,50.01849],[6.13806,50.01056],[6.14948,50.00908],[6.14147,49.99563],[6.1701,49.98518],[6.16466,49.97086],[6.17872,49.9537],[6.18554,49.95622],[6.18045,49.96611],[6.19089,49.96991],[6.19856,49.95053],[6.22094,49.94955],[6.22608,49.929],[6.21882,49.92403],[6.22926,49.92096],[6.23496,49.89972],[6.26146,49.88203],[6.28874,49.87592],[6.29692,49.86685],[6.30963,49.87021],[6.32303,49.85133],[6.32098,49.83728],[6.33585,49.83785],[6.34267,49.84974],[6.36576,49.85032],[6.40022,49.82029],[6.42521,49.81591],[6.42905,49.81091],[6.44131,49.81443],[6.45425,49.81164],[6.47111,49.82263],[6.48718,49.81267],[6.50647,49.80916],[6.51215,49.80124],[6.52121,49.81338],[6.53122,49.80666],[6.52169,49.79787],[6.50534,49.78952],[6.51669,49.78336],[6.51056,49.77515],[6.51828,49.76855],[6.51646,49.75961],[6.50174,49.75292],[6.50193,49.73291],[6.51805,49.72425],[6.51397,49.72058],[6.50261,49.72718],[6.49535,49.72645],[6.49694,49.72205],[6.5042,49.71808],[6.50647,49.71353],[6.49785,49.71118],[6.48014,49.69767],[6.46048,49.69092],[6.44654,49.67799],[6.42937,49.66857],[6.42726,49.66078],[6.43768,49.66021],[6.4413,49.65722],[6.41861,49.61723],[6.39822,49.60081],[6.385,49.59946],[6.37464,49.58886],[6.38342,49.5799],[6.38024,49.57593],[6.36676,49.57813],[6.35825,49.57053],[6.38228,49.55855],[6.38072,49.55171],[6.35666,49.52931],[6.36788,49.50377],[6.36907,49.48931],[6.36778,49.46937],[6.3687,49.4593],[6.28818,49.48465],[6.27875,49.503],[6.25029,49.50609],[6.2409,49.51408],[6.19543,49.50536],[6.17386,49.50934],[6.15366,49.50226],[6.16115,49.49297],[6.14321,49.48796],[6.12814,49.49365],[6.12346,49.4735],[6.10325,49.4707],[6.09845,49.46351],[6.10072,49.45268],[6.08373,49.45594],[6.07887,49.46399],[6.05553,49.46663],[6.04176,49.44801],[6.02743,49.44845],[6.02648,49.45451],[5.97693,49.45513],[5.96876,49.49053],[5.94224,49.49608],[5.94128,49.50034],[5.86571,49.50015],[5.83389,49.52152],[5.83467,49.52717],[5.84466,49.53027],[5.83648,49.5425],[5.81664,49.53775],[5.80871,49.5425],[5.81838,49.54777],[5.84143,49.5533],[5.84692,49.55663],[5.8424,49.56082],[5.87256,49.57539],[5.86986,49.58756],[5.84971,49.58674],[5.84826,49.5969],[5.8762,49.60898],[5.87609,49.62047],[5.88393,49.62802],[5.88552,49.63507],[5.90599,49.63853],[5.90164,49.6511],[5.9069,49.66377],[5.86175,49.67862],[5.86527,49.69291],[5.88677,49.70951],[5.86503,49.72739],[5.84193,49.72161],[5.82562,49.72395],[5.83149,49.74729],[5.82245,49.75048],[5.78871,49.7962],[5.75409,49.79239],[5.74953,49.81428],[5.74364,49.82058],[5.74844,49.82435],[5.7404,49.83452],[5.74076,49.83823],[5.74975,49.83933],[5.74953,49.84709],[5.75884,49.84811],[5.74567,49.85368],[5.75861,49.85631],[5.75269,49.8711],[5.78415,49.87922],[5.73621,49.89796],[5.77314,49.93646],[5.77291,49.96056],[5.80833,49.96451],[5.81163,49.97142],[5.83467,49.97823],[5.83968,49.9892],[5.82331,49.99662],[5.81866,50.01286],[5.8551,50.02683],[5.86904,50.04614],[5.85474,50.06342],[5.8857,50.07824],[5.89488,50.11476],[5.95929,50.13295],[5.96453,50.17259],[6.02488,50.18283],[6.03093,50.16362],[6.06406,50.15344],[6.08577,50.17246],[6.12028,50.16374],[6.1137,50.13668],[6.1379,50.12964]]]]}},{type:"Feature",properties:{iso1A2:"BF",iso1A3:"BFA",iso1N3:"854",wikidata:"Q965",nameEn:"Burkina Faso",groups:["011","202","002"],callingCodes:["226"]},geometry:{type:"MultiPolygon",coordinates:[[[[0.23859,15.00135],[0.16936,14.51654],[0.38051,14.05575],[0.61924,13.68491],[0.77377,13.6866],[0.77637,13.64442],[0.99514,13.5668],[1.02813,13.46635],[1.20088,13.38951],[1.24429,13.39373],[1.28509,13.35488],[1.24516,13.33968],[1.21217,13.37853],[1.18873,13.31771],[0.99253,13.37515],[0.99167,13.10727],[2.26349,12.41915],[2.05785,12.35539],[2.39723,11.89473],[2.29983,11.68254],[2.00988,11.42227],[1.42823,11.46822],[1.03409,11.04719],[0.9813,11.08876],[0.91245,10.99597],[0.66104,10.99964],[0.4958,10.93269],[0.50521,10.98035],[0.48852,10.98561],[0.50388,11.01011],[-0.13493,11.14075],[-0.27374,11.17157],[-0.28566,11.12713],[-0.35955,11.07801],[-0.38219,11.12596],[-0.42391,11.11661],[-0.44298,11.04292],[-0.61937,10.91305],[-0.67143,10.99811],[-2.83373,11.0067],[-2.94232,10.64281],[-2.83108,10.40252],[-2.74174,9.83172],[-2.76534,9.56589],[-2.68802,9.49343],[-2.76494,9.40778],[-2.93012,9.57403],[-3.00765,9.74019],[-3.16609,9.85147],[-3.19306,9.93781],[-3.27228,9.84981],[-3.31779,9.91125],[-3.69703,9.94279],[-4.25999,9.76012],[-4.31392,9.60062],[-4.6426,9.70696],[-4.96621,9.89132],[-4.96453,9.99923],[-5.12465,10.29788],[-5.39602,10.2929],[-5.51058,10.43177],[-5.46643,10.56074],[-5.47083,10.75329],[-5.41579,10.84628],[-5.49284,11.07538],[-5.32994,11.13371],[-5.32553,11.21578],[-5.25949,11.24816],[-5.25509,11.36905],[-5.20665,11.43811],[-5.22867,11.60421],[-5.29251,11.61715],[-5.26389,11.75728],[-5.40258,11.8327],[-5.26389,11.84778],[-5.07897,11.97918],[-4.72893,12.01579],[-4.70692,12.06746],[-4.62987,12.06531],[-4.62546,12.13204],[-4.54841,12.1385],[-4.57703,12.19875],[-4.41412,12.31922],[-4.47356,12.71252],[-4.238,12.71467],[-4.21819,12.95722],[-4.34477,13.12927],[-3.96501,13.49778],[-3.90558,13.44375],[-3.96282,13.38164],[-3.7911,13.36665],[-3.54454,13.1781],[-3.4313,13.1588],[-3.43507,13.27272],[-3.23599,13.29035],[-3.28396,13.5422],[-3.26407,13.70699],[-2.88189,13.64921],[-2.90831,13.81174],[-2.84667,14.05532],[-2.66175,14.14713],[-2.47587,14.29671],[-2.10223,14.14878],[-1.9992,14.19011],[-1.97945,14.47709],[-1.68083,14.50023],[-1.32166,14.72774],[-1.05875,14.7921],[-0.72004,15.08655],[-0.24673,15.07805],[0.06588,14.96961],[0.23859,15.00135]]]]}},{type:"Feature",properties:{iso1A2:"LV",iso1A3:"LVA",iso1N3:"428",wikidata:"Q211",nameEn:"Latvia",groups:["EU","154","150"],callingCodes:["371"]},geometry:{type:"MultiPolygon",coordinates:[[[[27.34698,57.52242],[27.56832,57.53728],[27.52453,57.42826],[27.86101,57.29402],[27.66511,56.83921],[27.86101,56.88204],[28.04768,56.59004],[28.13526,56.57989],[28.10069,56.524],[28.19057,56.44637],[28.16599,56.37806],[28.23716,56.27588],[28.15217,56.16964],[27.97865,56.11849],[27.63065,55.89687],[27.61683,55.78558],[27.3541,55.8089],[27.27804,55.78299],[27.1559,55.85032],[26.97153,55.8102],[26.87448,55.7172],[26.76872,55.67658],[26.71802,55.70645],[26.64888,55.70515],[26.63231,55.67968],[26.58248,55.6754],[26.46661,55.70375],[26.39561,55.71156],[26.18509,55.86813],[26.03815,55.95884],[25.90047,56.0013],[25.85893,56.00188],[25.81773,56.05444],[25.69246,56.08892],[25.68588,56.14725],[25.53621,56.16663],[25.39751,56.15707],[25.23099,56.19147],[25.09325,56.1878],[25.05762,56.26742],[24.89005,56.46666],[24.83686,56.41565],[24.70022,56.40483],[24.57353,56.31525],[24.58143,56.29125],[24.42746,56.26522],[24.32334,56.30226],[24.13139,56.24881],[24.02657,56.3231],[23.75726,56.37282],[23.49803,56.34307],[23.40486,56.37689],[23.31606,56.3827],[23.17312,56.36795],[23.09531,56.30511],[22.96988,56.41213],[22.83048,56.367],[22.69354,56.36284],[22.56441,56.39305],[22.3361,56.4016],[22.09728,56.42851],[22.00548,56.41508],[21.74558,56.33181],[21.57888,56.31406],[21.49736,56.29106],[21.24644,56.16917],[21.15016,56.07818],[20.68447,56.04073],[19.64795,57.06466],[19.84909,57.57876],[22.80496,57.87798],[23.20055,57.56697],[24.26221,57.91787],[24.3579,57.87471],[25.19484,58.0831],[25.28237,57.98539],[25.29581,58.08288],[25.73499,57.90193],[26.05949,57.84744],[26.0324,57.79037],[26.02456,57.78342],[26.027,57.78158],[26.0266,57.77441],[26.02069,57.77169],[26.02415,57.76865],[26.03332,57.7718],[26.0543,57.76105],[26.08098,57.76619],[26.2029,57.7206],[26.1866,57.6849],[26.29253,57.59244],[26.46527,57.56885],[26.54675,57.51813],[26.90364,57.62823],[27.34698,57.52242]]]]}},{type:"Feature",properties:{iso1A2:"BH",iso1A3:"BHR",iso1N3:"048",wikidata:"Q398",nameEn:"Bahrain",groups:["145","142"],callingCodes:["973"]},geometry:{type:"MultiPolygon",coordinates:[[[[50.93865,26.30758],[50.81266,25.88946],[50.86149,25.6965],[50.7801,25.595],[50.80824,25.54641],[50.57069,25.57887],[50.302,25.87592],[50.26923,26.08243],[50.38162,26.53976],[50.71771,26.73086],[50.93865,26.30758]]]]}},{type:"Feature",properties:{iso1A2:"LY",iso1A3:"LBY",iso1N3:"434",wikidata:"Q1016",nameEn:"Libya",groups:["015","002"],callingCodes:["218"]},geometry:{type:"MultiPolygon",coordinates:[[[[22.5213,33.45682],[25.63787,31.9359],[25.14001,31.67534],[25.06041,31.57937],[24.83101,31.31921],[25.01077,30.73861],[24.71117,30.17441],[24.99968,29.24574],[24.99885,21.99535],[24.99794,19.99661],[23.99715,20.00038],[23.99539,19.49944],[15.99566,23.49639],[14.99751,23.00539],[14.22918,22.61719],[13.5631,23.16574],[11.96886,23.51735],[11.62498,24.26669],[11.41061,24.21456],[10.85323,24.5595],[10.33159,24.5465],[10.02432,24.98124],[10.03146,25.35635],[9.38834,26.19288],[9.51696,26.39148],[9.89569,26.57696],[9.78136,29.40961],[9.3876,30.16738],[9.55544,30.23971],[9.76848,30.34366],[9.88152,30.34074],[10.29516,30.90337],[10.12239,31.42098],[10.31364,31.72648],[10.48497,31.72956],[10.62788,31.96629],[10.7315,31.97235],[11.04234,32.2145],[11.53898,32.4138],[11.57828,32.48013],[11.46037,32.6307],[11.51549,33.09826],[11.55852,33.1409],[11.56255,33.16754],[11.66543,33.34642],[22.5213,33.45682]]]]}},{type:"Feature",properties:{iso1A2:"BJ",iso1A3:"BEN",iso1N3:"204",wikidata:"Q962",nameEn:"Benin",aliases:["DY"],groups:["011","202","002"],callingCodes:["229"]},geometry:{type:"MultiPolygon",coordinates:[[[[3.59375,11.70269],[3.49175,11.29765],[3.71505,11.13015],[3.84243,10.59316],[3.78292,10.40538],[3.6844,10.46351],[3.57275,10.27185],[3.66908,10.18136],[3.54429,9.87739],[3.35383,9.83641],[3.32099,9.78032],[3.34726,9.70696],[3.25093,9.61632],[3.13928,9.47167],[3.14147,9.28375],[3.08017,9.10006],[2.77907,9.06924],[2.67523,7.87825],[2.73095,7.7755],[2.73405,7.5423],[2.78668,7.5116],[2.79442,7.43486],[2.74489,7.42565],[2.76965,7.13543],[2.71702,6.95722],[2.74024,6.92802],[2.73405,6.78508],[2.78823,6.76356],[2.78204,6.70514],[2.7325,6.64057],[2.74334,6.57291],[2.70464,6.50831],[2.70566,6.38038],[2.74181,6.13349],[1.67336,6.02702],[1.62913,6.24075],[1.79826,6.28221],[1.76906,6.43189],[1.58105,6.68619],[1.61812,6.74843],[1.55877,6.99737],[1.64249,6.99562],[1.61838,9.0527],[1.5649,9.16941],[1.41746,9.3226],[1.33675,9.54765],[1.36624,9.5951],[1.35507,9.99525],[0.77666,10.37665],[0.80358,10.71459],[0.8804,10.803],[0.91245,10.99597],[0.9813,11.08876],[1.03409,11.04719],[1.42823,11.46822],[2.00988,11.42227],[2.29983,11.68254],[2.39723,11.89473],[2.45824,11.98672],[2.39657,12.10952],[2.37783,12.24804],[2.6593,12.30631],[2.83978,12.40585],[3.25352,12.01467],[3.31613,11.88495],[3.48187,11.86092],[3.59375,11.70269]]]]}},{type:"Feature",properties:{iso1A2:"MA",iso1A3:"MAR",iso1N3:"504",wikidata:"Q1028",nameEn:"Morocco",groups:["015","002"],callingCodes:["212"]},geometry:{type:"MultiPolygon",coordinates:[[[[-2.27707,35.35051],[-2.21248,35.08532],[-2.21445,35.04378],[-2.04734,34.93218],[-1.97833,34.93218],[-1.97469,34.886],[-1.73707,34.74226],[-1.84569,34.61907],[-1.69788,34.48056],[-1.78042,34.39018],[-1.64666,34.10405],[-1.73494,33.71721],[-1.59508,33.59929],[-1.67067,33.27084],[-1.46249,33.0499],[-1.54244,32.95499],[-1.37794,32.73628],[-0.9912,32.52467],[-1.24998,32.32993],[-1.24453,32.1917],[-1.15735,32.12096],[-1.22829,32.07832],[-2.46166,32.16603],[-2.93873,32.06557],[-2.82784,31.79459],[-3.66314,31.6339],[-3.66386,31.39202],[-3.77647,31.31912],[-3.77103,31.14984],[-3.54944,31.0503],[-3.65418,30.85566],[-3.64735,30.67539],[-4.31774,30.53229],[-4.6058,30.28343],[-5.21671,29.95253],[-5.58831,29.48103],[-5.72121,29.52322],[-5.75616,29.61407],[-6.69965,29.51623],[-6.78351,29.44634],[-6.95824,29.50924],[-7.61585,29.36252],[-8.6715,28.71194],[-8.66879,27.6666],[-8.77527,27.66663],[-8.71787,26.9898],[-9.08698,26.98639],[-9.56957,26.90042],[-9.81998,26.71379],[-10.68417,26.90984],[-11.35695,26.8505],[-11.23622,26.72023],[-11.38635,26.611],[-11.62052,26.05229],[-12.06001,26.04442],[-12.12281,25.13682],[-12.92147,24.39502],[-13.00628,24.01923],[-13.75627,23.77231],[-14.10361,22.75501],[-14.1291,22.41636],[-14.48112,22.00886],[-14.47329,21.63839],[-14.78487,21.36587],[-16.44269,21.39745],[-16.9978,21.36239],[-17.02707,21.34022],[-17.21511,21.34226],[-17.27295,21.93519],[-14.43883,27.02969],[-7.27694,35.93599],[-5.64962,35.93752],[-5.10878,36.05227],[-2.85819,35.63219],[-2.27707,35.35051]],[[-2.92224,35.3401],[-2.96038,35.31609],[-2.96648,35.30475],[-2.96978,35.29459],[-2.97035,35.28852],[-2.96507,35.28801],[-2.96826,35.28296],[-2.96516,35.27967],[-2.95431,35.2728],[-2.95065,35.26576],[-2.93893,35.26737],[-2.92674,35.27313],[-2.92181,35.28599],[-2.92224,35.3401]],[[-3.90602,35.21494],[-3.88926,35.20841],[-3.88617,35.21406],[-3.90288,35.22024],[-3.90602,35.21494]],[[-4.30191,35.17419],[-4.30112,35.17058],[-4.29436,35.17149],[-4.30191,35.17419]],[[-2.41312,35.17111],[-2.41265,35.1877],[-2.44896,35.18777],[-2.44887,35.17075],[-2.41312,35.17111]],[[-5.38491,35.92591],[-5.37338,35.88417],[-5.35844,35.87375],[-5.34379,35.8711],[-5.27056,35.88794],[-5.27635,35.91222],[-5.38491,35.92591]]]]}},{type:"Feature",properties:{iso1A2:"BM",iso1A3:"BMU",iso1N3:"060",wikidata:"Q23635",nameEn:"Bermuda",country:"GB",groups:["021","003","019"],driveSide:"left",callingCodes:["1 441"]},geometry:{type:"MultiPolygon",coordinates:[[[[-63.20987,32.6953],[-65.63955,31.43417],[-65.31453,32.68437],[-63.20987,32.6953]]]]}},{type:"Feature",properties:{iso1A2:"MC",iso1A3:"MCO",iso1N3:"492",wikidata:"Q235",nameEn:"Monaco",groups:["155","150"],callingCodes:["377"]},geometry:{type:"MultiPolygon",coordinates:[[[[7.47823,43.73341],[7.42422,43.72209],[7.40903,43.7296],[7.41113,43.73156],[7.41291,43.73168],[7.41298,43.73311],[7.41233,43.73439],[7.42062,43.73977],[7.42299,43.74176],[7.42443,43.74087],[7.42809,43.74396],[7.43013,43.74895],[7.43624,43.75014],[7.43708,43.75197],[7.4389,43.75151],[7.4379,43.74963],[7.47823,43.73341]]]]}},{type:"Feature",properties:{iso1A2:"BO",iso1A3:"BOL",iso1N3:"068",wikidata:"Q750",nameEn:"Bolivia",groups:["005","419","019"],callingCodes:["591"]},geometry:{type:"MultiPolygon",coordinates:[[[[-63.90248,-12.52544],[-63.76259,-12.42952],[-61.81151,-13.49564],[-61.05527,-13.50054],[-60.48053,-13.77981],[-60.46037,-14.22496],[-60.27887,-14.63021],[-60.23968,-15.09515],[-60.58224,-15.09887],[-60.23797,-15.50267],[-60.16069,-16.26479],[-58.41506,-16.32636],[-58.32431,-16.25861],[-58.30918,-16.3699],[-58.5058,-16.80958],[-58.32935,-17.28195],[-57.99661,-17.5273],[-57.90082,-17.44555],[-57.73949,-17.56095],[-57.69877,-17.8431],[-57.48237,-18.24219],[-57.56807,-18.25655],[-57.76764,-18.90087],[-57.71995,-18.89573],[-57.71995,-18.97546],[-57.69134,-19.00544],[-57.71113,-19.03161],[-57.78463,-19.03259],[-58.14215,-19.76276],[-57.8496,-19.98346],[-58.16225,-20.16193],[-58.23216,-19.80058],[-59.06965,-19.29148],[-60.00638,-19.2981],[-61.73723,-19.63958],[-61.93912,-20.10053],[-62.26883,-20.55311],[-62.2757,-21.06657],[-62.64455,-22.25091],[-62.8078,-22.12534],[-62.81124,-21.9987],[-63.66482,-21.99918],[-63.68113,-22.0544],[-63.70963,-21.99934],[-63.93287,-21.99934],[-64.22918,-22.55807],[-64.31489,-22.88824],[-64.35108,-22.73282],[-64.4176,-22.67692],[-64.58888,-22.25035],[-64.67174,-22.18957],[-64.90014,-22.12136],[-64.99524,-22.08255],[-65.47435,-22.08908],[-65.57743,-22.07675],[-65.58694,-22.09794],[-65.61166,-22.09504],[-65.7467,-22.10105],[-65.9261,-21.93335],[-66.04832,-21.9187],[-66.03836,-21.84829],[-66.24077,-21.77837],[-66.29714,-22.08741],[-66.7298,-22.23644],[-67.18382,-22.81525],[-67.54284,-22.89771],[-67.85114,-22.87076],[-68.18816,-21.28614],[-68.40403,-20.94562],[-68.53957,-20.91542],[-68.55383,-20.7355],[-68.44023,-20.62701],[-68.7276,-20.46178],[-68.74273,-20.08817],[-68.57132,-20.03134],[-68.54611,-19.84651],[-68.66761,-19.72118],[-68.41218,-19.40499],[-68.61989,-19.27584],[-68.80602,-19.08355],[-68.87082,-19.06003],[-68.94987,-18.93302],[-69.07432,-18.28259],[-69.14807,-18.16893],[-69.07496,-18.03715],[-69.28671,-17.94844],[-69.34126,-17.72753],[-69.46623,-17.60518],[-69.46897,-17.4988],[-69.46863,-17.37466],[-69.62883,-17.28142],[-69.16896,-16.72233],[-69.00853,-16.66769],[-69.04027,-16.57214],[-68.98358,-16.42165],[-68.79464,-16.33272],[-68.96238,-16.194],[-69.09986,-16.22693],[-69.20291,-16.16668],[-69.40336,-15.61358],[-69.14856,-15.23478],[-69.36254,-14.94634],[-68.88135,-14.18639],[-69.05265,-13.68546],[-68.8864,-13.40792],[-68.85615,-12.87769],[-68.65044,-12.50689],[-68.98115,-11.8979],[-69.57156,-10.94555],[-69.47839,-10.95254],[-69.42792,-10.93451],[-68.74802,-11.00891],[-68.75265,-11.02383],[-68.75179,-11.03688],[-68.7651,-11.0496],[-68.71533,-11.14749],[-67.17784,-10.34016],[-65.68343,-9.75323],[-65.56244,-9.84266],[-65.40615,-9.63894],[-65.29019,-9.86253],[-65.37923,-10.35141],[-65.35402,-10.78685],[-65.28141,-10.86289],[-65.30027,-11.48749],[-64.99778,-11.98604],[-64.30708,-12.46398],[-64.22539,-12.45267],[-63.90248,-12.52544]]]]}},{type:"Feature",properties:{iso1A2:"MD",iso1A3:"MDA",iso1N3:"498",wikidata:"Q217",nameEn:"Moldova",groups:["151","150"],callingCodes:["373"]},geometry:{type:"MultiPolygon",coordinates:[[[[27.74422,48.45926],[27.79225,48.44244],[27.81902,48.41874],[27.87533,48.4037],[27.88391,48.36699],[27.95883,48.32368],[28.04527,48.32661],[28.09873,48.3124],[28.07504,48.23494],[28.17666,48.25963],[28.19314,48.20749],[28.2856,48.23202],[28.32508,48.23384],[28.35519,48.24957],[28.36996,48.20543],[28.34912,48.1787],[28.30586,48.1597],[28.30609,48.14018],[28.34009,48.13147],[28.38712,48.17567],[28.43701,48.15832],[28.42454,48.12047],[28.48428,48.0737],[28.53921,48.17453],[28.69896,48.13106],[28.85232,48.12506],[28.8414,48.03392],[28.9306,47.96255],[29.1723,47.99013],[29.19839,47.89261],[29.27804,47.88893],[29.20663,47.80367],[29.27255,47.79953],[29.22242,47.73607],[29.22414,47.60012],[29.11743,47.55001],[29.18603,47.43387],[29.3261,47.44664],[29.39889,47.30179],[29.47854,47.30366],[29.48678,47.36043],[29.5733,47.36508],[29.59665,47.25521],[29.54996,47.24962],[29.57696,47.13581],[29.49732,47.12878],[29.53044,47.07851],[29.61038,47.09932],[29.62137,47.05069],[29.57056,46.94766],[29.72986,46.92234],[29.75458,46.8604],[29.87405,46.88199],[29.98814,46.82358],[29.94522,46.80055],[29.9743,46.75325],[29.94409,46.56002],[29.88916,46.54302],[30.02511,46.45132],[30.16794,46.40967],[30.09103,46.38694],[29.94114,46.40114],[29.88329,46.35851],[29.74496,46.45605],[29.66359,46.4215],[29.6763,46.36041],[29.5939,46.35472],[29.49914,46.45889],[29.35357,46.49505],[29.24886,46.37912],[29.23547,46.55435],[29.02409,46.49582],[29.01241,46.46177],[28.9306,46.45699],[29.004,46.31495],[28.98478,46.31803],[28.94953,46.25852],[29.06656,46.19716],[28.94643,46.09176],[29.00613,46.04962],[28.98004,46.00385],[28.74383,45.96664],[28.78503,45.83475],[28.69852,45.81753],[28.70401,45.78019],[28.52823,45.73803],[28.47879,45.66994],[28.51587,45.6613],[28.54196,45.58062],[28.49252,45.56716],[28.51449,45.49982],[28.43072,45.48538],[28.41836,45.51715],[28.30201,45.54744],[28.21139,45.46895],[28.18741,45.47358],[28.08927,45.6051],[28.16568,45.6421],[28.13111,45.92819],[28.08612,46.01105],[28.13684,46.18099],[28.10937,46.22852],[28.19864,46.31869],[28.18902,46.35283],[28.25769,46.43334],[28.22281,46.50481],[28.24808,46.64305],[28.12173,46.82283],[28.09095,46.97621],[27.81892,47.1381],[27.73172,47.29248],[27.68706,47.28962],[27.60263,47.32507],[27.55731,47.46637],[27.47942,47.48113],[27.3979,47.59473],[27.32202,47.64009],[27.25519,47.71366],[27.29069,47.73722],[27.1618,47.92391],[27.15622,47.98538],[27.02985,48.09083],[27.04118,48.12522],[26.96119,48.13003],[26.98042,48.15752],[26.94265,48.1969],[26.87708,48.19919],[26.81161,48.25049],[26.62823,48.25804],[26.6839,48.35828],[26.79239,48.29071],[26.82809,48.31629],[26.71274,48.40388],[26.85556,48.41095],[26.93384,48.36558],[27.03821,48.37653],[27.0231,48.42485],[27.08078,48.43214],[27.13434,48.37288],[27.27855,48.37534],[27.32159,48.4434],[27.37604,48.44398],[27.37741,48.41026],[27.44333,48.41209],[27.46942,48.454],[27.5889,48.49224],[27.59027,48.46311],[27.6658,48.44034],[27.74422,48.45926]]]]}},{type:"Feature",properties:{iso1A2:"BR",iso1A3:"BRA",iso1N3:"076",wikidata:"Q155",nameEn:"Brazil",groups:["005","419","019"],callingCodes:["55"]},geometry:{type:"MultiPolygon",coordinates:[[[[-59.69361,4.34069],[-59.73353,4.20399],[-59.51963,3.91951],[-59.86899,3.57089],[-59.79769,3.37162],[-59.99733,2.92312],[-59.91177,2.36759],[-59.7264,2.27497],[-59.74066,1.87596],[-59.25583,1.40559],[-58.92072,1.31293],[-58.84229,1.17749],[-58.53571,1.29154],[-58.4858,1.48399],[-58.33887,1.58014],[-58.01873,1.51966],[-57.97336,1.64566],[-57.77281,1.73344],[-57.55743,1.69605],[-57.35073,1.98327],[-57.23981,1.95808],[-57.09109,2.01854],[-57.07092,1.95304],[-56.7659,1.89509],[-56.47045,1.95135],[-55.99278,1.83137],[-55.89863,1.89861],[-55.92159,2.05236],[-56.13054,2.27723],[-55.96292,2.53188],[-55.71493,2.40342],[-55.01919,2.564],[-54.6084,2.32856],[-54.16286,2.10779],[-53.78743,2.34412],[-52.96539,2.1881],[-52.6906,2.37298],[-52.31787,3.17896],[-51.85573,3.83427],[-51.82312,3.85825],[-51.79599,3.89336],[-51.61983,4.14596],[-51.63798,4.51394],[-51.35485,4.8383],[-28.99601,1.86593],[-28.34015,-20.99094],[-52.83257,-34.01481],[-53.37138,-33.74313],[-53.39593,-33.75169],[-53.44031,-33.69344],[-53.52794,-33.68908],[-53.53459,-33.16843],[-53.1111,-32.71147],[-53.37671,-32.57005],[-53.39572,-32.58596],[-53.76024,-32.0751],[-54.17384,-31.86168],[-55.50821,-30.91349],[-55.50841,-30.9027],[-55.51862,-30.89828],[-55.52712,-30.89997],[-55.53276,-30.90218],[-55.53431,-30.89714],[-55.54572,-30.89051],[-55.55218,-30.88193],[-55.55373,-30.8732],[-55.5634,-30.8686],[-55.58866,-30.84117],[-55.87388,-31.05053],[-56.4619,-30.38457],[-56.4795,-30.3899],[-56.49267,-30.39471],[-56.90236,-30.02578],[-57.22502,-30.26121],[-57.65132,-30.19229],[-57.09386,-29.74211],[-56.81251,-29.48154],[-56.62789,-29.18073],[-56.57295,-29.11357],[-56.54171,-29.11447],[-56.05265,-28.62651],[-56.00458,-28.60421],[-56.01729,-28.51223],[-55.65418,-28.18304],[-55.6262,-28.17124],[-55.33303,-27.94661],[-55.16872,-27.86224],[-55.1349,-27.89759],[-54.90805,-27.73149],[-54.90159,-27.63132],[-54.67657,-27.57214],[-54.50416,-27.48232],[-54.41888,-27.40882],[-54.19268,-27.30751],[-54.19062,-27.27639],[-54.15978,-27.2889],[-53.80144,-27.09844],[-53.73372,-26.6131],[-53.68269,-26.33359],[-53.64505,-26.28089],[-53.64186,-26.25976],[-53.64632,-26.24798],[-53.63881,-26.25075],[-53.63739,-26.2496],[-53.65237,-26.23289],[-53.65018,-26.19501],[-53.73968,-26.10012],[-53.73391,-26.07006],[-53.7264,-26.0664],[-53.73086,-26.05842],[-53.73511,-26.04211],[-53.83691,-25.94849],[-53.90831,-25.55513],[-54.52926,-25.62846],[-54.5502,-25.58915],[-54.59398,-25.59224],[-54.59509,-25.53696],[-54.60196,-25.48397],[-54.62033,-25.46026],[-54.4423,-25.13381],[-54.28207,-24.07305],[-54.32807,-24.01865],[-54.6238,-23.83078],[-55.02691,-23.97317],[-55.0518,-23.98666],[-55.12292,-23.99669],[-55.41784,-23.9657],[-55.44117,-23.9185],[-55.43585,-23.87157],[-55.5555,-23.28237],[-55.52288,-23.2595],[-55.5446,-23.22811],[-55.63849,-22.95122],[-55.62493,-22.62765],[-55.68742,-22.58407],[-55.6986,-22.56268],[-55.72366,-22.5519],[-55.741,-22.52018],[-55.74941,-22.46436],[-55.8331,-22.29008],[-56.23206,-22.25347],[-56.45893,-22.08072],[-56.5212,-22.11556],[-56.6508,-22.28387],[-57.98625,-22.09157],[-57.94642,-21.73799],[-57.88239,-21.6868],[-57.93492,-21.65505],[-57.84536,-20.93155],[-58.16225,-20.16193],[-57.8496,-19.98346],[-58.14215,-19.76276],[-57.78463,-19.03259],[-57.71113,-19.03161],[-57.69134,-19.00544],[-57.71995,-18.97546],[-57.71995,-18.89573],[-57.76764,-18.90087],[-57.56807,-18.25655],[-57.48237,-18.24219],[-57.69877,-17.8431],[-57.73949,-17.56095],[-57.90082,-17.44555],[-57.99661,-17.5273],[-58.32935,-17.28195],[-58.5058,-16.80958],[-58.30918,-16.3699],[-58.32431,-16.25861],[-58.41506,-16.32636],[-60.16069,-16.26479],[-60.23797,-15.50267],[-60.58224,-15.09887],[-60.23968,-15.09515],[-60.27887,-14.63021],[-60.46037,-14.22496],[-60.48053,-13.77981],[-61.05527,-13.50054],[-61.81151,-13.49564],[-63.76259,-12.42952],[-63.90248,-12.52544],[-64.22539,-12.45267],[-64.30708,-12.46398],[-64.99778,-11.98604],[-65.30027,-11.48749],[-65.28141,-10.86289],[-65.35402,-10.78685],[-65.37923,-10.35141],[-65.29019,-9.86253],[-65.40615,-9.63894],[-65.56244,-9.84266],[-65.68343,-9.75323],[-67.17784,-10.34016],[-68.71533,-11.14749],[-68.7651,-11.0496],[-68.75179,-11.03688],[-68.75265,-11.02383],[-68.74802,-11.00891],[-69.42792,-10.93451],[-69.47839,-10.95254],[-69.57156,-10.94555],[-69.57835,-10.94051],[-69.90896,-10.92744],[-70.38791,-11.07096],[-70.51395,-10.92249],[-70.64134,-11.0108],[-70.62487,-9.80666],[-70.55429,-9.76692],[-70.58453,-9.58303],[-70.53373,-9.42628],[-71.23394,-9.9668],[-72.14742,-9.98049],[-72.31883,-9.5184],[-72.72216,-9.41397],[-73.21498,-9.40904],[-72.92886,-9.04074],[-73.76576,-7.89884],[-73.65485,-7.77897],[-73.96938,-7.58465],[-73.77011,-7.28944],[-73.73986,-6.87919],[-73.12983,-6.43852],[-73.24579,-6.05764],[-72.83973,-5.14765],[-72.64391,-5.0391],[-71.87003,-4.51661],[-70.96814,-4.36915],[-70.77601,-4.15717],[-70.33236,-4.15214],[-70.19582,-4.3607],[-70.11305,-4.27281],[-70.00888,-4.37833],[-69.94708,-4.2431],[-69.43395,-1.42219],[-69.4215,-1.01853],[-69.59796,-0.75136],[-69.603,-0.51947],[-70.03658,-0.19681],[-70.04162,0.55437],[-69.47696,0.71065],[-69.20976,0.57958],[-69.14422,0.84172],[-69.26017,1.06856],[-69.82987,1.07864],[-69.83491,1.69353],[-69.53746,1.76408],[-69.38621,1.70865],[-68.18128,1.72881],[-68.26699,1.83463],[-68.18632,2.00091],[-67.9292,1.82455],[-67.40488,2.22258],[-67.299,1.87494],[-67.15784,1.80439],[-67.08222,1.17441],[-66.85795,1.22998],[-66.28507,0.74585],[-65.6727,1.01353],[-65.50158,0.92086],[-65.57288,0.62856],[-65.11657,1.12046],[-64.38932,1.5125],[-64.34654,1.35569],[-64.08274,1.64792],[-64.06135,1.94722],[-63.39827,2.16098],[-63.39114,2.4317],[-64.0257,2.48156],[-64.02908,2.79797],[-64.48379,3.7879],[-64.84028,4.24665],[-64.72977,4.28931],[-64.57648,4.12576],[-64.14512,4.12932],[-63.99183,3.90172],[-63.86082,3.94796],[-63.70218,3.91417],[-63.67099,4.01731],[-63.50611,3.83592],[-63.42233,3.89995],[-63.4464,3.9693],[-63.21111,3.96219],[-62.98296,3.59935],[-62.7655,3.73099],[-62.74411,4.03331],[-62.57656,4.04754],[-62.44822,4.18621],[-62.13094,4.08309],[-61.54629,4.2822],[-61.48569,4.43149],[-61.29675,4.44216],[-61.31457,4.54167],[-61.15703,4.49839],[-60.98303,4.54167],[-60.86539,4.70512],[-60.5802,4.94312],[-60.73204,5.20931],[-60.32352,5.21299],[-60.20944,5.28754],[-59.98129,5.07097],[-60.04189,4.69801],[-60.15953,4.53456],[-59.78878,4.45637],[-59.69361,4.34069]]]]}},{type:"Feature",properties:{iso1A2:"ME",iso1A3:"MNE",iso1N3:"499",wikidata:"Q236",nameEn:"Montenegro",groups:["039","150"],callingCodes:["382"]},geometry:{type:"MultiPolygon",coordinates:[[[[19.22807,43.5264],[19.22229,43.47926],[19.44315,43.38846],[19.48171,43.32644],[19.52962,43.31623],[19.54598,43.25158],[19.62661,43.2286],[19.64063,43.19027],[19.76918,43.16044],[19.79255,43.11951],[19.92576,43.08539],[19.96549,43.11098],[19.98887,43.0538],[20.04729,43.02732],[20.05431,42.99571],[20.12325,42.96237],[20.14896,42.99058],[20.16415,42.97177],[20.34528,42.90676],[20.35692,42.8335],[20.27869,42.81945],[20.2539,42.76245],[20.04898,42.77701],[20.02088,42.74789],[20.02915,42.71147],[20.0969,42.65559],[20.07761,42.55582],[20.01834,42.54622],[20.00842,42.5109],[19.9324,42.51699],[19.82333,42.46581],[19.76549,42.50237],[19.74731,42.57422],[19.77375,42.58517],[19.73244,42.66299],[19.65972,42.62774],[19.4836,42.40831],[19.42352,42.36546],[19.42,42.33019],[19.28623,42.17745],[19.40687,42.10024],[19.37548,42.06835],[19.36867,42.02564],[19.37691,41.96977],[19.34601,41.95675],[19.33812,41.90669],[19.37451,41.8842],[19.37597,41.84849],[19.26406,41.74971],[18.45131,42.21682],[18.54128,42.39171],[18.52152,42.42302],[18.43588,42.48556],[18.44307,42.51077],[18.43735,42.55921],[18.49778,42.58409],[18.53751,42.57376],[18.55504,42.58409],[18.52232,42.62279],[18.57373,42.64429],[18.54841,42.68328],[18.54603,42.69171],[18.55221,42.69045],[18.56789,42.72074],[18.47324,42.74992],[18.45921,42.81682],[18.47633,42.85829],[18.4935,42.86433],[18.49661,42.89306],[18.49076,42.95553],[18.52232,43.01451],[18.66254,43.03928],[18.64735,43.14766],[18.66605,43.2056],[18.71747,43.2286],[18.6976,43.25243],[18.76538,43.29838],[18.85342,43.32426],[18.84794,43.33735],[18.83912,43.34795],[18.90911,43.36383],[18.95819,43.32899],[18.95001,43.29327],[19.00844,43.24988],[19.04233,43.30008],[19.08206,43.29668],[19.08673,43.31453],[19.04071,43.397],[19.01078,43.43854],[18.96053,43.45042],[18.95469,43.49367],[18.91379,43.50299],[19.01078,43.55806],[19.04934,43.50384],[19.13933,43.5282],[19.15685,43.53943],[19.22807,43.5264]]]]}},{type:"Feature",properties:{iso1A2:"BT",iso1A3:"BTN",iso1N3:"064",wikidata:"Q917",nameEn:"Bhutan",groups:["034","142"],driveSide:"left",callingCodes:["975"]},geometry:{type:"MultiPolygon",coordinates:[[[[91.6469,27.76358],[91.55819,27.6144],[91.65007,27.48287],[92.01132,27.47352],[92.12019,27.27829],[92.04702,27.26861],[92.03457,27.07334],[92.11863,26.893],[92.05523,26.8692],[91.83181,26.87318],[91.50067,26.79223],[90.67715,26.77215],[90.48504,26.8594],[90.39271,26.90704],[90.30402,26.85098],[90.04535,26.72422],[89.86124,26.73307],[89.63369,26.74402],[89.42349,26.83727],[89.3901,26.84225],[89.38319,26.85963],[89.37913,26.86224],[89.1926,26.81329],[89.12825,26.81661],[89.09554,26.89089],[88.95807,26.92668],[88.92301,26.99286],[88.8714,26.97488],[88.86984,27.10937],[88.74219,27.144],[88.91901,27.32483],[88.93678,27.33777],[88.96947,27.30319],[89.00216,27.32532],[88.95355,27.4106],[88.97213,27.51671],[89.0582,27.60985],[89.12825,27.62502],[89.59525,28.16433],[89.79762,28.23979],[90.13387,28.19178],[90.58842,28.02838],[90.69894,28.07784],[91.20019,27.98715],[91.25779,28.07509],[91.46327,28.0064],[91.48973,27.93903],[91.5629,27.84823],[91.6469,27.76358]]]]}},{type:"Feature",properties:{iso1A2:"MF",iso1A3:"MAF",iso1N3:"663",wikidata:"Q126125",nameEn:"Saint-Martin",country:"FR",groups:["EU","029","003","419","019"],callingCodes:["590"]},geometry:{type:"MultiPolygon",coordinates:[[[[-62.93924,18.02904],[-63.02323,18.05757],[-63.04039,18.05619],[-63.0579,18.06614],[-63.07759,18.04943],[-63.09686,18.04608],[-63.11096,18.05368],[-63.13584,18.0541],[-63.33064,17.9615],[-63.35989,18.06012],[-62.86666,18.19278],[-62.75637,18.13489],[-62.93924,18.02904]]]]}},{type:"Feature",properties:{iso1A2:"BW",iso1A3:"BWA",iso1N3:"072",wikidata:"Q963",nameEn:"Botswana",groups:["018","202","002"],driveSide:"left",callingCodes:["267"]},geometry:{type:"MultiPolygon",coordinates:[[[[25.26433,-17.79571],[25.23909,-17.90832],[25.31799,-18.07091],[25.39972,-18.12691],[25.53465,-18.39041],[25.68859,-18.56165],[25.79217,-18.6355],[25.82353,-18.82808],[25.94326,-18.90362],[25.99837,-19.02943],[25.96226,-19.08152],[26.17227,-19.53709],[26.72246,-19.92707],[27.21278,-20.08244],[27.29831,-20.28935],[27.28865,-20.49873],[27.69361,-20.48531],[27.72972,-20.51735],[27.69171,-21.08409],[27.91407,-21.31621],[28.01669,-21.57624],[28.29416,-21.59037],[28.49942,-21.66634],[28.58114,-21.63455],[29.07763,-21.81877],[29.04023,-21.85864],[29.02191,-21.90647],[29.02191,-21.95665],[29.04108,-22.00563],[29.08495,-22.04867],[29.14501,-22.07275],[29.1974,-22.07472],[29.24648,-22.05967],[29.3533,-22.18363],[29.37703,-22.19581],[29.21955,-22.17771],[29.18974,-22.18599],[29.15268,-22.21399],[29.10881,-22.21202],[29.0151,-22.22907],[28.91889,-22.44299],[28.63287,-22.55887],[28.34874,-22.5694],[28.04562,-22.8394],[28.04752,-22.90243],[27.93729,-22.96194],[27.93539,-23.04941],[27.74154,-23.2137],[27.6066,-23.21894],[27.52393,-23.37952],[27.33768,-23.40917],[26.99749,-23.65486],[26.84165,-24.24885],[26.51667,-24.47219],[26.46346,-24.60358],[26.39409,-24.63468],[25.8515,-24.75727],[25.84295,-24.78661],[25.88571,-24.87802],[25.72702,-25.25503],[25.69661,-25.29284],[25.6643,-25.4491],[25.58543,-25.6343],[25.33076,-25.76616],[25.12266,-25.75931],[25.01718,-25.72507],[24.8946,-25.80723],[24.67319,-25.81749],[24.44703,-25.73021],[24.36531,-25.773],[24.18287,-25.62916],[23.9244,-25.64286],[23.47588,-25.29971],[23.03497,-25.29971],[22.86012,-25.50572],[22.70808,-25.99186],[22.56365,-26.19668],[22.41921,-26.23078],[22.21206,-26.3773],[22.06192,-26.61882],[21.90703,-26.66808],[21.83291,-26.65959],[21.77114,-26.69015],[21.7854,-26.79199],[21.69322,-26.86152],[21.37869,-26.82083],[21.13353,-26.86661],[20.87031,-26.80047],[20.68596,-26.9039],[20.63275,-26.78181],[20.61754,-26.4692],[20.86081,-26.14892],[20.64795,-25.47827],[20.29826,-24.94869],[20.03678,-24.81004],[20.02809,-24.78725],[19.99817,-24.76768],[19.99912,-21.99991],[20.99751,-22.00026],[20.99904,-18.31743],[21.45556,-18.31795],[23.0996,-18.00075],[23.29618,-17.99855],[23.61088,-18.4881],[24.19416,-18.01919],[24.40577,-17.95726],[24.57485,-18.07151],[24.6303,-17.9863],[24.71887,-17.9218],[24.73364,-17.89338],[24.95586,-17.79674],[25.05895,-17.84452],[25.16882,-17.78253],[25.26433,-17.79571]]]]}},{type:"Feature",properties:{iso1A2:"MG",iso1A3:"MDG",iso1N3:"450",wikidata:"Q1019",nameEn:"Madagascar",aliases:["RM"],groups:["014","202","002"],callingCodes:["261"]},geometry:{type:"MultiPolygon",coordinates:[[[[51.94557,-12.74579],[45.90777,-29.77366],[40.40841,-23.17181],[43.72277,-16.09877],[49.10033,-10.96054],[51.94557,-12.74579]]]]}},{type:"Feature",properties:{iso1A2:"BZ",iso1A3:"BLZ",iso1N3:"084",wikidata:"Q242",nameEn:"Belize",groups:["013","003","419","019"],roadSpeedUnit:"mph",callingCodes:["501"]},geometry:{type:"MultiPolygon",coordinates:[[[[-88.3268,18.49048],[-88.29909,18.47591],[-88.26593,18.47617],[-88.03238,18.41778],[-88.03165,18.16657],[-87.90671,18.15213],[-87.87604,18.18313],[-87.86657,18.19971],[-87.85693,18.18266],[-87.84815,18.18511],[-86.92368,17.61462],[-88.40779,16.09624],[-88.95358,15.88698],[-89.02415,15.9063],[-89.17418,15.90898],[-89.22683,15.88619],[-89.15025,17.04813],[-89.14985,17.81563],[-89.15105,17.95104],[-89.03839,18.0067],[-88.8716,17.89535],[-88.71505,18.0707],[-88.48242,18.49164],[-88.3268,18.49048]]]]}},{type:"Feature",properties:{iso1A2:"MH",iso1A3:"MHL",iso1N3:"584",wikidata:"Q709",nameEn:"Marshall Islands",groups:["057","009"],roadSpeedUnit:"mph",callingCodes:["692"]},geometry:{type:"MultiPolygon",coordinates:[[[[169,3.9],[159.04653,10.59067],[169.29099,15.77133],[173.53711,5.70687],[169,3.9]]]]}},{type:"Feature",properties:{iso1A2:"CC",iso1A3:"CCK",iso1N3:"166",wikidata:"Q36004",nameEn:"Cocos (Keeling) Islands",country:"AU",groups:["053","009"],driveSide:"left",callingCodes:["61"]},geometry:{type:"MultiPolygon",coordinates:[[[[96.61846,-10.82438],[97.93979,-12.33309],[96.02343,-12.68334],[96.61846,-10.82438]]]]}},{type:"Feature",properties:{iso1A2:"MK",iso1A3:"MKD",iso1N3:"807",wikidata:"Q221",nameEn:"North Macedonia",groups:["039","150"],callingCodes:["389"]},geometry:{type:"MultiPolygon",coordinates:[[[[22.34773,42.31725],[22.38136,42.30339],[22.47251,42.20393],[22.50289,42.19527],[22.51224,42.15457],[22.67701,42.06614],[22.86749,42.02275],[22.90254,41.87587],[22.96682,41.77137],[23.01239,41.76527],[23.03342,41.71034],[22.95513,41.63265],[22.96331,41.35782],[22.93334,41.34104],[22.81199,41.3398],[22.76408,41.32225],[22.74538,41.16321],[22.71266,41.13945],[22.65306,41.18168],[22.62852,41.14385],[22.58295,41.11568],[22.5549,41.13065],[22.42285,41.11921],[22.26744,41.16409],[22.17629,41.15969],[22.1424,41.12449],[22.06527,41.15617],[21.90869,41.09191],[21.91102,41.04786],[21.7556,40.92525],[21.69601,40.9429],[21.57448,40.86076],[21.53007,40.90759],[21.41555,40.9173],[21.35595,40.87578],[21.25779,40.86165],[21.21105,40.8855],[21.15262,40.85546],[20.97887,40.85475],[20.97693,40.90103],[20.94305,40.92399],[20.83671,40.92752],[20.81567,40.89662],[20.73504,40.9081],[20.71634,40.91781],[20.65558,41.08009],[20.63454,41.0889],[20.59832,41.09066],[20.58546,41.11179],[20.59715,41.13644],[20.51068,41.2323],[20.49432,41.33679],[20.52119,41.34381],[20.55976,41.4087],[20.51301,41.442],[20.49039,41.49277],[20.45331,41.51436],[20.45809,41.5549],[20.52103,41.56473],[20.55508,41.58113],[20.51769,41.65975],[20.52937,41.69292],[20.51301,41.72433],[20.53405,41.78099],[20.57144,41.7897],[20.55976,41.87068],[20.59524,41.8818],[20.68523,41.85318],[20.76786,41.91839],[20.75464,42.05229],[21.11491,42.20794],[21.16614,42.19815],[21.22728,42.08909],[21.31983,42.10993],[21.29913,42.13954],[21.30496,42.1418],[21.38428,42.24465],[21.43882,42.23609],[21.43882,42.2789],[21.50823,42.27156],[21.52145,42.24465],[21.58992,42.25915],[21.70111,42.23789],[21.77176,42.2648],[21.84654,42.3247],[21.91595,42.30392],[21.94405,42.34669],[22.02908,42.29848],[22.16384,42.32103],[22.29605,42.37477],[22.29275,42.34913],[22.34773,42.31725]]]]}},{type:"Feature",properties:{iso1A2:"CF",iso1A3:"CAF",iso1N3:"140",wikidata:"Q929",nameEn:"Central African Republic",groups:["017","202","002"],callingCodes:["236"]},geometry:{type:"MultiPolygon",coordinates:[[[[22.87758,10.91915],[23.02221,10.69235],[23.3128,10.45214],[23.67164,9.86923],[23.69155,9.67566],[23.62179,9.53823],[23.64981,9.44303],[23.64358,9.28637],[23.56263,9.19418],[23.4848,9.16959],[23.44744,8.99128],[23.59065,8.99743],[23.51905,8.71749],[24.25691,8.69288],[24.13238,8.36959],[24.35965,8.26177],[24.85156,8.16933],[24.98855,7.96588],[25.25319,7.8487],[25.29214,7.66675],[25.20649,7.61115],[25.20337,7.50312],[25.35281,7.42595],[25.37461,7.33024],[25.90076,7.09549],[26.38022,6.63493],[26.32729,6.36272],[26.58259,6.1987],[26.51721,6.09655],[27.22705,5.71254],[27.22705,5.62889],[27.28621,5.56382],[27.23017,5.37167],[27.26886,5.25876],[27.44012,5.07349],[27.09575,5.22305],[26.93064,5.13535],[26.85579,5.03887],[26.74572,5.10685],[26.48595,5.04984],[26.13371,5.25594],[25.86073,5.19455],[25.53271,5.37431],[25.34558,5.29101],[25.31256,5.03668],[24.71816,4.90509],[24.46719,5.0915],[23.38847,4.60013],[22.94817,4.82392],[22.89094,4.79321],[22.84691,4.69887],[22.78526,4.71423],[22.6928,4.47285],[22.60915,4.48821],[22.5431,4.22041],[22.45504,4.13039],[22.27682,4.11347],[22.10721,4.20723],[21.6405,4.317],[21.55904,4.25553],[21.25744,4.33676],[21.21341,4.29285],[21.11214,4.33895],[21.08793,4.39603],[20.90383,4.44877],[20.60184,4.42394],[18.62755,3.47564],[18.58711,3.49423],[18.49245,3.63924],[18.39558,3.58212],[18.2723,3.57992],[18.24148,3.50302],[18.17323,3.47665],[18.14902,3.54476],[18.05656,3.56893],[17.85842,3.53378],[17.83421,3.61068],[17.60966,3.63705],[17.46876,3.70515],[17.35649,3.63045],[17.01746,3.55136],[16.68283,3.54257],[16.57598,3.47999],[16.46701,2.92512],[16.50126,2.84739],[16.19357,2.21537],[16.08252,2.45708],[16.05449,3.02306],[15.77725,3.26835],[15.73522,3.24348],[15.07686,4.01805],[15.17482,4.05131],[15.10644,4.1362],[15.08609,4.30282],[15.00825,4.41458],[14.73383,4.6135],[14.65489,5.21343],[14.57083,5.23979],[14.52724,5.28319],[14.62531,5.51411],[14.58951,5.59777],[14.62375,5.70466],[14.60974,5.91838],[14.49455,5.91683],[14.42917,6.00508],[14.43073,6.08867],[14.56149,6.18928],[14.74206,6.26356],[14.80122,6.34866],[14.79966,6.39043],[14.96311,6.75693],[15.04717,6.77085],[15.23397,7.25135],[15.49743,7.52179],[15.73118,7.52006],[15.79942,7.44149],[16.40703,7.68809],[16.41583,7.77971],[16.58315,7.88657],[16.59415,7.76444],[16.658,7.75353],[16.6668,7.67281],[16.8143,7.53971],[17.67288,7.98905],[17.93926,7.95853],[18.02731,8.01085],[18.6085,8.05009],[18.64153,8.08714],[18.62612,8.14163],[18.67455,8.22226],[18.79783,8.25929],[19.11044,8.68172],[18.86388,8.87971],[19.06421,9.00367],[20.36748,9.11019],[20.82979,9.44696],[21.26348,9.97642],[21.34934,9.95907],[21.52766,10.2105],[21.63553,10.217],[21.71479,10.29932],[21.72139,10.64136],[22.45889,11.00246],[22.87758,10.91915]]]]}},{type:"Feature",properties:{iso1A2:"ML",iso1A3:"MLI",iso1N3:"466",wikidata:"Q912",nameEn:"Mali",groups:["011","202","002"],callingCodes:["223"]},geometry:{type:"MultiPolygon",coordinates:[[[[-4.83423,24.99935],[1.15698,21.12843],[1.20992,20.73533],[3.24648,19.81703],[3.12501,19.1366],[3.36082,18.9745],[4.26651,19.14224],[4.26762,17.00432],[4.21787,17.00118],[4.19893,16.39923],[3.50368,15.35934],[3.03134,15.42221],[3.01806,15.34571],[1.31275,15.27978],[0.96711,14.98275],[0.72632,14.95898],[0.23859,15.00135],[0.06588,14.96961],[-0.24673,15.07805],[-0.72004,15.08655],[-1.05875,14.7921],[-1.32166,14.72774],[-1.68083,14.50023],[-1.97945,14.47709],[-1.9992,14.19011],[-2.10223,14.14878],[-2.47587,14.29671],[-2.66175,14.14713],[-2.84667,14.05532],[-2.90831,13.81174],[-2.88189,13.64921],[-3.26407,13.70699],[-3.28396,13.5422],[-3.23599,13.29035],[-3.43507,13.27272],[-3.4313,13.1588],[-3.54454,13.1781],[-3.7911,13.36665],[-3.96282,13.38164],[-3.90558,13.44375],[-3.96501,13.49778],[-4.34477,13.12927],[-4.21819,12.95722],[-4.238,12.71467],[-4.47356,12.71252],[-4.41412,12.31922],[-4.57703,12.19875],[-4.54841,12.1385],[-4.62546,12.13204],[-4.62987,12.06531],[-4.70692,12.06746],[-4.72893,12.01579],[-5.07897,11.97918],[-5.26389,11.84778],[-5.40258,11.8327],[-5.26389,11.75728],[-5.29251,11.61715],[-5.22867,11.60421],[-5.20665,11.43811],[-5.25509,11.36905],[-5.25949,11.24816],[-5.32553,11.21578],[-5.32994,11.13371],[-5.49284,11.07538],[-5.41579,10.84628],[-5.47083,10.75329],[-5.46643,10.56074],[-5.51058,10.43177],[-5.65135,10.46767],[-5.78124,10.43952],[-5.99478,10.19694],[-6.18851,10.24244],[-6.1731,10.46983],[-6.24795,10.74248],[-6.325,10.68624],[-6.40646,10.69922],[-6.42847,10.5694],[-6.52974,10.59104],[-6.63541,10.66893],[-6.68164,10.35074],[-6.93921,10.35291],[-7.01186,10.25111],[-6.97444,10.21644],[-7.00966,10.15794],[-7.0603,10.14711],[-7.13331,10.24877],[-7.3707,10.24677],[-7.44555,10.44602],[-7.52261,10.4655],[-7.54462,10.40921],[-7.63048,10.46334],[-7.92107,10.15577],[-7.97971,10.17117],[-7.9578,10.2703],[-8.10207,10.44649],[-8.22711,10.41722],[-8.32614,10.69273],[-8.2667,10.91762],[-8.35083,11.06234],[-8.66923,10.99397],[-8.40058,11.37466],[-8.80854,11.66715],[-8.94784,12.34842],[-9.13689,12.50875],[-9.38067,12.48446],[-9.32097,12.29009],[-9.63938,12.18312],[-9.714,12.0226],[-10.30604,12.24634],[-10.71897,11.91552],[-10.80355,12.1053],[-10.99758,12.24634],[-11.24136,12.01286],[-11.50006,12.17826],[-11.37536,12.40788],[-11.39935,12.97808],[-11.63025,13.39174],[-11.83345,13.33333],[-12.06897,13.71049],[-11.93043,13.84505],[-12.23936,14.76324],[-11.94903,14.76143],[-11.70705,15.51558],[-11.43483,15.62339],[-10.90932,15.11001],[-10.71721,15.4223],[-9.40447,15.4396],[-9.44673,15.60553],[-9.33314,15.7044],[-9.31106,15.69412],[-9.32979,15.50032],[-5.50165,15.50061],[-5.33435,16.33354],[-5.60725,16.49919],[-6.57191,25.0002],[-4.83423,24.99935]]]]}},{type:"Feature",properties:{iso1A2:"CH",iso1A3:"CHE",iso1N3:"756",wikidata:"Q39",nameEn:"Switzerland",groups:["155","150"],callingCodes:["41"]},geometry:{type:"MultiPolygon",coordinates:[[[[8.72809,47.69282],[8.75856,47.68969],[8.79511,47.67462],[8.79966,47.70222],[8.76965,47.7075],[8.77309,47.72059],[8.80663,47.73821],[8.82002,47.71458],[8.86989,47.70504],[8.85065,47.68209],[8.87383,47.67045],[8.87625,47.65441],[8.89946,47.64769],[8.94093,47.65596],[9.02093,47.6868],[9.09891,47.67801],[9.13845,47.66389],[9.15181,47.66904],[9.1705,47.65513],[9.1755,47.65584],[9.17593,47.65399],[9.18203,47.65598],[9.25619,47.65939],[9.55125,47.53629],[9.56312,47.49495],[9.58208,47.48344],[9.59482,47.46305],[9.60205,47.46165],[9.60484,47.46358],[9.60841,47.47178],[9.62158,47.45858],[9.62475,47.45685],[9.6423,47.45599],[9.65728,47.45383],[9.65863,47.44847],[9.64483,47.43842],[9.6446,47.43233],[9.65043,47.41937],[9.65136,47.40504],[9.6629,47.39591],[9.67334,47.39191],[9.67445,47.38429],[9.6711,47.37824],[9.66243,47.37136],[9.65427,47.36824],[9.62476,47.36639],[9.59978,47.34671],[9.58513,47.31334],[9.55857,47.29919],[9.54773,47.2809],[9.53116,47.27029],[9.52406,47.24959],[9.50318,47.22153],[9.4891,47.19346],[9.48774,47.17402],[9.51044,47.13727],[9.52089,47.10019],[9.51362,47.08505],[9.47139,47.06402],[9.47548,47.05257],[9.54041,47.06495],[9.55721,47.04762],[9.60717,47.06091],[9.87935,47.01337],[9.88266,46.93343],[9.98058,46.91434],[10.10715,46.84296],[10.22675,46.86942],[10.24128,46.93147],[10.30031,46.92093],[10.36933,47.00212],[10.48376,46.93891],[10.47197,46.85698],[10.38659,46.67847],[10.40475,46.63671],[10.44686,46.64162],[10.49375,46.62049],[10.46136,46.53164],[10.25309,46.57432],[10.23674,46.63484],[10.10307,46.61003],[10.03715,46.44479],[10.165,46.41051],[10.10506,46.3372],[10.17862,46.25626],[10.14439,46.22992],[10.07055,46.21668],[9.95249,46.38045],[9.73086,46.35071],[9.71273,46.29266],[9.57015,46.2958],[9.46117,46.37481],[9.45936,46.50873],[9.40487,46.46621],[9.36128,46.5081],[9.28136,46.49685],[9.25502,46.43743],[9.29226,46.32717],[9.24503,46.23616],[9.01618,46.04928],[8.99257,45.9698],[9.09065,45.89906],[9.06642,45.8761],[9.04546,45.84968],[9.04059,45.8464],[9.03505,45.83976],[9.03793,45.83548],[9.03279,45.82865],[9.0298,45.82127],[9.00324,45.82055],[8.99663,45.83466],[8.9621,45.83707],[8.94737,45.84285],[8.91129,45.8388],[8.93504,45.86245],[8.94372,45.86587],[8.93649,45.86775],[8.88904,45.95465],[8.86688,45.96135],[8.85121,45.97239],[8.8319,45.9879],[8.79362,45.99207],[8.78585,45.98973],[8.79414,46.00913],[8.85617,46.0748],[8.80778,46.10085],[8.75697,46.10395],[8.62242,46.12112],[8.45032,46.26869],[8.46317,46.43712],[8.42464,46.46367],[8.30648,46.41587],[8.31162,46.38044],[8.08814,46.26692],[8.16866,46.17817],[8.11383,46.11577],[8.02906,46.10331],[7.98881,45.99867],[7.9049,45.99945],[7.85949,45.91485],[7.56343,45.97421],[7.10685,45.85653],[7.04151,45.92435],[7.00946,45.9944],[6.93862,46.06502],[6.87868,46.03855],[6.89321,46.12548],[6.78968,46.14058],[6.86052,46.28512],[6.77152,46.34784],[6.8024,46.39171],[6.82312,46.42661],[6.53358,46.45431],[6.25432,46.3632],[6.21981,46.31304],[6.24826,46.30175],[6.25137,46.29014],[6.23775,46.27822],[6.24952,46.26255],[6.26749,46.24745],[6.29474,46.26221],[6.31041,46.24417],[6.29663,46.22688],[6.27694,46.21566],[6.26007,46.21165],[6.24821,46.20531],[6.23913,46.20511],[6.23544,46.20714],[6.22175,46.20045],[6.22222,46.19888],[6.21844,46.19837],[6.21603,46.19507],[6.21273,46.19409],[6.21114,46.1927],[6.20539,46.19163],[6.19807,46.18369],[6.19552,46.18401],[6.18707,46.17999],[6.18871,46.16644],[6.18116,46.16187],[6.15305,46.15194],[6.13397,46.1406],[6.09926,46.14373],[6.09199,46.15191],[6.07491,46.14879],[6.05203,46.15191],[6.04564,46.14031],[6.03614,46.13712],[6.01791,46.14228],[5.9871,46.14499],[5.97893,46.13303],[5.95781,46.12925],[5.9641,46.14412],[5.97508,46.15863],[5.98188,46.17392],[5.98846,46.17046],[5.99573,46.18587],[5.96515,46.19638],[5.97542,46.21525],[6.02461,46.23313],[6.03342,46.2383],[6.04602,46.23127],[6.05029,46.23518],[6.0633,46.24583],[6.07072,46.24085],[6.08563,46.24651],[6.10071,46.23772],[6.12446,46.25059],[6.11926,46.2634],[6.1013,46.28512],[6.11697,46.29547],[6.1198,46.31157],[6.13876,46.33844],[6.15738,46.3491],[6.16987,46.36759],[6.15985,46.37721],[6.15016,46.3778],[6.09926,46.40768],[6.06407,46.41676],[6.08427,46.44305],[6.07269,46.46244],[6.1567,46.54402],[6.11084,46.57649],[6.27135,46.68251],[6.38351,46.73171],[6.45209,46.77502],[6.43216,46.80336],[6.46456,46.88865],[6.43341,46.92703],[6.71531,47.0494],[6.68823,47.06616],[6.76788,47.1208],[6.8489,47.15933],[6.9508,47.24338],[6.95108,47.26428],[6.94316,47.28747],[7.05305,47.33304],[7.0564,47.35134],[7.03125,47.36996],[6.87959,47.35335],[6.88542,47.37262],[6.93744,47.40714],[6.93953,47.43388],[7.0024,47.45264],[6.98425,47.49432],[7.0231,47.50522],[7.07425,47.48863],[7.12781,47.50371],[7.16249,47.49025],[7.19583,47.49455],[7.17026,47.44312],[7.24669,47.4205],[7.33526,47.44186],[7.35603,47.43432],[7.40308,47.43638],[7.43088,47.45846],[7.4462,47.46264],[7.4583,47.47216],[7.42923,47.48628],[7.43356,47.49712],[7.47534,47.47932],[7.51076,47.49651],[7.49804,47.51798],[7.5229,47.51644],[7.53199,47.5284],[7.51904,47.53515],[7.50588,47.52856],[7.49691,47.53821],[7.50873,47.54546],[7.51723,47.54578],[7.52831,47.55347],[7.53634,47.55553],[7.55652,47.56779],[7.55689,47.57232],[7.56548,47.57617],[7.56684,47.57785],[7.58386,47.57536],[7.58945,47.59017],[7.60523,47.58519],[7.60459,47.57869],[7.61929,47.57683],[7.64309,47.59151],[7.64213,47.5944],[7.64599,47.59695],[7.67395,47.59212],[7.68229,47.59905],[7.69385,47.60099],[7.68486,47.59601],[7.67115,47.5871],[7.68904,47.57133],[7.67655,47.56435],[7.63338,47.56256],[7.65083,47.54662],[7.66174,47.54554],[7.6656,47.53752],[7.68101,47.53232],[7.69642,47.53297],[7.71961,47.54219],[7.75261,47.54599],[7.79486,47.55691],[7.81901,47.58798],[7.84412,47.5841],[7.88664,47.58854],[7.90673,47.57674],[7.91251,47.55031],[7.94494,47.54511],[7.95682,47.55789],[7.97581,47.55493],[8.00113,47.55616],[8.02136,47.55096],[8.04383,47.55443],[8.06663,47.56374],[8.08557,47.55768],[8.10002,47.56504],[8.10395,47.57918],[8.11543,47.5841],[8.13662,47.58432],[8.13823,47.59147],[8.14947,47.59558],[8.1652,47.5945],[8.19378,47.61636],[8.20617,47.62141],[8.22011,47.6181],[8.22577,47.60385],[8.23809,47.61204],[8.25863,47.61571],[8.26313,47.6103],[8.2824,47.61225],[8.29722,47.60603],[8.29524,47.5919],[8.30277,47.58607],[8.32735,47.57133],[8.38273,47.56608],[8.39477,47.57826],[8.43235,47.56617],[8.49431,47.58107],[8.48949,47.588],[8.46637,47.58389],[8.45578,47.60121],[8.50747,47.61897],[8.51686,47.63476],[8.55756,47.62394],[8.57586,47.59537],[8.60348,47.61204],[8.59545,47.64298],[8.60701,47.65271],[8.61471,47.64514],[8.60412,47.63735],[8.62049,47.63757],[8.62884,47.65098],[8.61113,47.66332],[8.6052,47.67258],[8.57683,47.66158],[8.56141,47.67088],[8.52801,47.66059],[8.5322,47.64687],[8.49656,47.64709],[8.46605,47.64103],[8.4667,47.65747],[8.44711,47.65379],[8.42264,47.66667],[8.41346,47.66676],[8.40473,47.67499],[8.4211,47.68407],[8.40569,47.69855],[8.44807,47.72426],[8.45771,47.7493],[8.48868,47.77215],[8.56814,47.78001],[8.56415,47.80633],[8.61657,47.79998],[8.62408,47.7626],[8.64425,47.76398],[8.65292,47.80066],[8.68022,47.78599],[8.68985,47.75686],[8.71778,47.76571],[8.74251,47.75168],[8.70543,47.73121],[8.73671,47.7169],[8.72617,47.69651],[8.72809,47.69282]],[[8.95861,45.96485],[8.97604,45.96151],[8.97741,45.98317],[8.96668,45.98436],[8.95861,45.96485]],[[8.70847,47.68904],[8.71773,47.69088],[8.70237,47.71453],[8.66416,47.71367],[8.67508,47.6979],[8.65769,47.68928],[8.66837,47.68437],[8.68985,47.69552],[8.70847,47.68904]]]]}},{type:"Feature",properties:{iso1A2:"MM",iso1A3:"MMR",iso1N3:"104",wikidata:"Q836",nameEn:"Myanmar",aliases:["Burma","BU"],groups:["035","142"],callingCodes:["95"]},geometry:{type:"MultiPolygon",coordinates:[[[[92.62187,21.87037],[92.60949,21.97638],[92.67532,22.03547],[92.70416,22.16017],[92.86208,22.05456],[92.89504,21.95143],[92.93899,22.02656],[92.99804,21.98964],[92.99255,22.05965],[93.04885,22.20595],[93.15734,22.18687],[93.14224,22.24535],[93.19991,22.25425],[93.18206,22.43716],[93.13537,22.45873],[93.11477,22.54374],[93.134,22.59573],[93.09417,22.69459],[93.134,22.92498],[93.12988,23.05772],[93.2878,23.00464],[93.38478,23.13698],[93.36862,23.35426],[93.38781,23.36139],[93.39981,23.38828],[93.38805,23.4728],[93.43475,23.68299],[93.3908,23.7622],[93.3908,23.92925],[93.36059,23.93176],[93.32351,24.04468],[93.34735,24.10151],[93.41415,24.07854],[93.46633,23.97067],[93.50616,23.94432],[93.62871,24.00922],[93.75952,24.0003],[93.80279,23.92549],[93.92089,23.95812],[94.14081,23.83333],[94.30215,24.23752],[94.32362,24.27692],[94.45279,24.56656],[94.50729,24.59281],[94.5526,24.70764],[94.60204,24.70889],[94.73937,25.00545],[94.74212,25.13606],[94.57458,25.20318],[94.68032,25.47003],[94.80117,25.49359],[95.18556,26.07338],[95.11428,26.1019],[95.12801,26.38397],[95.05798,26.45408],[95.23513,26.68499],[95.30339,26.65372],[95.437,26.7083],[95.81603,27.01335],[95.93002,27.04149],[96.04949,27.19428],[96.15591,27.24572],[96.40779,27.29818],[96.55761,27.29928],[96.73888,27.36638],[96.88445,27.25046],[96.85287,27.2065],[96.89132,27.17474],[97.14675,27.09041],[97.17422,27.14052],[96.91431,27.45752],[96.90112,27.62149],[97.29919,27.92233],[97.35824,27.87256],[97.38845,28.01329],[97.35412,28.06663],[97.31292,28.06784],[97.34547,28.21385],[97.41729,28.29783],[97.47085,28.2688],[97.50518,28.49716],[97.56835,28.55628],[97.70705,28.5056],[97.79632,28.33168],[97.90069,28.3776],[98.15337,28.12114],[98.13964,27.9478],[98.32641,27.51385],[98.42529,27.55404],[98.43353,27.67086],[98.69582,27.56499],[98.7333,26.85615],[98.77547,26.61994],[98.72741,26.36183],[98.67797,26.24487],[98.7329,26.17218],[98.66884,26.09165],[98.63128,26.15492],[98.57085,26.11547],[98.60763,26.01512],[98.70818,25.86241],[98.63128,25.79937],[98.54064,25.85129],[98.40606,25.61129],[98.31268,25.55307],[98.25774,25.6051],[98.16848,25.62739],[98.18084,25.56298],[98.12591,25.50722],[98.14925,25.41547],[97.92541,25.20815],[97.83614,25.2715],[97.77023,25.11492],[97.72216,25.08508],[97.72903,24.91332],[97.79949,24.85655],[97.76481,24.8289],[97.73127,24.83015],[97.70181,24.84557],[97.64354,24.79171],[97.56648,24.76475],[97.56383,24.75535],[97.5542,24.74943],[97.54675,24.74202],[97.56525,24.72838],[97.56286,24.54535],[97.52757,24.43748],[97.60029,24.4401],[97.66998,24.45288],[97.7098,24.35658],[97.65624,24.33781],[97.66723,24.30027],[97.71941,24.29652],[97.76799,24.26365],[97.72998,24.2302],[97.72799,24.18883],[97.75305,24.16902],[97.72903,24.12606],[97.62363,24.00506],[97.5247,23.94032],[97.64667,23.84574],[97.72302,23.89288],[97.79456,23.94836],[97.79416,23.95663],[97.84328,23.97603],[97.86545,23.97723],[97.88811,23.97446],[97.8955,23.97758],[97.89676,23.97931],[97.89683,23.98389],[97.88814,23.98605],[97.88414,23.99405],[97.88616,24.00463],[97.90998,24.02094],[97.93951,24.01953],[97.98691,24.03897],[97.99583,24.04932],[98.04709,24.07616],[98.05302,24.07408],[98.05671,24.07961],[98.0607,24.07812],[98.06703,24.08028],[98.07806,24.07988],[98.20666,24.11406],[98.54476,24.13119],[98.59256,24.08371],[98.85319,24.13042],[98.87998,24.15624],[98.89632,24.10612],[98.67797,23.9644],[98.68209,23.80492],[98.79607,23.77947],[98.82933,23.72921],[98.81775,23.694],[98.88396,23.59555],[98.80294,23.5345],[98.82877,23.47908],[98.87683,23.48995],[98.92104,23.36946],[98.87573,23.33038],[98.93958,23.31414],[98.92515,23.29535],[98.88597,23.18656],[99.05975,23.16382],[99.04601,23.12215],[99.25741,23.09025],[99.34127,23.13099],[99.52214,23.08218],[99.54218,22.90014],[99.43537,22.94086],[99.45654,22.85726],[99.31243,22.73893],[99.38247,22.57544],[99.37972,22.50188],[99.28771,22.4105],[99.17318,22.18025],[99.19176,22.16983],[99.1552,22.15874],[99.33166,22.09656],[99.47585,22.13345],[99.85351,22.04183],[99.96612,22.05965],[99.99084,21.97053],[99.94003,21.82782],[99.98654,21.71064],[100.04956,21.66843],[100.12679,21.70539],[100.17486,21.65306],[100.10757,21.59945],[100.12542,21.50365],[100.1625,21.48704],[100.18447,21.51898],[100.25863,21.47043],[100.35201,21.53176],[100.42892,21.54325],[100.4811,21.46148],[100.57861,21.45637],[100.72143,21.51898],[100.87265,21.67396],[101.11744,21.77659],[101.15156,21.56129],[101.16198,21.52808],[101.00234,21.39612],[100.80173,21.2934],[100.72716,21.31786],[100.63578,21.05639],[100.55281,21.02796],[100.50974,20.88574],[100.64628,20.88279],[100.60112,20.8347],[100.51079,20.82194],[100.36375,20.82783],[100.1957,20.68247],[100.08404,20.36626],[99.95721,20.46301],[99.91616,20.44986],[99.90499,20.4487],[99.89692,20.44789],[99.89301,20.44311],[99.89168,20.44548],[99.88451,20.44596],[99.88211,20.44488],[99.86383,20.44371],[99.81096,20.33687],[99.68255,20.32077],[99.46008,20.39673],[99.46077,20.36198],[99.5569,20.20676],[99.52943,20.14811],[99.416,20.08614],[99.20328,20.12877],[99.0735,20.10298],[98.98679,19.7419],[98.83661,19.80931],[98.56065,19.67807],[98.51182,19.71303],[98.24884,19.67876],[98.13829,19.78541],[98.03314,19.80941],[98.04364,19.65755],[97.84715,19.55782],[97.88423,19.5041],[97.78769,19.39429],[97.84186,19.29526],[97.78606,19.26769],[97.84024,19.22217],[97.83479,19.09972],[97.73797,19.04261],[97.73654,18.9812],[97.66487,18.9371],[97.73836,18.88478],[97.76752,18.58097],[97.5258,18.4939],[97.36444,18.57138],[97.34522,18.54596],[97.50383,18.26844],[97.56219,18.33885],[97.64116,18.29778],[97.60841,18.23846],[97.73723,17.97912],[97.66794,17.88005],[97.76407,17.71595],[97.91829,17.54504],[98.11185,17.36829],[98.10439,17.33847],[98.34566,17.04822],[98.39441,17.06266],[98.52624,16.89979],[98.49603,16.8446],[98.53833,16.81934],[98.46994,16.73613],[98.50253,16.7139],[98.49713,16.69022],[98.51043,16.70107],[98.51579,16.69433],[98.51472,16.68521],[98.51833,16.676],[98.51113,16.64503],[98.5695,16.62826],[98.57912,16.55983],[98.63817,16.47424],[98.68074,16.27068],[98.84485,16.42354],[98.92656,16.36425],[98.8376,16.11706],[98.69585,16.13353],[98.57019,16.04578],[98.59853,15.87197],[98.541,15.65406],[98.58598,15.46821],[98.56027,15.33471],[98.4866,15.39154],[98.39351,15.34177],[98.41906,15.27103],[98.40522,15.25268],[98.30446,15.30667],[98.22,15.21327],[98.18821,15.13125],[98.24874,14.83013],[98.56762,14.37701],[98.97356,14.04868],[99.16695,13.72621],[99.20617,13.20575],[99.12225,13.19847],[99.10646,13.05804],[99.18748,12.9898],[99.18905,12.84799],[99.29254,12.68921],[99.409,12.60603],[99.47519,12.1353],[99.56445,12.14805],[99.53424,12.02317],[99.64891,11.82699],[99.64108,11.78948],[99.5672,11.62732],[99.47598,11.62434],[99.39485,11.3925],[99.31573,11.32081],[99.32756,11.28545],[99.06938,10.94857],[99.02337,10.97217],[98.99701,10.92962],[99.0069,10.85485],[98.86819,10.78336],[98.78511,10.68351],[98.77275,10.62548],[98.81944,10.52761],[98.7391,10.31488],[98.55174,9.92804],[98.52291,9.92389],[98.47298,9.95782],[98.33094,9.91973],[98.12555,9.44056],[97.63455,9.60854],[94.6371,13.81803],[92.61042,13.76986],[92.39837,20.38919],[92.4302,20.5688],[92.31348,20.57137],[92.28464,20.63179],[92.37665,20.72172],[92.26071,21.05697],[92.17752,21.17445],[92.20087,21.337],[92.37939,21.47764],[92.43158,21.37025],[92.55105,21.3856],[92.60187,21.24615],[92.68152,21.28454],[92.59775,21.6092],[92.62187,21.87037]]]]}},{type:"Feature",properties:{iso1A2:"CK",iso1A3:"COK",iso1N3:"184",wikidata:"Q26988",nameEn:"Cook Islands",country:"NZ",groups:["061","009"],driveSide:"left",callingCodes:["682"]},geometry:{type:"MultiPolygon",coordinates:[[[[-167.73854,-14.92809],[-167.75195,-10.12005],[-167.75329,-7.52784],[-156.50903,-7.4975],[-156.4957,-12.32002],[-156.46451,-23.21255],[-167.73129,-23.22266],[-167.73854,-14.92809]]]]}},{type:"Feature",properties:{iso1A2:"MN",iso1A3:"MNG",iso1N3:"496",wikidata:"Q711",nameEn:"Mongolia",groups:["030","142"],callingCodes:["976"]},geometry:{type:"MultiPolygon",coordinates:[[[[102.14032,51.35566],[102.32194,50.67982],[102.71178,50.38873],[103.70343,50.13952],[105.32528,50.4648],[106.05562,50.40582],[106.07865,50.33474],[106.47156,50.31909],[106.49628,50.32436],[106.51122,50.34408],[106.58373,50.34044],[106.80326,50.30177],[107.00007,50.1977],[107.1174,50.04239],[107.36407,49.97612],[107.96116,49.93191],[107.95387,49.66659],[108.27937,49.53167],[108.53969,49.32325],[109.18017,49.34709],[109.51325,49.22859],[110.24373,49.16676],[110.39891,49.25083],[110.64493,49.1816],[113.02647,49.60772],[113.20216,49.83356],[114.325,50.28098],[114.9703,50.19254],[115.26068,49.97367],[115.73602,49.87688],[116.22402,50.04477],[116.62502,49.92919],[116.71193,49.83813],[116.03781,48.87014],[116.06565,48.81716],[115.78876,48.51781],[115.811,48.25699],[115.52082,48.15367],[115.57128,47.91988],[115.94296,47.67741],[116.08431,47.80693],[116.2527,47.87766],[116.4465,47.83662],[116.67405,47.89039],[116.87527,47.88836],[117.08918,47.82242],[117.37875,47.63627],[117.50181,47.77216],[117.80196,48.01661],[118.03676,48.00982],[118.11009,48.04],[118.22677,48.03853],[118.29654,48.00246],[118.55766,47.99277],[118.7564,47.76947],[119.12343,47.66458],[119.13995,47.53997],[119.35892,47.48104],[119.31964,47.42617],[119.54918,47.29505],[119.56019,47.24874],[119.62403,47.24575],[119.71209,47.19192],[119.85518,46.92196],[119.91242,46.90091],[119.89261,46.66423],[119.80455,46.67631],[119.77373,46.62947],[119.68127,46.59015],[119.65265,46.62342],[119.42827,46.63783],[119.37306,46.61132],[119.30261,46.6083],[119.24978,46.64761],[119.10448,46.65516],[119.00541,46.74273],[118.92616,46.72765],[118.89974,46.77139],[118.8337,46.77742],[118.78747,46.68689],[118.30534,46.73519],[117.69554,46.50991],[117.60748,46.59771],[117.41782,46.57862],[117.36609,46.36335],[117.07252,46.35818],[116.83166,46.38637],[116.75551,46.33083],[116.58612,46.30211],[116.26678,45.96479],[116.24012,45.8778],[116.27366,45.78637],[116.16989,45.68603],[115.91898,45.6227],[115.69688,45.45761],[115.35757,45.39106],[114.94546,45.37377],[114.74612,45.43585],[114.54801,45.38337],[114.5166,45.27189],[114.08071,44.92847],[113.909,44.91444],[113.63821,44.74326],[112.74662,44.86297],[112.4164,45.06858],[111.98695,45.09074],[111.76275,44.98032],[111.40498,44.3461],[111.96289,43.81596],[111.93776,43.68709],[111.79758,43.6637],[111.59087,43.51207],[111.0149,43.3289],[110.4327,42.78293],[110.08401,42.6411],[109.89402,42.63111],[109.452,42.44842],[109.00679,42.45302],[108.84489,42.40246],[108.23156,42.45532],[107.57258,42.40898],[107.49681,42.46221],[107.29755,42.41395],[107.24774,42.36107],[106.76517,42.28741],[105.24708,41.7442],[105.01119,41.58382],[104.91272,41.64619],[104.51667,41.66113],[104.52258,41.8706],[103.92804,41.78246],[103.3685,41.89696],[102.72403,42.14675],[102.42826,42.15137],[102.07645,42.22519],[101.80515,42.50074],[101.28833,42.58524],[100.84979,42.67087],[100.33297,42.68231],[99.50671,42.56535],[97.1777,42.7964],[96.37926,42.72055],[96.35658,42.90363],[95.89543,43.2528],[95.52594,43.99353],[95.32891,44.02407],[95.39772,44.2805],[95.01191,44.25274],[94.71959,44.35284],[94.10003,44.71016],[93.51161,44.95964],[91.64048,45.07408],[90.89169,45.19667],[90.65114,45.49314],[90.70907,45.73437],[91.03026,46.04194],[90.99672,46.14207],[90.89639,46.30711],[91.07696,46.57315],[91.0147,46.58171],[91.03649,46.72916],[90.84035,46.99525],[90.76108,46.99399],[90.48542,47.30438],[90.48854,47.41826],[90.33598,47.68303],[90.10871,47.7375],[90.06512,47.88177],[89.76624,47.82745],[89.55453,48.0423],[89.0711,47.98528],[88.93186,48.10263],[88.8011,48.11302],[88.58316,48.21893],[88.58939,48.34531],[87.96361,48.58478],[88.0788,48.71436],[87.73822,48.89582],[87.88171,48.95853],[87.81333,49.17354],[87.98977,49.18147],[88.15543,49.30314],[88.17223,49.46934],[88.42449,49.48821],[88.82499,49.44808],[89.70687,49.72535],[89.59711,49.90851],[91.86048,50.73734],[92.07173,50.69585],[92.44714,50.78762],[93.01109,50.79001],[92.99595,50.63183],[94.30823,50.57498],[94.39258,50.22193],[94.49477,50.17832],[94.6121,50.04239],[94.97166,50.04725],[95.02465,49.96941],[95.74757,49.97915],[95.80056,50.04239],[96.97388,49.88413],[97.24639,49.74737],[97.56811,49.84265],[97.56432,49.92801],[97.76871,49.99861],[97.85197,49.91339],[98.29481,50.33561],[98.31373,50.4996],[98.06393,50.61262],[97.9693,50.78044],[98.01472,50.86652],[97.83305,51.00248],[98.05257,51.46696],[98.22053,51.46579],[98.33222,51.71832],[98.74142,51.8637],[98.87768,52.14563],[99.27888,51.96876],[99.75578,51.90108],[99.89203,51.74903],[100.61116,51.73028],[101.39085,51.45753],[101.5044,51.50467],[102.14032,51.35566]]]]}},{type:"Feature",properties:{iso1A2:"CM",iso1A3:"CMR",iso1N3:"120",wikidata:"Q1009",nameEn:"Cameroon",groups:["017","202","002"],callingCodes:["237"]},geometry:{type:"MultiPolygon",coordinates:[[[[14.83314,12.62963],[14.90827,12.3269],[14.89019,12.16593],[14.96952,12.0925],[15.00146,12.1223],[15.0349,12.10698],[15.05786,12.0608],[15.04808,11.8731],[15.11579,11.79313],[15.06595,11.71126],[15.13149,11.5537],[15.0585,11.40481],[15.10021,11.04101],[15.04957,11.02347],[15.09127,10.87431],[15.06737,10.80921],[15.15532,10.62846],[15.14936,10.53915],[15.23724,10.47764],[15.30874,10.31063],[15.50535,10.1098],[15.68761,9.99344],[15.41408,9.92876],[15.24618,9.99246],[15.14043,9.99246],[15.05999,9.94845],[14.95722,9.97926],[14.80082,9.93818],[14.4673,10.00264],[14.20411,10.00055],[14.1317,9.82413],[14.01793,9.73169],[13.97544,9.6365],[14.37094,9.2954],[14.35707,9.19611],[14.83566,8.80557],[15.09484,8.65982],[15.20426,8.50892],[15.50743,7.79302],[15.59272,7.7696],[15.56964,7.58936],[15.49743,7.52179],[15.23397,7.25135],[15.04717,6.77085],[14.96311,6.75693],[14.79966,6.39043],[14.80122,6.34866],[14.74206,6.26356],[14.56149,6.18928],[14.43073,6.08867],[14.42917,6.00508],[14.49455,5.91683],[14.60974,5.91838],[14.62375,5.70466],[14.58951,5.59777],[14.62531,5.51411],[14.52724,5.28319],[14.57083,5.23979],[14.65489,5.21343],[14.73383,4.6135],[15.00825,4.41458],[15.08609,4.30282],[15.10644,4.1362],[15.17482,4.05131],[15.07686,4.01805],[15.73522,3.24348],[15.77725,3.26835],[16.05449,3.02306],[16.08252,2.45708],[16.19357,2.21537],[16.15568,2.18955],[16.08563,2.19733],[16.05294,1.9811],[16.14634,1.70259],[16.02647,1.65591],[16.02959,1.76483],[15.48942,1.98265],[15.34776,1.91264],[15.22634,2.03243],[15.00996,1.98887],[14.61145,2.17866],[13.29457,2.16106],[13.28534,2.25716],[11.37116,2.29975],[11.3561,2.17217],[9.991,2.16561],[9.90749,2.20049],[9.89012,2.20457],[9.84716,2.24676],[9.83238,2.29079],[9.83754,2.32428],[9.82123,2.35097],[9.81162,2.33797],[9.22018,3.72052],[8.34397,4.30689],[8.60302,4.87353],[8.78027,5.1243],[8.92029,5.58403],[8.83687,5.68483],[8.88156,5.78857],[8.84209,5.82562],[9.51757,6.43874],[9.70674,6.51717],[9.77824,6.79088],[9.86314,6.77756],[10.15135,7.03781],[10.21466,6.88996],[10.53639,6.93432],[10.57214,7.16345],[10.59746,7.14719],[10.60789,7.06885],[10.83727,6.9358],[10.8179,6.83377],[10.94302,6.69325],[11.09644,6.68437],[11.09495,6.51717],[11.42041,6.53789],[11.42264,6.5882],[11.51499,6.60892],[11.57755,6.74059],[11.55818,6.86186],[11.63117,6.9905],[11.87396,7.09398],[11.84864,7.26098],[11.93205,7.47812],[12.01844,7.52981],[11.99908,7.67302],[12.20909,7.97553],[12.19271,8.10826],[12.24782,8.17904],[12.26123,8.43696],[12.4489,8.52536],[12.44146,8.6152],[12.68722,8.65938],[12.71701,8.7595],[12.79,8.75361],[12.81085,8.91992],[12.90022,9.11411],[12.91958,9.33905],[12.85628,9.36698],[13.02385,9.49334],[13.22642,9.57266],[13.25472,9.76795],[13.29941,9.8296],[13.25025,9.86042],[13.24132,9.91031],[13.27409,9.93232],[13.286,9.9822],[13.25323,10.00127],[13.25025,10.03647],[13.34111,10.12299],[13.43644,10.13326],[13.5705,10.53183],[13.54964,10.61236],[13.73434,10.9255],[13.70753,10.94451],[13.7403,11.00593],[13.78945,11.00154],[13.97489,11.30258],[14.17821,11.23831],[14.6124,11.51283],[14.64591,11.66166],[14.55207,11.72001],[14.61612,11.7798],[14.6474,12.17466],[14.4843,12.35223],[14.22215,12.36533],[14.17523,12.41916],[14.20204,12.53405],[14.08251,13.0797],[14.46881,13.08259],[14.56101,12.91036],[14.55058,12.78256],[14.83314,12.62963]]]]}},{type:"Feature",properties:{iso1A2:"MO",iso1A3:"MAC",iso1N3:"446",wikidata:"Q14773",nameEn:"Macau",aliases:["Macao"],country:"CN",groups:["030","142"],driveSide:"left",callingCodes:["853"]},geometry:{type:"MultiPolygon",coordinates:[[[[113.54942,22.14519],[113.54093,22.15497],[113.52659,22.18271],[113.53552,22.20607],[113.53301,22.21235],[113.53593,22.2137],[113.54093,22.21314],[113.54333,22.21688],[113.5508,22.21672],[113.56865,22.20973],[113.57123,22.20416],[113.60504,22.20464],[113.63011,22.10782],[113.57191,22.07696],[113.54839,22.10909],[113.54942,22.14519]]]]}},{type:"Feature",properties:{iso1A2:"CO",iso1A3:"COL",iso1N3:"170",wikidata:"Q739",nameEn:"Colombia",groups:["005","419","019"],callingCodes:["57"]},geometry:{type:"MultiPolygon",coordinates:[[[[-71.19849,12.65801],[-70.92579,11.96275],[-71.3275,11.85],[-71.9675,11.65536],[-72.24983,11.14138],[-72.4767,11.1117],[-72.88002,10.44309],[-72.98085,9.85253],[-73.36905,9.16636],[-73.02119,9.27584],[-72.94052,9.10663],[-72.77415,9.10165],[-72.65474,8.61428],[-72.4042,8.36513],[-72.36987,8.19976],[-72.35163,8.01163],[-72.39137,8.03534],[-72.47213,7.96106],[-72.48801,7.94329],[-72.48183,7.92909],[-72.47042,7.92306],[-72.45806,7.91141],[-72.46183,7.90682],[-72.44454,7.86031],[-72.46763,7.79518],[-72.47827,7.65604],[-72.45321,7.57232],[-72.47415,7.48928],[-72.43132,7.40034],[-72.19437,7.37034],[-72.04895,7.03837],[-71.82441,7.04314],[-71.44118,7.02116],[-71.42212,7.03854],[-71.37234,7.01588],[-71.03941,6.98163],[-70.7596,7.09799],[-70.10716,6.96516],[-69.41843,6.1072],[-67.60654,6.2891],[-67.4625,6.20625],[-67.43513,5.98835],[-67.58558,5.84537],[-67.63914,5.64963],[-67.59141,5.5369],[-67.83341,5.31104],[-67.85358,4.53249],[-67.62671,3.74303],[-67.50067,3.75812],[-67.30945,3.38393],[-67.85862,2.86727],[-67.85862,2.79173],[-67.65696,2.81691],[-67.21967,2.35778],[-66.85795,1.22998],[-67.08222,1.17441],[-67.15784,1.80439],[-67.299,1.87494],[-67.40488,2.22258],[-67.9292,1.82455],[-68.18632,2.00091],[-68.26699,1.83463],[-68.18128,1.72881],[-69.38621,1.70865],[-69.53746,1.76408],[-69.83491,1.69353],[-69.82987,1.07864],[-69.26017,1.06856],[-69.14422,0.84172],[-69.20976,0.57958],[-69.47696,0.71065],[-70.04162,0.55437],[-70.03658,-0.19681],[-69.603,-0.51947],[-69.59796,-0.75136],[-69.4215,-1.01853],[-69.43395,-1.42219],[-69.94708,-4.2431],[-70.3374,-3.79505],[-70.52393,-3.87553],[-70.71396,-3.7921],[-70.04609,-2.73906],[-70.94377,-2.23142],[-71.75223,-2.15058],[-72.92587,-2.44514],[-73.65312,-1.26222],[-74.26675,-0.97229],[-74.42701,-0.50218],[-75.18513,-0.0308],[-75.25764,-0.11943],[-75.82927,0.09578],[-76.23441,0.42294],[-76.41215,0.38228],[-76.4094,0.24015],[-76.89177,0.24736],[-77.52001,0.40782],[-77.49984,0.64476],[-77.67815,0.73863],[-77.66416,0.81604],[-77.68613,0.83029],[-77.7148,0.85003],[-77.85677,0.80197],[-78.42749,1.15389],[-78.87137,1.47457],[-82.12561,4.00341],[-78.06168,7.07793],[-77.89178,7.22681],[-77.81426,7.48319],[-77.72157,7.47612],[-77.72514,7.72348],[-77.57185,7.51147],[-77.17257,7.97422],[-77.45064,8.49991],[-77.32389,8.81247],[-77.58292,9.22278],[-78.79327,9.93766],[-82.56142,11.91792],[-82.06974,14.49418],[-81.58685,18.0025],[-71.19849,12.65801]]]]}},{type:"Feature",properties:{iso1A2:"MP",iso1A3:"MNP",iso1N3:"580",wikidata:"Q16644",nameEn:"Northern Mariana Islands",country:"US",groups:["057","009"],roadSpeedUnit:"mph",callingCodes:["1 670"]},geometry:{type:"MultiPolygon",coordinates:[[[[143.82485,13.92273],[144.18594,21.03576],[146.6755,21.00809],[146.25931,13.85876],[143.82485,13.92273]]]]}},{type:"Feature",properties:{iso1A2:"CR",iso1A3:"CRI",iso1N3:"188",wikidata:"Q800",nameEn:"Costa Rica",groups:["013","003","419","019"],callingCodes:["506"]},geometry:{type:"MultiPolygon",coordinates:[[[[-83.68276,11.01562],[-83.54024,10.96805],[-82.51044,9.65379],[-82.56507,9.57279],[-82.61345,9.49881],[-82.66667,9.49746],[-82.77206,9.59573],[-82.87919,9.62645],[-82.84871,9.4973],[-82.93516,9.46741],[-82.93516,9.07687],[-82.72126,8.97125],[-82.88253,8.83331],[-82.91377,8.774],[-82.92068,8.74832],[-82.8794,8.6981],[-82.82739,8.60153],[-82.83975,8.54755],[-82.83322,8.52464],[-82.8382,8.48117],[-82.8679,8.44042],[-82.93056,8.43465],[-83.05209,8.33394],[-82.9388,8.26634],[-82.88641,8.10219],[-82.89137,8.05755],[-82.89978,8.04083],[-82.94503,7.93865],[-87.41779,5.02401],[-86.14524,11.09059],[-85.71223,11.06868],[-85.60529,11.22607],[-84.92439,10.9497],[-84.68197,11.07568],[-83.90838,10.71161],[-83.66597,10.79916],[-83.68276,11.01562]]]]}},{type:"Feature",properties:{iso1A2:"MQ",iso1A3:"MTQ",iso1N3:"474",wikidata:"Q17054",nameEn:"Martinique",country:"FR",groups:["EU","029","003","419","019"],callingCodes:["596"]},geometry:{type:"MultiPolygon",coordinates:[[[[-60.5958,14.23076],[-61.26561,14.25664],[-61.51867,14.96709],[-60.69955,15.22234],[-60.5958,14.23076]]]]}},{type:"Feature",properties:{iso1A2:"CV",iso1A3:"CPV",iso1N3:"132",wikidata:"Q1011",nameEn:"Cape Verde",groups:["011","202","002"],callingCodes:["238"]},geometry:{type:"MultiPolygon",coordinates:[[[[-28.81604,14.57305],[-23.37101,19.134],[-20.39702,14.12816],[-28.81604,14.57305]]]]}},{type:"Feature",properties:{iso1A2:"MR",iso1A3:"MRT",iso1N3:"478",wikidata:"Q1025",nameEn:"Mauritania",groups:["011","202","002"],callingCodes:["222"]},geometry:{type:"MultiPolygon",coordinates:[[[[-5.60725,16.49919],[-5.33435,16.33354],[-5.50165,15.50061],[-9.32979,15.50032],[-9.31106,15.69412],[-9.33314,15.7044],[-9.44673,15.60553],[-9.40447,15.4396],[-10.71721,15.4223],[-10.90932,15.11001],[-11.43483,15.62339],[-11.70705,15.51558],[-11.94903,14.76143],[-12.23936,14.76324],[-13.11029,15.52116],[-13.43135,16.09022],[-13.80075,16.13961],[-14.32144,16.61495],[-15.00557,16.64997],[-15.6509,16.50315],[-16.27016,16.51565],[-16.4429,16.20605],[-16.44814,16.09753],[-16.48967,16.0496],[-16.50854,16.09032],[-17.15288,16.07139],[-17.0471,20.76408],[-17.0695,20.85742],[-17.06781,20.92697],[-17.0396,20.9961],[-17.0357,21.05368],[-16.99806,21.12142],[-16.95474,21.33997],[-13.01525,21.33343],[-13.08438,22.53866],[-13.15313,22.75649],[-13.10753,22.89493],[-13.00412,23.02297],[-12.5741,23.28975],[-12.36213,23.3187],[-12.14969,23.41935],[-12.00251,23.4538],[-12.0002,25.9986],[-8.66721,25.99918],[-8.66674,27.31569],[-4.83423,24.99935],[-6.57191,25.0002],[-5.60725,16.49919]]]]}},{type:"Feature",properties:{iso1A2:"CX",iso1A3:"CXR",iso1N3:"162",wikidata:"Q31063",nameEn:"Christmas Island",country:"AU",groups:["053","009"],driveSide:"left",callingCodes:["61"]},geometry:{type:"MultiPolygon",coordinates:[[[[105.66835,-9.31927],[106.66176,-11.14349],[104.67494,-11.2566],[105.66835,-9.31927]]]]}},{type:"Feature",properties:{iso1A2:"MS",iso1A3:"MSR",iso1N3:"500",wikidata:"Q13353",nameEn:"Montserrat",country:"GB",groups:["029","003","419","019"],driveSide:"left",callingCodes:["1 664"]},geometry:{type:"MultiPolygon",coordinates:[[[[-61.83929,16.66647],[-62.17275,16.35721],[-62.52079,16.69392],[-62.14123,17.02632],[-61.83929,16.66647]]]]}},{type:"Feature",properties:{iso1A2:"CZ",iso1A3:"CZE",iso1N3:"203",wikidata:"Q213",nameEn:"Czechia",groups:["EU","151","150"],callingCodes:["420"]},geometry:{type:"MultiPolygon",coordinates:[[[[14.82803,50.86966],[14.99852,50.86817],[15.01088,50.97984],[14.96419,50.99108],[15.02433,51.0242],[15.03895,51.0123],[15.06218,51.02269],[15.10152,51.01095],[15.11937,50.99021],[15.16744,51.01959],[15.1743,50.9833],[15.2361,50.99886],[15.27043,50.97724],[15.2773,50.8907],[15.36656,50.83956],[15.3803,50.77187],[15.43798,50.80833],[15.73186,50.73885],[15.81683,50.75666],[15.87331,50.67188],[15.97219,50.69799],[16.0175,50.63009],[15.98317,50.61528],[16.02437,50.60046],[16.10265,50.66405],[16.20839,50.63096],[16.23174,50.67101],[16.33611,50.66579],[16.44597,50.58041],[16.34572,50.49575],[16.31413,50.50274],[16.19526,50.43291],[16.21585,50.40627],[16.22821,50.41054],[16.28118,50.36891],[16.30289,50.38292],[16.36495,50.37679],[16.3622,50.34875],[16.39379,50.3207],[16.42674,50.32509],[16.56407,50.21009],[16.55446,50.16613],[16.63137,50.1142],[16.7014,50.09659],[16.8456,50.20834],[16.98018,50.24172],[17.00353,50.21449],[17.02825,50.23118],[16.99803,50.25753],[17.02138,50.27772],[16.99803,50.30316],[16.94448,50.31281],[16.90877,50.38642],[16.85933,50.41093],[16.89229,50.45117],[17.1224,50.39494],[17.14498,50.38117],[17.19579,50.38817],[17.19991,50.3654],[17.27681,50.32246],[17.34273,50.32947],[17.34548,50.2628],[17.3702,50.28123],[17.58889,50.27837],[17.67764,50.28977],[17.69292,50.32859],[17.74648,50.29966],[17.72176,50.25665],[17.76296,50.23382],[17.70528,50.18812],[17.59404,50.16437],[17.66683,50.10275],[17.6888,50.12037],[17.7506,50.07896],[17.77669,50.02253],[17.86886,49.97452],[18.00191,50.01723],[18.04585,50.01194],[18.04585,50.03311],[18.00396,50.04954],[18.03212,50.06574],[18.07898,50.04535],[18.10628,50.00223],[18.20241,49.99958],[18.21752,49.97309],[18.27107,49.96779],[18.27794,49.93863],[18.31914,49.91565],[18.33278,49.92415],[18.33562,49.94747],[18.41604,49.93498],[18.53423,49.89906],[18.54495,49.9079],[18.54299,49.92537],[18.57697,49.91565],[18.57045,49.87849],[18.60341,49.86256],[18.57183,49.83334],[18.61278,49.7618],[18.61368,49.75426],[18.62645,49.75002],[18.62943,49.74603],[18.62676,49.71983],[18.69817,49.70473],[18.72838,49.68163],[18.80479,49.6815],[18.84786,49.5446],[18.84521,49.51672],[18.74761,49.492],[18.67757,49.50895],[18.6144,49.49824],[18.57183,49.51162],[18.53063,49.49022],[18.54848,49.47059],[18.44686,49.39467],[18.4084,49.40003],[18.4139,49.36517],[18.36446,49.3267],[18.18456,49.28909],[18.15022,49.24518],[18.1104,49.08624],[18.06885,49.03157],[17.91814,49.01784],[17.87831,48.92679],[17.77944,48.92318],[17.73126,48.87885],[17.7094,48.86721],[17.5295,48.81117],[17.45671,48.85004],[17.3853,48.80936],[17.29054,48.85546],[17.19355,48.87602],[17.11202,48.82925],[17.00215,48.70887],[16.93955,48.60371],[16.90354,48.71541],[16.79779,48.70998],[16.71883,48.73806],[16.68518,48.7281],[16.67008,48.77699],[16.46134,48.80865],[16.40915,48.74576],[16.37345,48.729],[16.06034,48.75436],[15.84404,48.86921],[15.78087,48.87644],[15.75341,48.8516],[15.6921,48.85973],[15.61622,48.89541],[15.51357,48.91549],[15.48027,48.94481],[15.34823,48.98444],[15.28305,48.98831],[15.26177,48.95766],[15.16358,48.94278],[15.15534,48.99056],[14.99878,49.01444],[14.97612,48.96983],[14.98917,48.90082],[14.95072,48.79101],[14.98032,48.77959],[14.9782,48.7766],[14.98112,48.77524],[14.9758,48.76857],[14.95641,48.75915],[14.94773,48.76268],[14.81545,48.7874],[14.80821,48.77711],[14.80584,48.73489],[14.72756,48.69502],[14.71794,48.59794],[14.66762,48.58215],[14.60808,48.62881],[14.56139,48.60429],[14.4587,48.64695],[14.43076,48.58855],[14.33909,48.55852],[14.20691,48.5898],[14.09104,48.5943],[14.01482,48.63788],[14.06151,48.66873],[13.84023,48.76988],[13.8096,48.77877],[13.78977,48.83319],[13.76994,48.83537],[13.73854,48.88538],[13.67739,48.87886],[13.61624,48.9462],[13.58319,48.96899],[13.50552,48.97441],[13.50221,48.93752],[13.40802,48.98851],[13.39479,49.04812],[13.28242,49.1228],[13.23689,49.11412],[13.20405,49.12303],[13.17019,49.14339],[13.17665,49.16713],[13.05883,49.26259],[13.02957,49.27399],[13.03618,49.30417],[12.94859,49.34079],[12.88249,49.35479],[12.88414,49.33541],[12.78168,49.34618],[12.75854,49.3989],[12.71227,49.42363],[12.669,49.42935],[12.64121,49.47628],[12.64782,49.52565],[12.60155,49.52887],[12.56188,49.6146],[12.53544,49.61888],[12.52553,49.68415],[12.4462,49.70233],[12.40489,49.76321],[12.46603,49.78882],[12.48256,49.83575],[12.55197,49.92094],[12.47264,49.94222],[12.49908,49.97305],[12.30798,50.05719],[12.26111,50.06331],[12.27433,50.0771],[12.23709,50.10213],[12.2073,50.10315],[12.1917,50.13434],[12.21484,50.16399],[12.19335,50.19997],[12.09287,50.25032],[12.13716,50.27396],[12.10907,50.32041],[12.18013,50.32146],[12.20823,50.2729],[12.25119,50.27079],[12.26953,50.25189],[12.24791,50.25525],[12.23943,50.24594],[12.28755,50.22429],[12.28063,50.19544],[12.29232,50.17524],[12.32596,50.17146],[12.33847,50.19432],[12.32445,50.20442],[12.33263,50.24367],[12.35425,50.23993],[12.36594,50.28289],[12.40158,50.29521],[12.39924,50.32302],[12.43371,50.32506],[12.43722,50.33774],[12.46643,50.35527],[12.48256,50.34784],[12.49214,50.35228],[12.48747,50.37278],[12.51356,50.39694],[12.67261,50.41949],[12.70731,50.39948],[12.73044,50.42268],[12.73476,50.43237],[12.82465,50.45738],[12.94058,50.40944],[12.98433,50.42016],[13.02147,50.44763],[13.02038,50.4734],[13.0312,50.50944],[13.08301,50.50132],[13.13424,50.51709],[13.19043,50.50237],[13.25158,50.59268],[13.29454,50.57904],[13.32594,50.58009],[13.32264,50.60317],[13.37805,50.627],[13.37485,50.64931],[13.42189,50.61243],[13.46413,50.60102],[13.49742,50.63133],[13.5226,50.64721],[13.53748,50.67654],[13.52474,50.70394],[13.65977,50.73096],[13.70204,50.71771],[13.76316,50.73487],[13.82942,50.7251],[13.89444,50.74142],[13.89113,50.78533],[13.98864,50.8177],[14.02982,50.80662],[14.22331,50.86049],[14.24314,50.88761],[14.27123,50.89386],[14.30098,50.88448],[14.38691,50.89907],[14.39848,50.93866],[14.31422,50.95243],[14.30251,50.96606],[14.32793,50.97379],[14.32353,50.98556],[14.28776,50.97718],[14.25665,50.98935],[14.30098,51.05515],[14.41335,51.02086],[14.45827,51.03712],[14.49202,51.02286],[14.49154,51.04382],[14.49991,51.04692],[14.50809,51.0427],[14.49873,51.02242],[14.53321,51.01679],[14.53438,51.00374],[14.56432,51.01008],[14.58215,50.99306],[14.59908,50.98685],[14.59702,50.96148],[14.56374,50.922],[14.58024,50.91443],[14.64802,50.93241],[14.65259,50.90513],[14.63434,50.8883],[14.61993,50.86049],[14.70661,50.84096],[14.79139,50.81438],[14.82803,50.86966]]]]}},{type:"Feature",properties:{iso1A2:"MT",iso1A3:"MLT",iso1N3:"470",wikidata:"Q233",nameEn:"Malta",groups:["EU","039","150"],driveSide:"left",callingCodes:["356"]},geometry:{type:"MultiPolygon",coordinates:[[[[15.70991,35.79901],[13.27636,35.20764],[14.07544,36.41525],[15.70991,35.79901]]]]}},{type:"Feature",properties:{iso1A2:"DG",iso1A3:"DGA",wikidata:"Q184851",nameEn:"Diego Garcia",country:"GB",groups:["IO","014","202","002"],isoStatus:"excRes",callingCodes:["246"]},geometry:{type:"MultiPolygon",coordinates:[[[[73.14823,-7.76302],[73.09982,-6.07324],[71.43792,-7.73904],[73.14823,-7.76302]]]]}},{type:"Feature",properties:{iso1A2:"MU",iso1A3:"MUS",iso1N3:"480",wikidata:"Q1027",nameEn:"Mauritius",groups:["014","202","002"],driveSide:"left",callingCodes:["230"]},geometry:{type:"MultiPolygon",coordinates:[[[[56.73473,-21.9174],[56.09755,-9.55401],[63.47388,-9.1938],[64.11105,-21.5783],[56.73473,-21.9174]]]]}},{type:"Feature",properties:{iso1A2:"DK",iso1A3:"DNK",iso1N3:"208",wikidata:"Q35",nameEn:"Denmark",groups:["EU","154","150"],callingCodes:["45"]},geometry:{type:"MultiPolygon",coordinates:[[[[12.16597,56.60205],[12.07466,56.29488],[12.65312,56.04345],[12.6372,55.91371],[12.88472,55.63369],[12.60345,55.42675],[12.84405,55.13257],[14.28399,55.1553],[14.89259,55.5623],[15.79951,55.54655],[15.36991,54.73263],[13.93395,54.84044],[12.85844,54.82438],[11.90309,54.38543],[11.00303,54.63689],[10.31111,54.65968],[10.16755,54.73883],[9.89314,54.84171],[9.73563,54.8247],[9.61187,54.85548],[9.62734,54.88057],[9.58937,54.88785],[9.4659,54.83131],[9.43155,54.82586],[9.41213,54.84254],[9.38532,54.83968],[9.36496,54.81749],[9.33849,54.80233],[9.32771,54.80602],[9.2474,54.8112],[9.23445,54.83432],[9.24631,54.84726],[9.20571,54.85841],[9.14275,54.87421],[9.04629,54.87249],[8.92795,54.90452],[8.81178,54.90518],[8.76387,54.8948],[8.63979,54.91069],[8.55769,54.91837],[8.45719,55.06747],[8.02459,55.09613],[7.28637,57.35913],[10.40861,58.38489],[12.16597,56.60205]]]]}},{type:"Feature",properties:{iso1A2:"MV",iso1A3:"MDV",iso1N3:"462",wikidata:"Q826",nameEn:"Maldives",groups:["034","142"],driveSide:"left",callingCodes:["960"]},geometry:{type:"MultiPolygon",coordinates:[[[[71.27292,7.36038],[74.6203,7.39289],[73.37814,-3.88401],[71.27292,7.36038]]]]}},{type:"Feature",properties:{iso1A2:"DO",iso1A3:"DOM",iso1N3:"214",wikidata:"Q786",nameEn:"Dominican Republic",groups:["029","003","419","019"],callingCodes:["1 809","1 829","1 849"]},geometry:{type:"MultiPolygon",coordinates:[[[[-67.87844,21.7938],[-68.39466,16.14167],[-72.29523,17.48026],[-71.75671,18.03456],[-71.73783,18.07177],[-71.74994,18.11115],[-71.75465,18.14405],[-71.78271,18.18302],[-71.69952,18.34101],[-71.90875,18.45821],[-71.88102,18.50125],[-72.00201,18.62312],[-71.95412,18.64939],[-71.82556,18.62551],[-71.71885,18.78423],[-71.72624,18.87802],[-71.77766,18.95007],[-71.88102,18.95007],[-71.74088,19.0437],[-71.71088,19.08353],[-71.69938,19.10916],[-71.65337,19.11759],[-71.62642,19.21212],[-71.73229,19.26686],[-71.77766,19.33823],[-71.69448,19.37866],[-71.6802,19.45008],[-71.71268,19.53374],[-71.71449,19.55364],[-71.7429,19.58445],[-71.75865,19.70231],[-71.77419,19.73128],[-72.38946,20.27111],[-67.87844,21.7938]]]]}},{type:"Feature",properties:{iso1A2:"MW",iso1A3:"MWI",iso1N3:"454",wikidata:"Q1020",nameEn:"Malawi",groups:["014","202","002"],driveSide:"left",callingCodes:["265"]},geometry:{type:"MultiPolygon",coordinates:[[[[33.48052,-9.62442],[33.76677,-9.58516],[33.93298,-9.71647],[33.9638,-9.62206],[33.95829,-9.54066],[34.03865,-9.49398],[34.54499,-10.0678],[34.51911,-10.12279],[34.57581,-10.56271],[34.65946,-10.6828],[34.67047,-10.93796],[34.61161,-11.01611],[34.63305,-11.11731],[34.79375,-11.32245],[34.91153,-11.39799],[34.96296,-11.57354],[34.64241,-11.57499],[34.57917,-11.87849],[34.82903,-12.04837],[34.70739,-12.15652],[34.46088,-12.0174],[34.37831,-12.17408],[34.60253,-13.48487],[34.86229,-13.48958],[35.47989,-14.15594],[35.5299,-14.27714],[35.86945,-14.67481],[35.87212,-14.89478],[35.91812,-14.89514],[35.78799,-15.17428],[35.85303,-15.41913],[35.80487,-16.03907],[35.70107,-16.10147],[35.52365,-16.15414],[35.43355,-16.11371],[35.30157,-16.2211],[35.25828,-16.4792],[35.14235,-16.56812],[35.27219,-16.69402],[35.30929,-16.82871],[35.27065,-16.93817],[35.3062,-17.1244],[35.0923,-17.13235],[35.04805,-17.00027],[35.17017,-16.93521],[35.13771,-16.81687],[35.04805,-16.83167],[34.40344,-16.20923],[34.43126,-16.04737],[34.25195,-15.90321],[34.44981,-15.60864],[34.43126,-15.44778],[34.57503,-15.30619],[34.61522,-14.99583],[34.567,-14.77345],[34.54503,-14.74672],[34.52057,-14.68263],[34.53516,-14.67782],[34.55112,-14.64494],[34.53962,-14.59776],[34.52366,-14.5667],[34.49636,-14.55091],[34.48932,-14.53646],[34.47628,-14.53363],[34.45053,-14.49873],[34.44641,-14.47746],[34.4192,-14.43191],[34.39277,-14.39467],[34.35843,-14.38652],[34.34453,-14.3985],[34.22355,-14.43607],[34.18733,-14.43823],[34.08588,-14.48893],[33.92898,-14.47929],[33.88503,-14.51652],[33.7247,-14.4989],[33.66677,-14.61306],[33.24249,-14.00019],[33.16749,-13.93992],[33.07568,-13.98447],[33.02977,-14.05022],[32.99042,-13.95689],[32.88985,-13.82956],[32.79015,-13.80755],[32.76962,-13.77224],[32.84528,-13.71576],[32.7828,-13.64805],[32.68654,-13.64268],[32.66468,-13.60019],[32.68436,-13.55769],[32.73683,-13.57682],[32.84176,-13.52794],[32.86113,-13.47292],[33.0078,-13.19492],[32.98289,-13.12671],[33.02181,-12.88707],[32.96733,-12.88251],[32.94397,-12.76868],[33.05917,-12.59554],[33.18837,-12.61377],[33.28177,-12.54692],[33.37517,-12.54085],[33.54485,-12.35996],[33.47636,-12.32498],[33.3705,-12.34931],[33.25998,-12.14242],[33.33937,-11.91252],[33.32692,-11.59248],[33.24252,-11.59302],[33.23663,-11.40637],[33.29267,-11.43536],[33.29267,-11.3789],[33.39697,-11.15296],[33.25998,-10.88862],[33.28022,-10.84428],[33.47636,-10.78465],[33.70675,-10.56896],[33.54797,-10.36077],[33.53863,-10.20148],[33.31297,-10.05133],[33.37902,-9.9104],[33.36581,-9.81063],[33.31517,-9.82364],[33.2095,-9.61099],[33.12144,-9.58929],[33.10163,-9.66525],[33.05485,-9.61316],[33.00256,-9.63053],[33.00476,-9.5133],[32.95389,-9.40138],[32.99397,-9.36712],[33.14925,-9.49322],[33.31581,-9.48554],[33.48052,-9.62442]]]]}},{type:"Feature",properties:{iso1A2:"EA",wikidata:"Q28868874",nameEn:"Ceuta, Melilla",country:"ES",groups:["015","002"],isoStatus:"excRes",callingCodes:["34"]},geometry:{type:"MultiPolygon",coordinates:[[[[-5.38491,35.92591],[-5.27635,35.91222],[-5.27056,35.88794],[-5.34379,35.8711],[-5.35844,35.87375],[-5.37338,35.88417],[-5.38491,35.92591]]],[[[-2.92224,35.3401],[-2.92181,35.28599],[-2.92674,35.27313],[-2.93893,35.26737],[-2.95065,35.26576],[-2.95431,35.2728],[-2.96516,35.27967],[-2.96826,35.28296],[-2.96507,35.28801],[-2.97035,35.28852],[-2.96978,35.29459],[-2.96648,35.30475],[-2.96038,35.31609],[-2.92224,35.3401]]]]}},{type:"Feature",properties:{iso1A2:"MX",iso1A3:"MEX",iso1N3:"484",wikidata:"Q96",nameEn:"Mexico",groups:["013","003","419","019"],callingCodes:["52"]},geometry:{type:"MultiPolygon",coordinates:[[[[-117.1243,32.53427],[-115.88053,32.63624],[-114.71871,32.71894],[-114.76736,32.64094],[-114.80584,32.62028],[-114.81141,32.55543],[-114.79524,32.55731],[-114.82011,32.49609],[-112.34553,31.7357],[-111.07523,31.33232],[-109.05235,31.3333],[-108.20979,31.33316],[-108.20899,31.78534],[-106.529,31.784],[-106.52266,31.77509],[-106.51251,31.76922],[-106.50962,31.76155],[-106.50111,31.75714],[-106.48815,31.74769],[-106.47298,31.75054],[-106.46726,31.75998],[-106.45244,31.76523],[-106.43419,31.75478],[-106.41773,31.75196],[-106.38003,31.73151],[-106.3718,31.71165],[-106.34864,31.69663],[-106.33419,31.66303],[-106.30305,31.62154],[-106.28084,31.56173],[-106.24612,31.54193],[-106.23711,31.51262],[-106.20346,31.46305],[-106.09025,31.40569],[-106.00363,31.39181],[-104.77674,30.4236],[-104.5171,29.64671],[-104.3969,29.57105],[-104.39363,29.55396],[-104.37752,29.54255],[-103.15787,28.93865],[-102.60596,29.8192],[-101.47277,29.7744],[-101.05686,29.44738],[-101.01128,29.36947],[-100.96725,29.3477],[-100.94579,29.34523],[-100.94056,29.33371],[-100.87982,29.296],[-100.79696,29.24688],[-100.67294,29.09744],[-100.63689,28.90812],[-100.59809,28.88197],[-100.52313,28.75598],[-100.5075,28.74066],[-100.51222,28.70679],[-100.50029,28.66117],[-99.55409,27.61314],[-99.51478,27.55836],[-99.52955,27.49747],[-99.50208,27.50021],[-99.48045,27.49016],[-99.482,27.47128],[-99.49744,27.43746],[-99.53573,27.30926],[-99.08477,26.39849],[-99.03053,26.41249],[-99.00546,26.3925],[-98.35126,26.15129],[-98.30491,26.10475],[-98.27075,26.09457],[-98.24603,26.07191],[-97.97017,26.05232],[-97.95155,26.0625],[-97.66511,26.01708],[-97.52025,25.88518],[-97.49828,25.89877],[-97.45669,25.86874],[-97.42511,25.83969],[-97.37332,25.83854],[-97.35946,25.92189],[-97.13927,25.96583],[-96.92418,25.97377],[-85.9092,21.8218],[-86.92368,17.61462],[-87.84815,18.18511],[-87.85693,18.18266],[-87.86657,18.19971],[-87.87604,18.18313],[-87.90671,18.15213],[-88.03165,18.16657],[-88.03238,18.41778],[-88.26593,18.47617],[-88.29909,18.47591],[-88.3268,18.49048],[-88.48242,18.49164],[-88.71505,18.0707],[-88.8716,17.89535],[-89.03839,18.0067],[-89.15105,17.95104],[-89.14985,17.81563],[-90.98678,17.81655],[-90.99199,17.25192],[-91.43809,17.25373],[-91.04436,16.92175],[-90.69064,16.70697],[-90.61212,16.49832],[-90.40499,16.40524],[-90.44567,16.07573],[-91.73182,16.07371],[-92.20983,15.26077],[-92.0621,15.07406],[-92.1454,14.98143],[-92.1423,14.88647],[-92.18161,14.84147],[-92.1454,14.6804],[-92.2261,14.53423],[-92.37213,14.39277],[-120.12904,18.41089],[-118.48109,32.5991],[-117.1243,32.53427]]]]}},{type:"Feature",properties:{iso1A2:"EE",iso1A3:"EST",iso1N3:"233",wikidata:"Q191",nameEn:"Estonia",aliases:["EW"],groups:["EU","154","150"],callingCodes:["372"]},geometry:{type:"MultiPolygon",coordinates:[[[[26.32936,60.00121],[26.90044,59.63819],[27.85643,59.58538],[28.04187,59.47017],[28.19061,59.39962],[28.21137,59.38058],[28.20537,59.36491],[28.19284,59.35791],[28.14215,59.28934],[28.00689,59.28351],[27.90911,59.24353],[27.87978,59.18097],[27.80482,59.1116],[27.74429,58.98351],[27.36366,58.78381],[27.55489,58.39525],[27.48541,58.22615],[27.62393,58.09462],[27.67282,57.92627],[27.81841,57.89244],[27.78526,57.83963],[27.56689,57.83356],[27.50171,57.78842],[27.52615,57.72843],[27.3746,57.66834],[27.40393,57.62125],[27.31919,57.57672],[27.34698,57.52242],[26.90364,57.62823],[26.54675,57.51813],[26.46527,57.56885],[26.29253,57.59244],[26.1866,57.6849],[26.2029,57.7206],[26.08098,57.76619],[26.0543,57.76105],[26.03332,57.7718],[26.02415,57.76865],[26.02069,57.77169],[26.0266,57.77441],[26.027,57.78158],[26.02456,57.78342],[26.0324,57.79037],[26.05949,57.84744],[25.73499,57.90193],[25.29581,58.08288],[25.28237,57.98539],[25.19484,58.0831],[24.3579,57.87471],[24.26221,57.91787],[23.20055,57.56697],[22.80496,57.87798],[19.84909,57.57876],[20.5104,59.15546],[26.32936,60.00121]]]]}},{type:"Feature",properties:{iso1A2:"MY",iso1A3:"MYS",iso1N3:"458",wikidata:"Q833",nameEn:"Malaysia",groups:["035","142"],driveSide:"left",callingCodes:["60"]},geometry:{type:"MultiPolygon",coordinates:[[[[114.08532,4.64632],[114.07448,4.58441],[114.15813,4.57],[114.26876,4.49878],[114.32176,4.34942],[114.32176,4.2552],[114.4416,4.27588],[114.49922,4.13108],[114.64211,4.00694],[114.78539,4.12205],[114.88039,4.4257],[114.83189,4.42387],[114.77303,4.72871],[114.8266,4.75062],[114.88841,4.81905],[114.96982,4.81146],[114.99417,4.88201],[115.05038,4.90275],[115.02955,4.82087],[115.02278,4.74137],[115.04064,4.63706],[115.07737,4.53418],[115.09978,4.39123],[115.31275,4.30806],[115.36346,4.33563],[115.2851,4.42295],[115.27819,4.63661],[115.20737,4.8256],[115.15092,4.87604],[115.16236,5.01011],[115.02521,5.35005],[116.79524,7.43869],[117.17735,7.52841],[117.43832,7.3895],[117.89159,6.25755],[119.34756,5.53889],[119.44841,5.09568],[118.75416,4.59798],[118.8663,4.44172],[118.07935,4.15511],[117.89538,4.16637],[117.67641,4.16535],[117.47313,4.18857],[117.25801,4.35108],[115.90217,4.37708],[115.58276,3.93499],[115.53713,3.14776],[115.11343,2.82879],[115.1721,2.49671],[114.80706,2.21665],[114.80706,1.92351],[114.57892,1.5],[114.03788,1.44787],[113.64677,1.23933],[113.01448,1.42832],[113.021,1.57819],[112.48648,1.56516],[112.2127,1.44135],[112.15679,1.17004],[111.94553,1.12016],[111.82846,0.99349],[111.55434,0.97864],[111.22979,1.08326],[110.62374,0.873],[110.49182,0.88088],[110.35354,0.98869],[109.66397,1.60425],[109.66397,1.79972],[109.57923,1.80624],[109.53794,1.91771],[109.62558,1.99182],[109.64506,2.08014],[109.71058,2.32059],[108.10426,5.42408],[105.01437,3.24936],[104.56723,1.44271],[104.34728,1.33529],[104.12282,1.27714],[104.08072,1.35998],[104.09162,1.39694],[104.08871,1.42015],[104.07348,1.43322],[104.04622,1.44691],[104.02277,1.4438],[104.00131,1.42405],[103.93384,1.42926],[103.89565,1.42841],[103.86383,1.46288],[103.81181,1.47953],[103.76395,1.45183],[103.74161,1.4502],[103.7219,1.46108],[103.67468,1.43166],[103.62738,1.35255],[103.56591,1.19719],[103.03657,1.30383],[99.75778,3.86466],[99.31854,5.99868],[99.50117,6.44501],[99.91873,6.50233],[100.0756,6.4045],[100.12,6.42105],[100.19511,6.72559],[100.29651,6.68439],[100.30828,6.66462],[100.31618,6.66781],[100.31884,6.66423],[100.32671,6.66526],[100.32607,6.65933],[100.31929,6.65413],[100.35413,6.54932],[100.41152,6.52299],[100.41791,6.5189],[100.42351,6.51762],[100.43027,6.52389],[100.66986,6.45086],[100.74361,6.50811],[100.74822,6.46231],[100.81045,6.45086],[100.85884,6.24929],[101.10313,6.25617],[101.12618,6.19431],[101.06165,6.14161],[101.12388,6.11411],[101.087,5.9193],[101.02708,5.91013],[100.98815,5.79464],[101.14062,5.61613],[101.25755,5.71065],[101.25524,5.78633],[101.58019,5.93534],[101.69773,5.75881],[101.75074,5.79091],[101.80144,5.74505],[101.89188,5.8386],[101.91776,5.84269],[101.92819,5.85511],[101.94712,5.98421],[101.9714,6.00575],[101.97114,6.01992],[101.99209,6.04075],[102.01835,6.05407],[102.09182,6.14161],[102.07732,6.193],[102.08127,6.22679],[102.09086,6.23546],[102.46318,7.22462],[104.81582,8.03101],[109.55486,8.10026],[114.08532,4.64632]]]]}},{type:"Feature",properties:{iso1A2:"EH",iso1A3:"ESH",iso1N3:"732",wikidata:"Q6250",nameEn:"Western Sahara",groups:["015","002"],callingCodes:["212"]},geometry:{type:"MultiPolygon",coordinates:[[[[-8.66879,27.6666],[-8.66674,27.31569],[-8.66721,25.99918],[-12.0002,25.9986],[-12.00251,23.4538],[-12.14969,23.41935],[-12.36213,23.3187],[-12.5741,23.28975],[-13.00412,23.02297],[-13.10753,22.89493],[-13.15313,22.75649],[-13.08438,22.53866],[-13.01525,21.33343],[-16.95474,21.33997],[-16.99806,21.12142],[-17.0357,21.05368],[-17.0396,20.9961],[-17.06781,20.92697],[-17.0695,20.85742],[-17.0471,20.76408],[-17.35589,20.80492],[-17.21511,21.34226],[-17.02707,21.34022],[-16.9978,21.36239],[-16.44269,21.39745],[-14.78487,21.36587],[-14.47329,21.63839],[-14.48112,22.00886],[-14.1291,22.41636],[-14.10361,22.75501],[-13.75627,23.77231],[-13.00628,24.01923],[-12.92147,24.39502],[-12.12281,25.13682],[-12.06001,26.04442],[-11.62052,26.05229],[-11.38635,26.611],[-11.23622,26.72023],[-11.35695,26.8505],[-10.68417,26.90984],[-9.81998,26.71379],[-9.56957,26.90042],[-9.08698,26.98639],[-8.71787,26.9898],[-8.77527,27.66663],[-8.66879,27.6666]]]]}},{type:"Feature",properties:{iso1A2:"MZ",iso1A3:"MOZ",iso1N3:"508",wikidata:"Q1029",nameEn:"Mozambique",groups:["014","202","002"],driveSide:"left",callingCodes:["258"]},geometry:{type:"MultiPolygon",coordinates:[[[[40.74206,-10.25691],[42.99868,-12.65261],[34.51034,-26.91792],[32.35222,-26.86027],[32.29584,-26.852],[32.22302,-26.84136],[32.19409,-26.84032],[32.13315,-26.84345],[32.13409,-26.5317],[32.07352,-26.40185],[32.10435,-26.15656],[32.08599,-26.00978],[32.00916,-25.999],[31.974,-25.95387],[31.92649,-25.84216],[32.00631,-25.65044],[31.97875,-25.46356],[32.01676,-25.38117],[32.03196,-25.10785],[31.9835,-24.29983],[31.90368,-24.18892],[31.87707,-23.95293],[31.77445,-23.90082],[31.70223,-23.72695],[31.67942,-23.60858],[31.56539,-23.47268],[31.55779,-23.176],[31.30611,-22.422],[31.38336,-22.36919],[32.41234,-21.31246],[32.48236,-21.32873],[32.37115,-21.133],[32.51644,-20.91929],[32.48122,-20.63319],[32.55167,-20.56312],[32.66174,-20.56106],[32.85987,-20.27841],[32.85987,-20.16686],[32.93032,-20.03868],[33.01178,-20.02007],[33.06461,-19.77787],[32.95013,-19.67219],[32.84666,-19.68462],[32.84446,-19.48343],[32.78282,-19.47513],[32.77966,-19.36098],[32.85107,-19.29238],[32.87088,-19.09279],[32.84006,-19.0262],[32.72118,-19.02204],[32.69917,-18.94293],[32.73439,-18.92628],[32.70137,-18.84712],[32.82465,-18.77419],[32.9017,-18.7992],[32.95013,-18.69079],[32.88629,-18.58023],[32.88629,-18.51344],[33.02278,-18.4696],[33.03159,-18.35054],[32.94133,-17.99705],[33.0492,-17.60298],[32.98536,-17.55891],[32.96554,-17.48964],[33.0426,-17.3468],[33.00517,-17.30477],[32.96554,-17.11971],[32.84113,-16.92259],[32.91051,-16.89446],[32.97655,-16.70689],[32.78943,-16.70267],[32.69917,-16.66893],[32.71017,-16.59932],[32.42838,-16.4727],[32.28529,-16.43892],[32.02772,-16.43892],[31.91324,-16.41569],[31.90223,-16.34388],[31.67988,-16.19595],[31.42451,-16.15154],[31.30563,-16.01193],[31.13171,-15.98019],[30.97761,-16.05848],[30.91597,-15.99924],[30.42568,-15.9962],[30.41902,-15.62269],[30.22098,-14.99447],[33.24249,-14.00019],[33.66677,-14.61306],[33.7247,-14.4989],[33.88503,-14.51652],[33.92898,-14.47929],[34.08588,-14.48893],[34.18733,-14.43823],[34.22355,-14.43607],[34.34453,-14.3985],[34.35843,-14.38652],[34.39277,-14.39467],[34.4192,-14.43191],[34.44641,-14.47746],[34.45053,-14.49873],[34.47628,-14.53363],[34.48932,-14.53646],[34.49636,-14.55091],[34.52366,-14.5667],[34.53962,-14.59776],[34.55112,-14.64494],[34.53516,-14.67782],[34.52057,-14.68263],[34.54503,-14.74672],[34.567,-14.77345],[34.61522,-14.99583],[34.57503,-15.30619],[34.43126,-15.44778],[34.44981,-15.60864],[34.25195,-15.90321],[34.43126,-16.04737],[34.40344,-16.20923],[35.04805,-16.83167],[35.13771,-16.81687],[35.17017,-16.93521],[35.04805,-17.00027],[35.0923,-17.13235],[35.3062,-17.1244],[35.27065,-16.93817],[35.30929,-16.82871],[35.27219,-16.69402],[35.14235,-16.56812],[35.25828,-16.4792],[35.30157,-16.2211],[35.43355,-16.11371],[35.52365,-16.15414],[35.70107,-16.10147],[35.80487,-16.03907],[35.85303,-15.41913],[35.78799,-15.17428],[35.91812,-14.89514],[35.87212,-14.89478],[35.86945,-14.67481],[35.5299,-14.27714],[35.47989,-14.15594],[34.86229,-13.48958],[34.60253,-13.48487],[34.37831,-12.17408],[34.46088,-12.0174],[34.70739,-12.15652],[34.82903,-12.04837],[34.57917,-11.87849],[34.64241,-11.57499],[34.96296,-11.57354],[35.63599,-11.55927],[35.82767,-11.41081],[36.19094,-11.57593],[36.19094,-11.70008],[36.62068,-11.72884],[36.80309,-11.56836],[37.3936,-11.68949],[37.76614,-11.53352],[37.8388,-11.3123],[37.93618,-11.26228],[38.21598,-11.27289],[38.47258,-11.4199],[38.88996,-11.16978],[39.24395,-11.17433],[39.58249,-10.96043],[40.00295,-10.80255],[40.44265,-10.4618],[40.74206,-10.25691]]]]}},{type:"Feature",properties:{iso1A2:"ES",iso1A3:"ESP",iso1N3:"724",wikidata:"Q29",nameEn:"Spain",groups:["EU","039","150"],callingCodes:["34"]},geometry:{type:"MultiPolygon",coordinates:[[[[-2.41312,35.17111],[-2.44887,35.17075],[-2.44896,35.18777],[-2.41265,35.1877],[-2.41312,35.17111]]],[[[-3.90602,35.21494],[-3.90288,35.22024],[-3.88617,35.21406],[-3.88926,35.20841],[-3.90602,35.21494]]],[[[-4.30191,35.17419],[-4.29436,35.17149],[-4.30112,35.17058],[-4.30191,35.17419]]],[[[-7.27694,35.93599],[-7.37282,36.96896],[-7.39769,37.16868],[-7.41133,37.20314],[-7.41854,37.23813],[-7.43227,37.25152],[-7.43974,37.38913],[-7.46878,37.47127],[-7.51759,37.56119],[-7.41981,37.75729],[-7.33441,37.81193],[-7.27314,37.90145],[-7.24544,37.98884],[-7.12648,38.00296],[-7.10366,38.04404],[-7.05966,38.01966],[-7.00375,38.01914],[-6.93418,38.21454],[-7.09389,38.17227],[-7.15581,38.27597],[-7.32529,38.44336],[-7.265,38.61674],[-7.26174,38.72107],[-7.03848,38.87221],[-7.051,38.907],[-6.95211,39.0243],[-6.97004,39.07619],[-7.04011,39.11919],[-7.10692,39.10275],[-7.14929,39.11287],[-7.12811,39.17101],[-7.23566,39.20132],[-7.23403,39.27579],[-7.3149,39.34857],[-7.2927,39.45847],[-7.49477,39.58794],[-7.54121,39.66717],[-7.33507,39.64569],[-7.24707,39.66576],[-7.01613,39.66877],[-6.97492,39.81488],[-6.91463,39.86618],[-6.86737,40.01986],[-6.94233,40.10716],[-7.00589,40.12087],[-7.02544,40.18564],[-7.00426,40.23169],[-6.86085,40.26776],[-6.86085,40.2976],[-6.80218,40.33239],[-6.78426,40.36468],[-6.84618,40.42177],[-6.84944,40.46394],[-6.7973,40.51723],[-6.80218,40.55067],[-6.84292,40.56801],[-6.79567,40.65955],[-6.82826,40.74603],[-6.82337,40.84472],[-6.79892,40.84842],[-6.80707,40.88047],[-6.84292,40.89771],[-6.8527,40.93958],[-6.9357,41.02888],[-6.913,41.03922],[-6.88843,41.03027],[-6.84781,41.02692],[-6.80942,41.03629],[-6.79241,41.05397],[-6.75655,41.10187],[-6.77319,41.13049],[-6.69711,41.1858],[-6.68286,41.21641],[-6.65046,41.24725],[-6.55937,41.24417],[-6.38551,41.35274],[-6.38553,41.38655],[-6.3306,41.37677],[-6.26777,41.48796],[-6.19128,41.57638],[-6.29863,41.66432],[-6.44204,41.68258],[-6.49907,41.65823],[-6.54633,41.68623],[-6.56426,41.74219],[-6.51374,41.8758],[-6.56752,41.88429],[-6.5447,41.94371],[-6.58544,41.96674],[-6.61967,41.94008],[-6.75004,41.94129],[-6.76959,41.98734],[-6.81196,41.99097],[-6.82174,41.94493],[-6.94396,41.94403],[-6.95537,41.96553],[-6.98144,41.9728],[-7.01078,41.94977],[-7.07596,41.94977],[-7.08574,41.97401],[-7.14115,41.98855],[-7.18549,41.97515],[-7.18677,41.88793],[-7.32366,41.8406],[-7.37092,41.85031],[-7.42864,41.80589],[-7.42854,41.83262],[-7.44759,41.84451],[-7.45566,41.86488],[-7.49803,41.87095],[-7.52737,41.83939],[-7.62188,41.83089],[-7.58603,41.87944],[-7.65774,41.88308],[-7.69848,41.90977],[-7.84188,41.88065],[-7.88055,41.84571],[-7.88751,41.92553],[-7.90707,41.92432],[-7.92336,41.8758],[-7.9804,41.87337],[-8.01136,41.83453],[-8.0961,41.81024],[-8.16455,41.81753],[-8.16944,41.87944],[-8.19551,41.87459],[-8.2185,41.91237],[-8.16232,41.9828],[-8.08796,42.01398],[-8.08847,42.05767],[-8.11729,42.08537],[-8.18178,42.06436],[-8.19406,42.12141],[-8.18947,42.13853],[-8.1986,42.15402],[-8.22406,42.1328],[-8.24681,42.13993],[-8.2732,42.12396],[-8.29809,42.106],[-8.32161,42.10218],[-8.33912,42.08358],[-8.36353,42.09065],[-8.38323,42.07683],[-8.40143,42.08052],[-8.42512,42.07199],[-8.44123,42.08218],[-8.48185,42.0811],[-8.52837,42.07658],[-8.5252,42.06264],[-8.54563,42.0537],[-8.58086,42.05147],[-8.59493,42.05708],[-8.63791,42.04691],[-8.64626,42.03668],[-8.65832,42.02972],[-8.6681,41.99703],[-8.69071,41.98862],[-8.7478,41.96282],[-8.74606,41.9469],[-8.75712,41.92833],[-8.81794,41.90375],[-8.87157,41.86488],[-9.14112,41.86623],[-10.14298,44.17365],[-1.81005,43.59738],[-1.77289,43.38957],[-1.79319,43.37497],[-1.78332,43.36399],[-1.78714,43.35476],[-1.77068,43.34396],[-1.75334,43.34107],[-1.75079,43.3317],[-1.7397,43.32979],[-1.73074,43.29481],[-1.69407,43.31378],[-1.62481,43.30726],[-1.63052,43.28591],[-1.61341,43.25269],[-1.57674,43.25269],[-1.55963,43.28828],[-1.50992,43.29481],[-1.45289,43.27049],[-1.40942,43.27272],[-1.3758,43.24511],[-1.41562,43.12815],[-1.47555,43.08372],[-1.44067,43.047],[-1.35272,43.02658],[-1.34419,43.09665],[-1.32209,43.1127],[-1.27118,43.11961],[-1.30052,43.09581],[-1.30531,43.06859],[-1.25244,43.04164],[-1.22881,43.05534],[-1.10333,43.0059],[-1.00963,42.99279],[-0.97133,42.96239],[-0.81652,42.95166],[-0.75478,42.96916],[-0.72037,42.92541],[-0.73422,42.91228],[-0.72608,42.89318],[-0.69837,42.87945],[-0.67637,42.88303],[-0.55497,42.77846],[-0.50863,42.82713],[-0.44334,42.79939],[-0.41319,42.80776],[-0.38833,42.80132],[-0.3122,42.84788],[-0.17939,42.78974],[-0.16141,42.79535],[-0.10519,42.72761],[-0.02468,42.68513],[0.17569,42.73424],[0.25336,42.7174],[0.29407,42.67431],[0.36251,42.72282],[0.40214,42.69779],[0.67873,42.69458],[0.65421,42.75872],[0.66121,42.84021],[0.711,42.86372],[0.93089,42.79154],[0.96166,42.80629],[0.98292,42.78754],[1.0804,42.78569],[1.15928,42.71407],[1.35562,42.71944],[1.44197,42.60217],[1.42512,42.58292],[1.44529,42.56722],[1.4234,42.55959],[1.41245,42.53539],[1.44759,42.54431],[1.46661,42.50949],[1.41648,42.48315],[1.43838,42.47848],[1.44529,42.43724],[1.5127,42.42959],[1.55073,42.43299],[1.55937,42.45808],[1.57953,42.44957],[1.58933,42.46275],[1.65674,42.47125],[1.66826,42.50779],[1.70571,42.48867],[1.72515,42.50338],[1.76335,42.48863],[1.83037,42.48395],[1.88853,42.4501],[1.93663,42.45439],[1.94292,42.44316],[1.94061,42.43333],[1.94084,42.43039],[1.9574,42.42401],[1.96482,42.37787],[2.00488,42.35399],[2.06241,42.35906],[2.11621,42.38393],[2.12789,42.41291],[2.16599,42.42314],[2.20578,42.41633],[2.25551,42.43757],[2.38504,42.39977],[2.43299,42.39423],[2.43508,42.37568],[2.48457,42.33933],[2.54382,42.33406],[2.55516,42.35351],[2.57934,42.35808],[2.6747,42.33974],[2.65311,42.38771],[2.72056,42.42298],[2.75497,42.42578],[2.77464,42.41046],[2.84335,42.45724],[2.85675,42.45444],[2.86983,42.46843],[2.88413,42.45938],[2.92107,42.4573],[2.94283,42.48174],[2.96518,42.46692],[3.03734,42.47363],[3.08167,42.42748],[3.10027,42.42621],[3.11379,42.43646],[3.17156,42.43545],[3.4481,42.4358],[5.18061,39.43581],[2.46645,37.97429],[-2.27707,35.35051],[-2.85819,35.63219],[-5.10878,36.05227],[-5.64962,35.93752],[-7.27694,35.93599]],[[-5.28217,36.09907],[-5.27801,36.14942],[-5.33822,36.15272],[-5.34536,36.15501],[-5.36494,36.15496],[-5.38545,36.15481],[-5.40134,36.14896],[-5.39074,36.10278],[-5.36503,36.06205],[-5.32837,36.05935],[-5.3004,36.07439],[-5.28217,36.09907]]],[[[1.99838,42.44682],[1.98378,42.44697],[1.96125,42.45364],[1.95606,42.45785],[1.96215,42.47854],[1.97003,42.48081],[1.97227,42.48487],[1.97697,42.48568],[1.98022,42.49569],[1.98916,42.49351],[1.99766,42.4858],[1.98579,42.47486],[1.99216,42.46208],[2.01564,42.45171],[1.99838,42.44682]]]]}},{type:"Feature",properties:{iso1A2:"NA",iso1A3:"NAM",iso1N3:"516",wikidata:"Q1030",nameEn:"Namibia",groups:["018","202","002"],driveSide:"left",callingCodes:["264"]},geometry:{type:"MultiPolygon",coordinates:[[[[14.28743,-17.38814],[18.39229,-17.38927],[18.84226,-17.80375],[21.14283,-17.94318],[21.42741,-18.02787],[23.47474,-17.62877],[24.23619,-17.47489],[24.32811,-17.49082],[24.38712,-17.46818],[24.5621,-17.52963],[24.70864,-17.49501],[25.00198,-17.58221],[25.26433,-17.79571],[25.16882,-17.78253],[25.05895,-17.84452],[24.95586,-17.79674],[24.73364,-17.89338],[24.71887,-17.9218],[24.6303,-17.9863],[24.57485,-18.07151],[24.40577,-17.95726],[24.19416,-18.01919],[23.61088,-18.4881],[23.29618,-17.99855],[23.0996,-18.00075],[21.45556,-18.31795],[20.99904,-18.31743],[20.99751,-22.00026],[19.99912,-21.99991],[19.99817,-24.76768],[19.99882,-28.42622],[18.99885,-28.89165],[17.4579,-28.68718],[17.15405,-28.08573],[16.90446,-28.057],[16.59922,-28.53246],[16.46592,-28.57126],[16.45332,-28.63117],[12.51595,-32.27486],[10.5065,-17.25284],[11.75063,-17.25013],[12.07076,-17.15165],[12.52111,-17.24495],[12.97145,-16.98567],[13.36212,-16.98048],[13.95896,-17.43141],[14.28743,-17.38814]]]]}},{type:"Feature",properties:{iso1A2:"EU",iso1A3:"EUE",wikidata:"Q458",nameEn:"European Union",level:"union",isoStatus:"excRes"},geometry:null},{type:"Feature",properties:{iso1A2:"NC",iso1A3:"NCL",iso1N3:"540",wikidata:"Q33788",nameEn:"New Caledonia",country:"FR",groups:["054","009"],callingCodes:["687"]},geometry:{type:"MultiPolygon",coordinates:[[[[158.65519,-23.4036],[157.83842,-18.82563],[162.93363,-17.28904],[174.90025,-23.53966],[158.65519,-23.4036]]]]}},{type:"Feature",properties:{iso1A2:"FJ",iso1A3:"FJI",iso1N3:"242",wikidata:"Q712",nameEn:"Fiji",groups:["054","009"],driveSide:"left",callingCodes:["679"]},geometry:{type:"MultiPolygon",coordinates:[[[[174,-22.5],[174,-11.5],[179.99999,-11.5],[179.99999,-22.5],[174,-22.5]]],[[[-178.60161,-14.95666],[-176.76826,-14.95183],[-176.74538,-22.89767],[-180,-22.90585],[-180,-14.96041],[-178.60161,-14.95666]]]]}},{type:"Feature",properties:{iso1A2:"NE",iso1A3:"NER",iso1N3:"562",wikidata:"Q1032",nameEn:"Niger",aliases:["RN"],groups:["011","202","002"],callingCodes:["227"]},geometry:{type:"MultiPolygon",coordinates:[[[[14.22918,22.61719],[14.99751,23.00539],[15.19692,21.99339],[15.20213,21.49365],[15.28332,21.44557],[15.62515,20.95395],[15.57248,20.92138],[15.55382,20.86507],[15.56004,20.79488],[15.59841,20.74039],[15.6721,20.70069],[15.99632,20.35364],[15.75098,19.93002],[15.6032,18.77402],[15.50373,16.89649],[14.37425,15.72591],[13.86301,15.04043],[13.78991,14.87519],[13.809,14.72915],[13.67878,14.64013],[13.68573,14.55276],[13.48259,14.46704],[13.47559,14.40881],[13.6302,13.71094],[13.33213,13.71195],[13.19844,13.52802],[13.05085,13.53984],[12.87376,13.48919],[12.6793,13.29157],[12.58033,13.27805],[12.47095,13.06673],[12.19315,13.12423],[12.16189,13.10056],[12.04209,13.14452],[11.88236,13.2527],[11.4535,13.37773],[10.66004,13.36422],[10.46731,13.28819],[10.19993,13.27129],[10.00373,13.18171],[9.65995,12.80614],[8.97413,12.83661],[8.64251,12.93985],[8.60431,13.01768],[8.49493,13.07519],[8.41853,13.06166],[8.25185,13.20369],[8.07997,13.30847],[7.81085,13.34902],[7.39241,13.09717],[7.22399,13.1293],[7.12676,13.02445],[7.0521,13.00076],[6.94445,12.99825],[6.69617,13.34057],[6.43053,13.6006],[6.27411,13.67835],[6.15771,13.64564],[5.52957,13.8845],[5.35437,13.83567],[5.27797,13.75474],[5.21026,13.73627],[5.07396,13.75052],[4.9368,13.7345],[4.87425,13.78],[4.4668,13.68286],[4.23456,13.47725],[4.14186,13.47586],[4.14367,13.17189],[4.10006,12.98862],[3.94339,12.74979],[3.65111,12.52223],[3.66364,12.25884],[3.63136,12.11826],[3.67775,11.97599],[3.61955,11.91847],[3.63063,11.83042],[3.67122,11.80865],[3.67988,11.75429],[3.61075,11.69181],[3.59375,11.70269],[3.48187,11.86092],[3.31613,11.88495],[3.25352,12.01467],[2.83978,12.40585],[2.6593,12.30631],[2.37783,12.24804],[2.39657,12.10952],[2.45824,11.98672],[2.39723,11.89473],[2.05785,12.35539],[2.26349,12.41915],[0.99167,13.10727],[0.99253,13.37515],[1.18873,13.31771],[1.21217,13.37853],[1.24516,13.33968],[1.28509,13.35488],[1.24429,13.39373],[1.20088,13.38951],[1.02813,13.46635],[0.99514,13.5668],[0.77637,13.64442],[0.77377,13.6866],[0.61924,13.68491],[0.38051,14.05575],[0.16936,14.51654],[0.23859,15.00135],[0.72632,14.95898],[0.96711,14.98275],[1.31275,15.27978],[3.01806,15.34571],[3.03134,15.42221],[3.50368,15.35934],[4.19893,16.39923],[4.21787,17.00118],[4.26762,17.00432],[4.26651,19.14224],[5.8153,19.45101],[7.38361,20.79165],[7.48273,20.87258],[11.96886,23.51735],[13.5631,23.16574],[14.22918,22.61719]]]]}},{type:"Feature",properties:{iso1A2:"FM",iso1A3:"FSM",iso1N3:"583",wikidata:"Q702",nameEn:"Federated States of Micronesia",groups:["057","009"],roadSpeedUnit:"mph",callingCodes:["691"]},geometry:{type:"MultiPolygon",coordinates:[[[[136.04605,12.45908],[159.04653,10.59067],[165.35175,6.367],[156.88247,-1.39237],[136.27107,6.73747],[136.04605,12.45908]]]]}},{type:"Feature",properties:{iso1A2:"NF",iso1A3:"NFK",iso1N3:"574",wikidata:"Q31057",nameEn:"Norfolk Island",country:"AU",groups:["053","009"],driveSide:"left",callingCodes:["672 3"]},geometry:{type:"MultiPolygon",coordinates:[[[[169.82316,-28.16667],[167.94076,-30.60745],[166.29505,-28.29175],[169.82316,-28.16667]]]]}},{type:"Feature",properties:{iso1A2:"FR",iso1A3:"FRA",iso1N3:"250",wikidata:"Q142",nameEn:"France",groups:["EU","155","150"],callingCodes:["33"]},geometry:null},{type:"Feature",properties:{iso1A2:"NG",iso1A3:"NGA",iso1N3:"566",wikidata:"Q1033",nameEn:"Nigeria",groups:["011","202","002"],callingCodes:["234"]},geometry:{type:"MultiPolygon",coordinates:[[[[6.15771,13.64564],[6.27411,13.67835],[6.43053,13.6006],[6.69617,13.34057],[6.94445,12.99825],[7.0521,13.00076],[7.12676,13.02445],[7.22399,13.1293],[7.39241,13.09717],[7.81085,13.34902],[8.07997,13.30847],[8.25185,13.20369],[8.41853,13.06166],[8.49493,13.07519],[8.60431,13.01768],[8.64251,12.93985],[8.97413,12.83661],[9.65995,12.80614],[10.00373,13.18171],[10.19993,13.27129],[10.46731,13.28819],[10.66004,13.36422],[11.4535,13.37773],[11.88236,13.2527],[12.04209,13.14452],[12.16189,13.10056],[12.19315,13.12423],[12.47095,13.06673],[12.58033,13.27805],[12.6793,13.29157],[12.87376,13.48919],[13.05085,13.53984],[13.19844,13.52802],[13.33213,13.71195],[13.6302,13.71094],[14.08251,13.0797],[14.20204,12.53405],[14.17523,12.41916],[14.22215,12.36533],[14.4843,12.35223],[14.6474,12.17466],[14.61612,11.7798],[14.55207,11.72001],[14.64591,11.66166],[14.6124,11.51283],[14.17821,11.23831],[13.97489,11.30258],[13.78945,11.00154],[13.7403,11.00593],[13.70753,10.94451],[13.73434,10.9255],[13.54964,10.61236],[13.5705,10.53183],[13.43644,10.13326],[13.34111,10.12299],[13.25025,10.03647],[13.25323,10.00127],[13.286,9.9822],[13.27409,9.93232],[13.24132,9.91031],[13.25025,9.86042],[13.29941,9.8296],[13.25472,9.76795],[13.22642,9.57266],[13.02385,9.49334],[12.85628,9.36698],[12.91958,9.33905],[12.90022,9.11411],[12.81085,8.91992],[12.79,8.75361],[12.71701,8.7595],[12.68722,8.65938],[12.44146,8.6152],[12.4489,8.52536],[12.26123,8.43696],[12.24782,8.17904],[12.19271,8.10826],[12.20909,7.97553],[11.99908,7.67302],[12.01844,7.52981],[11.93205,7.47812],[11.84864,7.26098],[11.87396,7.09398],[11.63117,6.9905],[11.55818,6.86186],[11.57755,6.74059],[11.51499,6.60892],[11.42264,6.5882],[11.42041,6.53789],[11.09495,6.51717],[11.09644,6.68437],[10.94302,6.69325],[10.8179,6.83377],[10.83727,6.9358],[10.60789,7.06885],[10.59746,7.14719],[10.57214,7.16345],[10.53639,6.93432],[10.21466,6.88996],[10.15135,7.03781],[9.86314,6.77756],[9.77824,6.79088],[9.70674,6.51717],[9.51757,6.43874],[8.84209,5.82562],[8.88156,5.78857],[8.83687,5.68483],[8.92029,5.58403],[8.78027,5.1243],[8.60302,4.87353],[8.34397,4.30689],[5.87055,3.78489],[2.74181,6.13349],[2.70566,6.38038],[2.70464,6.50831],[2.74334,6.57291],[2.7325,6.64057],[2.78204,6.70514],[2.78823,6.76356],[2.73405,6.78508],[2.74024,6.92802],[2.71702,6.95722],[2.76965,7.13543],[2.74489,7.42565],[2.79442,7.43486],[2.78668,7.5116],[2.73405,7.5423],[2.73095,7.7755],[2.67523,7.87825],[2.77907,9.06924],[3.08017,9.10006],[3.14147,9.28375],[3.13928,9.47167],[3.25093,9.61632],[3.34726,9.70696],[3.32099,9.78032],[3.35383,9.83641],[3.54429,9.87739],[3.66908,10.18136],[3.57275,10.27185],[3.6844,10.46351],[3.78292,10.40538],[3.84243,10.59316],[3.71505,11.13015],[3.49175,11.29765],[3.59375,11.70269],[3.61075,11.69181],[3.67988,11.75429],[3.67122,11.80865],[3.63063,11.83042],[3.61955,11.91847],[3.67775,11.97599],[3.63136,12.11826],[3.66364,12.25884],[3.65111,12.52223],[3.94339,12.74979],[4.10006,12.98862],[4.14367,13.17189],[4.14186,13.47586],[4.23456,13.47725],[4.4668,13.68286],[4.87425,13.78],[4.9368,13.7345],[5.07396,13.75052],[5.21026,13.73627],[5.27797,13.75474],[5.35437,13.83567],[5.52957,13.8845],[6.15771,13.64564]]]]}},{type:"Feature",properties:{iso1A2:"GA",iso1A3:"GAB",iso1N3:"266",wikidata:"Q1000",nameEn:"Gabon",groups:["017","202","002"],callingCodes:["241"]},geometry:{type:"MultiPolygon",coordinates:[[[[13.29457,2.16106],[13.13461,1.57238],[13.25447,1.32339],[13.15519,1.23368],[13.89582,1.4261],[14.25186,1.39842],[14.48179,0.9152],[14.26066,0.57255],[14.10909,0.58563],[13.88648,0.26652],[13.90632,-0.2287],[14.06862,-0.20826],[14.2165,-0.38261],[14.41887,-0.44799],[14.52569,-0.57818],[14.41838,-1.89412],[14.25932,-1.97624],[14.23518,-2.15671],[14.16202,-2.23916],[14.23829,-2.33715],[14.10442,-2.49268],[13.85846,-2.46935],[13.92073,-2.35581],[13.75884,-2.09293],[13.47977,-2.43224],[13.02759,-2.33098],[12.82172,-1.91091],[12.61312,-1.8129],[12.44656,-1.92025],[12.47925,-2.32626],[12.04895,-2.41704],[11.96866,-2.33559],[11.74605,-2.39936],[11.57637,-2.33379],[11.64487,-2.61865],[11.5359,-2.85654],[11.64798,-2.81146],[11.80365,-3.00424],[11.70558,-3.0773],[11.70227,-3.17465],[11.96554,-3.30267],[11.8318,-3.5812],[11.92719,-3.62768],[11.87083,-3.71571],[11.68608,-3.68942],[11.57949,-3.52798],[11.48764,-3.51089],[11.22301,-3.69888],[11.12647,-3.94169],[10.75913,-4.39519],[7.24416,-0.64092],[9.35563,0.84865],[9.51998,0.96418],[9.54793,1.0185],[9.62096,1.03039],[9.66092,1.05865],[9.68638,1.06836],[9.73014,1.06721],[9.76085,1.05949],[9.78058,1.03996],[9.79648,1.0019],[11.35307,1.00251],[11.3561,2.17217],[11.37116,2.29975],[13.28534,2.25716],[13.29457,2.16106]]]]}},{type:"Feature",properties:{iso1A2:"NI",iso1A3:"NIC",iso1N3:"558",wikidata:"Q811",nameEn:"Nicaragua",groups:["013","003","419","019"],callingCodes:["505"]},geometry:{type:"MultiPolygon",coordinates:[[[[-83.13724,15.00002],[-83.04763,15.03256],[-82.06974,14.49418],[-82.56142,11.91792],[-83.68276,11.01562],[-83.66597,10.79916],[-83.90838,10.71161],[-84.68197,11.07568],[-84.92439,10.9497],[-85.60529,11.22607],[-85.71223,11.06868],[-86.14524,11.09059],[-88.11443,12.63306],[-87.7346,13.13228],[-87.55124,13.12523],[-87.37107,12.98646],[-87.06306,13.00892],[-87.03785,12.98682],[-86.93197,13.05313],[-86.93383,13.18677],[-86.87066,13.30641],[-86.71267,13.30348],[-86.76812,13.79605],[-86.35219,13.77157],[-86.14801,14.04317],[-86.00685,14.08474],[-86.03458,13.99181],[-85.75477,13.8499],[-85.73964,13.9698],[-85.45762,14.11304],[-85.32149,14.2562],[-85.18602,14.24929],[-85.1575,14.53934],[-84.90082,14.80489],[-84.82596,14.82212],[-84.70119,14.68078],[-84.48373,14.63249],[-84.10584,14.76353],[-83.89551,14.76697],[-83.62101,14.89448],[-83.49268,15.01158],[-83.13724,15.00002]]]]}},{type:"Feature",properties:{iso1A2:"GD",iso1A3:"GRD",iso1N3:"308",wikidata:"Q769",nameEn:"Grenada",aliases:["WG"],groups:["029","003","419","019"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["1 473"]},geometry:{type:"MultiPolygon",coordinates:[[[[-62.14806,11.87638],[-61.73897,12.61191],[-61.38256,12.52991],[-61.13395,12.51526],[-61.57265,11.65795],[-62.14806,11.87638]]]]}},{type:"Feature",properties:{iso1A2:"NL",iso1A3:"NLD",iso1N3:"528",wikidata:"Q55",nameEn:"Netherlands",groups:["EU","155","150"],callingCodes:["31"]},geometry:{type:"MultiPolygon",coordinates:[[[[5.45168,54.20039],[6.91025,53.44221],[7.00198,53.32672],[7.19052,53.31866],[7.21679,53.20058],[7.22681,53.18165],[7.17898,53.13817],[7.21694,53.00742],[7.07253,52.81083],[7.04557,52.63318],[6.77307,52.65375],[6.71641,52.62905],[6.69507,52.488],[6.94293,52.43597],[6.99041,52.47235],[7.03417,52.40237],[7.07044,52.37805],[7.02703,52.27941],[7.06365,52.23789],[7.03729,52.22695],[6.9897,52.2271],[6.97189,52.20329],[6.83984,52.11728],[6.76117,52.11895],[6.68128,52.05052],[6.83035,51.9905],[6.82357,51.96711],[6.72319,51.89518],[6.68386,51.91861],[6.58556,51.89386],[6.50231,51.86313],[6.47179,51.85395],[6.38815,51.87257],[6.40704,51.82771],[6.30593,51.84998],[6.29872,51.86801],[6.21443,51.86801],[6.15349,51.90439],[6.11551,51.89769],[6.16902,51.84094],[6.10337,51.84829],[6.06705,51.86136],[5.99848,51.83195],[5.94568,51.82786],[5.98665,51.76944],[5.95003,51.7493],[6.04091,51.71821],[6.02767,51.6742],[6.11759,51.65609],[6.09055,51.60564],[6.18017,51.54096],[6.21724,51.48568],[6.20654,51.40049],[6.22641,51.39948],[6.22674,51.36135],[6.16977,51.33169],[6.07889,51.24432],[6.07889,51.17038],[6.17384,51.19589],[6.16706,51.15677],[5.98292,51.07469],[5.9541,51.03496],[5.9134,51.06736],[5.86735,51.05182],[5.87849,51.01969],[5.90493,51.00198],[5.90296,50.97356],[5.95282,50.98728],[6.02697,50.98303],[6.01615,50.93367],[6.09297,50.92066],[6.07486,50.89307],[6.08805,50.87223],[6.07693,50.86025],[6.07431,50.84674],[6.05702,50.85179],[6.05623,50.8572],[6.01921,50.84435],[6.02328,50.81694],[6.00462,50.80065],[5.98404,50.80988],[5.97497,50.79992],[6.02624,50.77453],[6.01976,50.75398],[5.97545,50.75441],[5.95942,50.7622],[5.89132,50.75124],[5.89129,50.75125],[5.88734,50.77092],[5.84888,50.75448],[5.84548,50.76542],[5.80673,50.7558],[5.77513,50.78308],[5.76533,50.78159],[5.74356,50.7691],[5.73904,50.75674],[5.72216,50.76398],[5.69469,50.75529],[5.68091,50.75804],[5.70107,50.7827],[5.68995,50.79641],[5.70118,50.80764],[5.65259,50.82309],[5.64009,50.84742],[5.64504,50.87107],[5.67886,50.88142],[5.69858,50.91046],[5.71626,50.90796],[5.72644,50.91167],[5.72545,50.92312],[5.74644,50.94723],[5.75927,50.95601],[5.74752,50.96202],[5.72875,50.95428],[5.71864,50.96092],[5.76242,50.99703],[5.77688,51.02483],[5.75961,51.03113],[5.77258,51.06196],[5.79835,51.05834],[5.79903,51.09371],[5.82921,51.09328],[5.83226,51.10585],[5.8109,51.10861],[5.80798,51.11661],[5.85508,51.14445],[5.82564,51.16753],[5.77697,51.1522],[5.77735,51.17845],[5.74617,51.18928],[5.70344,51.1829],[5.65528,51.18736],[5.65145,51.19788],[5.5603,51.22249],[5.5569,51.26544],[5.515,51.29462],[5.48476,51.30053],[5.46519,51.2849],[5.4407,51.28169],[5.41672,51.26248],[5.347,51.27502],[5.33886,51.26314],[5.29716,51.26104],[5.26461,51.26693],[5.23814,51.26064],[5.22542,51.26888],[5.24244,51.30495],[5.2002,51.32243],[5.16222,51.31035],[5.13377,51.31592],[5.13105,51.34791],[5.07102,51.39469],[5.10456,51.43163],[5.07891,51.4715],[5.04774,51.47022],[5.03281,51.48679],[5.0106,51.47167],[5.00393,51.44406],[4.92152,51.39487],[4.90016,51.41404],[4.84988,51.41502],[4.78941,51.41102],[4.77229,51.41337],[4.76577,51.43046],[4.78314,51.43319],[4.82946,51.4213],[4.82409,51.44736],[4.84139,51.4799],[4.78803,51.50284],[4.77321,51.50529],[4.74578,51.48937],[4.72935,51.48424],[4.65442,51.42352],[4.57489,51.4324],[4.53521,51.4243],[4.52846,51.45002],[4.54675,51.47265],[4.5388,51.48184],[4.47736,51.4778],[4.38122,51.44905],[4.39747,51.43316],[4.38064,51.41965],[4.43777,51.36989],[4.39292,51.35547],[4.34086,51.35738],[4.33265,51.37687],[4.21923,51.37443],[4.24024,51.35371],[4.16721,51.29348],[4.05165,51.24171],[4.01957,51.24504],[3.97889,51.22537],[3.90125,51.20371],[3.78783,51.2151],[3.78999,51.25766],[3.58939,51.30064],[3.51502,51.28697],[3.52698,51.2458],[3.43488,51.24135],[3.41704,51.25933],[3.38289,51.27331],[3.35847,51.31572],[3.38696,51.33436],[3.36263,51.37112],[2.56575,51.85301],[5.45168,54.20039]],[[4.93295,51.44945],[4.93909,51.44632],[4.9524,51.45014],[4.95244,51.45207],[4.93295,51.44945]],[[4.91493,51.4353],[4.92652,51.43329],[4.92952,51.42984],[4.93986,51.43064],[4.94265,51.44003],[4.93471,51.43861],[4.93416,51.44185],[4.94025,51.44193],[4.93544,51.44634],[4.92879,51.44161],[4.92815,51.43856],[4.92566,51.44273],[4.92811,51.4437],[4.92287,51.44741],[4.91811,51.44621],[4.92227,51.44252],[4.91935,51.43634],[4.91493,51.4353]]]]}},{type:"Feature",properties:{iso1A2:"GF",iso1A3:"GUF",iso1N3:"254",wikidata:"Q3769",nameEn:"French Guiana",country:"FR",groups:["EU","005","419","019"],callingCodes:["594"]},geometry:{type:"MultiPolygon",coordinates:[[[[-51.35485,4.8383],[-51.63798,4.51394],[-51.61983,4.14596],[-51.79599,3.89336],[-51.82312,3.85825],[-51.85573,3.83427],[-52.31787,3.17896],[-52.6906,2.37298],[-52.96539,2.1881],[-53.78743,2.34412],[-54.16286,2.10779],[-54.6084,2.32856],[-54.42864,2.42442],[-54.28534,2.67798],[-53.9849,3.58697],[-53.98914,3.627],[-54.05128,3.63557],[-54.19367,3.84387],[-54.38444,4.13222],[-54.4717,4.91964],[-54.26916,5.26909],[-54.01877,5.52789],[-54.01074,5.68785],[-53.7094,6.2264],[-51.35485,4.8383]]]]}},{type:"Feature",properties:{iso1A2:"NO",iso1A3:"NOR",iso1N3:"578",wikidata:"Q20",nameEn:"Norway",groups:["154","150"],callingCodes:["47"]},geometry:{type:"MultiPolygon",coordinates:[[[[10.40861,58.38489],[7.28637,57.35913],[-0.3751,61.32236],[18.46509,71.28681],[32.07813,72.01005],[31.59909,70.16571],[30.84095,69.80584],[30.95011,69.54699],[30.52662,69.54699],[30.16363,69.65244],[29.97205,69.41623],[29.27631,69.2811],[29.26623,69.13794],[29.0444,69.0119],[28.91738,69.04774],[28.81248,69.11997],[28.8629,69.22395],[29.31664,69.47994],[29.12697,69.69193],[28.36883,69.81658],[28.32849,69.88605],[27.97558,69.99671],[27.95542,70.0965],[27.57226,70.06215],[27.05802,69.92069],[26.64461,69.96565],[26.40261,69.91377],[25.96904,69.68397],[25.69679,69.27039],[25.75729,68.99383],[25.61613,68.89602],[25.42455,68.90328],[25.12206,68.78684],[25.10189,68.63307],[24.93048,68.61102],[24.90023,68.55579],[24.74898,68.65143],[24.18432,68.73936],[24.02299,68.81601],[23.781,68.84514],[23.68017,68.70276],[23.13064,68.64684],[22.53321,68.74393],[22.38367,68.71561],[22.27276,68.89514],[21.63833,69.27485],[21.27827,69.31281],[21.00732,69.22755],[20.98641,69.18809],[21.11099,69.10291],[21.05775,69.0356],[20.72171,69.11874],[20.55258,69.06069],[20.0695,69.04469],[20.28444,68.93283],[20.33435,68.80174],[20.22027,68.67246],[19.95647,68.55546],[20.22027,68.48759],[19.93508,68.35911],[18.97255,68.52416],[18.63032,68.50849],[18.39503,68.58672],[18.1241,68.53721],[18.13836,68.20874],[17.90787,67.96537],[17.30416,68.11591],[16.7409,67.91037],[16.38441,67.52923],[16.12774,67.52106],[16.09922,67.4364],[16.39154,67.21653],[16.35589,67.06419],[15.37197,66.48217],[15.49318,66.28509],[15.05113,66.15572],[14.53778,66.12399],[14.50926,65.31786],[13.64276,64.58402],[14.11117,64.46674],[14.16051,64.18725],[13.98222,64.00953],[13.23411,64.09087],[12.74105,64.02171],[12.14928,63.59373],[12.19919,63.47935],[11.98529,63.27487],[12.19919,63.00104],[12.07085,62.6297],[12.29187,62.25699],[12.14746,61.7147],[12.40595,61.57226],[12.57707,61.56547],[12.86939,61.35427],[12.69115,61.06584],[12.2277,61.02442],[12.59133,60.50559],[12.52003,60.13846],[12.36317,59.99259],[12.15641,59.8926],[11.87121,59.86039],[11.92112,59.69531],[11.69297,59.59442],[11.8213,59.24985],[11.65732,58.90177],[11.45199,58.89604],[11.4601,58.99022],[11.34459,59.11672],[11.15367,59.07862],[11.08911,58.98745],[10.64958,58.89391],[10.40861,58.38489]]]]}},{type:"Feature",properties:{iso1A2:"GH",iso1A3:"GHA",iso1N3:"288",wikidata:"Q117",nameEn:"Ghana",groups:["011","202","002"],callingCodes:["233"]},geometry:{type:"MultiPolygon",coordinates:[[[[-0.13493,11.14075],[-0.14462,11.10811],[-0.05733,11.08628],[-0.0275,11.11202],[-0.00514,11.10763],[0.00342,11.08317],[0.02395,11.06229],[0.03355,10.9807],[-0.0063,10.96417],[-0.00908,10.91644],[-0.02685,10.8783],[-0.0228,10.81916],[-0.07183,10.76794],[-0.07327,10.71845],[-0.09141,10.7147],[-0.05945,10.63458],[0.12886,10.53149],[0.18846,10.4096],[0.29453,10.41546],[0.33028,10.30408],[0.39584,10.31112],[0.35293,10.09412],[0.41371,10.06361],[0.41252,10.02018],[0.36366,10.03309],[0.32075,9.72781],[0.34816,9.71607],[0.34816,9.66907],[0.32313,9.6491],[0.28261,9.69022],[0.26712,9.66437],[0.29334,9.59387],[0.36008,9.6256],[0.38153,9.58682],[0.23851,9.57389],[0.2409,9.52335],[0.30406,9.521],[0.31241,9.50337],[0.2254,9.47869],[0.25758,9.42696],[0.33148,9.44812],[0.36485,9.49749],[0.49118,9.48339],[0.56388,9.40697],[0.45424,9.04581],[0.52455,8.87746],[0.37319,8.75262],[0.47211,8.59945],[0.64731,8.48866],[0.73432,8.29529],[0.63897,8.25873],[0.5913,8.19622],[0.61156,8.18324],[0.6056,8.13959],[0.58891,8.12779],[0.62943,7.85751],[0.58295,7.62368],[0.51979,7.58706],[0.52455,7.45354],[0.57223,7.39326],[0.62943,7.41099],[0.65327,7.31643],[0.59606,7.01252],[0.52217,6.9723],[0.52098,6.94391],[0.56508,6.92971],[0.52853,6.82921],[0.57406,6.80348],[0.58176,6.76049],[0.6497,6.73682],[0.63659,6.63857],[0.74862,6.56517],[0.71048,6.53083],[0.89283,6.33779],[0.99652,6.33779],[1.03108,6.24064],[1.05969,6.22998],[1.09187,6.17074],[1.19966,6.17069],[1.19771,6.11522],[1.27574,5.93551],[1.07031,5.15655],[-3.34019,4.17519],[-3.10675,5.08515],[-3.11073,5.12675],[-3.063,5.13665],[-2.96554,5.10397],[-2.95261,5.12477],[-2.75502,5.10657],[-2.73074,5.1364],[-2.77625,5.34621],[-2.72737,5.34789],[-2.76614,5.60963],[-2.85378,5.65156],[-2.93132,5.62137],[-2.96671,5.6415],[-2.95323,5.71865],[-3.01896,5.71697],[-3.25999,6.62521],[-3.21954,6.74407],[-3.23327,6.81744],[-2.95438,7.23737],[-2.97822,7.27165],[-2.92339,7.60847],[-2.79467,7.86002],[-2.78395,7.94974],[-2.74819,7.92613],[-2.67787,8.02055],[-2.61232,8.02645],[-2.62901,8.11495],[-2.49037,8.20872],[-2.58243,8.7789],[-2.66357,9.01771],[-2.77799,9.04949],[-2.69814,9.22717],[-2.68802,9.49343],[-2.76534,9.56589],[-2.74174,9.83172],[-2.83108,10.40252],[-2.94232,10.64281],[-2.83373,11.0067],[-0.67143,10.99811],[-0.61937,10.91305],[-0.44298,11.04292],[-0.42391,11.11661],[-0.38219,11.12596],[-0.35955,11.07801],[-0.28566,11.12713],[-0.27374,11.17157],[-0.13493,11.14075]]]]}},{type:"Feature",properties:{iso1A2:"NP",iso1A3:"NPL",iso1N3:"524",wikidata:"Q837",nameEn:"Nepal",groups:["034","142"],driveSide:"left",callingCodes:["977"]},geometry:{type:"MultiPolygon",coordinates:[[[[88.13378,27.88015],[88.1973,27.85067],[88.19107,27.79285],[88.04008,27.49223],[88.07277,27.43007],[88.01646,27.21612],[88.01587,27.21388],[87.9887,27.11045],[88.11719,26.98758],[88.13422,26.98705],[88.12302,26.95324],[88.19107,26.75516],[88.1659,26.68177],[88.16452,26.64111],[88.09963,26.54195],[88.09414,26.43732],[88.00895,26.36029],[87.90115,26.44923],[87.89085,26.48565],[87.84193,26.43663],[87.7918,26.46737],[87.76004,26.40711],[87.67893,26.43501],[87.66803,26.40294],[87.59175,26.38342],[87.55274,26.40596],[87.51571,26.43106],[87.46566,26.44058],[87.37314,26.40815],[87.34568,26.34787],[87.26568,26.37294],[87.26587,26.40592],[87.24682,26.4143],[87.18863,26.40558],[87.14751,26.40542],[87.09147,26.45039],[87.0707,26.58571],[87.04691,26.58685],[87.01559,26.53228],[86.95912,26.52076],[86.94543,26.52076],[86.82898,26.43919],[86.76797,26.45892],[86.74025,26.42386],[86.69124,26.45169],[86.62686,26.46891],[86.61313,26.48658],[86.57073,26.49825],[86.54258,26.53819],[86.49726,26.54218],[86.31564,26.61925],[86.26235,26.61886],[86.22513,26.58863],[86.13596,26.60651],[86.02729,26.66756],[85.8492,26.56667],[85.85126,26.60866],[85.83126,26.61134],[85.76907,26.63076],[85.72315,26.67471],[85.73483,26.79613],[85.66239,26.84822],[85.61621,26.86721],[85.59461,26.85161],[85.5757,26.85955],[85.56471,26.84133],[85.47752,26.79292],[85.34302,26.74954],[85.21159,26.75933],[85.18046,26.80519],[85.19291,26.86909],[85.15883,26.86966],[85.02635,26.85381],[85.05592,26.88991],[85.00536,26.89523],[84.97186,26.9149],[84.96687,26.95599],[84.85754,26.98984],[84.82913,27.01989],[84.793,26.9968],[84.64496,27.04669],[84.69166,27.21294],[84.62161,27.33885],[84.29315,27.39],[84.25735,27.44941],[84.21376,27.45218],[84.10791,27.52399],[84.02229,27.43836],[83.93306,27.44939],[83.86182,27.4241],[83.85595,27.35797],[83.61288,27.47013],[83.39495,27.4798],[83.38872,27.39276],[83.35136,27.33885],[83.29999,27.32778],[83.2673,27.36235],[83.27197,27.38309],[83.19413,27.45632],[82.94938,27.46036],[82.93261,27.50328],[82.74119,27.49838],[82.70378,27.72122],[82.46405,27.6716],[82.06554,27.92222],[81.97214,27.93322],[81.91223,27.84995],[81.47867,28.08303],[81.48179,28.12148],[81.38683,28.17638],[81.32923,28.13521],[81.19847,28.36284],[81.08507,28.38346],[80.89648,28.47237],[80.55142,28.69182],[80.50575,28.6706],[80.52443,28.54897],[80.44504,28.63098],[80.37188,28.63371],[80.12125,28.82346],[80.06957,28.82763],[80.05743,28.91479],[80.18085,29.13649],[80.23178,29.11626],[80.26602,29.13938],[80.24112,29.21414],[80.28626,29.20327],[80.31428,29.30784],[80.24322,29.44299],[80.37939,29.57098],[80.41858,29.63581],[80.38428,29.68513],[80.36803,29.73865],[80.41554,29.79451],[80.43458,29.80466],[80.48997,29.79566],[80.56247,29.86661],[80.56957,29.88176],[80.60226,29.95732],[80.67076,29.95732],[80.8778,30.13384],[80.93695,30.18229],[81.03953,30.20059],[81.12842,30.01395],[81.24362,30.0126],[81.29032,30.08806],[81.2623,30.14596],[81.33355,30.15303],[81.39928,30.21862],[81.41018,30.42153],[81.62033,30.44703],[81.99082,30.33423],[82.10135,30.35439],[82.10757,30.23745],[82.19475,30.16884],[82.16984,30.0692],[82.38622,30.02608],[82.5341,29.9735],[82.73024,29.81695],[83.07116,29.61957],[83.28131,29.56813],[83.44787,29.30513],[83.63156,29.16249],[83.82303,29.30513],[83.97559,29.33091],[84.18107,29.23451],[84.24801,29.02783],[84.2231,28.89571],[84.47528,28.74023],[84.62317,28.73887],[84.85511,28.58041],[85.06059,28.68562],[85.19135,28.62825],[85.18668,28.54076],[85.10729,28.34092],[85.38127,28.28336],[85.4233,28.32996],[85.59765,28.30529],[85.60854,28.25045],[85.69105,28.38475],[85.71907,28.38064],[85.74864,28.23126],[85.84672,28.18187],[85.90743,28.05144],[85.97813,27.99023],[85.94946,27.9401],[86.06309,27.90021],[86.12069,27.93047],[86.08333,28.02121],[86.088,28.09264],[86.18607,28.17364],[86.22966,27.9786],[86.42736,27.91122],[86.51609,27.96623],[86.56265,28.09569],[86.74181,28.10638],[86.75582,28.04182],[87.03757,27.94835],[87.11696,27.84104],[87.56996,27.84517],[87.72718,27.80938],[87.82681,27.95248],[88.13378,27.88015]]]]}},{type:"Feature",properties:{iso1A2:"GL",iso1A3:"GRL",iso1N3:"304",wikidata:"Q223",nameEn:"Greenland",country:"DK",groups:["021","003","019"],callingCodes:["299"]},geometry:{type:"MultiPolygon",coordinates:[[[[-45.47832,84.58738],[-5.7106,84.28058],[-9.68082,72.73731],[-46.37635,57.3249],[-76.75614,76.72014],[-68.21821,80.48551],[-45.47832,84.58738]]]]}},{type:"Feature",properties:{iso1A2:"NR",iso1A3:"NRU",iso1N3:"520",wikidata:"Q697",nameEn:"Nauru",groups:["057","009"],driveSide:"left",callingCodes:["674"]},geometry:{type:"MultiPolygon",coordinates:[[[[166.95155,0.14829],[167.60042,-0.88259],[166.21778,-0.7977],[166.95155,0.14829]]]]}},{type:"Feature",properties:{iso1A2:"GN",iso1A3:"GIN",iso1N3:"324",wikidata:"Q1006",nameEn:"Guinea",groups:["011","202","002"],callingCodes:["224"]},geometry:{type:"MultiPolygon",coordinates:[[[[-11.37536,12.40788],[-11.50006,12.17826],[-11.24136,12.01286],[-10.99758,12.24634],[-10.80355,12.1053],[-10.71897,11.91552],[-10.30604,12.24634],[-9.714,12.0226],[-9.63938,12.18312],[-9.32097,12.29009],[-9.38067,12.48446],[-9.13689,12.50875],[-8.94784,12.34842],[-8.80854,11.66715],[-8.40058,11.37466],[-8.66923,10.99397],[-8.35083,11.06234],[-8.2667,10.91762],[-8.32614,10.69273],[-8.22711,10.41722],[-8.10207,10.44649],[-7.9578,10.2703],[-7.97971,10.17117],[-8.01225,10.1021],[-8.11921,10.04577],[-8.15652,9.94288],[-8.09434,9.86936],[-8.14657,9.55062],[-8.03463,9.39604],[-7.85056,9.41812],[-7.90777,9.20456],[-7.73862,9.08422],[-7.92518,8.99332],[-7.95503,8.81146],[-7.69882,8.66148],[-7.65653,8.36873],[-7.92518,8.50652],[-8.22991,8.48438],[-8.2411,8.24196],[-8.062,8.16071],[-7.98675,8.20134],[-7.99919,8.11023],[-7.94695,8.00925],[-8.06449,8.04989],[-8.13414,7.87991],[-8.09931,7.78626],[-8.21374,7.54466],[-8.4003,7.6285],[-8.47114,7.55676],[-8.55874,7.62525],[-8.55874,7.70167],[-8.67814,7.69428],[-8.72789,7.51429],[-8.8448,7.35149],[-8.85724,7.26019],[-8.93435,7.2824],[-9.09107,7.1985],[-9.18311,7.30461],[-9.20798,7.38109],[-9.305,7.42056],[-9.41943,7.41809],[-9.48161,7.37122],[-9.37465,7.62032],[-9.35724,7.74111],[-9.44928,7.9284],[-9.41445,8.02448],[-9.50898,8.18455],[-9.47415,8.35195],[-9.77763,8.54633],[-10.05873,8.42578],[-10.05375,8.50697],[-10.14579,8.52665],[-10.203,8.47991],[-10.27575,8.48711],[-10.37257,8.48941],[-10.54891,8.31174],[-10.63934,8.35326],[-10.70565,8.29235],[-10.61422,8.5314],[-10.47707,8.67669],[-10.56197,8.81225],[-10.5783,9.06386],[-10.74484,9.07998],[-10.6534,9.29919],[-11.2118,10.00098],[-11.89624,9.99763],[-11.91023,9.93927],[-12.12634,9.87203],[-12.24262,9.92386],[-12.47254,9.86834],[-12.76788,9.3133],[-12.94095,9.26335],[-13.08953,9.0409],[-13.18586,9.0925],[-13.29911,9.04245],[-14.36218,8.64107],[-15.96748,10.162],[-15.07174,10.89557],[-14.95993,10.99244],[-14.77786,11.36323],[-14.66677,11.51188],[-14.51173,11.49708],[-14.31513,11.60713],[-14.26623,11.67486],[-14.09799,11.63649],[-13.7039,11.70195],[-13.7039,12.00869],[-13.94589,12.16869],[-13.92745,12.24077],[-13.70851,12.24978],[-13.64168,12.42764],[-13.65089,12.49515],[-13.7039,12.60313],[-13.70523,12.68013],[-13.05296,12.64003],[-13.06603,12.49342],[-12.87336,12.51892],[-12.35415,12.32758],[-11.91331,12.42008],[-11.46267,12.44559],[-11.37536,12.40788]]]]}},{type:"Feature",properties:{iso1A2:"NU",iso1A3:"NIU",iso1N3:"570",wikidata:"Q34020",nameEn:"Niue",country:"NZ",groups:["061","009"],driveSide:"left",callingCodes:["683"]},geometry:{type:"MultiPolygon",coordinates:[[[[-173.13438,-14.94228],[-171.14262,-14.93704],[-167.73854,-14.92809],[-167.73129,-23.22266],[-173.11048,-23.23027],[-173.13438,-14.94228]]]]}},{type:"Feature",properties:{iso1A2:"GQ",iso1A3:"GNQ",iso1N3:"226",wikidata:"Q983",nameEn:"Equatorial Guinea",groups:["017","202","002"],callingCodes:["240"]},geometry:{type:"MultiPolygon",coordinates:[[[[9.22018,3.72052],[9.81162,2.33797],[9.82123,2.35097],[9.83754,2.32428],[9.83238,2.29079],[9.84716,2.24676],[9.89012,2.20457],[9.90749,2.20049],[9.991,2.16561],[11.3561,2.17217],[11.35307,1.00251],[9.79648,1.0019],[9.78058,1.03996],[9.76085,1.05949],[9.73014,1.06721],[9.68638,1.06836],[9.66092,1.05865],[9.62096,1.03039],[9.54793,1.0185],[9.51998,0.96418],[9.35563,0.84865],[7.24416,-0.64092],[5.3459,-2.30107],[5.38965,-1.19244],[6.69416,-0.53945],[8.0168,1.79377],[8.05799,3.48284],[8.34397,4.30689],[9.22018,3.72052]]]]}},{type:"Feature",properties:{iso1A2:"NZ",iso1A3:"NZL",iso1N3:"554",wikidata:"Q664",nameEn:"New Zealand",groups:["053","009"],driveSide:"left",callingCodes:["64"]},geometry:{type:"MultiPolygon",coordinates:[[[[-180,-24.21376],[-155.99562,-45.16785],[-179.93224,-45.18423],[-180,-24.21376]]],[[[161.96603,-56.07661],[169.6687,-29.09191],[179.49541,-36.79303],[179.49541,-50.04657],[161.96603,-56.07661]]]]}},{type:"Feature",properties:{iso1A2:"GS",iso1A3:"SGS",iso1N3:"239",wikidata:"Q35086",nameEn:"South Georgia and South Sandwich Islands",country:"GB",groups:["005","419","019"],driveSide:"left",callingCodes:["500"]},geometry:{type:"MultiPolygon",coordinates:[[[[-35.26394,-43.68272],[-22.31757,-59.85974],[-53.39656,-59.87088],[-35.26394,-43.68272]]]]}},{type:"Feature",properties:{iso1A2:"OM",iso1A3:"OMN",iso1N3:"512",wikidata:"Q842",nameEn:"Oman",groups:["145","142"],callingCodes:["968"]},geometry:{type:"MultiPolygon",coordinates:[[[[56.82555,25.7713],[56.26534,25.62825],[56.25341,25.61443],[56.26636,25.60643],[56.25365,25.60211],[56.20473,25.61119],[56.18363,25.65508],[56.14826,25.66351],[56.13579,25.73524],[56.17416,25.77239],[56.13963,25.82765],[56.19334,25.9795],[56.15498,26.06828],[56.08666,26.05038],[55.81777,26.18798],[56.2644,26.58649],[56.68954,26.76645],[56.79239,26.41236],[56.82555,25.7713]]],[[[56.26062,25.33108],[56.3005,25.31815],[56.3111,25.30107],[56.35172,25.30681],[56.34438,25.26653],[56.27628,25.23404],[56.24341,25.22867],[56.20872,25.24104],[56.20838,25.25668],[56.24465,25.27505],[56.25008,25.28843],[56.23362,25.31253],[56.26062,25.33108]],[[56.28423,25.26344],[56.29379,25.2754],[56.28102,25.28486],[56.2716,25.27916],[56.27086,25.26128],[56.28423,25.26344]]],[[[61.45114,22.55394],[56.66759,17.24021],[53.32998,16.16312],[53.09917,16.67084],[52.81185,17.28568],[52.74267,17.29519],[52.78009,17.35124],[52.00311,19.00083],[54.99756,20.00083],[55.66469,21.99658],[55.2137,22.71065],[55.22634,23.10378],[55.57358,23.669],[55.48677,23.94946],[55.73301,24.05994],[55.8308,24.01633],[56.01799,24.07426],[55.95472,24.2172],[55.83367,24.20193],[55.77658,24.23476],[55.76558,24.23227],[55.75257,24.23466],[55.75382,24.2466],[55.75939,24.26114],[55.76781,24.26209],[55.79145,24.27914],[55.80747,24.31069],[55.83395,24.32776],[55.83271,24.41521],[55.76461,24.5287],[55.83271,24.68567],[55.83408,24.77858],[55.81348,24.80102],[55.81116,24.9116],[55.85094,24.96858],[55.90849,24.96771],[55.96316,25.00857],[56.05715,24.95727],[56.05106,24.87461],[55.97467,24.89639],[55.97836,24.87673],[56.03535,24.81161],[56.06128,24.74457],[56.13684,24.73699],[56.20062,24.78565],[56.20568,24.85063],[56.30269,24.88334],[56.34873,24.93205],[56.3227,24.97284],[56.86325,25.03856],[61.45114,22.55394]]]]}},{type:"Feature",properties:{iso1A2:"GU",iso1A3:"GUM",iso1N3:"316",wikidata:"Q16635",nameEn:"Guam",country:"US",groups:["057","009"],roadSpeedUnit:"mph",callingCodes:["1 671"]},geometry:{type:"MultiPolygon",coordinates:[[[[146.25931,13.85876],[144.61642,12.82462],[143.82485,13.92273],[146.25931,13.85876]]]]}},{type:"Feature",properties:{iso1A2:"PA",iso1A3:"PAN",iso1N3:"591",wikidata:"Q804",nameEn:"Panama",groups:["013","003","419","019"],callingCodes:["507"]},geometry:{type:"MultiPolygon",coordinates:[[[[-77.32389,8.81247],[-77.45064,8.49991],[-77.17257,7.97422],[-77.57185,7.51147],[-77.72514,7.72348],[-77.72157,7.47612],[-77.81426,7.48319],[-77.89178,7.22681],[-78.06168,7.07793],[-82.13751,6.97312],[-82.94503,7.93865],[-82.89978,8.04083],[-82.89137,8.05755],[-82.88641,8.10219],[-82.9388,8.26634],[-83.05209,8.33394],[-82.93056,8.43465],[-82.8679,8.44042],[-82.8382,8.48117],[-82.83322,8.52464],[-82.83975,8.54755],[-82.82739,8.60153],[-82.8794,8.6981],[-82.92068,8.74832],[-82.91377,8.774],[-82.88253,8.83331],[-82.72126,8.97125],[-82.93516,9.07687],[-82.93516,9.46741],[-82.84871,9.4973],[-82.87919,9.62645],[-82.77206,9.59573],[-82.66667,9.49746],[-82.61345,9.49881],[-82.56507,9.57279],[-82.51044,9.65379],[-78.79327,9.93766],[-77.58292,9.22278],[-77.32389,8.81247]]]]}},{type:"Feature",properties:{iso1A2:"GY",iso1A3:"GUY",iso1N3:"328",wikidata:"Q734",nameEn:"Guyana",groups:["005","419","019"],driveSide:"left",callingCodes:["592"]},geometry:{type:"MultiPolygon",coordinates:[[[[-56.84822,6.73257],[-57.31629,5.33714],[-57.22536,5.15605],[-57.37442,5.0208],[-57.8699,4.89394],[-58.0307,3.95513],[-57.35891,3.32121],[-56.70519,2.02964],[-56.55439,2.02003],[-56.47045,1.95135],[-56.7659,1.89509],[-57.07092,1.95304],[-57.09109,2.01854],[-57.23981,1.95808],[-57.35073,1.98327],[-57.55743,1.69605],[-57.77281,1.73344],[-57.97336,1.64566],[-58.01873,1.51966],[-58.33887,1.58014],[-58.4858,1.48399],[-58.53571,1.29154],[-58.84229,1.17749],[-58.92072,1.31293],[-59.25583,1.40559],[-59.74066,1.87596],[-59.7264,2.27497],[-59.91177,2.36759],[-59.99733,2.92312],[-59.79769,3.37162],[-59.86899,3.57089],[-59.51963,3.91951],[-59.73353,4.20399],[-59.69361,4.34069],[-59.78878,4.45637],[-60.15953,4.53456],[-60.04189,4.69801],[-59.98129,5.07097],[-60.20944,5.28754],[-60.32352,5.21299],[-60.73204,5.20931],[-61.4041,5.95304],[-61.15058,6.19558],[-61.20762,6.58174],[-61.13632,6.70922],[-60.54873,6.8631],[-60.39419,6.94847],[-60.28074,7.1162],[-60.44116,7.20817],[-60.54098,7.14804],[-60.63367,7.25061],[-60.59802,7.33194],[-60.71923,7.55817],[-60.64793,7.56877],[-60.51959,7.83373],[-60.38056,7.8302],[-60.02407,8.04557],[-59.97059,8.20791],[-59.83156,8.23261],[-59.80661,8.28906],[-59.85562,8.35213],[-59.98508,8.53046],[-59.54058,8.6862],[-56.84822,6.73257]]]]}},{type:"Feature",properties:{iso1A2:"PE",iso1A3:"PER",iso1N3:"604",wikidata:"Q419",nameEn:"Peru",groups:["005","419","019"],callingCodes:["51"]},geometry:{type:"MultiPolygon",coordinates:[[[[-74.26675,-0.97229],[-73.65312,-1.26222],[-72.92587,-2.44514],[-71.75223,-2.15058],[-70.94377,-2.23142],[-70.04609,-2.73906],[-70.71396,-3.7921],[-70.52393,-3.87553],[-70.3374,-3.79505],[-69.94708,-4.2431],[-70.00888,-4.37833],[-70.11305,-4.27281],[-70.19582,-4.3607],[-70.33236,-4.15214],[-70.77601,-4.15717],[-70.96814,-4.36915],[-71.87003,-4.51661],[-72.64391,-5.0391],[-72.83973,-5.14765],[-73.24579,-6.05764],[-73.12983,-6.43852],[-73.73986,-6.87919],[-73.77011,-7.28944],[-73.96938,-7.58465],[-73.65485,-7.77897],[-73.76576,-7.89884],[-72.92886,-9.04074],[-73.21498,-9.40904],[-72.72216,-9.41397],[-72.31883,-9.5184],[-72.14742,-9.98049],[-71.23394,-9.9668],[-70.53373,-9.42628],[-70.58453,-9.58303],[-70.55429,-9.76692],[-70.62487,-9.80666],[-70.64134,-11.0108],[-70.51395,-10.92249],[-70.38791,-11.07096],[-69.90896,-10.92744],[-69.57835,-10.94051],[-69.57156,-10.94555],[-68.98115,-11.8979],[-68.65044,-12.50689],[-68.85615,-12.87769],[-68.8864,-13.40792],[-69.05265,-13.68546],[-68.88135,-14.18639],[-69.36254,-14.94634],[-69.14856,-15.23478],[-69.40336,-15.61358],[-69.20291,-16.16668],[-69.09986,-16.22693],[-68.96238,-16.194],[-68.79464,-16.33272],[-68.98358,-16.42165],[-69.04027,-16.57214],[-69.00853,-16.66769],[-69.16896,-16.72233],[-69.62883,-17.28142],[-69.46863,-17.37466],[-69.46897,-17.4988],[-69.66483,-17.65083],[-69.79087,-17.65563],[-69.82868,-17.72048],[-69.75305,-17.94605],[-69.81607,-18.12582],[-69.96732,-18.25992],[-70.16394,-18.31737],[-70.31267,-18.31258],[-70.378,-18.3495],[-70.59118,-18.35072],[-85.71054,-21.15413],[-84.52388,-3.36941],[-80.30602,-3.39149],[-80.20647,-3.431],[-80.24123,-3.46124],[-80.24475,-3.47846],[-80.24586,-3.48677],[-80.23651,-3.48652],[-80.22629,-3.501],[-80.20535,-3.51667],[-80.21642,-3.5888],[-80.19848,-3.59249],[-80.18741,-3.63994],[-80.19926,-3.68894],[-80.13232,-3.90317],[-80.46386,-4.01342],[-80.4822,-4.05477],[-80.45023,-4.20938],[-80.32114,-4.21323],[-80.46386,-4.41516],[-80.39256,-4.48269],[-80.13945,-4.29786],[-79.79722,-4.47558],[-79.59402,-4.46848],[-79.26248,-4.95167],[-79.1162,-4.97774],[-79.01659,-5.01481],[-78.85149,-4.66795],[-78.68394,-4.60754],[-78.34362,-3.38633],[-78.24589,-3.39907],[-78.22642,-3.51113],[-78.14324,-3.47653],[-78.19369,-3.36431],[-77.94147,-3.05454],[-76.6324,-2.58397],[-76.05203,-2.12179],[-75.57429,-1.55961],[-75.3872,-0.9374],[-75.22862,-0.95588],[-75.22862,-0.60048],[-75.53615,-0.19213],[-75.60169,-0.18708],[-75.61997,-0.10012],[-75.40192,-0.17196],[-75.25764,-0.11943],[-75.18513,-0.0308],[-74.42701,-0.50218],[-74.26675,-0.97229]]]]}},{type:"Feature",properties:{iso1A2:"HM",iso1A3:"HMD",iso1N3:"334",wikidata:"Q131198",nameEn:"Heard Island and McDonald Islands",country:"AU",groups:["053","009"],driveSide:"left"},geometry:{type:"MultiPolygon",coordinates:[[[[71.08716,-53.87687],[72.87012,-51.48322],[75.44182,-53.99822],[71.08716,-53.87687]]]]}},{type:"Feature",properties:{iso1A2:"PF",iso1A3:"PYF",iso1N3:"258",wikidata:"Q30971",nameEn:"French Polynesia",country:"FR",groups:["061","009"],callingCodes:["689"]},geometry:{type:"MultiPolygon",coordinates:[[[[-149.6249,-7.51261],[-133.65593,-7.46952],[-133.61511,-21.93325],[-133.59543,-28.4709],[-156.44843,-28.52556],[-156.46451,-23.21255],[-156.4957,-12.32002],[-149.61166,-12.30171],[-149.6249,-7.51261]]]]}},{type:"Feature",properties:{iso1A2:"HR",iso1A3:"HRV",iso1N3:"191",wikidata:"Q224",nameEn:"Croatia",groups:["EU","039","150"],callingCodes:["385"]},geometry:{type:"MultiPolygon",coordinates:[[[[17.6444,42.88641],[17.68151,42.92725],[17.7948,42.89556],[17.80854,42.9182],[17.88201,42.83668],[18.24318,42.6112],[18.36197,42.61423],[18.43735,42.55921],[18.44307,42.51077],[18.43588,42.48556],[18.52152,42.42302],[18.54128,42.39171],[18.45131,42.21682],[16.15283,42.18525],[13.12821,44.48877],[13.05142,45.33128],[13.45644,45.59464],[13.56979,45.4895],[13.62902,45.45898],[13.67398,45.4436],[13.7785,45.46787],[13.81742,45.43729],[13.88124,45.42637],[13.90771,45.45149],[13.97309,45.45258],[13.99488,45.47551],[13.96063,45.50825],[14.00578,45.52352],[14.07116,45.48752],[14.20348,45.46896],[14.22371,45.50388],[14.24239,45.50607],[14.26611,45.48239],[14.27681,45.4902],[14.32487,45.47142],[14.36693,45.48642],[14.49769,45.54424],[14.5008,45.60852],[14.53816,45.6205],[14.57397,45.67165],[14.60977,45.66403],[14.59576,45.62812],[14.69694,45.57366],[14.68605,45.53006],[14.71718,45.53442],[14.80124,45.49515],[14.81992,45.45913],[14.90554,45.47769],[14.92266,45.52788],[15.02385,45.48533],[15.05187,45.49079],[15.16862,45.42309],[15.27758,45.46678],[15.33051,45.45258],[15.38188,45.48752],[15.30249,45.53224],[15.29837,45.5841],[15.27747,45.60504],[15.31027,45.6303],[15.34695,45.63382],[15.34214,45.64702],[15.38952,45.63682],[15.4057,45.64727],[15.34919,45.71623],[15.30872,45.69014],[15.25423,45.72275],[15.40836,45.79491],[15.47531,45.79802],[15.47325,45.8253],[15.52234,45.82195],[15.57952,45.84953],[15.64185,45.82915],[15.66662,45.84085],[15.70411,45.8465],[15.68232,45.86819],[15.68383,45.88867],[15.67967,45.90455],[15.70636,45.92116],[15.70327,46.00015],[15.71246,46.01196],[15.72977,46.04682],[15.62317,46.09103],[15.6083,46.11992],[15.59909,46.14761],[15.64904,46.19229],[15.6434,46.21396],[15.67395,46.22478],[15.75436,46.21969],[15.75479,46.20336],[15.78817,46.21719],[15.79284,46.25811],[15.97965,46.30652],[16.07616,46.3463],[16.07314,46.36458],[16.05065,46.3833],[16.05281,46.39141],[16.14859,46.40547],[16.18824,46.38282],[16.30233,46.37837],[16.30162,46.40437],[16.27329,46.41467],[16.27398,46.42875],[16.25124,46.48067],[16.23961,46.49653],[16.26759,46.50566],[16.26733,46.51505],[16.29793,46.5121],[16.37193,46.55008],[16.38771,46.53608],[16.44036,46.5171],[16.5007,46.49644],[16.52604,46.47831],[16.59527,46.47524],[16.6639,46.45203],[16.7154,46.39523],[16.8541,46.36255],[16.8903,46.28122],[17.14592,46.16697],[17.35672,45.95209],[17.56821,45.93728],[17.66545,45.84207],[17.87377,45.78522],[17.99805,45.79671],[18.08869,45.76511],[18.12439,45.78905],[18.44368,45.73972],[18.57483,45.80772],[18.6792,45.92057],[18.80211,45.87995],[18.81394,45.91329],[18.85783,45.85493],[18.90305,45.71863],[18.96691,45.66731],[18.88776,45.57253],[18.94562,45.53712],[19.07471,45.53086],[19.08364,45.48804],[18.99918,45.49333],[18.97446,45.37528],[19.10774,45.29547],[19.28208,45.23813],[19.41941,45.23475],[19.43589,45.17137],[19.19144,45.17863],[19.14063,45.12972],[19.07952,45.14668],[19.1011,45.01191],[19.05205,44.97692],[19.15573,44.95409],[19.06853,44.89915],[19.02871,44.92541],[18.98957,44.90645],[19.01994,44.85493],[18.8704,44.85097],[18.76347,44.90669],[18.76369,44.93707],[18.80661,44.93561],[18.78357,44.97741],[18.65723,45.07544],[18.47939,45.05871],[18.41896,45.11083],[18.32077,45.1021],[18.24387,45.13699],[18.1624,45.07654],[18.03121,45.12632],[18.01594,45.15163],[17.99479,45.14958],[17.97834,45.13831],[17.97336,45.12245],[17.93706,45.08016],[17.87148,45.04645],[17.84826,45.04489],[17.66571,45.13408],[17.59104,45.10816],[17.51469,45.10791],[17.47589,45.12656],[17.45615,45.12523],[17.4498,45.16119],[17.41229,45.13335],[17.33573,45.14521],[17.32092,45.16246],[17.26815,45.18444],[17.25131,45.14957],[17.24325,45.146],[17.18438,45.14764],[17.0415,45.20759],[16.9385,45.22742],[16.92405,45.27607],[16.83804,45.18951],[16.81137,45.18434],[16.78219,45.19002],[16.74845,45.20393],[16.64962,45.20714],[16.60194,45.23042],[16.56559,45.22307],[16.5501,45.2212],[16.52982,45.22713],[16.49155,45.21153],[16.4634,45.14522],[16.40023,45.1147],[16.38309,45.05955],[16.38219,45.05139],[16.3749,45.05206],[16.35863,45.03529],[16.35404,45.00241],[16.29036,44.99732],[16.12153,45.09616],[15.98412,45.23088],[15.83512,45.22459],[15.76371,45.16508],[15.78842,45.11519],[15.74585,45.0638],[15.78568,44.97401],[15.74723,44.96818],[15.76096,44.87045],[15.79472,44.8455],[15.72584,44.82334],[15.8255,44.71501],[15.89348,44.74964],[16.05828,44.61538],[16.00884,44.58605],[16.03012,44.55572],[16.10566,44.52586],[16.16814,44.40679],[16.12969,44.38275],[16.21346,44.35231],[16.18688,44.27012],[16.36864,44.08263],[16.43662,44.07523],[16.43629,44.02826],[16.50528,44.0244],[16.55472,43.95326],[16.70922,43.84887],[16.75316,43.77157],[16.80736,43.76011],[17.00585,43.58037],[17.15828,43.49376],[17.24411,43.49376],[17.29699,43.44542],[17.25579,43.40353],[17.286,43.33065],[17.46986,43.16559],[17.64268,43.08595],[17.70879,42.97223],[17.5392,42.92787],[17.6444,42.88641]]]]}},{type:"Feature",properties:{iso1A2:"PG",iso1A3:"PNG",iso1N3:"598",wikidata:"Q691",nameEn:"Papua New Guinea",groups:["054","009"],driveSide:"left",callingCodes:["675"]},geometry:{type:"MultiPolygon",coordinates:[[[[141.03157,2.12829],[160.43769,-4.17974],[156.03296,-6.55528],[156.03993,-6.65703],[155.92557,-6.84664],[155.69784,-6.92661],[155.60735,-6.92266],[154.74815,-7.33315],[155.22803,-12.9001],[144.30183,-9.48146],[142.81927,-9.31709],[142.5723,-9.35994],[142.31447,-9.24611],[142.23304,-9.19253],[142.1462,-9.19923],[142.0953,-9.23534],[142.0601,-9.56571],[140.88922,-9.34945],[141.00782,-9.1242],[141.01763,-6.90181],[140.85295,-6.72996],[140.99813,-6.3233],[141.03157,2.12829]]]]}},{type:"Feature",properties:{iso1A2:"HU",iso1A3:"HUN",iso1N3:"348",wikidata:"Q28",nameEn:"Hungary",groups:["EU","151","150"],callingCodes:["36"]},geometry:{type:"MultiPolygon",coordinates:[[[[21.72525,48.34628],[21.8279,48.33321],[21.83339,48.36242],[22.14689,48.4005],[22.2083,48.42534],[22.38133,48.23726],[22.49806,48.25189],[22.59007,48.15121],[22.58733,48.10813],[22.66835,48.09162],[22.73427,48.12005],[22.81804,48.11363],[22.87847,48.04665],[22.84276,47.98602],[22.89849,47.95851],[22.77991,47.87211],[22.76617,47.8417],[22.67247,47.7871],[22.46559,47.76583],[22.41979,47.7391],[22.31816,47.76126],[22.00917,47.50492],[22.03389,47.42508],[22.01055,47.37767],[21.94463,47.38046],[21.78395,47.11104],[21.648,47.03902],[21.68645,46.99595],[21.59581,46.91628],[21.59307,46.86935],[21.52028,46.84118],[21.48935,46.7577],[21.5151,46.72147],[21.43926,46.65109],[21.33214,46.63035],[21.26929,46.4993],[21.28061,46.44941],[21.16872,46.30118],[21.06572,46.24897],[20.86797,46.28884],[20.74574,46.25467],[20.76085,46.21002],[20.63863,46.12728],[20.49718,46.18721],[20.45377,46.14405],[20.35573,46.16629],[20.28324,46.1438],[20.26068,46.12332],[20.09713,46.17315],[20.03533,46.14509],[20.01816,46.17696],[19.93508,46.17553],[19.81491,46.1313],[19.66007,46.19005],[19.56113,46.16824],[19.52473,46.1171],[19.28826,45.99694],[19.14543,45.9998],[19.10388,46.04015],[19.0791,45.96458],[19.01284,45.96529],[18.99712,45.93537],[18.81394,45.91329],[18.80211,45.87995],[18.6792,45.92057],[18.57483,45.80772],[18.44368,45.73972],[18.12439,45.78905],[18.08869,45.76511],[17.99805,45.79671],[17.87377,45.78522],[17.66545,45.84207],[17.56821,45.93728],[17.35672,45.95209],[17.14592,46.16697],[16.8903,46.28122],[16.8541,46.36255],[16.7154,46.39523],[16.6639,46.45203],[16.59527,46.47524],[16.52604,46.5051],[16.52885,46.53303],[16.50139,46.56684],[16.39217,46.63673],[16.38594,46.6549],[16.41863,46.66238],[16.42641,46.69228],[16.37816,46.69975],[16.30966,46.7787],[16.31303,46.79838],[16.3408,46.80641],[16.34547,46.83836],[16.2941,46.87137],[16.2365,46.87775],[16.21892,46.86961],[16.15711,46.85434],[16.14365,46.8547],[16.10983,46.867],[16.19904,46.94134],[16.22403,46.939],[16.27594,46.9643],[16.28202,47.00159],[16.51369,47.00084],[16.43936,47.03548],[16.52176,47.05747],[16.46134,47.09395],[16.52863,47.13974],[16.44932,47.14418],[16.46442,47.16845],[16.4523,47.18812],[16.42801,47.18422],[16.41739,47.20649],[16.43663,47.21127],[16.44142,47.25079],[16.47782,47.25918],[16.45104,47.41181],[16.49908,47.39416],[16.52414,47.41007],[16.57152,47.40868],[16.6718,47.46139],[16.64821,47.50155],[16.71059,47.52692],[16.64193,47.63114],[16.58699,47.61772],[16.4222,47.66537],[16.55129,47.72268],[16.53514,47.73837],[16.54779,47.75074],[16.61183,47.76171],[16.65679,47.74197],[16.72089,47.73469],[16.7511,47.67878],[16.82938,47.68432],[16.86509,47.72268],[16.87538,47.68895],[17.08893,47.70928],[17.05048,47.79377],[17.07039,47.81129],[17.00997,47.86245],[17.08275,47.87719],[17.11022,47.92461],[17.09786,47.97336],[17.16001,48.00636],[17.23699,48.02094],[17.71215,47.7548],[18.02938,47.75665],[18.29305,47.73541],[18.56496,47.76588],[18.66521,47.76772],[18.74074,47.8157],[18.8506,47.82308],[18.76821,47.87469],[18.76134,47.97499],[18.82176,48.04206],[19.01952,48.07052],[19.23924,48.0595],[19.28182,48.08336],[19.47957,48.09437],[19.52489,48.19791],[19.63338,48.25006],[19.92452,48.1283],[20.24312,48.2784],[20.29943,48.26104],[20.5215,48.53336],[20.83248,48.5824],[21.11516,48.49546],[21.44063,48.58456],[21.6068,48.50365],[21.67134,48.3989],[21.72525,48.34628]]]]}},{type:"Feature",properties:{iso1A2:"PH",iso1A3:"PHL",iso1N3:"608",wikidata:"Q928",nameEn:"Philippines",aliases:["PI","RP"],groups:["035","142"],callingCodes:["63"]},geometry:{type:"MultiPolygon",coordinates:[[[[129.19694,7.84182],[124.97752,4.82064],[118.41402,3.99509],[118.07935,4.15511],[118.8663,4.44172],[118.75416,4.59798],[119.44841,5.09568],[119.34756,5.53889],[117.89159,6.25755],[117.43832,7.3895],[117.17735,7.52841],[116.79524,7.43869],[115.39742,10.92666],[118.82252,14.67191],[120.69238,21.52331],[121.8109,21.77688],[129.19694,7.84182]]]]}},{type:"Feature",properties:{iso1A2:"ID",iso1A3:"IDN",iso1N3:"360",wikidata:"Q252",nameEn:"Indonesia",aliases:["RI"],groups:["035","142"],driveSide:"left",callingCodes:["62"]},geometry:{type:"MultiPolygon",coordinates:[[[[141.02352,0.08993],[140.99813,-6.3233],[140.85295,-6.72996],[141.01763,-6.90181],[141.00782,-9.1242],[140.88922,-9.34945],[127.55165,-9.05052],[127.42116,-8.22471],[125.87691,-8.31789],[125.65946,-8.06136],[125.31127,-8.22976],[124.92337,-8.75859],[124.33472,-9.11416],[124.04628,-9.22671],[124.04286,-9.34243],[124.10539,-9.41206],[124.14517,-9.42324],[124.21247,-9.36904],[124.28115,-9.42189],[124.28115,-9.50453],[124.3535,-9.48493],[124.35258,-9.43002],[124.38554,-9.3582],[124.45971,-9.30263],[124.46701,-9.13002],[124.94011,-8.85617],[124.97742,-9.08128],[125.11764,-8.96359],[125.18632,-9.03142],[125.18907,-9.16434],[125.09434,-9.19669],[125.04044,-9.17093],[124.97892,-9.19281],[125.09025,-9.46406],[125.68138,-9.85176],[122.14954,-11.52517],[74.28481,-3.17525],[96.11174,6.69841],[103.03657,1.30383],[103.56591,1.19719],[103.66049,1.18825],[103.74084,1.12902],[104.03085,1.26954],[104.12282,1.27714],[104.34728,1.33529],[104.56723,1.44271],[105.01437,3.24936],[108.10426,5.42408],[109.71058,2.32059],[109.64506,2.08014],[109.62558,1.99182],[109.53794,1.91771],[109.57923,1.80624],[109.66397,1.79972],[109.66397,1.60425],[110.35354,0.98869],[110.49182,0.88088],[110.62374,0.873],[111.22979,1.08326],[111.55434,0.97864],[111.82846,0.99349],[111.94553,1.12016],[112.15679,1.17004],[112.2127,1.44135],[112.48648,1.56516],[113.021,1.57819],[113.01448,1.42832],[113.64677,1.23933],[114.03788,1.44787],[114.57892,1.5],[114.80706,1.92351],[114.80706,2.21665],[115.1721,2.49671],[115.11343,2.82879],[115.53713,3.14776],[115.58276,3.93499],[115.90217,4.37708],[117.25801,4.35108],[117.47313,4.18857],[117.67641,4.16535],[117.89538,4.16637],[118.07935,4.15511],[118.41402,3.99509],[124.97752,4.82064],[126.69413,6.02692],[128.97621,3.08804],[141.02352,0.08993]]]]}},{type:"Feature",properties:{iso1A2:"PK",iso1A3:"PAK",iso1N3:"586",wikidata:"Q843",nameEn:"Pakistan",groups:["034","142"],driveSide:"left",callingCodes:["92"]},geometry:{type:"MultiPolygon",coordinates:[[[[75.72737,36.7529],[75.92391,36.56986],[76.0324,36.41198],[76.00906,36.17511],[75.93028,36.13136],[76.15325,35.9264],[76.14913,35.82848],[76.33453,35.84296],[76.50961,35.8908],[76.77323,35.66062],[76.75475,35.52617],[76.85088,35.39754],[76.93465,35.39866],[77.11796,35.05419],[76.99251,34.93349],[76.87193,34.96906],[76.74514,34.92488],[76.74377,34.84039],[76.67648,34.76371],[76.47186,34.78965],[76.15463,34.6429],[76.04614,34.67566],[75.75438,34.51827],[75.38009,34.55021],[75.01479,34.64629],[74.6663,34.703],[74.58083,34.77386],[74.31239,34.79626],[74.12897,34.70073],[73.96423,34.68244],[73.93401,34.63386],[73.93951,34.57169],[73.89419,34.54568],[73.88732,34.48911],[73.74999,34.3781],[73.74862,34.34183],[73.8475,34.32935],[73.90517,34.35317],[73.98208,34.2522],[73.90677,34.10504],[73.88732,34.05105],[73.91341,34.01235],[74.21554,34.03853],[74.25262,34.01577],[74.26086,33.92237],[74.14001,33.83002],[74.05898,33.82089],[74.00891,33.75437],[73.96423,33.73071],[73.98968,33.66155],[73.97367,33.64061],[74.03576,33.56718],[74.10115,33.56392],[74.18121,33.4745],[74.17983,33.3679],[74.08782,33.26232],[74.01366,33.25199],[74.02144,33.18908],[74.15374,33.13477],[74.17571,33.07495],[74.31854,33.02891],[74.34875,32.97823],[74.31227,32.92795],[74.41467,32.90563],[74.45312,32.77755],[74.6289,32.75561],[74.64675,32.82604],[74.7113,32.84219],[74.65345,32.71225],[74.69542,32.66792],[74.64424,32.60985],[74.65251,32.56416],[74.67431,32.56676],[74.68362,32.49298],[74.84725,32.49075],[74.97634,32.45367],[75.03265,32.49538],[75.28259,32.36556],[75.38046,32.26836],[75.25649,32.10187],[75.00793,32.03786],[74.9269,32.0658],[74.86236,32.04485],[74.79919,31.95983],[74.58907,31.87824],[74.47771,31.72227],[74.57498,31.60382],[74.61517,31.55698],[74.59319,31.50197],[74.64713,31.45605],[74.59773,31.4136],[74.53223,31.30321],[74.51629,31.13829],[74.56023,31.08303],[74.60281,31.10419],[74.60006,31.13711],[74.6852,31.12771],[74.67971,31.05479],[74.5616,31.04153],[73.88993,30.36305],[73.95736,30.28466],[73.97225,30.19829],[73.80299,30.06969],[73.58665,30.01848],[73.3962,29.94707],[73.28094,29.56646],[73.05886,29.1878],[73.01337,29.16422],[72.94272,29.02487],[72.40402,28.78283],[72.29495,28.66367],[72.20329,28.3869],[71.9244,28.11555],[71.89921,27.96035],[70.79054,27.68423],[70.60927,28.02178],[70.37307,28.01208],[70.12502,27.8057],[70.03136,27.56627],[69.58519,27.18109],[69.50904,26.74892],[69.88555,26.56836],[70.05584,26.60398],[70.17532,26.55362],[70.17532,26.24118],[70.08193,26.08094],[70.0985,25.93238],[70.2687,25.71156],[70.37444,25.67443],[70.53649,25.68928],[70.60378,25.71898],[70.67382,25.68186],[70.66695,25.39314],[70.89148,25.15064],[70.94002,24.92843],[71.09405,24.69017],[70.97594,24.60904],[71.00341,24.46038],[71.12838,24.42662],[71.04461,24.34657],[70.94985,24.3791],[70.85784,24.30903],[70.88393,24.27398],[70.71502,24.23517],[70.57906,24.27774],[70.5667,24.43787],[70.11712,24.30915],[70.03428,24.172],[69.73335,24.17007],[69.59579,24.29777],[69.29778,24.28712],[69.19341,24.25646],[69.07806,24.29777],[68.97781,24.26021],[68.90914,24.33156],[68.7416,24.31904],[68.74643,23.97027],[68.39339,23.96838],[68.20763,23.85849],[68.11329,23.53945],[61.5251,24.57287],[61.57592,25.0492],[61.6433,25.27541],[61.683,25.66638],[61.83968,25.7538],[61.83831,26.07249],[61.89391,26.26251],[62.05117,26.31647],[62.21304,26.26601],[62.31484,26.528],[62.77352,26.64099],[63.1889,26.65072],[63.18688,26.83844],[63.25005,26.84212],[63.25005,27.08692],[63.32283,27.14437],[63.19649,27.25674],[62.80604,27.22412],[62.79684,27.34381],[62.84905,27.47627],[62.7638,28.02992],[62.79412,28.28108],[62.59499,28.24842],[62.40259,28.42703],[61.93581,28.55284],[61.65978,28.77937],[61.53765,29.00507],[61.31508,29.38903],[60.87231,29.86514],[62.47751,29.40782],[63.5876,29.50456],[64.12966,29.39157],[64.19796,29.50407],[64.62116,29.58903],[65.04005,29.53957],[66.24175,29.85181],[66.36042,29.9583],[66.23609,30.06321],[66.34869,30.404],[66.28413,30.57001],[66.39194,30.9408],[66.42645,30.95309],[66.58175,30.97532],[66.68166,31.07597],[66.72561,31.20526],[66.83273,31.26867],[67.04147,31.31561],[67.03323,31.24519],[67.29964,31.19586],[67.78854,31.33203],[67.7748,31.4188],[67.62374,31.40473],[67.58323,31.52772],[67.72056,31.52304],[67.86887,31.63536],[68.00071,31.6564],[68.1655,31.82691],[68.25614,31.80357],[68.27605,31.75863],[68.44222,31.76446],[68.57475,31.83158],[68.6956,31.75687],[68.79997,31.61665],[68.91078,31.59687],[68.95995,31.64822],[69.00939,31.62249],[69.11514,31.70782],[69.20577,31.85957],[69.3225,31.93186],[69.27032,32.14141],[69.27932,32.29119],[69.23599,32.45946],[69.2868,32.53938],[69.38155,32.56601],[69.44747,32.6678],[69.43649,32.7302],[69.38018,32.76601],[69.47082,32.85834],[69.5436,32.8768],[69.49854,32.88843],[69.49004,33.01509],[69.57656,33.09911],[69.71526,33.09911],[69.79766,33.13247],[69.85259,33.09451],[70.02563,33.14282],[70.07369,33.22557],[70.13686,33.21064],[70.32775,33.34496],[70.17062,33.53535],[70.20141,33.64387],[70.14785,33.6553],[70.14236,33.71701],[70.00503,33.73528],[69.85671,33.93719],[69.87307,33.9689],[69.90203,34.04194],[70.54336,33.9463],[70.88119,33.97933],[71.07345,34.06242],[71.06933,34.10564],[71.09307,34.11961],[71.09453,34.13524],[71.13078,34.16503],[71.12815,34.26619],[71.17662,34.36769],[71.02401,34.44835],[71.0089,34.54568],[71.11602,34.63047],[71.08718,34.69034],[71.28356,34.80882],[71.29472,34.87728],[71.50329,34.97328],[71.49917,35.00478],[71.55273,35.02615],[71.52938,35.09023],[71.67495,35.21262],[71.5541,35.28776],[71.54294,35.31037],[71.65435,35.4479],[71.49917,35.6267],[71.55273,35.71483],[71.37969,35.95865],[71.19505,36.04134],[71.60491,36.39429],[71.80267,36.49924],[72.18135,36.71838],[72.6323,36.84601],[73.82685,36.91421],[74.04856,36.82648],[74.43389,37.00977],[74.53739,36.96224],[74.56453,37.03023],[75.13839,37.02622],[75.40481,36.95382],[75.45562,36.71971],[75.72737,36.7529]]]]}},{type:"Feature",properties:{iso1A2:"IL",iso1A3:"ISR",iso1N3:"376",wikidata:"Q801",nameEn:"Israel",groups:["145","142"],callingCodes:["972"]},geometry:{type:"MultiPolygon",coordinates:[[[[34.052,31.46619],[33.62659,31.82938],[34.78515,33.20368],[35.10645,33.09318],[35.1924,33.08743],[35.31429,33.10515],[35.35223,33.05617],[35.43059,33.06659],[35.448,33.09264],[35.50272,33.09056],[35.50335,33.114],[35.52573,33.11921],[35.54228,33.19865],[35.5362,33.23196],[35.54808,33.236],[35.54544,33.25513],[35.55555,33.25844],[35.56523,33.28969],[35.58326,33.28381],[35.58502,33.26653],[35.62283,33.24226],[35.62019,33.27278],[35.77477,33.33609],[35.813,33.3172],[35.77513,33.27342],[35.81295,33.24841],[35.81647,33.2028],[35.83846,33.19397],[35.84285,33.16673],[35.81911,33.1336],[35.81911,33.11077],[35.84802,33.1031],[35.87188,32.98028],[35.89298,32.9456],[35.87012,32.91976],[35.84021,32.8725],[35.83758,32.82817],[35.78745,32.77938],[35.75983,32.74803],[35.68467,32.70715],[35.66527,32.681],[35.61669,32.67999],[35.59813,32.65159],[35.56614,32.64393],[35.57485,32.48669],[35.55494,32.42687],[35.55807,32.38674],[35.42078,32.41562],[35.41048,32.43706],[35.41598,32.45593],[35.42034,32.46009],[35.40224,32.50136],[35.35212,32.52047],[35.30685,32.51024],[35.29306,32.50947],[35.25049,32.52453],[35.2244,32.55289],[35.15937,32.50466],[35.10882,32.4757],[35.10024,32.47856],[35.09236,32.47614],[35.08564,32.46948],[35.07059,32.4585],[35.05423,32.41754],[35.05311,32.4024],[35.0421,32.38242],[35.05142,32.3667],[35.04243,32.35008],[35.01772,32.33863],[35.01119,32.28684],[35.02939,32.2671],[35.01841,32.23981],[34.98885,32.20758],[34.95703,32.19522],[34.96009,32.17503],[34.99039,32.14626],[34.98507,32.12606],[34.99437,32.10962],[34.9863,32.09551],[35.00261,32.027],[34.98682,31.96935],[35.00124,31.93264],[35.03489,31.92448],[35.03978,31.89276],[35.03489,31.85919],[34.99712,31.85569],[34.9724,31.83352],[35.01978,31.82944],[35.05617,31.85685],[35.07677,31.85627],[35.14174,31.81325],[35.18603,31.80901],[35.18169,31.82542],[35.19461,31.82687],[35.21469,31.81835],[35.216,31.83894],[35.21128,31.863],[35.20381,31.86716],[35.20673,31.88151],[35.20791,31.8821],[35.20945,31.8815],[35.21016,31.88237],[35.21276,31.88153],[35.2136,31.88241],[35.22014,31.88264],[35.22294,31.87889],[35.22567,31.86745],[35.22817,31.8638],[35.2249,31.85433],[35.2304,31.84222],[35.24816,31.8458],[35.25753,31.8387],[35.251,31.83085],[35.26404,31.82567],[35.25573,31.81362],[35.26058,31.79064],[35.25225,31.7678],[35.26319,31.74846],[35.25182,31.73945],[35.24981,31.72543],[35.2438,31.7201],[35.24315,31.71244],[35.23972,31.70896],[35.22392,31.71899],[35.21937,31.71578],[35.20538,31.72388],[35.18023,31.72067],[35.16478,31.73242],[35.15474,31.73352],[35.15119,31.73634],[35.13931,31.73012],[35.12933,31.7325],[35.11895,31.71454],[35.10782,31.71594],[35.08226,31.69107],[35.00879,31.65426],[34.95249,31.59813],[34.9415,31.55601],[34.94356,31.50743],[34.93258,31.47816],[34.89756,31.43891],[34.87833,31.39321],[34.88932,31.37093],[34.92571,31.34337],[35.02459,31.35979],[35.13033,31.3551],[35.22921,31.37445],[35.39675,31.49572],[35.47672,31.49578],[35.40316,31.25535],[35.43658,31.12444],[35.41371,30.95565],[35.33984,30.8802],[35.33456,30.81224],[35.29311,30.71365],[35.21379,30.60401],[35.19595,30.50297],[35.16218,30.43535],[35.19183,30.34636],[35.14108,30.07374],[35.02147,29.66343],[34.98207,29.58147],[34.97718,29.54294],[34.92298,29.45305],[34.26742,31.21998],[34.29417,31.24194],[34.36523,31.28963],[34.37381,31.30598],[34.36505,31.36404],[34.40077,31.40926],[34.48892,31.48365],[34.56797,31.54197],[34.48681,31.59711],[34.29262,31.70393],[34.052,31.46619]]]]}},{type:"Feature",properties:{iso1A2:"PL",iso1A3:"POL",iso1N3:"616",wikidata:"Q36",nameEn:"Poland",groups:["EU","151","150"],callingCodes:["48"]},geometry:{type:"MultiPolygon",coordinates:[[[[18.57853,55.25302],[19.64312,54.45423],[19.8038,54.44203],[20.63871,54.3706],[21.41123,54.32395],[22.79705,54.36264],[22.83756,54.40827],[23.00584,54.38514],[22.99649,54.35927],[23.05726,54.34565],[23.04323,54.31567],[23.104,54.29794],[23.13905,54.31567],[23.15526,54.31076],[23.15938,54.29894],[23.24656,54.25701],[23.3494,54.25155],[23.39525,54.21672],[23.42418,54.17911],[23.45223,54.17775],[23.49196,54.14764],[23.52702,54.04622],[23.48261,53.98855],[23.51284,53.95052],[23.62004,53.60942],[23.81995,53.24131],[23.85657,53.22923],[23.91393,53.16469],[23.87548,53.0831],[23.92184,53.02079],[23.94689,52.95919],[23.91805,52.94016],[23.93763,52.71332],[23.73615,52.6149],[23.58296,52.59868],[23.45112,52.53774],[23.34141,52.44845],[23.18196,52.28812],[23.20071,52.22848],[23.47859,52.18215],[23.54314,52.12148],[23.61,52.11264],[23.64066,52.07626],[23.68733,51.9906],[23.61523,51.92066],[23.62691,51.78208],[23.53198,51.74298],[23.57053,51.55938],[23.56236,51.53673],[23.62751,51.50512],[23.69905,51.40871],[23.63858,51.32182],[23.80678,51.18405],[23.90376,51.07697],[23.92217,51.00836],[24.04576,50.90196],[24.14524,50.86128],[24.0952,50.83262],[23.99254,50.83847],[23.95925,50.79271],[24.0595,50.71625],[24.0996,50.60752],[24.07048,50.5071],[24.03668,50.44507],[23.99563,50.41289],[23.79445,50.40481],[23.71382,50.38248],[23.67635,50.33385],[23.28221,50.0957],[22.99329,49.84249],[22.83179,49.69875],[22.80261,49.69098],[22.78304,49.65543],[22.64534,49.53094],[22.69444,49.49378],[22.748,49.32759],[22.72009,49.20288],[22.86336,49.10513],[22.89122,49.00725],[22.56155,49.08865],[22.04427,49.22136],[21.96385,49.3437],[21.82927,49.39467],[21.77983,49.35443],[21.62328,49.4447],[21.43376,49.41433],[21.27858,49.45988],[21.19756,49.4054],[21.12477,49.43666],[21.041,49.41791],[21.09799,49.37176],[20.98733,49.30774],[20.9229,49.29626],[20.77971,49.35383],[20.72274,49.41813],[20.61666,49.41791],[20.5631,49.375],[20.46422,49.41612],[20.39939,49.3896],[20.31728,49.39914],[20.31453,49.34817],[20.21977,49.35265],[20.13738,49.31685],[20.08238,49.1813],[19.98494,49.22904],[19.90529,49.23532],[19.86409,49.19316],[19.75286,49.20751],[19.82237,49.27806],[19.78581,49.41701],[19.72127,49.39288],[19.6375,49.40897],[19.64162,49.45184],[19.57845,49.46077],[19.53313,49.52856],[19.52626,49.57311],[19.45348,49.61583],[19.37795,49.574],[19.36009,49.53747],[19.25435,49.53391],[19.18019,49.41165],[18.9742,49.39557],[18.97283,49.49914],[18.94536,49.52143],[18.84521,49.51672],[18.84786,49.5446],[18.80479,49.6815],[18.72838,49.68163],[18.69817,49.70473],[18.62676,49.71983],[18.62943,49.74603],[18.62645,49.75002],[18.61368,49.75426],[18.61278,49.7618],[18.57183,49.83334],[18.60341,49.86256],[18.57045,49.87849],[18.57697,49.91565],[18.54299,49.92537],[18.54495,49.9079],[18.53423,49.89906],[18.41604,49.93498],[18.33562,49.94747],[18.33278,49.92415],[18.31914,49.91565],[18.27794,49.93863],[18.27107,49.96779],[18.21752,49.97309],[18.20241,49.99958],[18.10628,50.00223],[18.07898,50.04535],[18.03212,50.06574],[18.00396,50.04954],[18.04585,50.03311],[18.04585,50.01194],[18.00191,50.01723],[17.86886,49.97452],[17.77669,50.02253],[17.7506,50.07896],[17.6888,50.12037],[17.66683,50.10275],[17.59404,50.16437],[17.70528,50.18812],[17.76296,50.23382],[17.72176,50.25665],[17.74648,50.29966],[17.69292,50.32859],[17.67764,50.28977],[17.58889,50.27837],[17.3702,50.28123],[17.34548,50.2628],[17.34273,50.32947],[17.27681,50.32246],[17.19991,50.3654],[17.19579,50.38817],[17.14498,50.38117],[17.1224,50.39494],[16.89229,50.45117],[16.85933,50.41093],[16.90877,50.38642],[16.94448,50.31281],[16.99803,50.30316],[17.02138,50.27772],[16.99803,50.25753],[17.02825,50.23118],[17.00353,50.21449],[16.98018,50.24172],[16.8456,50.20834],[16.7014,50.09659],[16.63137,50.1142],[16.55446,50.16613],[16.56407,50.21009],[16.42674,50.32509],[16.39379,50.3207],[16.3622,50.34875],[16.36495,50.37679],[16.30289,50.38292],[16.28118,50.36891],[16.22821,50.41054],[16.21585,50.40627],[16.19526,50.43291],[16.31413,50.50274],[16.34572,50.49575],[16.44597,50.58041],[16.33611,50.66579],[16.23174,50.67101],[16.20839,50.63096],[16.10265,50.66405],[16.02437,50.60046],[15.98317,50.61528],[16.0175,50.63009],[15.97219,50.69799],[15.87331,50.67188],[15.81683,50.75666],[15.73186,50.73885],[15.43798,50.80833],[15.3803,50.77187],[15.36656,50.83956],[15.2773,50.8907],[15.27043,50.97724],[15.2361,50.99886],[15.1743,50.9833],[15.16744,51.01959],[15.11937,50.99021],[15.10152,51.01095],[15.06218,51.02269],[15.03895,51.0123],[15.02433,51.0242],[14.96419,50.99108],[15.01088,50.97984],[14.99852,50.86817],[14.82803,50.86966],[14.81664,50.88148],[14.89681,50.9422],[14.89252,50.94999],[14.92942,50.99744],[14.95529,51.04552],[14.97938,51.07742],[14.98229,51.11354],[14.99689,51.12205],[14.99079,51.14284],[14.99646,51.14365],[15.00083,51.14974],[14.99414,51.15813],[14.99311,51.16249],[15.0047,51.16874],[15.01242,51.21285],[15.04288,51.28387],[14.98008,51.33449],[14.96899,51.38367],[14.9652,51.44793],[14.94749,51.47155],[14.73219,51.52922],[14.72652,51.53902],[14.73047,51.54606],[14.71125,51.56209],[14.7727,51.61263],[14.75759,51.62318],[14.75392,51.67445],[14.69065,51.70842],[14.66386,51.73282],[14.64625,51.79472],[14.60493,51.80473],[14.59089,51.83302],[14.6588,51.88359],[14.6933,51.9044],[14.70601,51.92944],[14.7177,51.94048],[14.72163,51.95188],[14.71836,51.95606],[14.7139,51.95643],[14.70488,51.97679],[14.71339,52.00337],[14.76026,52.06624],[14.72971,52.09167],[14.6917,52.10283],[14.67683,52.13936],[14.70616,52.16927],[14.68344,52.19612],[14.71319,52.22144],[14.70139,52.25038],[14.58149,52.28007],[14.56378,52.33838],[14.55228,52.35264],[14.54423,52.42568],[14.63056,52.48993],[14.60081,52.53116],[14.6289,52.57136],[14.61073,52.59847],[14.22071,52.81175],[14.13806,52.82392],[14.12256,52.84311],[14.15873,52.87715],[14.14056,52.95786],[14.25954,53.00264],[14.35044,53.05829],[14.38679,53.13669],[14.36696,53.16444],[14.37853,53.20405],[14.40662,53.21098],[14.45125,53.26241],[14.44133,53.27427],[14.4215,53.27724],[14.35209,53.49506],[14.3273,53.50587],[14.30416,53.55499],[14.31904,53.61581],[14.2853,53.63392],[14.28477,53.65955],[14.27133,53.66613],[14.2836,53.67721],[14.26782,53.69866],[14.27249,53.74464],[14.21323,53.8664],[14.20823,53.90776],[14.18544,53.91258],[14.20647,53.91671],[14.22634,53.9291],[14.20811,54.12784],[18.57853,55.25302]]]]}},{type:"Feature",properties:{iso1A2:"IN",iso1A3:"IND",iso1N3:"356",wikidata:"Q668",nameEn:"India",groups:["034","142"],driveSide:"left",callingCodes:["91"]},geometry:{type:"MultiPolygon",coordinates:[[[[78.11664,35.48022],[78.03466,35.3785],[78.00033,35.23954],[78.22692,34.88771],[78.18435,34.7998],[78.27781,34.61484],[78.54964,34.57283],[78.56475,34.50835],[78.74465,34.45174],[79.05364,34.32482],[78.99802,34.3027],[78.91769,34.15452],[78.66225,34.08858],[78.65657,34.03195],[78.73367,34.01121],[78.77349,33.73871],[78.67599,33.66445],[78.73636,33.56521],[79.15252,33.17156],[79.14016,33.02545],[79.46562,32.69668],[79.26768,32.53277],[79.13174,32.47766],[79.0979,32.38051],[78.99322,32.37948],[78.96713,32.33655],[78.7831,32.46873],[78.73916,32.69438],[78.38897,32.53938],[78.4645,32.45367],[78.49609,32.2762],[78.68754,32.10256],[78.74404,32.00384],[78.78036,31.99478],[78.69933,31.78723],[78.84516,31.60631],[78.71032,31.50197],[78.77898,31.31209],[79.01931,31.42817],[79.14016,31.43403],[79.22805,31.34963],[79.59884,30.93943],[79.93255,30.88288],[80.20721,30.58541],[80.54504,30.44936],[80.83343,30.32023],[81.03953,30.20059],[80.93695,30.18229],[80.8778,30.13384],[80.67076,29.95732],[80.60226,29.95732],[80.56957,29.88176],[80.56247,29.86661],[80.48997,29.79566],[80.43458,29.80466],[80.41554,29.79451],[80.36803,29.73865],[80.38428,29.68513],[80.41858,29.63581],[80.37939,29.57098],[80.24322,29.44299],[80.31428,29.30784],[80.28626,29.20327],[80.24112,29.21414],[80.26602,29.13938],[80.23178,29.11626],[80.18085,29.13649],[80.05743,28.91479],[80.06957,28.82763],[80.12125,28.82346],[80.37188,28.63371],[80.44504,28.63098],[80.52443,28.54897],[80.50575,28.6706],[80.55142,28.69182],[80.89648,28.47237],[81.08507,28.38346],[81.19847,28.36284],[81.32923,28.13521],[81.38683,28.17638],[81.48179,28.12148],[81.47867,28.08303],[81.91223,27.84995],[81.97214,27.93322],[82.06554,27.92222],[82.46405,27.6716],[82.70378,27.72122],[82.74119,27.49838],[82.93261,27.50328],[82.94938,27.46036],[83.19413,27.45632],[83.27197,27.38309],[83.2673,27.36235],[83.29999,27.32778],[83.35136,27.33885],[83.38872,27.39276],[83.39495,27.4798],[83.61288,27.47013],[83.85595,27.35797],[83.86182,27.4241],[83.93306,27.44939],[84.02229,27.43836],[84.10791,27.52399],[84.21376,27.45218],[84.25735,27.44941],[84.29315,27.39],[84.62161,27.33885],[84.69166,27.21294],[84.64496,27.04669],[84.793,26.9968],[84.82913,27.01989],[84.85754,26.98984],[84.96687,26.95599],[84.97186,26.9149],[85.00536,26.89523],[85.05592,26.88991],[85.02635,26.85381],[85.15883,26.86966],[85.19291,26.86909],[85.18046,26.80519],[85.21159,26.75933],[85.34302,26.74954],[85.47752,26.79292],[85.56471,26.84133],[85.5757,26.85955],[85.59461,26.85161],[85.61621,26.86721],[85.66239,26.84822],[85.73483,26.79613],[85.72315,26.67471],[85.76907,26.63076],[85.83126,26.61134],[85.85126,26.60866],[85.8492,26.56667],[86.02729,26.66756],[86.13596,26.60651],[86.22513,26.58863],[86.26235,26.61886],[86.31564,26.61925],[86.49726,26.54218],[86.54258,26.53819],[86.57073,26.49825],[86.61313,26.48658],[86.62686,26.46891],[86.69124,26.45169],[86.74025,26.42386],[86.76797,26.45892],[86.82898,26.43919],[86.94543,26.52076],[86.95912,26.52076],[87.01559,26.53228],[87.04691,26.58685],[87.0707,26.58571],[87.09147,26.45039],[87.14751,26.40542],[87.18863,26.40558],[87.24682,26.4143],[87.26587,26.40592],[87.26568,26.37294],[87.34568,26.34787],[87.37314,26.40815],[87.46566,26.44058],[87.51571,26.43106],[87.55274,26.40596],[87.59175,26.38342],[87.66803,26.40294],[87.67893,26.43501],[87.76004,26.40711],[87.7918,26.46737],[87.84193,26.43663],[87.89085,26.48565],[87.90115,26.44923],[88.00895,26.36029],[88.09414,26.43732],[88.09963,26.54195],[88.16452,26.64111],[88.1659,26.68177],[88.19107,26.75516],[88.12302,26.95324],[88.13422,26.98705],[88.11719,26.98758],[87.9887,27.11045],[88.01587,27.21388],[88.01646,27.21612],[88.07277,27.43007],[88.04008,27.49223],[88.19107,27.79285],[88.1973,27.85067],[88.13378,27.88015],[88.1278,27.95417],[88.25332,27.9478],[88.54858,28.06057],[88.63235,28.12356],[88.83559,28.01936],[88.88091,27.85192],[88.77517,27.45415],[88.82981,27.38814],[88.91901,27.32483],[88.74219,27.144],[88.86984,27.10937],[88.8714,26.97488],[88.92301,26.99286],[88.95807,26.92668],[89.09554,26.89089],[89.12825,26.81661],[89.1926,26.81329],[89.37913,26.86224],[89.38319,26.85963],[89.3901,26.84225],[89.42349,26.83727],[89.63369,26.74402],[89.86124,26.73307],[90.04535,26.72422],[90.30402,26.85098],[90.39271,26.90704],[90.48504,26.8594],[90.67715,26.77215],[91.50067,26.79223],[91.83181,26.87318],[92.05523,26.8692],[92.11863,26.893],[92.03457,27.07334],[92.04702,27.26861],[92.12019,27.27829],[92.01132,27.47352],[91.65007,27.48287],[91.55819,27.6144],[91.6469,27.76358],[91.84722,27.76325],[91.87057,27.7195],[92.27432,27.89077],[92.32101,27.79363],[92.42538,27.80092],[92.7275,27.98662],[92.73025,28.05814],[92.65472,28.07632],[92.67486,28.15018],[92.93075,28.25671],[93.14635,28.37035],[93.18069,28.50319],[93.44621,28.67189],[93.72797,28.68821],[94.35897,29.01965],[94.2752,29.11687],[94.69318,29.31739],[94.81353,29.17804],[95.0978,29.14446],[95.11291,29.09527],[95.2214,29.10727],[95.26122,29.07727],[95.3038,29.13847],[95.41091,29.13007],[95.50842,29.13487],[95.72086,29.20797],[95.75149,29.32063],[95.84899,29.31464],[96.05361,29.38167],[96.31316,29.18643],[96.18682,29.11087],[96.20467,29.02325],[96.3626,29.10607],[96.61391,28.72742],[96.40929,28.51526],[96.48895,28.42955],[96.6455,28.61657],[96.85561,28.4875],[96.88445,28.39452],[96.98882,28.32564],[97.1289,28.3619],[97.34547,28.21385],[97.31292,28.06784],[97.35412,28.06663],[97.38845,28.01329],[97.35824,27.87256],[97.29919,27.92233],[96.90112,27.62149],[96.91431,27.45752],[97.17422,27.14052],[97.14675,27.09041],[96.89132,27.17474],[96.85287,27.2065],[96.88445,27.25046],[96.73888,27.36638],[96.55761,27.29928],[96.40779,27.29818],[96.15591,27.24572],[96.04949,27.19428],[95.93002,27.04149],[95.81603,27.01335],[95.437,26.7083],[95.30339,26.65372],[95.23513,26.68499],[95.05798,26.45408],[95.12801,26.38397],[95.11428,26.1019],[95.18556,26.07338],[94.80117,25.49359],[94.68032,25.47003],[94.57458,25.20318],[94.74212,25.13606],[94.73937,25.00545],[94.60204,24.70889],[94.5526,24.70764],[94.50729,24.59281],[94.45279,24.56656],[94.32362,24.27692],[94.30215,24.23752],[94.14081,23.83333],[93.92089,23.95812],[93.80279,23.92549],[93.75952,24.0003],[93.62871,24.00922],[93.50616,23.94432],[93.46633,23.97067],[93.41415,24.07854],[93.34735,24.10151],[93.32351,24.04468],[93.36059,23.93176],[93.3908,23.92925],[93.3908,23.7622],[93.43475,23.68299],[93.38805,23.4728],[93.39981,23.38828],[93.38781,23.36139],[93.36862,23.35426],[93.38478,23.13698],[93.2878,23.00464],[93.12988,23.05772],[93.134,22.92498],[93.09417,22.69459],[93.134,22.59573],[93.11477,22.54374],[93.13537,22.45873],[93.18206,22.43716],[93.19991,22.25425],[93.14224,22.24535],[93.15734,22.18687],[93.04885,22.20595],[92.99255,22.05965],[92.99804,21.98964],[92.93899,22.02656],[92.89504,21.95143],[92.86208,22.05456],[92.70416,22.16017],[92.67532,22.03547],[92.60949,21.97638],[92.56616,22.13554],[92.60029,22.1522],[92.5181,22.71441],[92.37665,22.9435],[92.38214,23.28705],[92.26541,23.70392],[92.15417,23.73409],[92.04706,23.64229],[91.95093,23.73284],[91.95642,23.47361],[91.84789,23.42235],[91.76417,23.26619],[91.81634,23.08001],[91.7324,23.00043],[91.61571,22.93929],[91.54993,23.01051],[91.46615,23.2328],[91.4035,23.27522],[91.40848,23.07117],[91.36453,23.06612],[91.28293,23.37538],[91.15579,23.6599],[91.25192,23.83463],[91.22308,23.89616],[91.29587,24.0041],[91.35741,23.99072],[91.37414,24.10693],[91.55542,24.08687],[91.63782,24.1132],[91.65292,24.22095],[91.73257,24.14703],[91.76004,24.23848],[91.82596,24.22345],[91.89258,24.14674],[91.96603,24.3799],[92.11662,24.38997],[92.15796,24.54435],[92.25854,24.9191],[92.38626,24.86055],[92.49887,24.88796],[92.39147,25.01471],[92.33957,25.07593],[92.0316,25.1834],[91.63648,25.12846],[91.25517,25.20677],[90.87427,25.15799],[90.65042,25.17788],[90.40034,25.1534],[90.1155,25.22686],[89.90478,25.31038],[89.87629,25.28337],[89.83371,25.29548],[89.84086,25.31854],[89.81208,25.37244],[89.86129,25.61714],[89.84388,25.70042],[89.80585,25.82489],[89.86592,25.93115],[89.77728,26.04254],[89.77865,26.08387],[89.73581,26.15818],[89.70201,26.15138],[89.63968,26.22595],[89.57101,25.9682],[89.53515,26.00382],[89.35953,26.0077],[89.15869,26.13708],[89.08899,26.38845],[88.95612,26.4564],[88.92357,26.40711],[88.91321,26.37984],[89.05328,26.2469],[88.85004,26.23211],[88.78961,26.31093],[88.67837,26.26291],[88.69485,26.38353],[88.62144,26.46783],[88.4298,26.54489],[88.41196,26.63837],[88.33093,26.48929],[88.35153,26.45241],[88.36938,26.48683],[88.48749,26.45855],[88.51649,26.35923],[88.35153,26.29123],[88.34757,26.22216],[88.1844,26.14417],[88.16581,26.0238],[88.08804,25.91334],[88.13138,25.78773],[88.242,25.80811],[88.45103,25.66245],[88.4559,25.59227],[88.677,25.46959],[88.81296,25.51546],[88.85278,25.34679],[89.01105,25.30303],[89.00463,25.26583],[88.94067,25.18534],[88.44766,25.20149],[88.46277,25.07468],[88.33917,24.86803],[88.27325,24.88796],[88.21832,24.96642],[88.14004,24.93529],[88.15515,24.85806],[88.00683,24.66477],[88.08786,24.63232],[88.12296,24.51301],[88.50934,24.32474],[88.68801,24.31464],[88.74841,24.1959],[88.6976,24.14703],[88.73743,23.91751],[88.66189,23.87607],[88.58087,23.87105],[88.56507,23.64044],[88.74841,23.47361],[88.79351,23.50535],[88.79254,23.46028],[88.71133,23.2492],[88.99148,23.21134],[88.86377,23.08759],[88.88327,23.03885],[88.87063,22.95235],[88.96713,22.83346],[88.9151,22.75228],[88.94614,22.66941],[88.9367,22.58527],[89.07114,22.15335],[89.03553,21.77397],[89.13927,21.60785],[89.13606,21.42955],[92.61042,13.76986],[94.6371,13.81803],[94.53911,5.99016],[80.48418,10.20786],[79.42124,9.80115],[79.50447,8.91876],[78.52781,7.63099],[72.15131,7.6285],[68.11329,23.53945],[68.20763,23.85849],[68.39339,23.96838],[68.74643,23.97027],[68.7416,24.31904],[68.90914,24.33156],[68.97781,24.26021],[69.07806,24.29777],[69.19341,24.25646],[69.29778,24.28712],[69.59579,24.29777],[69.73335,24.17007],[70.03428,24.172],[70.11712,24.30915],[70.5667,24.43787],[70.57906,24.27774],[70.71502,24.23517],[70.88393,24.27398],[70.85784,24.30903],[70.94985,24.3791],[71.04461,24.34657],[71.12838,24.42662],[71.00341,24.46038],[70.97594,24.60904],[71.09405,24.69017],[70.94002,24.92843],[70.89148,25.15064],[70.66695,25.39314],[70.67382,25.68186],[70.60378,25.71898],[70.53649,25.68928],[70.37444,25.67443],[70.2687,25.71156],[70.0985,25.93238],[70.08193,26.08094],[70.17532,26.24118],[70.17532,26.55362],[70.05584,26.60398],[69.88555,26.56836],[69.50904,26.74892],[69.58519,27.18109],[70.03136,27.56627],[70.12502,27.8057],[70.37307,28.01208],[70.60927,28.02178],[70.79054,27.68423],[71.89921,27.96035],[71.9244,28.11555],[72.20329,28.3869],[72.29495,28.66367],[72.40402,28.78283],[72.94272,29.02487],[73.01337,29.16422],[73.05886,29.1878],[73.28094,29.56646],[73.3962,29.94707],[73.58665,30.01848],[73.80299,30.06969],[73.97225,30.19829],[73.95736,30.28466],[73.88993,30.36305],[74.5616,31.04153],[74.67971,31.05479],[74.6852,31.12771],[74.60006,31.13711],[74.60281,31.10419],[74.56023,31.08303],[74.51629,31.13829],[74.53223,31.30321],[74.59773,31.4136],[74.64713,31.45605],[74.59319,31.50197],[74.61517,31.55698],[74.57498,31.60382],[74.47771,31.72227],[74.58907,31.87824],[74.79919,31.95983],[74.86236,32.04485],[74.9269,32.0658],[75.00793,32.03786],[75.25649,32.10187],[75.38046,32.26836],[75.28259,32.36556],[75.03265,32.49538],[74.97634,32.45367],[74.84725,32.49075],[74.68362,32.49298],[74.67431,32.56676],[74.65251,32.56416],[74.64424,32.60985],[74.69542,32.66792],[74.65345,32.71225],[74.7113,32.84219],[74.64675,32.82604],[74.6289,32.75561],[74.45312,32.77755],[74.41467,32.90563],[74.31227,32.92795],[74.34875,32.97823],[74.31854,33.02891],[74.17571,33.07495],[74.15374,33.13477],[74.02144,33.18908],[74.01366,33.25199],[74.08782,33.26232],[74.17983,33.3679],[74.18121,33.4745],[74.10115,33.56392],[74.03576,33.56718],[73.97367,33.64061],[73.98968,33.66155],[73.96423,33.73071],[74.00891,33.75437],[74.05898,33.82089],[74.14001,33.83002],[74.26086,33.92237],[74.25262,34.01577],[74.21554,34.03853],[73.91341,34.01235],[73.88732,34.05105],[73.90677,34.10504],[73.98208,34.2522],[73.90517,34.35317],[73.8475,34.32935],[73.74862,34.34183],[73.74999,34.3781],[73.88732,34.48911],[73.89419,34.54568],[73.93951,34.57169],[73.93401,34.63386],[73.96423,34.68244],[74.12897,34.70073],[74.31239,34.79626],[74.58083,34.77386],[74.6663,34.703],[75.01479,34.64629],[75.38009,34.55021],[75.75438,34.51827],[76.04614,34.67566],[76.15463,34.6429],[76.47186,34.78965],[76.67648,34.76371],[76.74377,34.84039],[76.74514,34.92488],[76.87193,34.96906],[76.99251,34.93349],[77.11796,35.05419],[76.93465,35.39866],[76.85088,35.39754],[76.75475,35.52617],[76.77323,35.66062],[76.84539,35.67356],[76.96624,35.5932],[77.44277,35.46132],[77.70232,35.46244],[77.80532,35.52058],[78.11664,35.48022]]]]}},{type:"Feature",properties:{iso1A2:"PM",iso1A3:"SPM",iso1N3:"666",wikidata:"Q34617",nameEn:"Saint Pierre and Miquelon",country:"FR",groups:["021","003","019"],callingCodes:["508"]},geometry:{type:"MultiPolygon",coordinates:[[[[-56.72993,46.65575],[-56.27503,47.39728],[-55.90758,46.6223],[-56.72993,46.65575]]]]}},{type:"Feature",properties:{iso1A2:"IQ",iso1A3:"IRQ",iso1N3:"368",wikidata:"Q796",nameEn:"Iraq",groups:["145","142"],callingCodes:["964"]},geometry:{type:"MultiPolygon",coordinates:[[[[42.78887,37.38615],[42.93705,37.32015],[43.11403,37.37436],[43.30083,37.30629],[43.33508,37.33105],[43.50787,37.24436],[43.56702,37.25675],[43.63085,37.21957],[43.7009,37.23692],[43.8052,37.22825],[43.82699,37.19477],[43.84878,37.22205],[43.90949,37.22453],[44.02002,37.33229],[44.13521,37.32486],[44.2613,37.25055],[44.27998,37.16501],[44.22239,37.15756],[44.18503,37.09551],[44.25975,36.98119],[44.30645,36.97373],[44.35937,37.02843],[44.35315,37.04955],[44.38117,37.05825],[44.42631,37.05825],[44.63179,37.19229],[44.76698,37.16162],[44.78319,37.1431],[44.75229,37.11958],[44.81611,37.04383],[44.89862,37.01897],[44.91199,36.91468],[44.90173,36.86096],[44.83479,36.81362],[44.84725,36.77622],[45.01537,36.75128],[45.06985,36.6814],[45.06985,36.62645],[45.00759,36.5402],[45.11811,36.40751],[45.23953,36.43257],[45.27394,36.35846],[45.26261,36.3001],[45.30038,36.27769],[45.32235,36.17383],[45.37312,36.09917],[45.37652,36.06222],[45.33916,35.99424],[45.38275,35.97156],[45.46594,36.00042],[45.55245,35.99943],[45.60018,35.96069],[45.6645,35.92872],[45.76145,35.79898],[45.81442,35.82107],[45.89784,35.83708],[45.94711,35.82218],[46.08325,35.8581],[46.17198,35.8013],[46.32921,35.82655],[46.34166,35.78363],[46.23736,35.71414],[46.01631,35.69139],[46.0117,35.65059],[45.99452,35.63574],[46.0165,35.61501],[46.01307,35.59756],[46.03028,35.57416],[45.97584,35.58132],[46.01518,35.52012],[45.98453,35.49848],[46.05358,35.38568],[46.13152,35.32548],[46.15474,35.2883],[46.11367,35.23729],[46.18457,35.22561],[46.19738,35.18536],[46.16229,35.16984],[46.15642,35.1268],[46.19116,35.11097],[46.11763,35.07551],[46.07747,35.0838],[46.06508,35.03699],[45.94756,35.09188],[45.93108,35.08148],[45.92203,35.09538],[45.92173,35.0465],[45.87864,35.03441],[45.89477,34.95805],[45.86532,34.89858],[45.78904,34.91135],[45.79682,34.85133],[45.73641,34.83975],[45.70031,34.82322],[45.68284,34.76624],[45.65672,34.7222],[45.70031,34.69277],[45.73923,34.54416],[45.60224,34.55057],[45.59074,34.55558],[45.53219,34.60441],[45.51883,34.47692],[45.43879,34.45949],[45.46697,34.38221],[45.49171,34.3439],[45.53552,34.35148],[45.58667,34.30147],[45.56176,34.15088],[45.47264,34.03099],[45.41077,33.97421],[45.42789,33.9458],[45.50261,33.94968],[45.77814,33.60938],[45.89801,33.63661],[45.96183,33.55751],[45.86687,33.49263],[45.99919,33.5082],[46.20623,33.20395],[46.11905,33.11924],[46.05367,33.13097],[46.03966,33.09577],[46.15175,33.07229],[46.09103,32.98354],[46.17198,32.95612],[46.32298,32.9731],[46.46788,32.91992],[47.17218,32.45393],[47.37529,32.47808],[47.57144,32.20583],[47.52474,32.15972],[47.64771,32.07666],[47.86337,31.78422],[47.6804,31.39086],[47.68219,31.00004],[48.03221,30.9967],[48.02443,30.4789],[48.14585,30.44133],[48.18321,30.39703],[48.19425,30.32796],[48.21279,30.31644],[48.24385,30.33846],[48.26393,30.3408],[48.41117,30.19846],[48.41671,30.17254],[48.38714,30.13485],[48.38869,30.11062],[48.43384,30.08233],[48.4494,30.04456],[48.44785,30.00148],[48.51011,29.96238],[48.61441,29.93675],[48.83867,29.78572],[48.59531,29.66815],[48.40479,29.85763],[48.17332,30.02448],[48.06782,30.02906],[48.01114,29.98906],[47.7095,30.10453],[47.37192,30.10421],[47.15166,30.01044],[46.89695,29.50584],[46.5527,29.10283],[46.42415,29.05947],[44.72255,29.19736],[42.97796,30.48295],[42.97601,30.72204],[40.01521,32.05667],[39.29903,32.23259],[39.26157,32.35555],[39.04251,32.30203],[38.98762,32.47694],[39.08202,32.50304],[38.79171,33.37328],[40.64314,34.31604],[40.97676,34.39788],[41.12388,34.65742],[41.2345,34.80049],[41.21654,35.1508],[41.26569,35.42708],[41.38184,35.62502],[41.37027,35.84095],[41.2564,36.06012],[41.28864,36.35368],[41.40058,36.52502],[41.81736,36.58782],[42.36697,37.0627],[42.35724,37.10998],[42.56725,37.14878],[42.78887,37.38615]]]]}},{type:"Feature",properties:{iso1A2:"PN",iso1A3:"PCN",iso1N3:"612",wikidata:"Q35672",nameEn:"Pitcairn Islands",country:"GB",groups:["061","009"],driveSide:"left",callingCodes:["64"]},geometry:{type:"MultiPolygon",coordinates:[[[[-133.59543,-28.4709],[-133.61511,-21.93325],[-122.0366,-24.55017],[-133.59543,-28.4709]]]]}},{type:"Feature",properties:{iso1A2:"IS",iso1A3:"ISL",iso1N3:"352",wikidata:"Q189",nameEn:"Iceland",groups:["154","150"],callingCodes:["354"]},geometry:{type:"MultiPolygon",coordinates:[[[[-33.15676,62.62995],[-15.70914,69.67442],[-8.25539,63.0423],[-33.15676,62.62995]]]]}},{type:"Feature",properties:{iso1A2:"PR",iso1A3:"PRI",iso1N3:"630",wikidata:"Q1183",nameEn:"Puerto Rico",country:"US",groups:["029","003","419","019"],roadSpeedUnit:"mph",callingCodes:["1 787","1 939"]},geometry:{type:"MultiPolygon",coordinates:[[[[-65.27974,17.56928],[-68.20301,17.83927],[-67.99519,18.97186],[-65.02435,18.73231],[-65.27974,17.56928]]]]}},{type:"Feature",properties:{iso1A2:"JE",iso1A3:"JEY",iso1N3:"832",wikidata:"Q785",nameEn:"Jersey",country:"GB",groups:["830","154","150"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["44 01534"]},geometry:{type:"MultiPolygon",coordinates:[[[[-2.00491,48.86706],[-2.65349,49.15373],[-2.09454,49.46288],[-1.83944,49.23037],[-2.00491,48.86706]]]]}},{type:"Feature",properties:{iso1A2:"PS",iso1A3:"PSE",iso1N3:"275",wikidata:"Q23792",nameEn:"Palestine",country:"IL",groups:["145","142"],callingCodes:["970"]},geometry:{type:"MultiPolygon",coordinates:[[[[34.052,31.46619],[34.29262,31.70393],[34.48681,31.59711],[34.56797,31.54197],[34.48892,31.48365],[34.40077,31.40926],[34.36505,31.36404],[34.37381,31.30598],[34.36523,31.28963],[34.29417,31.24194],[34.26742,31.21998],[34.24012,31.29591],[34.23572,31.2966],[34.21853,31.32363],[34.052,31.46619]]],[[[35.47672,31.49578],[35.39675,31.49572],[35.22921,31.37445],[35.13033,31.3551],[35.02459,31.35979],[34.92571,31.34337],[34.88932,31.37093],[34.87833,31.39321],[34.89756,31.43891],[34.93258,31.47816],[34.94356,31.50743],[34.9415,31.55601],[34.95249,31.59813],[35.00879,31.65426],[35.08226,31.69107],[35.10782,31.71594],[35.11895,31.71454],[35.12933,31.7325],[35.13931,31.73012],[35.15119,31.73634],[35.15474,31.73352],[35.16478,31.73242],[35.18023,31.72067],[35.20538,31.72388],[35.21937,31.71578],[35.22392,31.71899],[35.23972,31.70896],[35.24315,31.71244],[35.2438,31.7201],[35.24981,31.72543],[35.25182,31.73945],[35.26319,31.74846],[35.25225,31.7678],[35.26058,31.79064],[35.25573,31.81362],[35.26404,31.82567],[35.251,31.83085],[35.25753,31.8387],[35.24816,31.8458],[35.2304,31.84222],[35.2249,31.85433],[35.22817,31.8638],[35.22567,31.86745],[35.22294,31.87889],[35.22014,31.88264],[35.2136,31.88241],[35.21276,31.88153],[35.21016,31.88237],[35.20945,31.8815],[35.20791,31.8821],[35.20673,31.88151],[35.20381,31.86716],[35.21128,31.863],[35.216,31.83894],[35.21469,31.81835],[35.19461,31.82687],[35.18169,31.82542],[35.18603,31.80901],[35.14174,31.81325],[35.07677,31.85627],[35.05617,31.85685],[35.01978,31.82944],[34.9724,31.83352],[34.99712,31.85569],[35.03489,31.85919],[35.03978,31.89276],[35.03489,31.92448],[35.00124,31.93264],[34.98682,31.96935],[35.00261,32.027],[34.9863,32.09551],[34.99437,32.10962],[34.98507,32.12606],[34.99039,32.14626],[34.96009,32.17503],[34.95703,32.19522],[34.98885,32.20758],[35.01841,32.23981],[35.02939,32.2671],[35.01119,32.28684],[35.01772,32.33863],[35.04243,32.35008],[35.05142,32.3667],[35.0421,32.38242],[35.05311,32.4024],[35.05423,32.41754],[35.07059,32.4585],[35.08564,32.46948],[35.09236,32.47614],[35.10024,32.47856],[35.10882,32.4757],[35.15937,32.50466],[35.2244,32.55289],[35.25049,32.52453],[35.29306,32.50947],[35.30685,32.51024],[35.35212,32.52047],[35.40224,32.50136],[35.42034,32.46009],[35.41598,32.45593],[35.41048,32.43706],[35.42078,32.41562],[35.55807,32.38674],[35.57111,32.21877],[35.52012,32.04076],[35.54375,31.96587],[35.52758,31.9131],[35.55941,31.76535],[35.47672,31.49578]]]]}},{type:"Feature",properties:{iso1A2:"JO",iso1A3:"JOR",iso1N3:"400",wikidata:"Q810",nameEn:"Jordan",groups:["145","142"],callingCodes:["962"]},geometry:{type:"MultiPolygon",coordinates:[[[[39.04251,32.30203],[39.26157,32.35555],[39.29903,32.23259],[38.99233,31.99721],[36.99791,31.50081],[37.99354,30.49998],[37.66395,30.33245],[37.4971,29.99949],[36.75083,29.86903],[36.50005,29.49696],[36.07081,29.18469],[34.95987,29.35727],[34.88293,29.37455],[34.92298,29.45305],[34.97718,29.54294],[34.98207,29.58147],[35.02147,29.66343],[35.14108,30.07374],[35.19183,30.34636],[35.16218,30.43535],[35.19595,30.50297],[35.21379,30.60401],[35.29311,30.71365],[35.33456,30.81224],[35.33984,30.8802],[35.41371,30.95565],[35.43658,31.12444],[35.40316,31.25535],[35.47672,31.49578],[35.55941,31.76535],[35.52758,31.9131],[35.54375,31.96587],[35.52012,32.04076],[35.57111,32.21877],[35.55807,32.38674],[35.55494,32.42687],[35.57485,32.48669],[35.56614,32.64393],[35.59813,32.65159],[35.61669,32.67999],[35.66527,32.681],[35.68467,32.70715],[35.75983,32.74803],[35.88405,32.71321],[35.93307,32.71966],[35.96633,32.66237],[36.02239,32.65911],[36.08074,32.51463],[36.20379,32.52751],[36.20875,32.49529],[36.23948,32.50108],[36.40959,32.37908],[36.83946,32.31293],[38.79171,33.37328],[39.08202,32.50304],[38.98762,32.47694],[39.04251,32.30203]]]]}},{type:"Feature",properties:{iso1A2:"PT",iso1A3:"PRT",iso1N3:"620",wikidata:"Q45",nameEn:"Portugal",groups:["EU","039","150"],callingCodes:["351"]},geometry:{type:"MultiPolygon",coordinates:[[[[-6.19128,41.57638],[-6.26777,41.48796],[-6.3306,41.37677],[-6.38553,41.38655],[-6.38551,41.35274],[-6.55937,41.24417],[-6.65046,41.24725],[-6.68286,41.21641],[-6.69711,41.1858],[-6.77319,41.13049],[-6.75655,41.10187],[-6.79241,41.05397],[-6.80942,41.03629],[-6.84781,41.02692],[-6.88843,41.03027],[-6.913,41.03922],[-6.9357,41.02888],[-6.8527,40.93958],[-6.84292,40.89771],[-6.80707,40.88047],[-6.79892,40.84842],[-6.82337,40.84472],[-6.82826,40.74603],[-6.79567,40.65955],[-6.84292,40.56801],[-6.80218,40.55067],[-6.7973,40.51723],[-6.84944,40.46394],[-6.84618,40.42177],[-6.78426,40.36468],[-6.80218,40.33239],[-6.86085,40.2976],[-6.86085,40.26776],[-7.00426,40.23169],[-7.02544,40.18564],[-7.00589,40.12087],[-6.94233,40.10716],[-6.86737,40.01986],[-6.91463,39.86618],[-6.97492,39.81488],[-7.01613,39.66877],[-7.24707,39.66576],[-7.33507,39.64569],[-7.54121,39.66717],[-7.49477,39.58794],[-7.2927,39.45847],[-7.3149,39.34857],[-7.23403,39.27579],[-7.23566,39.20132],[-7.12811,39.17101],[-7.14929,39.11287],[-7.10692,39.10275],[-7.04011,39.11919],[-6.97004,39.07619],[-6.95211,39.0243],[-7.051,38.907],[-7.03848,38.87221],[-7.26174,38.72107],[-7.265,38.61674],[-7.32529,38.44336],[-7.15581,38.27597],[-7.09389,38.17227],[-6.93418,38.21454],[-7.00375,38.01914],[-7.05966,38.01966],[-7.10366,38.04404],[-7.12648,38.00296],[-7.24544,37.98884],[-7.27314,37.90145],[-7.33441,37.81193],[-7.41981,37.75729],[-7.51759,37.56119],[-7.46878,37.47127],[-7.43974,37.38913],[-7.43227,37.25152],[-7.41854,37.23813],[-7.41133,37.20314],[-7.39769,37.16868],[-7.37282,36.96896],[-15.92339,29.50503],[-36.43765,41.39418],[-9.14112,41.86623],[-8.87157,41.86488],[-8.81794,41.90375],[-8.75712,41.92833],[-8.74606,41.9469],[-8.7478,41.96282],[-8.69071,41.98862],[-8.6681,41.99703],[-8.65832,42.02972],[-8.64626,42.03668],[-8.63791,42.04691],[-8.59493,42.05708],[-8.58086,42.05147],[-8.54563,42.0537],[-8.5252,42.06264],[-8.52837,42.07658],[-8.48185,42.0811],[-8.44123,42.08218],[-8.42512,42.07199],[-8.40143,42.08052],[-8.38323,42.07683],[-8.36353,42.09065],[-8.33912,42.08358],[-8.32161,42.10218],[-8.29809,42.106],[-8.2732,42.12396],[-8.24681,42.13993],[-8.22406,42.1328],[-8.1986,42.15402],[-8.18947,42.13853],[-8.19406,42.12141],[-8.18178,42.06436],[-8.11729,42.08537],[-8.08847,42.05767],[-8.08796,42.01398],[-8.16232,41.9828],[-8.2185,41.91237],[-8.19551,41.87459],[-8.16944,41.87944],[-8.16455,41.81753],[-8.0961,41.81024],[-8.01136,41.83453],[-7.9804,41.87337],[-7.92336,41.8758],[-7.90707,41.92432],[-7.88751,41.92553],[-7.88055,41.84571],[-7.84188,41.88065],[-7.69848,41.90977],[-7.65774,41.88308],[-7.58603,41.87944],[-7.62188,41.83089],[-7.52737,41.83939],[-7.49803,41.87095],[-7.45566,41.86488],[-7.44759,41.84451],[-7.42854,41.83262],[-7.42864,41.80589],[-7.37092,41.85031],[-7.32366,41.8406],[-7.18677,41.88793],[-7.18549,41.97515],[-7.14115,41.98855],[-7.08574,41.97401],[-7.07596,41.94977],[-7.01078,41.94977],[-6.98144,41.9728],[-6.95537,41.96553],[-6.94396,41.94403],[-6.82174,41.94493],[-6.81196,41.99097],[-6.76959,41.98734],[-6.75004,41.94129],[-6.61967,41.94008],[-6.58544,41.96674],[-6.5447,41.94371],[-6.56752,41.88429],[-6.51374,41.8758],[-6.56426,41.74219],[-6.54633,41.68623],[-6.49907,41.65823],[-6.44204,41.68258],[-6.29863,41.66432],[-6.19128,41.57638]]]]}},{type:"Feature",properties:{iso1A2:"KE",iso1A3:"KEN",iso1N3:"404",wikidata:"Q114",nameEn:"Kenya",groups:["014","202","002"],driveSide:"left",callingCodes:["254"]},geometry:{type:"MultiPolygon",coordinates:[[[[35.9419,4.61933],[35.95449,4.53244],[36.03924,4.44406],[36.84474,4.44518],[37.07724,4.33503],[38.14168,3.62487],[38.45812,3.60445],[38.52336,3.62551],[38.91938,3.51198],[39.07736,3.5267],[39.19954,3.47834],[39.49444,3.45521],[39.51551,3.40895],[39.55132,3.39634],[39.58339,3.47434],[39.76808,3.67058],[39.86043,3.86974],[40.77498,4.27683],[41.1754,3.94079],[41.89488,3.97375],[41.31368,3.14314],[40.98767,2.82959],[41.00099,-0.83068],[41.56,-1.59812],[41.56362,-1.66375],[41.75542,-1.85308],[39.62121,-4.68136],[39.44306,-4.93877],[39.21631,-4.67835],[37.81321,-3.69179],[37.75036,-3.54243],[37.63099,-3.50723],[37.5903,-3.42735],[37.71745,-3.304],[37.67199,-3.06222],[34.0824,-1.02264],[34.03084,-1.05101],[34.02286,-1.00779],[33.93107,-0.99298],[33.9264,-0.54188],[33.98449,-0.13079],[33.90936,0.10581],[34.10067,0.36372],[34.08727,0.44713],[34.11408,0.48884],[34.13493,0.58118],[34.20196,0.62289],[34.27345,0.63182],[34.31516,0.75693],[34.40041,0.80266],[34.43349,0.85254],[34.52369,1.10692],[34.57427,1.09868],[34.58029,1.14712],[34.67562,1.21265],[34.80223,1.22754],[34.82606,1.26626],[34.82606,1.30944],[34.7918,1.36752],[34.87819,1.5596],[34.92734,1.56109],[34.9899,1.6668],[34.98692,1.97348],[34.90947,2.42447],[34.95267,2.47209],[34.77244,2.70272],[34.78137,2.76223],[34.73967,2.85447],[34.65774,2.8753],[34.60114,2.93034],[34.56242,3.11478],[34.45815,3.18319],[34.40006,3.37949],[34.41794,3.44342],[34.39112,3.48802],[34.44922,3.51627],[34.45815,3.67385],[34.15429,3.80464],[34.06046,4.15235],[33.9873,4.23316],[34.47601,4.72162],[35.34151,5.02364],[35.30992,4.90402],[35.47843,4.91872],[35.42366,4.76969],[35.51424,4.61643],[35.9419,4.61933]]]]}},{type:"Feature",properties:{iso1A2:"PW",iso1A3:"PLW",iso1N3:"585",wikidata:"Q695",nameEn:"Palau",groups:["057","009"],roadSpeedUnit:"mph",callingCodes:["680"]},geometry:{type:"MultiPolygon",coordinates:[[[[128.97621,3.08804],[136.04605,12.45908],[136.27107,6.73747],[134.40878,1.79674],[128.97621,3.08804]]]]}},{type:"Feature",properties:{iso1A2:"KH",iso1A3:"KHM",iso1N3:"116",wikidata:"Q424",nameEn:"Cambodia",groups:["035","142"],callingCodes:["855"]},geometry:{type:"MultiPolygon",coordinates:[[[[105.87328,11.55953],[105.88962,11.43605],[105.86782,11.28343],[106.10444,11.07879],[106.1527,11.10476],[106.1757,11.07301],[106.20095,10.97795],[106.14301,10.98176],[106.18539,10.79451],[106.06708,10.8098],[105.94535,10.9168],[105.93403,10.83853],[105.84603,10.85873],[105.86376,10.89839],[105.77751,11.03671],[105.50045,10.94586],[105.42884,10.96878],[105.34011,10.86179],[105.11449,10.96332],[105.08326,10.95656],[105.02722,10.89236],[105.09571,10.72722],[104.95094,10.64003],[104.87933,10.52833],[104.59018,10.53073],[104.49869,10.4057],[104.47963,10.43046],[104.43778,10.42386],[103.99198,10.48391],[102.47649,9.66162],[102.52395,11.25257],[102.91449,11.65512],[102.90973,11.75613],[102.83957,11.8519],[102.78427,11.98746],[102.77026,12.06815],[102.70176,12.1686],[102.73134,12.37091],[102.78116,12.40284],[102.7796,12.43781],[102.57567,12.65358],[102.51963,12.66117],[102.4994,12.71736],[102.53053,12.77506],[102.49335,12.92711],[102.48694,12.97537],[102.52275,12.99813],[102.46011,13.08057],[102.43422,13.09061],[102.36146,13.26006],[102.36001,13.31142],[102.34611,13.35618],[102.35692,13.38274],[102.35563,13.47307],[102.361,13.50551],[102.33828,13.55613],[102.36859,13.57488],[102.44601,13.5637],[102.5358,13.56933],[102.57573,13.60461],[102.62483,13.60883],[102.58635,13.6286],[102.5481,13.6589],[102.56848,13.69366],[102.72727,13.77806],[102.77864,13.93374],[102.91251,14.01531],[102.93275,14.19044],[103.16469,14.33075],[103.39353,14.35639],[103.53518,14.42575],[103.71109,14.4348],[103.70175,14.38052],[103.93836,14.3398],[104.27616,14.39861],[104.55014,14.36091],[104.69335,14.42726],[104.97667,14.38806],[105.02804,14.23722],[105.08408,14.20402],[105.14012,14.23873],[105.17748,14.34432],[105.20894,14.34967],[105.2759,14.17496],[105.36775,14.09948],[105.44869,14.10703],[105.5561,14.15684],[105.78338,14.08438],[105.78182,14.02247],[105.90791,13.92881],[106.10405,13.9137],[106.10094,13.98471],[106.16632,14.01794],[106.18656,14.06324],[106.11962,14.11307],[106.10872,14.18401],[106.04801,14.20363],[106.02311,14.30623],[105.99509,14.32734],[106.00131,14.36957],[106.21302,14.36203],[106.25194,14.48415],[106.32355,14.44043],[106.40916,14.45249],[106.43874,14.52032],[106.47766,14.50977],[106.45898,14.55045],[106.50723,14.58963],[106.54148,14.59565],[106.57106,14.50525],[106.59908,14.50977],[106.63333,14.44194],[106.73762,14.42687],[106.80767,14.31226],[106.8497,14.29416],[106.90574,14.33639],[106.9649,14.3198],[106.98825,14.36806],[107.04585,14.41782],[107.03962,14.45099],[107.09722,14.3937],[107.17038,14.41782],[107.21241,14.48716],[107.256,14.48716],[107.26534,14.54292],[107.29803,14.58963],[107.3276,14.58812],[107.37897,14.54443],[107.44435,14.52785],[107.47238,14.61523],[107.54361,14.69092],[107.55371,14.628],[107.52102,14.59034],[107.52569,14.54665],[107.48521,14.40346],[107.44941,14.41552],[107.39493,14.32655],[107.40427,14.24509],[107.33577,14.11832],[107.37158,14.07906],[107.35757,14.02319],[107.38247,13.99147],[107.44318,13.99751],[107.46498,13.91593],[107.45252,13.78897],[107.53503,13.73908],[107.61909,13.52577],[107.62843,13.3668],[107.49144,13.01215],[107.49611,12.88926],[107.55993,12.7982],[107.5755,12.52177],[107.55059,12.36824],[107.4463,12.29373],[107.42917,12.24657],[107.34511,12.33327],[107.15831,12.27547],[106.99953,12.08983],[106.92325,12.06548],[106.79405,12.0807],[106.70687,11.96956],[106.4111,11.97413],[106.4687,11.86751],[106.44068,11.86294],[106.44535,11.8279],[106.41577,11.76999],[106.45158,11.68616],[106.44691,11.66787],[106.37219,11.69836],[106.30525,11.67549],[106.26478,11.72122],[106.18539,11.75171],[106.13158,11.73283],[106.06708,11.77761],[106.02038,11.77457],[106.00792,11.7197],[105.95188,11.63738],[105.88962,11.67854],[105.8507,11.66635],[105.80867,11.60536],[105.81645,11.56876],[105.87328,11.55953]]]]}},{type:"Feature",properties:{iso1A2:"PY",iso1A3:"PRY",iso1N3:"600",wikidata:"Q733",nameEn:"Paraguay",groups:["005","419","019"],callingCodes:["595"]},geometry:{type:"MultiPolygon",coordinates:[[[[-58.16225,-20.16193],[-57.84536,-20.93155],[-57.93492,-21.65505],[-57.88239,-21.6868],[-57.94642,-21.73799],[-57.98625,-22.09157],[-56.6508,-22.28387],[-56.5212,-22.11556],[-56.45893,-22.08072],[-56.23206,-22.25347],[-55.8331,-22.29008],[-55.74941,-22.46436],[-55.741,-22.52018],[-55.72366,-22.5519],[-55.6986,-22.56268],[-55.68742,-22.58407],[-55.62493,-22.62765],[-55.63849,-22.95122],[-55.5446,-23.22811],[-55.52288,-23.2595],[-55.5555,-23.28237],[-55.43585,-23.87157],[-55.44117,-23.9185],[-55.41784,-23.9657],[-55.12292,-23.99669],[-55.0518,-23.98666],[-55.02691,-23.97317],[-54.6238,-23.83078],[-54.32807,-24.01865],[-54.28207,-24.07305],[-54.4423,-25.13381],[-54.62033,-25.46026],[-54.60196,-25.48397],[-54.59509,-25.53696],[-54.59398,-25.59224],[-54.62063,-25.91213],[-54.60664,-25.9691],[-54.67359,-25.98607],[-54.69333,-26.37705],[-54.70732,-26.45099],[-54.80868,-26.55669],[-55.00584,-26.78754],[-55.06351,-26.80195],[-55.16948,-26.96068],[-55.25243,-26.93808],[-55.39611,-26.97679],[-55.62322,-27.1941],[-55.59094,-27.32444],[-55.74475,-27.44485],[-55.89195,-27.3467],[-56.18313,-27.29851],[-56.85337,-27.5165],[-58.04205,-27.2387],[-58.59549,-27.29973],[-58.65321,-27.14028],[-58.3198,-26.83443],[-58.1188,-26.16704],[-57.87176,-25.93604],[-57.57431,-25.47269],[-57.80821,-25.13863],[-58.25492,-24.92528],[-58.33055,-24.97099],[-59.33886,-24.49935],[-59.45482,-24.34787],[-60.03367,-24.00701],[-60.28163,-24.04436],[-60.99754,-23.80934],[-61.0782,-23.62932],[-61.9756,-23.0507],[-62.22768,-22.55807],[-62.51761,-22.37684],[-62.64455,-22.25091],[-62.2757,-21.06657],[-62.26883,-20.55311],[-61.93912,-20.10053],[-61.73723,-19.63958],[-60.00638,-19.2981],[-59.06965,-19.29148],[-58.23216,-19.80058],[-58.16225,-20.16193]]]]}},{type:"Feature",properties:{iso1A2:"KM",iso1A3:"COM",iso1N3:"174",wikidata:"Q970",nameEn:"Comoros",groups:["014","202","002"],callingCodes:["269"]},geometry:{type:"MultiPolygon",coordinates:[[[[42.93552,-11.11413],[44.69407,-11.04481],[44.75722,-12.58368],[42.99868,-12.65261],[42.93552,-11.11413]]]]}},{type:"Feature",properties:{iso1A2:"QA",iso1A3:"QAT",iso1N3:"634",wikidata:"Q846",nameEn:"Qatar",groups:["145","142"],callingCodes:["974"]},geometry:{type:"MultiPolygon",coordinates:[[[[50.92992,24.54396],[50.8133,24.74049],[50.57069,25.57887],[50.80824,25.54641],[50.7801,25.595],[50.86149,25.6965],[50.81266,25.88946],[50.93865,26.30758],[51.83682,26.70231],[51.83108,24.71675],[51.58834,24.66608],[51.39468,24.62785],[51.29972,24.50747],[51.09638,24.46907],[50.92992,24.54396]]]]}},{type:"Feature",properties:{iso1A2:"KP",iso1A3:"PRK",iso1N3:"408",wikidata:"Q423",nameEn:"North Korea",groups:["030","142"],callingCodes:["850"]},geometry:{type:"MultiPolygon",coordinates:[[[[130.26095,42.9027],[130.23068,42.80125],[130.2385,42.71127],[130.41826,42.6011],[130.44361,42.54849],[130.50123,42.61636],[130.55143,42.52158],[130.56835,42.43281],[130.60805,42.4317],[130.64181,42.41422],[130.66367,42.38024],[130.65022,42.32281],[131.95041,41.5445],[128.65655,38.61914],[128.37487,38.62345],[128.31105,38.58462],[128.27652,38.41657],[128.02917,38.31861],[127.55013,38.32257],[127.49672,38.30647],[127.38727,38.33227],[127.15749,38.30722],[127.04479,38.25518],[126.95338,38.17735],[126.95887,38.1347],[126.88106,38.10246],[126.84961,38.0344],[126.67023,37.95852],[126.68793,37.9175],[126.68793,37.83728],[126.66067,37.7897],[126.59918,37.76364],[126.56709,37.76857],[126.46818,37.80873],[126.43239,37.84095],[126.24402,37.83113],[126.19097,37.81462],[126.18776,37.74728],[126.13074,37.70512],[125.81159,37.72949],[125.37112,37.62643],[125.06408,37.66334],[124.87921,37.80827],[124.84224,37.977],[124.67666,38.05679],[123.85601,37.49093],[123.90497,38.79949],[124.17532,39.8232],[124.23201,39.9248],[124.35029,39.95639],[124.37089,40.03004],[124.3322,40.05573],[124.38556,40.11047],[124.40719,40.13655],[124.86913,40.45387],[125.71172,40.85223],[125.76869,40.87908],[126.00335,40.92835],[126.242,41.15454],[126.53189,41.35206],[126.60631,41.65565],[126.90729,41.79955],[127.17841,41.59714],[127.29712,41.49473],[127.92943,41.44291],[128.02633,41.42103],[128.03311,41.39232],[128.12967,41.37931],[128.18546,41.41279],[128.20061,41.40895],[128.30716,41.60322],[128.15119,41.74568],[128.04487,42.01769],[128.94007,42.03537],[128.96068,42.06657],[129.15178,42.17224],[129.22285,42.26491],[129.22423,42.3553],[129.28541,42.41574],[129.42882,42.44702],[129.54701,42.37254],[129.60482,42.44461],[129.72541,42.43739],[129.75294,42.59409],[129.77183,42.69435],[129.7835,42.76521],[129.80719,42.79218],[129.83277,42.86746],[129.85261,42.96494],[129.8865,43.00395],[129.95082,43.01051],[129.96409,42.97306],[130.12957,42.98361],[130.09764,42.91425],[130.26095,42.9027]]]]}},{type:"Feature",properties:{iso1A2:"RE",iso1A3:"REU",iso1N3:"638",wikidata:"Q17070",nameEn:"Réunion",country:"FR",groups:["EU","014","202","002"],callingCodes:["262"]},geometry:{type:"MultiPolygon",coordinates:[[[[53.37984,-21.23941],[56.62373,-20.2711],[56.73473,-21.9174],[53.37984,-21.23941]]]]}},{type:"Feature",properties:{iso1A2:"AE",iso1A3:"ARE",iso1N3:"784",wikidata:"Q878",nameEn:"United Arab Emirates",groups:["145","142"],callingCodes:["971"]},geometry:{type:"MultiPolygon",coordinates:[[[[56.26534,25.62825],[56.82555,25.7713],[56.86325,25.03856],[56.3227,24.97284],[56.34873,24.93205],[56.30269,24.88334],[56.20568,24.85063],[56.20062,24.78565],[56.13684,24.73699],[56.06128,24.74457],[56.03535,24.81161],[55.97836,24.87673],[55.97467,24.89639],[56.05106,24.87461],[56.05715,24.95727],[55.96316,25.00857],[55.90849,24.96771],[55.85094,24.96858],[55.81116,24.9116],[55.81348,24.80102],[55.83408,24.77858],[55.83271,24.68567],[55.76461,24.5287],[55.83271,24.41521],[55.83395,24.32776],[55.80747,24.31069],[55.79145,24.27914],[55.76781,24.26209],[55.75939,24.26114],[55.75382,24.2466],[55.75257,24.23466],[55.76558,24.23227],[55.77658,24.23476],[55.83367,24.20193],[55.95472,24.2172],[56.01799,24.07426],[55.8308,24.01633],[55.73301,24.05994],[55.48677,23.94946],[55.57358,23.669],[55.22634,23.10378],[55.2137,22.71065],[55.13599,22.63334],[52.56622,22.94341],[51.59617,24.12041],[51.58871,24.27256],[51.41644,24.39615],[51.58834,24.66608],[51.83108,24.71675],[52.02277,24.75635],[52.35509,25.00368],[52.82259,25.51697],[53.97892,24.64436],[55.14145,25.62624],[55.81777,26.18798],[56.08666,26.05038],[56.15498,26.06828],[56.19334,25.9795],[56.13963,25.82765],[56.17416,25.77239],[56.13579,25.73524],[56.14826,25.66351],[56.18363,25.65508],[56.20473,25.61119],[56.25365,25.60211],[56.26636,25.60643],[56.25341,25.61443],[56.26534,25.62825]],[[56.26062,25.33108],[56.23362,25.31253],[56.25008,25.28843],[56.24465,25.27505],[56.20838,25.25668],[56.20872,25.24104],[56.24341,25.22867],[56.27628,25.23404],[56.34438,25.26653],[56.35172,25.30681],[56.3111,25.30107],[56.3005,25.31815],[56.26062,25.33108]]],[[[56.28423,25.26344],[56.27086,25.26128],[56.2716,25.27916],[56.28102,25.28486],[56.29379,25.2754],[56.28423,25.26344]]]]}},{type:"Feature",properties:{iso1A2:"RO",iso1A3:"ROU",iso1N3:"642",wikidata:"Q218",nameEn:"Romania",groups:["EU","151","150"],callingCodes:["40"]},geometry:{type:"MultiPolygon",coordinates:[[[[27.15622,47.98538],[27.1618,47.92391],[27.29069,47.73722],[27.25519,47.71366],[27.32202,47.64009],[27.3979,47.59473],[27.47942,47.48113],[27.55731,47.46637],[27.60263,47.32507],[27.68706,47.28962],[27.73172,47.29248],[27.81892,47.1381],[28.09095,46.97621],[28.12173,46.82283],[28.24808,46.64305],[28.22281,46.50481],[28.25769,46.43334],[28.18902,46.35283],[28.19864,46.31869],[28.10937,46.22852],[28.13684,46.18099],[28.08612,46.01105],[28.13111,45.92819],[28.16568,45.6421],[28.08927,45.6051],[28.18741,45.47358],[28.21139,45.46895],[28.28504,45.43907],[28.34554,45.32102],[28.5735,45.24759],[28.71358,45.22631],[28.78911,45.24179],[28.81383,45.3384],[28.94292,45.28045],[28.96077,45.33164],[29.24779,45.43388],[29.42632,45.44545],[29.59798,45.38857],[29.68175,45.26885],[29.65428,45.25629],[29.69272,45.19227],[30.04414,45.08461],[29.24336,43.70874],[28.23293,43.76],[27.99558,43.84193],[27.92008,44.00761],[27.73468,43.95326],[27.64542,44.04958],[27.60834,44.01206],[27.39757,44.0141],[27.26845,44.12602],[26.95141,44.13555],[26.62712,44.05698],[26.38764,44.04356],[26.10115,43.96908],[26.05584,43.90925],[25.94911,43.85745],[25.72792,43.69263],[25.39528,43.61866],[25.17144,43.70261],[25.10718,43.6831],[24.96682,43.72693],[24.73542,43.68523],[24.62281,43.74082],[24.50264,43.76314],[24.35364,43.70211],[24.18149,43.68218],[23.73978,43.80627],[23.61687,43.79289],[23.4507,43.84936],[23.26772,43.84843],[23.05288,43.79494],[22.85314,43.84452],[22.83753,43.88055],[22.87873,43.9844],[23.01674,44.01946],[23.04988,44.07694],[22.67173,44.21564],[22.68166,44.28206],[22.56012,44.30712],[22.45436,44.47258],[22.54021,44.47836],[22.56493,44.53419],[22.61368,44.55719],[22.70981,44.51852],[22.76749,44.54446],[22.69196,44.61587],[22.61917,44.61489],[22.45301,44.7194],[22.30844,44.6619],[22.18315,44.48179],[22.13234,44.47444],[22.08016,44.49844],[21.99364,44.63395],[21.7795,44.66165],[21.71692,44.65349],[21.67504,44.67107],[21.61942,44.67059],[21.60019,44.75208],[21.55007,44.77304],[21.38802,44.78133],[21.35643,44.86364],[21.44013,44.87613],[21.48202,44.87199],[21.56328,44.89502],[21.54938,44.9327],[21.35855,45.01941],[21.4505,45.04294],[21.51299,45.15345],[21.48278,45.19557],[21.29398,45.24148],[21.20392,45.2677],[21.17612,45.32566],[21.09894,45.30144],[20.87948,45.42743],[20.86026,45.47295],[20.77217,45.49788],[20.83321,45.53567],[20.76798,45.60969],[20.80361,45.65875],[20.82364,45.77738],[20.78446,45.78522],[20.77416,45.75601],[20.70069,45.7493],[20.65645,45.82801],[20.54818,45.89939],[20.35862,45.99356],[20.26068,46.12332],[20.28324,46.1438],[20.35573,46.16629],[20.45377,46.14405],[20.49718,46.18721],[20.63863,46.12728],[20.76085,46.21002],[20.74574,46.25467],[20.86797,46.28884],[21.06572,46.24897],[21.16872,46.30118],[21.28061,46.44941],[21.26929,46.4993],[21.33214,46.63035],[21.43926,46.65109],[21.5151,46.72147],[21.48935,46.7577],[21.52028,46.84118],[21.59307,46.86935],[21.59581,46.91628],[21.68645,46.99595],[21.648,47.03902],[21.78395,47.11104],[21.94463,47.38046],[22.01055,47.37767],[22.03389,47.42508],[22.00917,47.50492],[22.31816,47.76126],[22.41979,47.7391],[22.46559,47.76583],[22.67247,47.7871],[22.76617,47.8417],[22.77991,47.87211],[22.89849,47.95851],[22.94301,47.96672],[22.92241,48.02002],[23.0158,47.99338],[23.08858,48.00716],[23.1133,48.08061],[23.15999,48.12188],[23.27397,48.08245],[23.33577,48.0237],[23.4979,47.96858],[23.52803,48.01818],[23.5653,48.00499],[23.63894,48.00293],[23.66262,47.98786],[23.75188,47.99705],[23.80904,47.98142],[23.8602,47.9329],[23.89352,47.94512],[23.94192,47.94868],[23.96337,47.96672],[23.98553,47.96076],[24.00801,47.968],[24.02999,47.95087],[24.06466,47.95317],[24.11281,47.91487],[24.22566,47.90231],[24.34926,47.9244],[24.43578,47.97131],[24.61994,47.95062],[24.70632,47.84428],[24.81893,47.82031],[24.88896,47.7234],[25.11144,47.75203],[25.23778,47.89403],[25.63878,47.94924],[25.77723,47.93919],[26.05901,47.9897],[26.17711,47.99246],[26.33504,48.18418],[26.55202,48.22445],[26.62823,48.25804],[26.81161,48.25049],[26.87708,48.19919],[26.94265,48.1969],[26.98042,48.15752],[26.96119,48.13003],[27.04118,48.12522],[27.02985,48.09083],[27.15622,47.98538]]]]}},{type:"Feature",properties:{iso1A2:"AL",iso1A3:"ALB",iso1N3:"008",wikidata:"Q222",nameEn:"Albania",groups:["039","150"],callingCodes:["355"]},geometry:{type:"MultiPolygon",coordinates:[[[[20.07761,42.55582],[20.17127,42.50469],[20.21797,42.41237],[20.24399,42.32168],[20.34479,42.32656],[20.3819,42.3029],[20.48857,42.25444],[20.56955,42.12097],[20.55633,42.08173],[20.59434,42.03879],[20.63069,41.94913],[20.57946,41.91593],[20.59524,41.8818],[20.55976,41.87068],[20.57144,41.7897],[20.53405,41.78099],[20.51301,41.72433],[20.52937,41.69292],[20.51769,41.65975],[20.55508,41.58113],[20.52103,41.56473],[20.45809,41.5549],[20.45331,41.51436],[20.49039,41.49277],[20.51301,41.442],[20.55976,41.4087],[20.52119,41.34381],[20.49432,41.33679],[20.51068,41.2323],[20.59715,41.13644],[20.58546,41.11179],[20.59832,41.09066],[20.63454,41.0889],[20.65558,41.08009],[20.71634,40.91781],[20.73504,40.9081],[20.81567,40.89662],[20.83671,40.92752],[20.94305,40.92399],[20.97693,40.90103],[20.97887,40.85475],[20.98396,40.79109],[20.95752,40.76982],[20.98134,40.76046],[21.05833,40.66586],[21.03932,40.56299],[20.96908,40.51526],[20.94925,40.46625],[20.83688,40.47882],[20.7906,40.42726],[20.78234,40.35803],[20.71789,40.27739],[20.67162,40.09433],[20.62566,40.0897],[20.61081,40.07866],[20.55593,40.06524],[20.51297,40.08168],[20.48487,40.06271],[20.42373,40.06777],[20.37911,39.99058],[20.31135,39.99438],[20.41546,39.82832],[20.41475,39.81437],[20.38572,39.78516],[20.30804,39.81563],[20.29152,39.80421],[20.31961,39.72799],[20.27412,39.69884],[20.22707,39.67459],[20.22376,39.64532],[20.15988,39.652],[20.12956,39.65805],[20.05189,39.69112],[20.00957,39.69227],[19.98042,39.6504],[19.92466,39.69533],[19.97622,39.78684],[19.95905,39.82857],[19.0384,40.35325],[19.26406,41.74971],[19.37597,41.84849],[19.37451,41.8842],[19.33812,41.90669],[19.34601,41.95675],[19.37691,41.96977],[19.36867,42.02564],[19.37548,42.06835],[19.40687,42.10024],[19.28623,42.17745],[19.42,42.33019],[19.42352,42.36546],[19.4836,42.40831],[19.65972,42.62774],[19.73244,42.66299],[19.77375,42.58517],[19.74731,42.57422],[19.76549,42.50237],[19.82333,42.46581],[19.9324,42.51699],[20.00842,42.5109],[20.01834,42.54622],[20.07761,42.55582]]]]}},{type:"Feature",properties:{iso1A2:"RS",iso1A3:"SRB",iso1N3:"688",wikidata:"Q403",nameEn:"Serbia",groups:["039","150"],callingCodes:["381"]},geometry:{type:"MultiPolygon",coordinates:[[[[19.66007,46.19005],[19.81491,46.1313],[19.93508,46.17553],[20.01816,46.17696],[20.03533,46.14509],[20.09713,46.17315],[20.26068,46.12332],[20.35862,45.99356],[20.54818,45.89939],[20.65645,45.82801],[20.70069,45.7493],[20.77416,45.75601],[20.78446,45.78522],[20.82364,45.77738],[20.80361,45.65875],[20.76798,45.60969],[20.83321,45.53567],[20.77217,45.49788],[20.86026,45.47295],[20.87948,45.42743],[21.09894,45.30144],[21.17612,45.32566],[21.20392,45.2677],[21.29398,45.24148],[21.48278,45.19557],[21.51299,45.15345],[21.4505,45.04294],[21.35855,45.01941],[21.54938,44.9327],[21.56328,44.89502],[21.48202,44.87199],[21.44013,44.87613],[21.35643,44.86364],[21.38802,44.78133],[21.55007,44.77304],[21.60019,44.75208],[21.61942,44.67059],[21.67504,44.67107],[21.71692,44.65349],[21.7795,44.66165],[21.99364,44.63395],[22.08016,44.49844],[22.13234,44.47444],[22.18315,44.48179],[22.30844,44.6619],[22.45301,44.7194],[22.61917,44.61489],[22.69196,44.61587],[22.76749,44.54446],[22.70981,44.51852],[22.61368,44.55719],[22.56493,44.53419],[22.54021,44.47836],[22.45436,44.47258],[22.56012,44.30712],[22.68166,44.28206],[22.67173,44.21564],[22.61711,44.16938],[22.61688,44.06534],[22.41449,44.00514],[22.35558,43.81281],[22.41043,43.69566],[22.47582,43.6558],[22.53397,43.47225],[22.82036,43.33665],[22.89727,43.22417],[23.00806,43.19279],[22.98104,43.11199],[22.89521,43.03625],[22.78397,42.98253],[22.74826,42.88701],[22.54302,42.87774],[22.43309,42.82057],[22.4997,42.74144],[22.43983,42.56851],[22.55669,42.50144],[22.51961,42.3991],[22.47498,42.3915],[22.45919,42.33822],[22.34773,42.31725],[22.29275,42.34913],[22.29605,42.37477],[22.16384,42.32103],[22.02908,42.29848],[21.94405,42.34669],[21.91595,42.30392],[21.84654,42.3247],[21.77176,42.2648],[21.70111,42.23789],[21.58992,42.25915],[21.56772,42.30946],[21.5264,42.33634],[21.53467,42.36809],[21.57021,42.3647],[21.59029,42.38042],[21.62887,42.37664],[21.64209,42.41081],[21.62556,42.45106],[21.7035,42.51899],[21.70522,42.54176],[21.7327,42.55041],[21.75672,42.62695],[21.79413,42.65923],[21.75025,42.70125],[21.6626,42.67813],[21.58755,42.70418],[21.59154,42.72643],[21.47498,42.74695],[21.39045,42.74888],[21.44047,42.87276],[21.36941,42.87397],[21.32974,42.90424],[21.2719,42.8994],[21.23534,42.95523],[21.23877,43.00848],[21.2041,43.02277],[21.16734,42.99694],[21.14465,43.11089],[21.08952,43.13471],[21.05378,43.10707],[21.00749,43.13984],[20.96287,43.12416],[20.83727,43.17842],[20.88685,43.21697],[20.82145,43.26769],[20.73811,43.25068],[20.68688,43.21335],[20.59929,43.20492],[20.69515,43.09641],[20.64557,43.00826],[20.59929,43.01067],[20.48692,42.93208],[20.53484,42.8885],[20.43734,42.83157],[20.40594,42.84853],[20.35692,42.8335],[20.34528,42.90676],[20.16415,42.97177],[20.14896,42.99058],[20.12325,42.96237],[20.05431,42.99571],[20.04729,43.02732],[19.98887,43.0538],[19.96549,43.11098],[19.92576,43.08539],[19.79255,43.11951],[19.76918,43.16044],[19.64063,43.19027],[19.62661,43.2286],[19.54598,43.25158],[19.52962,43.31623],[19.48171,43.32644],[19.44315,43.38846],[19.22229,43.47926],[19.22807,43.5264],[19.24774,43.53061],[19.2553,43.5938],[19.33426,43.58833],[19.36653,43.60921],[19.41941,43.54056],[19.42696,43.57987],[19.50455,43.58385],[19.5176,43.71403],[19.3986,43.79668],[19.23465,43.98764],[19.24363,44.01502],[19.38439,43.96611],[19.52515,43.95573],[19.56498,43.99922],[19.61836,44.01464],[19.61991,44.05254],[19.57467,44.04716],[19.55999,44.06894],[19.51167,44.08158],[19.47321,44.1193],[19.48386,44.14332],[19.47338,44.15034],[19.43905,44.13088],[19.40927,44.16722],[19.3588,44.18353],[19.34773,44.23244],[19.32464,44.27185],[19.26945,44.26957],[19.23306,44.26097],[19.20508,44.2917],[19.18328,44.28383],[19.16741,44.28648],[19.13332,44.31492],[19.13556,44.338],[19.11547,44.34218],[19.1083,44.3558],[19.11865,44.36712],[19.10298,44.36924],[19.10365,44.37795],[19.10704,44.38249],[19.10749,44.39421],[19.11785,44.40313],[19.14681,44.41463],[19.14837,44.45253],[19.12278,44.50132],[19.13369,44.52521],[19.16699,44.52197],[19.26388,44.65412],[19.32543,44.74058],[19.36722,44.88164],[19.18183,44.92055],[19.01994,44.85493],[18.98957,44.90645],[19.02871,44.92541],[19.06853,44.89915],[19.15573,44.95409],[19.05205,44.97692],[19.1011,45.01191],[19.07952,45.14668],[19.14063,45.12972],[19.19144,45.17863],[19.43589,45.17137],[19.41941,45.23475],[19.28208,45.23813],[19.10774,45.29547],[18.97446,45.37528],[18.99918,45.49333],[19.08364,45.48804],[19.07471,45.53086],[18.94562,45.53712],[18.88776,45.57253],[18.96691,45.66731],[18.90305,45.71863],[18.85783,45.85493],[18.81394,45.91329],[18.99712,45.93537],[19.01284,45.96529],[19.0791,45.96458],[19.10388,46.04015],[19.14543,45.9998],[19.28826,45.99694],[19.52473,46.1171],[19.56113,46.16824],[19.66007,46.19005]]]]}},{type:"Feature",properties:{iso1A2:"AR",iso1A3:"ARG",iso1N3:"032",wikidata:"Q414",nameEn:"Argentina",aliases:["RA"],groups:["005","419","019"],callingCodes:["54"]},geometry:{type:"MultiPolygon",coordinates:[[[[-72.31343,-50.58411],[-73.15765,-50.78337],[-73.55259,-49.92488],[-73.45156,-49.79461],[-73.09655,-49.14342],[-72.56894,-48.81116],[-72.54042,-48.52392],[-72.27662,-48.28727],[-72.50478,-47.80586],[-71.94152,-47.13595],[-71.68577,-46.55385],[-71.75614,-45.61611],[-71.35687,-45.22075],[-72.06985,-44.81756],[-71.26418,-44.75684],[-71.16436,-44.46244],[-71.81318,-44.38097],[-71.64206,-43.64774],[-72.14828,-42.85321],[-72.15541,-42.15941],[-71.74901,-42.11711],[-71.92726,-40.72714],[-71.37826,-38.91474],[-70.89532,-38.6923],[-71.24279,-37.20264],[-70.95047,-36.4321],[-70.38008,-36.02375],[-70.49416,-35.24145],[-69.87386,-34.13344],[-69.88099,-33.34489],[-70.55832,-31.51559],[-70.14479,-30.36595],[-69.8596,-30.26131],[-69.99507,-29.28351],[-69.80969,-29.07185],[-69.66709,-28.44055],[-69.22504,-27.95042],[-68.77586,-27.16029],[-68.43363,-27.08414],[-68.27677,-26.90626],[-68.59048,-26.49861],[-68.56909,-26.28146],[-68.38372,-26.15353],[-68.57622,-25.32505],[-68.38372,-25.08636],[-68.56909,-24.69831],[-68.24825,-24.42596],[-67.33563,-24.04237],[-66.99632,-22.99839],[-67.18382,-22.81525],[-66.7298,-22.23644],[-66.29714,-22.08741],[-66.24077,-21.77837],[-66.03836,-21.84829],[-66.04832,-21.9187],[-65.9261,-21.93335],[-65.7467,-22.10105],[-65.61166,-22.09504],[-65.58694,-22.09794],[-65.57743,-22.07675],[-65.47435,-22.08908],[-64.99524,-22.08255],[-64.90014,-22.12136],[-64.67174,-22.18957],[-64.58888,-22.25035],[-64.4176,-22.67692],[-64.35108,-22.73282],[-64.31489,-22.88824],[-64.22918,-22.55807],[-63.93287,-21.99934],[-63.70963,-21.99934],[-63.68113,-22.0544],[-63.66482,-21.99918],[-62.81124,-21.9987],[-62.8078,-22.12534],[-62.64455,-22.25091],[-62.51761,-22.37684],[-62.22768,-22.55807],[-61.9756,-23.0507],[-61.0782,-23.62932],[-60.99754,-23.80934],[-60.28163,-24.04436],[-60.03367,-24.00701],[-59.45482,-24.34787],[-59.33886,-24.49935],[-58.33055,-24.97099],[-58.25492,-24.92528],[-57.80821,-25.13863],[-57.57431,-25.47269],[-57.87176,-25.93604],[-58.1188,-26.16704],[-58.3198,-26.83443],[-58.65321,-27.14028],[-58.59549,-27.29973],[-58.04205,-27.2387],[-56.85337,-27.5165],[-56.18313,-27.29851],[-55.89195,-27.3467],[-55.74475,-27.44485],[-55.59094,-27.32444],[-55.62322,-27.1941],[-55.39611,-26.97679],[-55.25243,-26.93808],[-55.16948,-26.96068],[-55.06351,-26.80195],[-55.00584,-26.78754],[-54.80868,-26.55669],[-54.70732,-26.45099],[-54.69333,-26.37705],[-54.67359,-25.98607],[-54.60664,-25.9691],[-54.62063,-25.91213],[-54.59398,-25.59224],[-54.5502,-25.58915],[-54.52926,-25.62846],[-53.90831,-25.55513],[-53.83691,-25.94849],[-53.73511,-26.04211],[-53.73086,-26.05842],[-53.7264,-26.0664],[-53.73391,-26.07006],[-53.73968,-26.10012],[-53.65018,-26.19501],[-53.65237,-26.23289],[-53.63739,-26.2496],[-53.63881,-26.25075],[-53.64632,-26.24798],[-53.64186,-26.25976],[-53.64505,-26.28089],[-53.68269,-26.33359],[-53.73372,-26.6131],[-53.80144,-27.09844],[-54.15978,-27.2889],[-54.19062,-27.27639],[-54.19268,-27.30751],[-54.41888,-27.40882],[-54.50416,-27.48232],[-54.67657,-27.57214],[-54.90159,-27.63132],[-54.90805,-27.73149],[-55.1349,-27.89759],[-55.16872,-27.86224],[-55.33303,-27.94661],[-55.6262,-28.17124],[-55.65418,-28.18304],[-56.01729,-28.51223],[-56.00458,-28.60421],[-56.05265,-28.62651],[-56.54171,-29.11447],[-56.57295,-29.11357],[-56.62789,-29.18073],[-56.81251,-29.48154],[-57.09386,-29.74211],[-57.65132,-30.19229],[-57.61478,-30.25165],[-57.64859,-30.35095],[-57.89115,-30.49572],[-57.8024,-30.77193],[-57.89476,-30.95994],[-57.86729,-31.06352],[-57.9908,-31.34924],[-57.98127,-31.3872],[-58.07569,-31.44916],[-58.0023,-31.53084],[-58.00076,-31.65016],[-58.20252,-31.86966],[-58.10036,-32.25338],[-58.22362,-32.52416],[-58.1224,-32.98842],[-58.40475,-33.11777],[-58.44442,-33.84033],[-58.34425,-34.15035],[-57.83001,-34.69099],[-54.78916,-36.21945],[-63.67376,-55.11859],[-66.07313,-55.19618],[-67.11046,-54.94199],[-67.46182,-54.92205],[-68.01394,-54.8753],[-68.60733,-54.9125],[-68.60702,-52.65781],[-68.41683,-52.33516],[-69.97824,-52.00845],[-71.99889,-51.98018],[-72.33873,-51.59954],[-72.31343,-50.58411]]]]}},{type:"Feature",properties:{iso1A2:"RU",iso1A3:"RUS",iso1N3:"643",wikidata:"Q159",nameEn:"Russia",groups:["151","150"],callingCodes:["7"]},geometry:{type:"MultiPolygon",coordinates:[[[[-179.99933,64.74703],[-179.9843,71.90735],[-168.25765,71.99091],[-168.95635,65.98512],[-169.03888,65.48473],[-172.76104,63.77445],[-179.99933,64.74703]]],[[[39.81147,43.06294],[33.66142,43.9825],[32.99857,44.48323],[31.62627,45.50633],[33.54017,46.0123],[33.59087,46.06013],[33.57318,46.10317],[33.61467,46.13561],[33.63854,46.14147],[33.61517,46.22615],[33.646,46.23028],[33.74047,46.18555],[33.79715,46.20482],[33.85234,46.19863],[33.91549,46.15938],[34.05272,46.10838],[34.07311,46.11769],[34.12929,46.10494],[34.181,46.06804],[34.25111,46.0532],[34.33912,46.06114],[34.41221,46.00245],[34.44155,45.95995],[34.48729,45.94267],[34.52011,45.95097],[34.55889,45.99347],[34.60861,45.99347],[34.66679,45.97136],[34.75479,45.90705],[34.80153,45.90047],[34.79905,45.81009],[34.96015,45.75634],[35.23066,45.79231],[37.62608,46.82615],[38.12112,46.86078],[38.3384,46.98085],[38.22955,47.12069],[38.23049,47.2324],[38.32112,47.2585],[38.33074,47.30508],[38.22225,47.30788],[38.28954,47.39255],[38.28679,47.53552],[38.35062,47.61631],[38.76379,47.69346],[38.79628,47.81109],[38.87979,47.87719],[39.73935,47.82876],[39.82213,47.96396],[39.77544,48.04206],[39.88256,48.04482],[39.83724,48.06501],[39.94847,48.22811],[40.00752,48.22445],[39.99241,48.31768],[39.97325,48.31399],[39.9693,48.29904],[39.95248,48.29972],[39.91465,48.26743],[39.90041,48.3049],[39.84273,48.30947],[39.84136,48.33321],[39.94847,48.35055],[39.88794,48.44226],[39.86196,48.46633],[39.84548,48.57821],[39.79764,48.58668],[39.67226,48.59368],[39.71765,48.68673],[39.73104,48.7325],[39.79466,48.83739],[39.97182,48.79398],[40.08168,48.87443],[40.03636,48.91957],[39.98967,48.86901],[39.78368,48.91596],[39.74874,48.98675],[39.72649,48.9754],[39.71353,48.98959],[39.6683,48.99454],[39.6836,49.05121],[39.93437,49.05709],[40.01988,49.1761],[40.22176,49.25683],[40.18331,49.34996],[40.14912,49.37681],[40.1141,49.38798],[40.03087,49.45452],[40.03636,49.52321],[40.16683,49.56865],[40.13249,49.61672],[39.84548,49.56064],[39.65047,49.61761],[39.59142,49.73758],[39.44496,49.76067],[39.27968,49.75976],[39.1808,49.88911],[38.9391,49.79524],[38.90477,49.86787],[38.73311,49.90238],[38.68677,50.00904],[38.65688,49.97176],[38.35408,50.00664],[38.32524,50.08866],[38.18517,50.08161],[38.21675,49.98104],[38.02999,49.90592],[38.02999,49.94482],[37.90776,50.04194],[37.79515,50.08425],[37.75807,50.07896],[37.61113,50.21976],[37.62879,50.24481],[37.62486,50.29966],[37.47243,50.36277],[37.48204,50.46079],[37.08468,50.34935],[36.91762,50.34963],[36.69377,50.26982],[36.64571,50.218],[36.56655,50.2413],[36.58371,50.28563],[36.47817,50.31457],[36.30101,50.29088],[36.20763,50.3943],[36.06893,50.45205],[35.8926,50.43829],[35.80388,50.41356],[35.73659,50.35489],[35.61711,50.35707],[35.58003,50.45117],[35.47463,50.49247],[35.39464,50.64751],[35.48116,50.66405],[35.47704,50.77274],[35.41367,50.80227],[35.39307,50.92145],[35.32598,50.94524],[35.40837,51.04119],[35.31774,51.08434],[35.20375,51.04723],[35.12685,51.16191],[35.14058,51.23162],[34.97304,51.2342],[34.82472,51.17483],[34.6874,51.18],[34.6613,51.25053],[34.38802,51.2746],[34.31661,51.23936],[34.23009,51.26429],[34.33446,51.363],[34.22048,51.4187],[34.30562,51.5205],[34.17599,51.63253],[34.07765,51.67065],[34.42922,51.72852],[34.41136,51.82793],[34.09413,52.00835],[34.11199,52.14087],[34.05239,52.20132],[33.78789,52.37204],[33.55718,52.30324],[33.48027,52.31499],[33.51323,52.35779],[33.18913,52.3754],[32.89937,52.2461],[32.85405,52.27888],[32.69475,52.25535],[32.54781,52.32423],[32.3528,52.32842],[32.38988,52.24946],[32.33083,52.23685],[32.34044,52.1434],[32.2777,52.10266],[32.23331,52.08085],[32.08813,52.03319],[31.92159,52.05144],[31.96141,52.08015],[31.85018,52.11305],[31.81722,52.09955],[31.7822,52.11406],[31.77877,52.18636],[31.6895,52.1973],[31.70735,52.26711],[31.57971,52.32146],[31.62084,52.33849],[31.61397,52.48843],[31.56316,52.51518],[31.63869,52.55361],[31.50406,52.69707],[31.57277,52.71613],[31.592,52.79011],[31.35667,52.97854],[31.24147,53.031],[31.32283,53.04101],[31.33519,53.08805],[31.3915,53.09712],[31.36403,53.13504],[31.40523,53.21406],[31.56316,53.19432],[31.62496,53.22886],[31.787,53.18033],[31.82373,53.10042],[32.15368,53.07594],[32.40773,53.18856],[32.51725,53.28431],[32.73257,53.33494],[32.74968,53.45597],[32.47777,53.5548],[32.40499,53.6656],[32.50112,53.68594],[32.45717,53.74039],[32.36663,53.7166],[32.12621,53.81586],[31.89137,53.78099],[31.77028,53.80015],[31.85019,53.91801],[31.88744,54.03653],[31.89599,54.0837],[31.57002,54.14535],[31.30791,54.25315],[31.3177,54.34067],[31.22945,54.46585],[31.08543,54.50361],[31.21399,54.63113],[31.19339,54.66947],[30.99187,54.67046],[30.98226,54.68872],[31.0262,54.70698],[30.97127,54.71967],[30.95479,54.74346],[30.75165,54.80699],[30.8264,54.90062],[30.81759,54.94064],[30.93144,54.9585],[30.95754,54.98609],[30.9081,55.02232],[30.94243,55.03964],[31.00972,55.02783],[31.02071,55.06167],[30.97369,55.17134],[30.87944,55.28223],[30.81946,55.27931],[30.8257,55.3313],[30.93144,55.3914],[30.90123,55.46621],[30.95204,55.50667],[30.93419,55.6185],[30.86003,55.63169],[30.7845,55.58514],[30.72957,55.66268],[30.67464,55.64176],[30.63344,55.73079],[30.51037,55.76568],[30.51346,55.78982],[30.48257,55.81066],[30.30987,55.83592],[30.27776,55.86819],[30.12136,55.8358],[29.97975,55.87281],[29.80672,55.79569],[29.61446,55.77716],[29.51283,55.70294],[29.3604,55.75862],[29.44692,55.95978],[29.21717,55.98971],[29.08299,56.03427],[28.73418,55.97131],[28.63668,56.07262],[28.68337,56.10173],[28.5529,56.11705],[28.43068,56.09407],[28.37987,56.11399],[28.36888,56.05805],[28.30571,56.06035],[28.15217,56.16964],[28.23716,56.27588],[28.16599,56.37806],[28.19057,56.44637],[28.10069,56.524],[28.13526,56.57989],[28.04768,56.59004],[27.86101,56.88204],[27.66511,56.83921],[27.86101,57.29402],[27.52453,57.42826],[27.56832,57.53728],[27.34698,57.52242],[27.31919,57.57672],[27.40393,57.62125],[27.3746,57.66834],[27.52615,57.72843],[27.50171,57.78842],[27.56689,57.83356],[27.78526,57.83963],[27.81841,57.89244],[27.67282,57.92627],[27.62393,58.09462],[27.48541,58.22615],[27.55489,58.39525],[27.36366,58.78381],[27.74429,58.98351],[27.80482,59.1116],[27.87978,59.18097],[27.90911,59.24353],[28.00689,59.28351],[28.14215,59.28934],[28.19284,59.35791],[28.20537,59.36491],[28.21137,59.38058],[28.19061,59.39962],[28.04187,59.47017],[27.85643,59.58538],[26.90044,59.63819],[26.32936,60.00121],[27.44953,60.22766],[27.71177,60.3893],[27.77352,60.52722],[28.47974,60.93365],[28.82816,61.1233],[29.01829,61.17448],[31.10136,62.43042],[31.38369,62.66284],[31.58535,62.91642],[31.29294,63.09035],[31.23244,63.22239],[30.49637,63.46666],[29.98213,63.75795],[30.25437,63.83364],[30.55687,64.09036],[30.4762,64.25728],[30.06279,64.35782],[30.01238,64.57513],[30.12329,64.64862],[30.05271,64.79072],[29.68972,64.80789],[29.61914,65.05993],[29.84096,65.1109],[29.8813,65.22101],[29.61914,65.23791],[29.68972,65.31803],[29.84096,65.56945],[29.74013,65.64025],[29.97205,65.70256],[30.16363,65.66935],[29.91155,66.13863],[28.9839,66.94139],[29.91155,67.51507],[30.02041,67.67523],[29.66955,67.79872],[29.34179,68.06655],[28.62982,68.19816],[28.43941,68.53366],[28.78224,68.86696],[28.45957,68.91417],[28.91738,69.04774],[29.0444,69.0119],[29.26623,69.13794],[29.27631,69.2811],[29.97205,69.41623],[30.16363,69.65244],[30.52662,69.54699],[30.95011,69.54699],[30.84095,69.80584],[31.59909,70.16571],[32.07813,72.01005],[36.48095,82.16765],[155.31937,81.93282],[180,71.53642],[180,62.52334],[153.94307,38.42848],[145.23667,43.76813],[145.82343,44.571],[140.9182,45.92937],[131.95041,41.5445],[130.65022,42.32281],[130.66367,42.38024],[130.64181,42.41422],[130.60805,42.4317],[130.56835,42.43281],[130.55143,42.52158],[130.62107,42.58413],[130.56576,42.68925],[130.40213,42.70788],[130.44361,42.76205],[130.66524,42.84753],[131.02438,42.86518],[131.02668,42.91246],[131.135,42.94114],[131.10274,43.04734],[131.20414,43.13654],[131.19031,43.21385],[131.30324,43.39498],[131.29402,43.46695],[131.19492,43.53047],[131.21105,43.82383],[131.26176,43.94011],[131.23583,43.96085],[131.25484,44.03131],[131.30365,44.04262],[131.1108,44.70266],[130.95639,44.85154],[131.48415,44.99513],[131.68466,45.12374],[131.66852,45.2196],[131.76532,45.22609],[131.86903,45.33636],[131.99417,45.2567],[132.83978,45.05916],[132.96373,45.0212],[133.12293,45.1332],[133.09279,45.25693],[133.19419,45.51913],[133.41083,45.57723],[133.48457,45.86203],[133.60442,45.90053],[133.67569,45.9759],[133.72695,46.05576],[133.68047,46.14697],[133.88097,46.25066],[133.91496,46.4274],[133.84104,46.46681],[134.03538,46.75668],[134.20016,47.33458],[134.50898,47.4812],[134.7671,47.72051],[134.55508,47.98651],[134.67098,48.1564],[134.75328,48.36763],[134.49516,48.42884],[132.66989,47.96491],[132.57309,47.71741],[131.90448,47.68011],[131.2635,47.73325],[131.09871,47.6852],[130.95985,47.6957],[130.90915,47.90623],[130.65103,48.10052],[130.84462,48.30942],[130.52147,48.61745],[130.66946,48.88251],[130.43232,48.90844],[130.2355,48.86741],[129.85416,49.11067],[129.67598,49.29596],[129.50685,49.42398],[129.40398,49.44194],[129.35317,49.3481],[129.23232,49.40353],[129.11153,49.36813],[128.72896,49.58676],[127.83476,49.5748],[127.53516,49.84306],[127.49299,50.01251],[127.60515,50.23503],[127.37384,50.28393],[127.36009,50.43787],[127.28765,50.46585],[127.36335,50.58306],[127.28165,50.72075],[127.14586,50.91152],[126.93135,51.0841],[126.90369,51.3238],[126.68349,51.70607],[126.44606,51.98254],[126.558,52.13738],[125.6131,53.07229],[125.17522,53.20225],[124.46078,53.21881],[123.86158,53.49391],[123.26989,53.54843],[122.85966,53.47395],[122.35063,53.49565],[121.39213,53.31888],[120.85633,53.28499],[120.0451,52.7359],[120.04049,52.58773],[120.46454,52.63811],[120.71673,52.54099],[120.61346,52.32447],[120.77337,52.20805],[120.65907,51.93544],[120.10963,51.671],[119.13553,50.37412],[119.38598,50.35162],[119.27996,50.13348],[119.11003,50.00276],[118.61623,49.93809],[117.82343,49.52696],[117.48208,49.62324],[117.27597,49.62544],[117.07142,49.68482],[116.71193,49.83813],[116.62502,49.92919],[116.22402,50.04477],[115.73602,49.87688],[115.26068,49.97367],[114.9703,50.19254],[114.325,50.28098],[113.20216,49.83356],[113.02647,49.60772],[110.64493,49.1816],[110.39891,49.25083],[110.24373,49.16676],[109.51325,49.22859],[109.18017,49.34709],[108.53969,49.32325],[108.27937,49.53167],[107.95387,49.66659],[107.96116,49.93191],[107.36407,49.97612],[107.1174,50.04239],[107.00007,50.1977],[106.80326,50.30177],[106.58373,50.34044],[106.51122,50.34408],[106.49628,50.32436],[106.47156,50.31909],[106.07865,50.33474],[106.05562,50.40582],[105.32528,50.4648],[103.70343,50.13952],[102.71178,50.38873],[102.32194,50.67982],[102.14032,51.35566],[101.5044,51.50467],[101.39085,51.45753],[100.61116,51.73028],[99.89203,51.74903],[99.75578,51.90108],[99.27888,51.96876],[98.87768,52.14563],[98.74142,51.8637],[98.33222,51.71832],[98.22053,51.46579],[98.05257,51.46696],[97.83305,51.00248],[98.01472,50.86652],[97.9693,50.78044],[98.06393,50.61262],[98.31373,50.4996],[98.29481,50.33561],[97.85197,49.91339],[97.76871,49.99861],[97.56432,49.92801],[97.56811,49.84265],[97.24639,49.74737],[96.97388,49.88413],[95.80056,50.04239],[95.74757,49.97915],[95.02465,49.96941],[94.97166,50.04725],[94.6121,50.04239],[94.49477,50.17832],[94.39258,50.22193],[94.30823,50.57498],[92.99595,50.63183],[93.01109,50.79001],[92.44714,50.78762],[92.07173,50.69585],[91.86048,50.73734],[89.59711,49.90851],[89.70687,49.72535],[88.82499,49.44808],[88.42449,49.48821],[88.17223,49.46934],[88.15543,49.30314],[87.98977,49.18147],[87.81333,49.17354],[87.48983,49.13794],[87.478,49.07403],[87.28386,49.11626],[87.31465,49.23603],[87.03071,49.25142],[86.82606,49.51796],[86.61307,49.60239],[86.79056,49.74787],[86.63674,49.80136],[86.18709,49.50259],[85.24047,49.60239],[84.99198,50.06793],[84.29385,50.27257],[83.8442,50.87375],[83.14607,51.00796],[82.55443,50.75412],[81.94999,50.79307],[81.46581,50.77658],[81.41248,50.97524],[81.06091,50.94833],[81.16999,51.15662],[80.80318,51.28262],[80.44819,51.20855],[80.4127,50.95581],[80.08138,50.77658],[79.11255,52.01171],[77.90383,53.29807],[76.54243,53.99329],[76.44076,54.16017],[76.82266,54.1798],[76.91052,54.4677],[75.3668,54.07439],[75.43398,53.98652],[75.07405,53.80831],[73.39218,53.44623],[73.25412,53.61532],[73.68921,53.86522],[73.74778,54.07194],[73.37963,53.96132],[72.71026,54.1161],[72.43415,53.92685],[72.17477,54.36303],[71.96141,54.17736],[71.10379,54.13326],[71.08706,54.33376],[71.24185,54.64965],[71.08288,54.71253],[70.96009,55.10558],[70.76493,55.3027],[70.19179,55.1476],[69.74917,55.35545],[69.34224,55.36344],[68.90865,55.38148],[68.19206,55.18823],[68.26661,55.09226],[68.21308,54.98645],[65.20174,54.55216],[65.24663,54.35721],[65.11033,54.33028],[64.97216,54.4212],[63.97686,54.29763],[64.02715,54.22679],[63.91224,54.20013],[63.80604,54.27079],[62.58651,54.05871],[62.56876,53.94047],[62.45931,53.90737],[62.38535,54.03961],[62.00966,54.04134],[62.03913,53.94768],[61.65318,54.02445],[61.56941,53.95703],[61.47603,54.08048],[61.3706,54.08464],[61.26863,53.92797],[60.99796,53.93699],[61.14283,53.90063],[61.22574,53.80268],[60.90626,53.62937],[61.55706,53.57144],[61.57185,53.50112],[61.37957,53.45887],[61.29082,53.50992],[61.14291,53.41481],[61.19024,53.30536],[62.14574,53.09626],[62.12799,52.99133],[62.0422,52.96105],[61.23462,53.03227],[61.05842,52.92217],[60.71989,52.75923],[60.71693,52.66245],[60.84118,52.63912],[60.84709,52.52228],[60.98021,52.50068],[61.05417,52.35096],[60.78201,52.22067],[60.72581,52.15538],[60.48915,52.15175],[60.19925,51.99173],[59.99809,51.98263],[60.09867,51.87135],[60.50986,51.7964],[60.36787,51.66815],[60.5424,51.61675],[60.92401,51.61124],[60.95655,51.48615],[61.50677,51.40687],[61.55114,51.32746],[61.6813,51.25716],[61.56889,51.23679],[61.4431,50.80679],[60.81833,50.6629],[60.31914,50.67705],[60.17262,50.83312],[60.01288,50.8163],[59.81172,50.54451],[59.51886,50.49937],[59.48928,50.64216],[58.87974,50.70852],[58.3208,51.15151],[57.75578,51.13852],[57.74986,50.93017],[57.44221,50.88354],[57.17302,51.11253],[56.17906,50.93204],[56.11398,50.7471],[55.67774,50.54508],[54.72067,51.03261],[54.56685,51.01958],[54.71476,50.61214],[54.55797,50.52006],[54.41894,50.61214],[54.46331,50.85554],[54.12248,51.11542],[53.69299,51.23466],[53.46165,51.49445],[52.54329,51.48444],[52.36119,51.74161],[51.8246,51.67916],[51.77431,51.49536],[51.301,51.48799],[51.26254,51.68466],[50.59695,51.61859],[50.26859,51.28677],[49.97277,51.2405],[49.76866,51.11067],[49.39001,51.09396],[49.41959,50.85927],[49.12673,50.78639],[48.86936,50.61589],[48.57946,50.63278],[48.90782,50.02281],[48.68352,49.89546],[48.42564,49.82283],[48.24519,49.86099],[48.10044,50.09242],[47.58551,50.47867],[47.30448,50.30894],[47.34589,50.09308],[47.18319,49.93721],[46.9078,49.86707],[46.78398,49.34026],[46.98795,49.23531],[47.04416,49.17152],[47.01458,49.07085],[46.91104,48.99715],[46.78392,48.95352],[46.49011,48.43019],[47.11516,48.27188],[47.12107,47.83687],[47.38731,47.68176],[47.41689,47.83687],[47.64973,47.76559],[48.15348,47.74545],[48.45173,47.40818],[48.52326,47.4102],[49.01136,46.72716],[48.51142,46.69268],[48.54988,46.56267],[49.16518,46.38542],[49.32259,46.26944],[49.88945,46.04554],[49.2134,44.84989],[48.80971,41.95365],[48.5867,41.84306],[48.55078,41.77917],[48.42301,41.65444],[48.40277,41.60441],[48.2878,41.56221],[48.22064,41.51472],[48.07587,41.49957],[47.87973,41.21798],[47.75831,41.19455],[47.62288,41.22969],[47.54504,41.20275],[47.49004,41.26366],[47.34579,41.27884],[47.10762,41.59044],[47.03757,41.55434],[46.99554,41.59743],[47.00955,41.63583],[46.8134,41.76252],[46.75269,41.8623],[46.58924,41.80547],[46.5332,41.87389],[46.42738,41.91323],[45.61676,42.20768],[45.78692,42.48358],[45.36501,42.55268],[45.15318,42.70598],[44.88754,42.74934],[44.80941,42.61277],[44.70002,42.74679],[44.54202,42.75699],[43.95517,42.55396],[43.73119,42.62043],[43.81453,42.74297],[43.0419,43.02413],[43.03322,43.08883],[42.75889,43.19651],[42.66667,43.13917],[42.40563,43.23226],[41.64935,43.22331],[40.65957,43.56212],[40.10657,43.57344],[40.04445,43.47776],[40.03312,43.44262],[40.01007,43.42411],[40.01552,43.42025],[40.00853,43.40578],[40.0078,43.38551],[39.81147,43.06294]]],[[[21.46766,55.21115],[21.51095,55.18507],[21.55605,55.20311],[21.64954,55.1791],[21.85521,55.09493],[21.96505,55.07353],[21.99543,55.08691],[22.03984,55.07888],[22.02582,55.05078],[22.06087,55.02935],[22.11697,55.02131],[22.14267,55.05345],[22.31562,55.0655],[22.47688,55.04408],[22.58907,55.07085],[22.60075,55.01863],[22.65451,54.97037],[22.68723,54.9811],[22.76422,54.92521],[22.85083,54.88711],[22.87317,54.79492],[22.73631,54.72952],[22.73397,54.66604],[22.75467,54.6483],[22.74225,54.64339],[22.7522,54.63525],[22.68021,54.58486],[22.71293,54.56454],[22.67788,54.532],[22.70208,54.45312],[22.7253,54.41732],[22.79705,54.36264],[21.41123,54.32395],[20.63871,54.3706],[19.8038,54.44203],[19.64312,54.45423],[18.57853,55.25302],[20.60454,55.40986],[20.95181,55.27994],[21.26425,55.24456],[21.35465,55.28427],[21.38446,55.29348],[21.46766,55.21115]]]]}},{type:"Feature",properties:{iso1A2:"AW",iso1A3:"ABW",iso1N3:"533",wikidata:"Q21203",nameEn:"Aruba",country:"NL",groups:["029","003","419","019"],callingCodes:["297"]},geometry:{type:"MultiPolygon",coordinates:[[[[-70.00823,12.98375],[-69.60231,12.17],[-70.35625,12.58277],[-70.00823,12.98375]]]]}},{type:"Feature",properties:{iso1A2:"RW",iso1A3:"RWA",iso1N3:"646",wikidata:"Q1037",nameEn:"Rwanda",groups:["014","202","002"],callingCodes:["250"]},geometry:{type:"MultiPolygon",coordinates:[[[[30.47194,-1.0555],[30.45116,-1.10641],[30.50889,-1.16412],[30.57123,-1.33264],[30.71974,-1.43244],[30.84079,-1.64652],[30.80802,-1.91477],[30.89303,-2.08223],[30.83915,-2.35795],[30.54501,-2.41404],[30.42933,-2.31064],[30.14034,-2.43626],[29.95911,-2.33348],[29.88237,-2.75105],[29.36805,-2.82933],[29.32234,-2.6483],[29.0562,-2.58632],[29.04081,-2.7416],[29.00357,-2.70596],[28.94346,-2.69124],[28.89793,-2.66111],[28.90226,-2.62385],[28.89288,-2.55848],[28.87943,-2.55165],[28.86193,-2.53185],[28.86209,-2.5231],[28.87497,-2.50887],[28.88846,-2.50493],[28.89342,-2.49017],[28.89132,-2.47557],[28.86846,-2.44866],[28.86826,-2.41888],[28.89601,-2.37321],[28.95642,-2.37321],[29.00051,-2.29001],[29.105,-2.27043],[29.17562,-2.12278],[29.11847,-1.90576],[29.24458,-1.69663],[29.24323,-1.66826],[29.36322,-1.50887],[29.45038,-1.5054],[29.53062,-1.40499],[29.59061,-1.39016],[29.82657,-1.31187],[29.912,-1.48269],[30.16369,-1.34303],[30.35212,-1.06896],[30.47194,-1.0555]]]]}},{type:"Feature",properties:{iso1A2:"BB",iso1A3:"BRB",iso1N3:"052",wikidata:"Q244",nameEn:"Barbados",groups:["029","003","419","019"],driveSide:"left",callingCodes:["1 246"]},geometry:{type:"MultiPolygon",coordinates:[[[[-58.56442,13.24471],[-60.19227,12.37597],[-59.80731,13.87556],[-58.56442,13.24471]]]]}},{type:"Feature",properties:{iso1A2:"SA",iso1A3:"SAU",iso1N3:"682",wikidata:"Q851",nameEn:"Saudi Arabia",groups:["145","142"],callingCodes:["966"]},geometry:{type:"MultiPolygon",coordinates:[[[[40.01521,32.05667],[42.97601,30.72204],[42.97796,30.48295],[44.72255,29.19736],[46.42415,29.05947],[46.5527,29.10283],[47.46202,29.0014],[47.58376,28.83382],[47.59863,28.66798],[47.70561,28.5221],[48.42991,28.53628],[49.00421,28.81495],[49.98877,27.87827],[50.37726,27.89227],[50.71771,26.73086],[50.38162,26.53976],[50.26923,26.08243],[50.302,25.87592],[50.57069,25.57887],[50.8133,24.74049],[50.92992,24.54396],[51.09638,24.46907],[51.29972,24.50747],[51.39468,24.62785],[51.58834,24.66608],[51.41644,24.39615],[51.58871,24.27256],[51.59617,24.12041],[52.56622,22.94341],[55.13599,22.63334],[55.2137,22.71065],[55.66469,21.99658],[54.99756,20.00083],[52.00311,19.00083],[49.04884,18.59899],[48.19996,18.20584],[47.58351,17.50366],[47.48245,17.10808],[47.00571,16.94765],[46.76494,17.29151],[46.31018,17.20464],[44.50126,17.47475],[43.70631,17.35762],[43.43005,17.56148],[43.29185,17.53224],[43.22533,17.38343],[43.32653,17.31179],[43.20156,17.25901],[43.17787,17.14717],[43.23967,17.03428],[43.18233,17.02673],[43.1813,16.98438],[43.19328,16.94703],[43.1398,16.90696],[43.18338,16.84852],[43.22012,16.83932],[43.22956,16.80613],[43.24801,16.80613],[43.26303,16.79479],[43.25857,16.75304],[43.21325,16.74416],[43.22066,16.65179],[43.15274,16.67248],[43.11601,16.53166],[42.97215,16.51093],[42.94351,16.49467],[42.94625,16.39721],[42.76801,16.40371],[42.15205,16.40211],[41.37609,16.19728],[39.63762,18.37348],[37.8565,22.00903],[34.51305,27.70027],[34.46254,27.99552],[34.88293,29.37455],[34.95987,29.35727],[36.07081,29.18469],[36.50005,29.49696],[36.75083,29.86903],[37.4971,29.99949],[37.66395,30.33245],[37.99354,30.49998],[36.99791,31.50081],[38.99233,31.99721],[39.29903,32.23259],[40.01521,32.05667]]]]}},{type:"Feature",properties:{iso1A2:"BG",iso1A3:"BGR",iso1N3:"100",wikidata:"Q219",nameEn:"Bulgaria",groups:["EU","151","150"],callingCodes:["359"]},geometry:{type:"MultiPolygon",coordinates:[[[[23.05288,43.79494],[23.26772,43.84843],[23.4507,43.84936],[23.61687,43.79289],[23.73978,43.80627],[24.18149,43.68218],[24.35364,43.70211],[24.50264,43.76314],[24.62281,43.74082],[24.73542,43.68523],[24.96682,43.72693],[25.10718,43.6831],[25.17144,43.70261],[25.39528,43.61866],[25.72792,43.69263],[25.94911,43.85745],[26.05584,43.90925],[26.10115,43.96908],[26.38764,44.04356],[26.62712,44.05698],[26.95141,44.13555],[27.26845,44.12602],[27.39757,44.0141],[27.60834,44.01206],[27.64542,44.04958],[27.73468,43.95326],[27.92008,44.00761],[27.99558,43.84193],[28.23293,43.76],[29.24336,43.70874],[28.32297,41.98371],[28.02971,41.98066],[27.91479,41.97902],[27.83492,41.99709],[27.81235,41.94803],[27.69949,41.97515],[27.55191,41.90928],[27.52379,41.93756],[27.45478,41.96591],[27.27411,42.10409],[27.22376,42.10152],[27.19251,42.06028],[27.08486,42.08735],[27.03277,42.0809],[26.95638,42.00741],[26.79143,41.97386],[26.62996,41.97644],[26.56051,41.92995],[26.57961,41.90024],[26.53968,41.82653],[26.36952,41.82265],[26.33589,41.76802],[26.32952,41.73637],[26.35957,41.71149],[26.30255,41.70925],[26.2654,41.71544],[26.22888,41.74139],[26.21325,41.73223],[26.16841,41.74858],[26.06148,41.70345],[26.07083,41.64584],[26.15146,41.60828],[26.14328,41.55496],[26.17951,41.55409],[26.176,41.50072],[26.14796,41.47533],[26.20288,41.43943],[26.16548,41.42278],[26.12926,41.35878],[25.87919,41.30526],[25.8266,41.34563],[25.70507,41.29209],[25.66183,41.31316],[25.61042,41.30614],[25.55082,41.31667],[25.52394,41.2798],[25.48187,41.28506],[25.28322,41.23411],[25.11611,41.34212],[24.942,41.38685],[24.90928,41.40876],[24.86136,41.39298],[24.82514,41.4035],[24.8041,41.34913],[24.71529,41.41928],[24.61129,41.42278],[24.52599,41.56808],[24.30513,41.51297],[24.27124,41.57682],[24.18126,41.51735],[24.10063,41.54796],[24.06323,41.53222],[24.06908,41.46132],[23.96975,41.44118],[23.91483,41.47971],[23.89613,41.45257],[23.80148,41.43943],[23.76525,41.40175],[23.67644,41.41139],[23.63203,41.37632],[23.52453,41.40262],[23.40416,41.39999],[23.33639,41.36317],[23.31301,41.40525],[23.22771,41.37106],[23.21953,41.33773],[23.1833,41.31755],[22.93334,41.34104],[22.96331,41.35782],[22.95513,41.63265],[23.03342,41.71034],[23.01239,41.76527],[22.96682,41.77137],[22.90254,41.87587],[22.86749,42.02275],[22.67701,42.06614],[22.51224,42.15457],[22.50289,42.19527],[22.47251,42.20393],[22.38136,42.30339],[22.34773,42.31725],[22.45919,42.33822],[22.47498,42.3915],[22.51961,42.3991],[22.55669,42.50144],[22.43983,42.56851],[22.4997,42.74144],[22.43309,42.82057],[22.54302,42.87774],[22.74826,42.88701],[22.78397,42.98253],[22.89521,43.03625],[22.98104,43.11199],[23.00806,43.19279],[22.89727,43.22417],[22.82036,43.33665],[22.53397,43.47225],[22.47582,43.6558],[22.41043,43.69566],[22.35558,43.81281],[22.41449,44.00514],[22.61688,44.06534],[22.61711,44.16938],[22.67173,44.21564],[23.04988,44.07694],[23.01674,44.01946],[22.87873,43.9844],[22.83753,43.88055],[22.85314,43.84452],[23.05288,43.79494]]]]}},{type:"Feature",properties:{iso1A2:"SB",iso1A3:"SLB",iso1N3:"090",wikidata:"Q685",nameEn:"Solomon Islands",groups:["054","009"],driveSide:"left",callingCodes:["677"]},geometry:{type:"MultiPolygon",coordinates:[[[[174,-12.72535],[160.04026,-13.08769],[154.74815,-7.33315],[155.60735,-6.92266],[155.69784,-6.92661],[155.92557,-6.84664],[156.03993,-6.65703],[156.03296,-6.55528],[160.43769,-4.17974],[174,-12.72535]]]]}},{type:"Feature",properties:{iso1A2:"BL",iso1A3:"BLM",iso1N3:"652",wikidata:"Q25362",nameEn:"Saint-Barthélemy",country:"FR",groups:["029","003","419","019"],callingCodes:["590"]},geometry:{type:"MultiPolygon",coordinates:[[[[-62.75637,18.13489],[-62.54836,17.8636],[-62.76692,17.64353],[-63.07669,17.79659],[-62.93924,18.02904],[-62.75637,18.13489]]]]}},{type:"Feature",properties:{iso1A2:"SC",iso1A3:"SYC",iso1N3:"690",wikidata:"Q1042",nameEn:"Seychelles",groups:["014","202","002"],driveSide:"left",callingCodes:["248"]},geometry:{type:"MultiPolygon",coordinates:[[[[43.75112,-10.38913],[66.3222,5.65313],[54.83239,-10.93575],[43.75112,-10.38913]]]]}},{type:"Feature",properties:{iso1A2:"BQ",iso1A3:"BES",iso1N3:"535",wikidata:"Q27561",nameEn:"Caribbean Netherlands",country:"NL",groups:["029","003","419","019"],callingCodes:["599 3","599 4","599 7"]},geometry:{type:"MultiPolygon",coordinates:[[[[-63.07669,17.79659],[-63.22932,17.32592],[-63.11114,17.23125],[-62.76692,17.64353],[-63.07669,17.79659]]],[[[-63.29212,17.90532],[-63.07669,17.79659],[-63.22932,17.32592],[-63.58819,17.61311],[-63.29212,17.90532]]],[[[-67.89186,12.4116],[-68.01417,11.77722],[-68.33524,11.78151],[-68.90012,12.62309],[-67.89186,12.4116]]]]}},{type:"Feature",properties:{iso1A2:"SD",iso1A3:"SDN",iso1N3:"729",wikidata:"Q1049",nameEn:"Sudan",groups:["015","002"],callingCodes:["249"]},geometry:{type:"MultiPolygon",coordinates:[[[[37.8565,22.00903],[39.63762,18.37348],[38.57727,17.98125],[38.45916,17.87167],[38.37133,17.66269],[38.13362,17.53906],[37.50967,17.32199],[37.42694,17.04041],[36.99777,17.07172],[36.92193,16.23451],[36.76371,15.80831],[36.69761,15.75323],[36.54276,15.23478],[36.44337,15.14963],[36.54376,14.25597],[36.44653,13.95666],[36.48824,13.83954],[36.38993,13.56459],[36.24545,13.36759],[36.13374,12.92665],[36.16651,12.88019],[36.14268,12.70879],[36.01458,12.72478],[35.70476,12.67101],[35.24302,11.91132],[35.11492,11.85156],[35.05832,11.71158],[35.09556,11.56278],[34.95704,11.24448],[35.01215,11.19626],[34.93172,10.95946],[34.97789,10.91559],[34.97491,10.86147],[34.86916,10.78832],[34.86618,10.74588],[34.77532,10.69027],[34.77383,10.74588],[34.59062,10.89072],[34.4372,10.781],[34.2823,10.53508],[34.34783,10.23914],[34.32102,10.11599],[34.22718,10.02506],[34.20484,9.9033],[34.13186,9.7492],[34.08717,9.55243],[34.10229,9.50238],[33.87958,9.49937],[33.9082,9.762],[33.96323,9.80972],[33.99185,9.99623],[33.96984,10.15446],[33.90159,10.17179],[33.80913,10.32994],[33.66604,10.44254],[33.52294,10.64382],[33.24645,10.77913],[33.26977,10.83632],[33.13988,11.43248],[33.25876,12.22111],[32.73921,12.22757],[32.73921,11.95203],[32.10079,11.95203],[32.39578,11.70208],[32.39358,11.18207],[32.46967,11.04662],[31.99177,10.65065],[31.77539,10.28939],[31.28504,9.75287],[30.84605,9.7498],[30.82893,9.71451],[30.53005,9.95992],[30.00389,10.28633],[29.94629,10.29245],[29.54,10.07949],[29.53844,9.75133],[29.06988,9.74826],[28.99983,9.67155],[27.90704,9.61323],[27.14427,9.62858],[26.70685,9.48735],[26.35815,9.57946],[26.21338,9.91545],[25.93241,10.17941],[25.93163,10.38159],[25.78141,10.42599],[25.0918,10.33718],[25.05688,10.06776],[24.97739,9.9081],[24.84653,9.80643],[24.49389,9.79962],[24.12744,9.73784],[24.09319,9.66572],[23.69155,9.67566],[23.67164,9.86923],[23.3128,10.45214],[23.02221,10.69235],[22.87758,10.91915],[22.97249,11.21955],[22.93124,11.41645],[22.7997,11.40424],[22.54907,11.64372],[22.64092,12.07485],[22.48369,12.02766],[22.50548,12.16769],[22.38873,12.45514],[22.46345,12.61925],[22.22684,12.74682],[22.15679,12.66634],[21.98711,12.63292],[21.89371,12.68001],[21.81432,12.81362],[21.94819,13.05637],[22.02914,13.13976],[22.1599,13.19281],[22.29689,13.3731],[22.08674,13.77863],[22.22995,13.96754],[22.5553,14.11704],[22.55997,14.23024],[22.44944,14.24986],[22.38562,14.58907],[22.70474,14.69149],[22.66115,14.86308],[22.99584,15.22989],[22.99584,15.40105],[22.92579,15.47007],[22.93201,15.55107],[23.10792,15.71297],[23.38812,15.69649],[23.62785,15.7804],[23.99997,15.69575],[23.99539,19.49944],[23.99715,20.00038],[24.99794,19.99661],[24.99885,21.99535],[33.17563,22.00405],[33.57251,21.72406],[33.99686,21.76784],[34.0765,22.00501],[37.8565,22.00903]]]]}},{type:"Feature",properties:{iso1A2:"BV",iso1A3:"BVT",iso1N3:"074",wikidata:"Q23408",nameEn:"Bouvet Island",country:"NO",groups:["005","419","019"]},geometry:{type:"MultiPolygon",coordinates:[[[[4.54042,-54.0949],[3.35353,-55.17558],[2.28941,-54.13089],[4.54042,-54.0949]]]]}},{type:"Feature",properties:{iso1A2:"SE",iso1A3:"SWE",iso1N3:"752",wikidata:"Q34",nameEn:"Sweden",groups:["EU","154","150"],callingCodes:["46"]},geometry:{type:"MultiPolygon",coordinates:[[[[24.15791,65.85385],[24.14798,65.83466],[24.15107,65.81427],[24.14112,65.39731],[20.15877,63.06556],[19.23413,60.61414],[19.08191,60.19152],[20.5104,59.15546],[19.84909,57.57876],[19.64795,57.06466],[15.79951,55.54655],[14.89259,55.5623],[14.28399,55.1553],[12.84405,55.13257],[12.60345,55.42675],[12.88472,55.63369],[12.6372,55.91371],[12.65312,56.04345],[12.07466,56.29488],[12.16597,56.60205],[10.40861,58.38489],[10.64958,58.89391],[11.08911,58.98745],[11.15367,59.07862],[11.34459,59.11672],[11.4601,58.99022],[11.45199,58.89604],[11.65732,58.90177],[11.8213,59.24985],[11.69297,59.59442],[11.92112,59.69531],[11.87121,59.86039],[12.15641,59.8926],[12.36317,59.99259],[12.52003,60.13846],[12.59133,60.50559],[12.2277,61.02442],[12.69115,61.06584],[12.86939,61.35427],[12.57707,61.56547],[12.40595,61.57226],[12.14746,61.7147],[12.29187,62.25699],[12.07085,62.6297],[12.19919,63.00104],[11.98529,63.27487],[12.19919,63.47935],[12.14928,63.59373],[12.74105,64.02171],[13.23411,64.09087],[13.98222,64.00953],[14.16051,64.18725],[14.11117,64.46674],[13.64276,64.58402],[14.50926,65.31786],[14.53778,66.12399],[15.05113,66.15572],[15.49318,66.28509],[15.37197,66.48217],[16.35589,67.06419],[16.39154,67.21653],[16.09922,67.4364],[16.12774,67.52106],[16.38441,67.52923],[16.7409,67.91037],[17.30416,68.11591],[17.90787,67.96537],[18.13836,68.20874],[18.1241,68.53721],[18.39503,68.58672],[18.63032,68.50849],[18.97255,68.52416],[19.93508,68.35911],[20.22027,68.48759],[19.95647,68.55546],[20.22027,68.67246],[20.33435,68.80174],[20.28444,68.93283],[20.0695,69.04469],[20.55258,69.06069],[20.78802,69.03087],[20.91658,68.96764],[20.85104,68.93142],[20.90649,68.89696],[21.03001,68.88969],[22.00429,68.50692],[22.73028,68.40881],[23.10336,68.26551],[23.15377,68.14759],[23.26469,68.15134],[23.40081,68.05545],[23.65793,67.9497],[23.45627,67.85297],[23.54701,67.59306],[23.39577,67.46974],[23.75372,67.43688],[23.75372,67.29914],[23.54701,67.25435],[23.58735,67.20752],[23.56214,67.17038],[23.98563,66.84149],[23.98059,66.79585],[23.89488,66.772],[23.85959,66.56434],[23.63776,66.43568],[23.67591,66.3862],[23.64982,66.30603],[23.71339,66.21299],[23.90497,66.15802],[24.15791,65.85385]]]]}},{type:"Feature",properties:{iso1A2:"CA",iso1A3:"CAN",iso1N3:"124",wikidata:"Q16",nameEn:"Canada",groups:["021","003","019"],callingCodes:["1"]},geometry:{type:"MultiPolygon",coordinates:[[[[-67.20349,45.1722],[-67.22751,45.16344],[-67.27039,45.1934],[-67.29748,45.18173],[-67.29754,45.14865],[-67.34927,45.122],[-67.48201,45.27351],[-67.42394,45.37969],[-67.50578,45.48971],[-67.42144,45.50584],[-67.43815,45.59162],[-67.6049,45.60725],[-67.80705,45.69528],[-67.80653,45.80022],[-67.75654,45.82324],[-67.80961,45.87531],[-67.75196,45.91814],[-67.78111,45.9392],[-67.78578,47.06473],[-67.87993,47.10377],[-67.94843,47.1925],[-68.23244,47.35712],[-68.37458,47.35851],[-68.38332,47.28723],[-68.57914,47.28431],[-68.60575,47.24659],[-68.70125,47.24399],[-68.89222,47.1807],[-69.05039,47.2456],[-69.05073,47.30076],[-69.05148,47.42012],[-69.22119,47.46461],[-69.99966,46.69543],[-70.05812,46.41768],[-70.18547,46.35357],[-70.29078,46.18832],[-70.23855,46.1453],[-70.31025,45.96424],[-70.24694,45.95138],[-70.25976,45.89675],[-70.41523,45.79497],[-70.38934,45.73215],[-70.54019,45.67291],[-70.68516,45.56964],[-70.72651,45.49771],[-70.62518,45.42286],[-70.65383,45.37592],[-70.78372,45.43269],[-70.82638,45.39828],[-70.80236,45.37444],[-70.84816,45.22698],[-70.89864,45.2398],[-70.91169,45.29849],[-70.95193,45.33895],[-71.0107,45.34819],[-71.01866,45.31573],[-71.08364,45.30623],[-71.14568,45.24128],[-71.19723,45.25438],[-71.22338,45.25184],[-71.29371,45.29996],[-71.37133,45.24624],[-71.44252,45.2361],[-71.40364,45.21382],[-71.42778,45.12624],[-71.48735,45.07784],[-71.50067,45.01357],[-73.35025,45.00942],[-74.32699,44.99029],[-74.66689,45.00646],[-74.8447,45.00606],[-74.99101,44.98051],[-75.01363,44.95608],[-75.2193,44.87821],[-75.41441,44.76614],[-75.76813,44.51537],[-75.8217,44.43176],[-75.95947,44.34463],[-76.00018,44.34896],[-76.16285,44.28262],[-76.1664,44.23051],[-76.244,44.19643],[-76.31222,44.19894],[-76.35324,44.13493],[-76.43859,44.09393],[-76.79706,43.63099],[-79.25796,43.54052],[-79.06921,43.26183],[-79.05512,43.25375],[-79.05544,43.21224],[-79.05002,43.20133],[-79.05384,43.17418],[-79.04652,43.16396],[-79.0427,43.13934],[-79.06881,43.12029],[-79.05671,43.10937],[-79.07486,43.07845],[-79.01055,43.06659],[-78.99941,43.05612],[-79.02424,43.01983],[-79.02074,42.98444],[-78.98126,42.97],[-78.96312,42.95509],[-78.93224,42.95229],[-78.90905,42.93022],[-78.90712,42.89733],[-78.93684,42.82887],[-82.67862,41.67615],[-83.11184,41.95671],[-83.14962,42.04089],[-83.12724,42.2376],[-83.09837,42.28877],[-83.07837,42.30978],[-83.02253,42.33045],[-82.82964,42.37355],[-82.64242,42.55594],[-82.58873,42.54984],[-82.57583,42.5718],[-82.51858,42.611],[-82.51063,42.66025],[-82.46613,42.76615],[-82.4826,42.8068],[-82.45331,42.93139],[-82.4253,42.95423],[-82.4146,42.97626],[-82.42469,42.992],[-82.48419,45.30225],[-83.59589,45.82131],[-83.43746,45.99749],[-83.57017,46.105],[-83.83329,46.12169],[-83.90453,46.05922],[-83.95399,46.05634],[-84.1096,46.23987],[-84.09756,46.25512],[-84.11615,46.2681],[-84.11254,46.32329],[-84.13451,46.39218],[-84.11196,46.50248],[-84.12885,46.53068],[-84.17723,46.52753],[-84.1945,46.54061],[-84.2264,46.53337],[-84.26351,46.49508],[-84.29893,46.49127],[-84.34174,46.50683],[-84.42101,46.49853],[-84.4481,46.48972],[-84.47607,46.45225],[-84.55635,46.45974],[-84.85871,46.88881],[-88.37033,48.30586],[-89.48837,48.01412],[-89.57972,48.00023],[-89.77248,48.02607],[-89.89974,47.98109],[-90.07418,48.11043],[-90.56312,48.09488],[-90.56444,48.12184],[-90.75045,48.09143],[-90.87588,48.2484],[-91.08016,48.18096],[-91.25025,48.08522],[-91.43248,48.04912],[-91.45829,48.07454],[-91.58025,48.04339],[-91.55649,48.10611],[-91.70451,48.11805],[-91.71231,48.19875],[-91.86125,48.21278],[-91.98929,48.25409],[-92.05339,48.35958],[-92.14732,48.36578],[-92.202,48.35252],[-92.26662,48.35651],[-92.30939,48.31251],[-92.27167,48.25046],[-92.37185,48.22259],[-92.48147,48.36609],[-92.45588,48.40624],[-92.50712,48.44921],[-92.65606,48.43471],[-92.71323,48.46081],[-92.69927,48.49573],[-92.62747,48.50278],[-92.6342,48.54133],[-92.7287,48.54005],[-92.94973,48.60866],[-93.25391,48.64266],[-93.33946,48.62787],[-93.3712,48.60599],[-93.39758,48.60364],[-93.40693,48.60948],[-93.44472,48.59147],[-93.47022,48.54357],[-93.66382,48.51845],[-93.79267,48.51631],[-93.80939,48.52439],[-93.80676,48.58232],[-93.83288,48.62745],[-93.85769,48.63284],[-94.23215,48.65202],[-94.25104,48.65729],[-94.25172,48.68404],[-94.27153,48.70232],[-94.4174,48.71049],[-94.44258,48.69223],[-94.53826,48.70216],[-94.54885,48.71543],[-94.58903,48.71803],[-94.69335,48.77883],[-94.69669,48.80918],[-94.70486,48.82365],[-94.70087,48.8339],[-94.687,48.84077],[-94.75017,49.09931],[-94.77355,49.11998],[-94.82487,49.29483],[-94.8159,49.32299],[-94.85381,49.32492],[-94.95681,49.37035],[-94.99532,49.36579],[-95.01419,49.35647],[-95.05825,49.35311],[-95.12903,49.37056],[-95.15357,49.384],[-95.15355,48.9996],[-97.24024,48.99952],[-101.36198,48.99935],[-104.05004,48.99925],[-110.0051,48.99901],[-114.0683,48.99885],[-116.04938,48.99999],[-117.03266,49.00056],[-123.32163,49.00419],[-123.0093,48.83186],[-123.0093,48.76586],[-123.26565,48.6959],[-123.15614,48.35395],[-123.50039,48.21223],[-125.03842,48.53282],[-133.36909,48.51151],[-133.92876,54.62289],[-130.61931,54.70835],[-130.64499,54.76912],[-130.44184,54.85377],[-130.27203,54.97174],[-130.18765,55.07744],[-130.08035,55.21556],[-129.97513,55.28029],[-130.15373,55.74895],[-130.00857,55.91344],[-130.00093,56.00325],[-130.10173,56.12178],[-130.33965,56.10849],[-130.77769,56.36185],[-131.8271,56.62247],[-133.38523,58.42773],[-133.84645,58.73543],[-134.27175,58.8634],[-134.48059,59.13231],[-134.55699,59.1297],[-134.7047,59.2458],[-135.00267,59.28745],[-135.03069,59.56208],[-135.48007,59.79937],[-136.31566,59.59083],[-136.22381,59.55526],[-136.33727,59.44466],[-136.47323,59.46617],[-136.52365,59.16752],[-136.82619,59.16198],[-137.4925,58.89415],[-137.60623,59.24465],[-138.62145,59.76431],[-138.71149,59.90728],[-139.05365,59.99655],[-139.20603,60.08896],[-139.05831,60.35205],[-139.68991,60.33693],[-139.98024,60.18027],[-140.45648,60.30919],[-140.5227,60.22077],[-141.00116,60.30648],[-140.97446,84.39275],[-45.47832,84.58738],[-68.21821,80.48551],[-76.75614,76.72014],[-46.37635,57.3249],[-53.12387,41.40385],[-56.27503,47.39728],[-61.98255,37.34815],[-67.16117,44.20069],[-66.93432,44.82597],[-66.96824,44.83078],[-66.98249,44.87071],[-66.96824,44.90965],[-67.0216,44.95333],[-67.11316,45.11176],[-67.15965,45.16179],[-67.19603,45.16771],[-67.20349,45.1722]]]]}},{type:"Feature",properties:{iso1A2:"SG",iso1A3:"SGP",iso1N3:"702",wikidata:"Q334",nameEn:"Singapore",groups:["035","142"],driveSide:"left",callingCodes:["65"]},geometry:{type:"MultiPolygon",coordinates:[[[[104.00131,1.42405],[104.02277,1.4438],[104.04622,1.44691],[104.07348,1.43322],[104.08871,1.42015],[104.09162,1.39694],[104.08072,1.35998],[104.12282,1.27714],[104.03085,1.26954],[103.74084,1.12902],[103.66049,1.18825],[103.56591,1.19719],[103.62738,1.35255],[103.67468,1.43166],[103.7219,1.46108],[103.74161,1.4502],[103.76395,1.45183],[103.81181,1.47953],[103.86383,1.46288],[103.89565,1.42841],[103.93384,1.42926],[104.00131,1.42405]]]]}},{type:"Feature",properties:{iso1A2:"CG",iso1A3:"COG",iso1N3:"178",wikidata:"Q971",nameEn:"Republic of the Congo",groups:["017","202","002"],callingCodes:["242"]},geometry:{type:"MultiPolygon",coordinates:[[[[18.62755,3.47564],[18.63857,3.19342],[18.10683,2.26876],[18.08034,1.58553],[17.85887,1.04327],[17.86989,0.58873],[17.95255,0.48128],[17.93877,0.32424],[17.81204,0.23884],[17.66051,-0.26535],[17.72112,-0.52707],[17.32438,-0.99265],[16.97999,-1.12762],[16.70724,-1.45815],[16.50336,-1.8795],[16.16173,-2.16586],[16.22785,-2.59528],[16.1755,-3.25014],[16.21407,-3.2969],[15.89448,-3.9513],[15.53081,-4.042],[15.48121,-4.22062],[15.41785,-4.28381],[15.32693,-4.27282],[15.25411,-4.31121],[15.1978,-4.32388],[14.83101,-4.80838],[14.67948,-4.92093],[14.5059,-4.84956],[14.41499,-4.8825],[14.37366,-4.56125],[14.47284,-4.42941],[14.3957,-4.36623],[14.40672,-4.28381],[13.9108,-4.50906],[13.81162,-4.41842],[13.71794,-4.44864],[13.70417,-4.72601],[13.50305,-4.77818],[13.41764,-4.89897],[13.11182,-4.5942],[13.09648,-4.63739],[12.91489,-4.47907],[12.87096,-4.40315],[12.76844,-4.38709],[12.64835,-4.55937],[12.40964,-4.60609],[12.32324,-4.78415],[12.25587,-4.79437],[12.20901,-4.75642],[12.16068,-4.90089],[12.00924,-5.02627],[11.50888,-5.33417],[10.75913,-4.39519],[11.12647,-3.94169],[11.22301,-3.69888],[11.48764,-3.51089],[11.57949,-3.52798],[11.68608,-3.68942],[11.87083,-3.71571],[11.92719,-3.62768],[11.8318,-3.5812],[11.96554,-3.30267],[11.70227,-3.17465],[11.70558,-3.0773],[11.80365,-3.00424],[11.64798,-2.81146],[11.5359,-2.85654],[11.64487,-2.61865],[11.57637,-2.33379],[11.74605,-2.39936],[11.96866,-2.33559],[12.04895,-2.41704],[12.47925,-2.32626],[12.44656,-1.92025],[12.61312,-1.8129],[12.82172,-1.91091],[13.02759,-2.33098],[13.47977,-2.43224],[13.75884,-2.09293],[13.92073,-2.35581],[13.85846,-2.46935],[14.10442,-2.49268],[14.23829,-2.33715],[14.16202,-2.23916],[14.23518,-2.15671],[14.25932,-1.97624],[14.41838,-1.89412],[14.52569,-0.57818],[14.41887,-0.44799],[14.2165,-0.38261],[14.06862,-0.20826],[13.90632,-0.2287],[13.88648,0.26652],[14.10909,0.58563],[14.26066,0.57255],[14.48179,0.9152],[14.25186,1.39842],[13.89582,1.4261],[13.15519,1.23368],[13.25447,1.32339],[13.13461,1.57238],[13.29457,2.16106],[14.61145,2.17866],[15.00996,1.98887],[15.22634,2.03243],[15.34776,1.91264],[15.48942,1.98265],[16.02959,1.76483],[16.02647,1.65591],[16.14634,1.70259],[16.05294,1.9811],[16.08563,2.19733],[16.15568,2.18955],[16.19357,2.21537],[16.50126,2.84739],[16.46701,2.92512],[16.57598,3.47999],[16.68283,3.54257],[17.01746,3.55136],[17.35649,3.63045],[17.46876,3.70515],[17.60966,3.63705],[17.83421,3.61068],[17.85842,3.53378],[18.05656,3.56893],[18.14902,3.54476],[18.17323,3.47665],[18.24148,3.50302],[18.2723,3.57992],[18.39558,3.58212],[18.49245,3.63924],[18.58711,3.49423],[18.62755,3.47564]]]]}},{type:"Feature",properties:{iso1A2:"SH",iso1A3:"SHN",iso1N3:"654",wikidata:"Q34497",nameEn:"Saint Helena, Ascension and Tristan da Cunha",country:"GB",groups:["011","202","002"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["290"]},geometry:{type:"MultiPolygon",coordinates:[[[[-14.82771,-8.70814],[-13.33271,-8.07391],[-4.97086,-15.55882],[-9.34669,-41.00353],[-13.29655,-40.02846],[-13.41694,-37.88844],[-11.48092,-37.8367],[-11.55782,-36.60319],[-13.48367,-36.6746],[-14.82771,-8.70814]]]]}},{type:"Feature",properties:{iso1A2:"CL",iso1A3:"CHL",iso1N3:"152",wikidata:"Q298",nameEn:"Chile",groups:["005","419","019"],callingCodes:["56"]},geometry:{type:"MultiPolygon",coordinates:[[[[-68.60702,-52.65781],[-68.60733,-54.9125],[-68.01394,-54.8753],[-67.46182,-54.92205],[-67.11046,-54.94199],[-66.07313,-55.19618],[-68.11646,-58.14883],[-113.52687,-26.52828],[-70.59118,-18.35072],[-70.378,-18.3495],[-70.31267,-18.31258],[-70.16394,-18.31737],[-69.96732,-18.25992],[-69.81607,-18.12582],[-69.75305,-17.94605],[-69.82868,-17.72048],[-69.79087,-17.65563],[-69.66483,-17.65083],[-69.46897,-17.4988],[-69.46623,-17.60518],[-69.34126,-17.72753],[-69.28671,-17.94844],[-69.07496,-18.03715],[-69.14807,-18.16893],[-69.07432,-18.28259],[-68.94987,-18.93302],[-68.87082,-19.06003],[-68.80602,-19.08355],[-68.61989,-19.27584],[-68.41218,-19.40499],[-68.66761,-19.72118],[-68.54611,-19.84651],[-68.57132,-20.03134],[-68.74273,-20.08817],[-68.7276,-20.46178],[-68.44023,-20.62701],[-68.55383,-20.7355],[-68.53957,-20.91542],[-68.40403,-20.94562],[-68.18816,-21.28614],[-67.85114,-22.87076],[-67.54284,-22.89771],[-67.18382,-22.81525],[-66.99632,-22.99839],[-67.33563,-24.04237],[-68.24825,-24.42596],[-68.56909,-24.69831],[-68.38372,-25.08636],[-68.57622,-25.32505],[-68.38372,-26.15353],[-68.56909,-26.28146],[-68.59048,-26.49861],[-68.27677,-26.90626],[-68.43363,-27.08414],[-68.77586,-27.16029],[-69.22504,-27.95042],[-69.66709,-28.44055],[-69.80969,-29.07185],[-69.99507,-29.28351],[-69.8596,-30.26131],[-70.14479,-30.36595],[-70.55832,-31.51559],[-69.88099,-33.34489],[-69.87386,-34.13344],[-70.49416,-35.24145],[-70.38008,-36.02375],[-70.95047,-36.4321],[-71.24279,-37.20264],[-70.89532,-38.6923],[-71.37826,-38.91474],[-71.92726,-40.72714],[-71.74901,-42.11711],[-72.15541,-42.15941],[-72.14828,-42.85321],[-71.64206,-43.64774],[-71.81318,-44.38097],[-71.16436,-44.46244],[-71.26418,-44.75684],[-72.06985,-44.81756],[-71.35687,-45.22075],[-71.75614,-45.61611],[-71.68577,-46.55385],[-71.94152,-47.13595],[-72.50478,-47.80586],[-72.27662,-48.28727],[-72.54042,-48.52392],[-72.56894,-48.81116],[-73.09655,-49.14342],[-73.45156,-49.79461],[-73.55259,-49.92488],[-73.15765,-50.78337],[-72.31343,-50.58411],[-72.33873,-51.59954],[-71.99889,-51.98018],[-69.97824,-52.00845],[-68.41683,-52.33516],[-68.60702,-52.65781]]]]}},{type:"Feature",properties:{iso1A2:"SI",iso1A3:"SVN",iso1N3:"705",wikidata:"Q215",nameEn:"Slovenia",groups:["EU","039","150"],callingCodes:["386"]},geometry:{type:"MultiPolygon",coordinates:[[[[16.50139,46.56684],[16.52885,46.53303],[16.52604,46.5051],[16.59527,46.47524],[16.52604,46.47831],[16.5007,46.49644],[16.44036,46.5171],[16.38771,46.53608],[16.37193,46.55008],[16.29793,46.5121],[16.26733,46.51505],[16.26759,46.50566],[16.23961,46.49653],[16.25124,46.48067],[16.27398,46.42875],[16.27329,46.41467],[16.30162,46.40437],[16.30233,46.37837],[16.18824,46.38282],[16.14859,46.40547],[16.05281,46.39141],[16.05065,46.3833],[16.07314,46.36458],[16.07616,46.3463],[15.97965,46.30652],[15.79284,46.25811],[15.78817,46.21719],[15.75479,46.20336],[15.75436,46.21969],[15.67395,46.22478],[15.6434,46.21396],[15.64904,46.19229],[15.59909,46.14761],[15.6083,46.11992],[15.62317,46.09103],[15.72977,46.04682],[15.71246,46.01196],[15.70327,46.00015],[15.70636,45.92116],[15.67967,45.90455],[15.68383,45.88867],[15.68232,45.86819],[15.70411,45.8465],[15.66662,45.84085],[15.64185,45.82915],[15.57952,45.84953],[15.52234,45.82195],[15.47325,45.8253],[15.47531,45.79802],[15.40836,45.79491],[15.25423,45.72275],[15.30872,45.69014],[15.34919,45.71623],[15.4057,45.64727],[15.38952,45.63682],[15.34214,45.64702],[15.34695,45.63382],[15.31027,45.6303],[15.27747,45.60504],[15.29837,45.5841],[15.30249,45.53224],[15.38188,45.48752],[15.33051,45.45258],[15.27758,45.46678],[15.16862,45.42309],[15.05187,45.49079],[15.02385,45.48533],[14.92266,45.52788],[14.90554,45.47769],[14.81992,45.45913],[14.80124,45.49515],[14.71718,45.53442],[14.68605,45.53006],[14.69694,45.57366],[14.59576,45.62812],[14.60977,45.66403],[14.57397,45.67165],[14.53816,45.6205],[14.5008,45.60852],[14.49769,45.54424],[14.36693,45.48642],[14.32487,45.47142],[14.27681,45.4902],[14.26611,45.48239],[14.24239,45.50607],[14.22371,45.50388],[14.20348,45.46896],[14.07116,45.48752],[14.00578,45.52352],[13.96063,45.50825],[13.99488,45.47551],[13.97309,45.45258],[13.90771,45.45149],[13.88124,45.42637],[13.81742,45.43729],[13.7785,45.46787],[13.67398,45.4436],[13.62902,45.45898],[13.56979,45.4895],[13.45644,45.59464],[13.6076,45.64761],[13.7198,45.59352],[13.74587,45.59811],[13.78445,45.5825],[13.84106,45.58185],[13.86771,45.59898],[13.8695,45.60835],[13.9191,45.6322],[13.87933,45.65207],[13.83422,45.68703],[13.83332,45.70855],[13.8235,45.7176],[13.66986,45.79955],[13.59784,45.8072],[13.58858,45.83503],[13.57563,45.8425],[13.58644,45.88173],[13.59565,45.89446],[13.60857,45.89907],[13.61931,45.91782],[13.63815,45.93607],[13.6329,45.94894],[13.64307,45.98326],[13.63458,45.98947],[13.62074,45.98388],[13.58903,45.99009],[13.56759,45.96991],[13.52963,45.96588],[13.50104,45.98078],[13.47474,46.00546],[13.49702,46.01832],[13.50998,46.04498],[13.49568,46.04839],[13.50104,46.05986],[13.57072,46.09022],[13.64053,46.13587],[13.66472,46.17392],[13.64451,46.18966],[13.56682,46.18703],[13.56114,46.2054],[13.47587,46.22725],[13.42218,46.20758],[13.37671,46.29668],[13.44808,46.33507],[13.43418,46.35992],[13.47019,46.3621],[13.5763,46.40915],[13.5763,46.42613],[13.59777,46.44137],[13.68684,46.43881],[13.7148,46.5222],[13.89837,46.52331],[14.00422,46.48474],[14.04002,46.49117],[14.12097,46.47724],[14.15989,46.43327],[14.28326,46.44315],[14.314,46.43327],[14.42608,46.44614],[14.45877,46.41717],[14.52176,46.42617],[14.56463,46.37208],[14.5942,46.43434],[14.66892,46.44936],[14.72185,46.49974],[14.81836,46.51046],[14.83549,46.56614],[14.86419,46.59411],[14.87129,46.61],[14.92283,46.60848],[14.96002,46.63459],[14.98024,46.6009],[15.01451,46.641],[15.14215,46.66131],[15.23711,46.63994],[15.41235,46.65556],[15.45514,46.63697],[15.46906,46.61321],[15.54431,46.6312],[15.55333,46.64988],[15.54533,46.66985],[15.59826,46.68908],[15.62317,46.67947],[15.63255,46.68069],[15.6365,46.6894],[15.6543,46.69228],[15.6543,46.70616],[15.67411,46.70735],[15.69523,46.69823],[15.72279,46.69548],[15.73823,46.70011],[15.76771,46.69863],[15.78518,46.70712],[15.8162,46.71897],[15.87691,46.7211],[15.94864,46.68769],[15.98512,46.68463],[15.99988,46.67947],[16.04036,46.6549],[16.04347,46.68694],[16.02808,46.71094],[15.99769,46.7266],[15.98432,46.74991],[15.99126,46.78199],[15.99054,46.82772],[16.05786,46.83927],[16.10983,46.867],[16.14365,46.8547],[16.15711,46.85434],[16.21892,46.86961],[16.2365,46.87775],[16.2941,46.87137],[16.34547,46.83836],[16.3408,46.80641],[16.31303,46.79838],[16.30966,46.7787],[16.37816,46.69975],[16.42641,46.69228],[16.41863,46.66238],[16.38594,46.6549],[16.39217,46.63673],[16.50139,46.56684]]]]}},{type:"Feature",properties:{iso1A2:"CP",iso1A3:"CPT",wikidata:"Q161258",nameEn:"Clipperton Island",country:"FR",isoStatus:"excRes"},geometry:{type:"MultiPolygon",coordinates:[[[[-110.36279,9.79626],[-109.04145,11.13245],[-108.755,9.84085],[-110.36279,9.79626]]]]}},{type:"Feature",properties:{iso1A2:"SJ",iso1A3:"SJM",iso1N3:"744",wikidata:"Q842829",nameEn:"Svalbard and Jan Mayen",country:"NO",groups:["154","150"],callingCodes:["47 79"]},geometry:{type:"MultiPolygon",coordinates:[[[[-7.49892,77.24208],[36.85549,84.09565],[32.07813,72.01005],[-7.49892,77.24208]]],[[[-9.18243,72.23144],[-5.93364,70.76368],[-10.71459,70.09565],[-9.18243,72.23144]]]]}},{type:"Feature",properties:{iso1A2:"CW",iso1A3:"CUW",iso1N3:"531",wikidata:"Q25279",nameEn:"Curaçao",country:"NL",groups:["029","003","419","019"],callingCodes:["599"]},geometry:{type:"MultiPolygon",coordinates:[[[[-68.90012,12.62309],[-68.33524,11.78151],[-68.99639,11.79035],[-69.59009,12.46019],[-68.90012,12.62309]]]]}},{type:"Feature",properties:{iso1A2:"SK",iso1A3:"SVK",iso1N3:"703",wikidata:"Q214",nameEn:"Slovakia",groups:["EU","151","150"],callingCodes:["421"]},geometry:{type:"MultiPolygon",coordinates:[[[[19.82237,49.27806],[19.75286,49.20751],[19.86409,49.19316],[19.90529,49.23532],[19.98494,49.22904],[20.08238,49.1813],[20.13738,49.31685],[20.21977,49.35265],[20.31453,49.34817],[20.31728,49.39914],[20.39939,49.3896],[20.46422,49.41612],[20.5631,49.375],[20.61666,49.41791],[20.72274,49.41813],[20.77971,49.35383],[20.9229,49.29626],[20.98733,49.30774],[21.09799,49.37176],[21.041,49.41791],[21.12477,49.43666],[21.19756,49.4054],[21.27858,49.45988],[21.43376,49.41433],[21.62328,49.4447],[21.77983,49.35443],[21.82927,49.39467],[21.96385,49.3437],[22.04427,49.22136],[22.56155,49.08865],[22.54338,49.01424],[22.48296,48.99172],[22.42934,48.92857],[22.34151,48.68893],[22.21379,48.6218],[22.16023,48.56548],[22.14689,48.4005],[21.83339,48.36242],[21.8279,48.33321],[21.72525,48.34628],[21.67134,48.3989],[21.6068,48.50365],[21.44063,48.58456],[21.11516,48.49546],[20.83248,48.5824],[20.5215,48.53336],[20.29943,48.26104],[20.24312,48.2784],[19.92452,48.1283],[19.63338,48.25006],[19.52489,48.19791],[19.47957,48.09437],[19.28182,48.08336],[19.23924,48.0595],[19.01952,48.07052],[18.82176,48.04206],[18.76134,47.97499],[18.76821,47.87469],[18.8506,47.82308],[18.74074,47.8157],[18.66521,47.76772],[18.56496,47.76588],[18.29305,47.73541],[18.02938,47.75665],[17.71215,47.7548],[17.23699,48.02094],[17.16001,48.00636],[17.07039,48.0317],[17.09168,48.09366],[17.05735,48.14179],[17.02919,48.13996],[16.97701,48.17385],[16.89461,48.31332],[16.90903,48.32519],[16.84243,48.35258],[16.83317,48.38138],[16.83588,48.3844],[16.8497,48.38321],[16.85204,48.44968],[16.94611,48.53614],[16.93955,48.60371],[17.00215,48.70887],[17.11202,48.82925],[17.19355,48.87602],[17.29054,48.85546],[17.3853,48.80936],[17.45671,48.85004],[17.5295,48.81117],[17.7094,48.86721],[17.73126,48.87885],[17.77944,48.92318],[17.87831,48.92679],[17.91814,49.01784],[18.06885,49.03157],[18.1104,49.08624],[18.15022,49.24518],[18.18456,49.28909],[18.36446,49.3267],[18.4139,49.36517],[18.4084,49.40003],[18.44686,49.39467],[18.54848,49.47059],[18.53063,49.49022],[18.57183,49.51162],[18.6144,49.49824],[18.67757,49.50895],[18.74761,49.492],[18.84521,49.51672],[18.94536,49.52143],[18.97283,49.49914],[18.9742,49.39557],[19.18019,49.41165],[19.25435,49.53391],[19.36009,49.53747],[19.37795,49.574],[19.45348,49.61583],[19.52626,49.57311],[19.53313,49.52856],[19.57845,49.46077],[19.64162,49.45184],[19.6375,49.40897],[19.72127,49.39288],[19.78581,49.41701],[19.82237,49.27806]]]]}},{type:"Feature",properties:{iso1A2:"DE",iso1A3:"DEU",iso1N3:"276",wikidata:"Q183",nameEn:"Germany",groups:["EU","155","150"],callingCodes:["49"]},geometry:{type:"MultiPolygon",coordinates:[[[[8.70847,47.68904],[8.68985,47.69552],[8.66837,47.68437],[8.65769,47.68928],[8.67508,47.6979],[8.66416,47.71367],[8.70237,47.71453],[8.71773,47.69088],[8.70847,47.68904]]],[[[8.72617,47.69651],[8.73671,47.7169],[8.70543,47.73121],[8.74251,47.75168],[8.71778,47.76571],[8.68985,47.75686],[8.68022,47.78599],[8.65292,47.80066],[8.64425,47.76398],[8.62408,47.7626],[8.61657,47.79998],[8.56415,47.80633],[8.56814,47.78001],[8.48868,47.77215],[8.45771,47.7493],[8.44807,47.72426],[8.40569,47.69855],[8.4211,47.68407],[8.40473,47.67499],[8.41346,47.66676],[8.42264,47.66667],[8.44711,47.65379],[8.4667,47.65747],[8.46605,47.64103],[8.49656,47.64709],[8.5322,47.64687],[8.52801,47.66059],[8.56141,47.67088],[8.57683,47.66158],[8.6052,47.67258],[8.61113,47.66332],[8.62884,47.65098],[8.62049,47.63757],[8.60412,47.63735],[8.61471,47.64514],[8.60701,47.65271],[8.59545,47.64298],[8.60348,47.61204],[8.57586,47.59537],[8.55756,47.62394],[8.51686,47.63476],[8.50747,47.61897],[8.45578,47.60121],[8.46637,47.58389],[8.48949,47.588],[8.49431,47.58107],[8.43235,47.56617],[8.39477,47.57826],[8.38273,47.56608],[8.35512,47.57014],[8.32735,47.57133],[8.30277,47.58607],[8.29524,47.5919],[8.29722,47.60603],[8.2824,47.61225],[8.26313,47.6103],[8.25863,47.61571],[8.23809,47.61204],[8.22577,47.60385],[8.22011,47.6181],[8.20617,47.62141],[8.19378,47.61636],[8.1652,47.5945],[8.14947,47.59558],[8.13823,47.59147],[8.13662,47.58432],[8.11543,47.5841],[8.10395,47.57918],[8.10002,47.56504],[8.08557,47.55768],[8.06663,47.56374],[8.04383,47.55443],[8.02136,47.55096],[8.00113,47.55616],[7.97581,47.55493],[7.95682,47.55789],[7.94494,47.54511],[7.91251,47.55031],[7.90673,47.57674],[7.88664,47.58854],[7.84412,47.5841],[7.81901,47.58798],[7.79486,47.55691],[7.75261,47.54599],[7.71961,47.54219],[7.69642,47.53297],[7.68101,47.53232],[7.6656,47.53752],[7.66174,47.54554],[7.65083,47.54662],[7.63338,47.56256],[7.67655,47.56435],[7.68904,47.57133],[7.67115,47.5871],[7.68486,47.59601],[7.69385,47.60099],[7.68229,47.59905],[7.67395,47.59212],[7.64599,47.59695],[7.64213,47.5944],[7.64309,47.59151],[7.61929,47.57683],[7.60459,47.57869],[7.60523,47.58519],[7.58945,47.59017],[7.59301,47.60058],[7.58851,47.60794],[7.57423,47.61628],[7.5591,47.63849],[7.53384,47.65115],[7.52067,47.66437],[7.51915,47.68335],[7.51266,47.70197],[7.53722,47.71635],[7.54761,47.72912],[7.52921,47.77747],[7.55673,47.87371],[7.62302,47.97898],[7.56966,48.03265],[7.57137,48.12292],[7.6648,48.22219],[7.69022,48.30018],[7.74562,48.32736],[7.73109,48.39192],[7.76833,48.48945],[7.80647,48.51239],[7.80167,48.54758],[7.80057,48.5857],[7.84098,48.64217],[7.89002,48.66317],[7.96812,48.72491],[7.96994,48.75606],[8.01534,48.76085],[8.0326,48.79017],[8.06802,48.78957],[8.10253,48.81829],[8.12813,48.87985],[8.19989,48.95825],[8.20031,48.95856],[8.22604,48.97352],[8.14189,48.97833],[7.97783,49.03161],[7.93641,49.05544],[7.86386,49.03499],[7.79557,49.06583],[7.75948,49.04562],[7.63618,49.05428],[7.62575,49.07654],[7.56416,49.08136],[7.53012,49.09818],[7.49172,49.13915],[7.49473,49.17],[7.44455,49.16765],[7.44052,49.18354],[7.3662,49.17308],[7.35995,49.14399],[7.3195,49.14231],[7.29514,49.11426],[7.23473,49.12971],[7.1593,49.1204],[7.1358,49.1282],[7.12504,49.14253],[7.10384,49.13787],[7.10715,49.15631],[7.07859,49.15031],[7.09007,49.13094],[7.07162,49.1255],[7.06642,49.11415],[7.05548,49.11185],[7.04843,49.11422],[7.04409,49.12123],[7.04662,49.13724],[7.03178,49.15734],[7.0274,49.17042],[7.03459,49.19096],[7.01318,49.19018],[6.97273,49.2099],[6.95963,49.203],[6.94028,49.21641],[6.93831,49.2223],[6.91875,49.22261],[6.89298,49.20863],[6.85939,49.22376],[6.83555,49.21249],[6.85119,49.20038],[6.85016,49.19354],[6.86225,49.18185],[6.84703,49.15734],[6.83385,49.15162],[6.78265,49.16793],[6.73765,49.16375],[6.71137,49.18808],[6.73256,49.20486],[6.71843,49.2208],[6.69274,49.21661],[6.66583,49.28065],[6.60186,49.31055],[6.572,49.35027],[6.58807,49.35358],[6.60091,49.36864],[6.533,49.40748],[6.55404,49.42464],[6.42432,49.47683],[6.40274,49.46546],[6.39168,49.4667],[6.38352,49.46463],[6.36778,49.46937],[6.36907,49.48931],[6.36788,49.50377],[6.35666,49.52931],[6.38072,49.55171],[6.38228,49.55855],[6.35825,49.57053],[6.36676,49.57813],[6.38024,49.57593],[6.38342,49.5799],[6.37464,49.58886],[6.385,49.59946],[6.39822,49.60081],[6.41861,49.61723],[6.4413,49.65722],[6.43768,49.66021],[6.42726,49.66078],[6.42937,49.66857],[6.44654,49.67799],[6.46048,49.69092],[6.48014,49.69767],[6.49785,49.71118],[6.50647,49.71353],[6.5042,49.71808],[6.49694,49.72205],[6.49535,49.72645],[6.50261,49.72718],[6.51397,49.72058],[6.51805,49.72425],[6.50193,49.73291],[6.50174,49.75292],[6.51646,49.75961],[6.51828,49.76855],[6.51056,49.77515],[6.51669,49.78336],[6.50534,49.78952],[6.52169,49.79787],[6.53122,49.80666],[6.52121,49.81338],[6.51215,49.80124],[6.50647,49.80916],[6.48718,49.81267],[6.47111,49.82263],[6.45425,49.81164],[6.44131,49.81443],[6.42905,49.81091],[6.42521,49.81591],[6.40022,49.82029],[6.36576,49.85032],[6.34267,49.84974],[6.33585,49.83785],[6.32098,49.83728],[6.32303,49.85133],[6.30963,49.87021],[6.29692,49.86685],[6.28874,49.87592],[6.26146,49.88203],[6.23496,49.89972],[6.22926,49.92096],[6.21882,49.92403],[6.22608,49.929],[6.22094,49.94955],[6.19856,49.95053],[6.19089,49.96991],[6.18045,49.96611],[6.18554,49.95622],[6.17872,49.9537],[6.16466,49.97086],[6.1701,49.98518],[6.14147,49.99563],[6.14948,50.00908],[6.13806,50.01056],[6.1295,50.01849],[6.13273,50.02019],[6.13794,50.01466],[6.14666,50.02207],[6.13044,50.02929],[6.13458,50.04141],[6.11274,50.05916],[6.12055,50.09171],[6.1379,50.12964],[6.15298,50.14126],[6.14132,50.14971],[6.14588,50.17106],[6.18739,50.1822],[6.18364,50.20815],[6.16853,50.2234],[6.208,50.25179],[6.28797,50.27458],[6.29949,50.30887],[6.32488,50.32333],[6.35701,50.31139],[6.40641,50.32425],[6.40785,50.33557],[6.3688,50.35898],[6.34406,50.37994],[6.36852,50.40776],[6.37219,50.45397],[6.34005,50.46083],[6.3465,50.48833],[6.30809,50.50058],[6.26637,50.50272],[6.22335,50.49578],[6.20599,50.52089],[6.19193,50.5212],[6.18716,50.52653],[6.19579,50.5313],[6.19735,50.53576],[6.17802,50.54179],[6.17739,50.55875],[6.20281,50.56952],[6.22581,50.5907],[6.24005,50.58732],[6.24888,50.59869],[6.2476,50.60392],[6.26957,50.62444],[6.17852,50.6245],[6.11707,50.72231],[6.04428,50.72861],[6.0406,50.71848],[6.0326,50.72647],[6.03889,50.74618],[6.01976,50.75398],[6.02624,50.77453],[5.97497,50.79992],[5.98404,50.80988],[6.00462,50.80065],[6.02328,50.81694],[6.01921,50.84435],[6.05623,50.8572],[6.05702,50.85179],[6.07431,50.84674],[6.07693,50.86025],[6.08805,50.87223],[6.07486,50.89307],[6.09297,50.92066],[6.01615,50.93367],[6.02697,50.98303],[5.95282,50.98728],[5.90296,50.97356],[5.90493,51.00198],[5.87849,51.01969],[5.86735,51.05182],[5.9134,51.06736],[5.9541,51.03496],[5.98292,51.07469],[6.16706,51.15677],[6.17384,51.19589],[6.07889,51.17038],[6.07889,51.24432],[6.16977,51.33169],[6.22674,51.36135],[6.22641,51.39948],[6.20654,51.40049],[6.21724,51.48568],[6.18017,51.54096],[6.09055,51.60564],[6.11759,51.65609],[6.02767,51.6742],[6.04091,51.71821],[5.95003,51.7493],[5.98665,51.76944],[5.94568,51.82786],[5.99848,51.83195],[6.06705,51.86136],[6.10337,51.84829],[6.16902,51.84094],[6.11551,51.89769],[6.15349,51.90439],[6.21443,51.86801],[6.29872,51.86801],[6.30593,51.84998],[6.40704,51.82771],[6.38815,51.87257],[6.47179,51.85395],[6.50231,51.86313],[6.58556,51.89386],[6.68386,51.91861],[6.72319,51.89518],[6.82357,51.96711],[6.83035,51.9905],[6.68128,52.05052],[6.76117,52.11895],[6.83984,52.11728],[6.97189,52.20329],[6.9897,52.2271],[7.03729,52.22695],[7.06365,52.23789],[7.02703,52.27941],[7.07044,52.37805],[7.03417,52.40237],[6.99041,52.47235],[6.94293,52.43597],[6.69507,52.488],[6.71641,52.62905],[6.77307,52.65375],[7.04557,52.63318],[7.07253,52.81083],[7.21694,53.00742],[7.17898,53.13817],[7.22681,53.18165],[7.21679,53.20058],[7.19052,53.31866],[7.00198,53.32672],[6.91025,53.44221],[5.45168,54.20039],[8.02459,55.09613],[8.45719,55.06747],[8.55769,54.91837],[8.63979,54.91069],[8.76387,54.8948],[8.81178,54.90518],[8.92795,54.90452],[9.04629,54.87249],[9.14275,54.87421],[9.20571,54.85841],[9.24631,54.84726],[9.23445,54.83432],[9.2474,54.8112],[9.32771,54.80602],[9.33849,54.80233],[9.36496,54.81749],[9.38532,54.83968],[9.41213,54.84254],[9.43155,54.82586],[9.4659,54.83131],[9.58937,54.88785],[9.62734,54.88057],[9.61187,54.85548],[9.73563,54.8247],[9.89314,54.84171],[10.16755,54.73883],[10.31111,54.65968],[11.00303,54.63689],[11.90309,54.38543],[12.85844,54.82438],[13.93395,54.84044],[14.20811,54.12784],[14.22634,53.9291],[14.20647,53.91671],[14.18544,53.91258],[14.20823,53.90776],[14.21323,53.8664],[14.27249,53.74464],[14.26782,53.69866],[14.2836,53.67721],[14.27133,53.66613],[14.28477,53.65955],[14.2853,53.63392],[14.31904,53.61581],[14.30416,53.55499],[14.3273,53.50587],[14.35209,53.49506],[14.4215,53.27724],[14.44133,53.27427],[14.45125,53.26241],[14.40662,53.21098],[14.37853,53.20405],[14.36696,53.16444],[14.38679,53.13669],[14.35044,53.05829],[14.25954,53.00264],[14.14056,52.95786],[14.15873,52.87715],[14.12256,52.84311],[14.13806,52.82392],[14.22071,52.81175],[14.61073,52.59847],[14.6289,52.57136],[14.60081,52.53116],[14.63056,52.48993],[14.54423,52.42568],[14.55228,52.35264],[14.56378,52.33838],[14.58149,52.28007],[14.70139,52.25038],[14.71319,52.22144],[14.68344,52.19612],[14.70616,52.16927],[14.67683,52.13936],[14.6917,52.10283],[14.72971,52.09167],[14.76026,52.06624],[14.71339,52.00337],[14.70488,51.97679],[14.7139,51.95643],[14.71836,51.95606],[14.72163,51.95188],[14.7177,51.94048],[14.70601,51.92944],[14.6933,51.9044],[14.6588,51.88359],[14.59089,51.83302],[14.60493,51.80473],[14.64625,51.79472],[14.66386,51.73282],[14.69065,51.70842],[14.75392,51.67445],[14.75759,51.62318],[14.7727,51.61263],[14.71125,51.56209],[14.73047,51.54606],[14.72652,51.53902],[14.73219,51.52922],[14.94749,51.47155],[14.9652,51.44793],[14.96899,51.38367],[14.98008,51.33449],[15.04288,51.28387],[15.01242,51.21285],[15.0047,51.16874],[14.99311,51.16249],[14.99414,51.15813],[15.00083,51.14974],[14.99646,51.14365],[14.99079,51.14284],[14.99689,51.12205],[14.98229,51.11354],[14.97938,51.07742],[14.95529,51.04552],[14.92942,50.99744],[14.89252,50.94999],[14.89681,50.9422],[14.81664,50.88148],[14.82803,50.86966],[14.79139,50.81438],[14.70661,50.84096],[14.61993,50.86049],[14.63434,50.8883],[14.65259,50.90513],[14.64802,50.93241],[14.58024,50.91443],[14.56374,50.922],[14.59702,50.96148],[14.59908,50.98685],[14.58215,50.99306],[14.56432,51.01008],[14.53438,51.00374],[14.53321,51.01679],[14.49873,51.02242],[14.50809,51.0427],[14.49991,51.04692],[14.49154,51.04382],[14.49202,51.02286],[14.45827,51.03712],[14.41335,51.02086],[14.30098,51.05515],[14.25665,50.98935],[14.28776,50.97718],[14.32353,50.98556],[14.32793,50.97379],[14.30251,50.96606],[14.31422,50.95243],[14.39848,50.93866],[14.38691,50.89907],[14.30098,50.88448],[14.27123,50.89386],[14.24314,50.88761],[14.22331,50.86049],[14.02982,50.80662],[13.98864,50.8177],[13.89113,50.78533],[13.89444,50.74142],[13.82942,50.7251],[13.76316,50.73487],[13.70204,50.71771],[13.65977,50.73096],[13.52474,50.70394],[13.53748,50.67654],[13.5226,50.64721],[13.49742,50.63133],[13.46413,50.60102],[13.42189,50.61243],[13.37485,50.64931],[13.37805,50.627],[13.32264,50.60317],[13.32594,50.58009],[13.29454,50.57904],[13.25158,50.59268],[13.19043,50.50237],[13.13424,50.51709],[13.08301,50.50132],[13.0312,50.50944],[13.02038,50.4734],[13.02147,50.44763],[12.98433,50.42016],[12.94058,50.40944],[12.82465,50.45738],[12.73476,50.43237],[12.73044,50.42268],[12.70731,50.39948],[12.67261,50.41949],[12.51356,50.39694],[12.48747,50.37278],[12.49214,50.35228],[12.48256,50.34784],[12.46643,50.35527],[12.43722,50.33774],[12.43371,50.32506],[12.39924,50.32302],[12.40158,50.29521],[12.36594,50.28289],[12.35425,50.23993],[12.33263,50.24367],[12.32445,50.20442],[12.33847,50.19432],[12.32596,50.17146],[12.29232,50.17524],[12.28063,50.19544],[12.28755,50.22429],[12.23943,50.24594],[12.24791,50.25525],[12.26953,50.25189],[12.25119,50.27079],[12.20823,50.2729],[12.18013,50.32146],[12.10907,50.32041],[12.13716,50.27396],[12.09287,50.25032],[12.19335,50.19997],[12.21484,50.16399],[12.1917,50.13434],[12.2073,50.10315],[12.23709,50.10213],[12.27433,50.0771],[12.26111,50.06331],[12.30798,50.05719],[12.49908,49.97305],[12.47264,49.94222],[12.55197,49.92094],[12.48256,49.83575],[12.46603,49.78882],[12.40489,49.76321],[12.4462,49.70233],[12.52553,49.68415],[12.53544,49.61888],[12.56188,49.6146],[12.60155,49.52887],[12.64782,49.52565],[12.64121,49.47628],[12.669,49.42935],[12.71227,49.42363],[12.75854,49.3989],[12.78168,49.34618],[12.88414,49.33541],[12.88249,49.35479],[12.94859,49.34079],[13.03618,49.30417],[13.02957,49.27399],[13.05883,49.26259],[13.17665,49.16713],[13.17019,49.14339],[13.20405,49.12303],[13.23689,49.11412],[13.28242,49.1228],[13.39479,49.04812],[13.40802,48.98851],[13.50221,48.93752],[13.50552,48.97441],[13.58319,48.96899],[13.61624,48.9462],[13.67739,48.87886],[13.73854,48.88538],[13.76994,48.83537],[13.78977,48.83319],[13.8096,48.77877],[13.84023,48.76988],[13.82266,48.75544],[13.81863,48.73257],[13.79337,48.71375],[13.81791,48.69832],[13.81283,48.68426],[13.81901,48.6761],[13.82609,48.62345],[13.80038,48.59487],[13.80519,48.58026],[13.76921,48.55324],[13.7513,48.5624],[13.74816,48.53058],[13.72802,48.51208],[13.66113,48.53558],[13.65186,48.55092],[13.62508,48.55501],[13.59705,48.57013],[13.57535,48.55912],[13.51291,48.59023],[13.50131,48.58091],[13.50663,48.57506],[13.46967,48.55157],[13.45214,48.56472],[13.43695,48.55776],[13.45727,48.51092],[13.42527,48.45711],[13.43929,48.43386],[13.40709,48.37292],[13.30897,48.31575],[13.26039,48.29422],[13.18093,48.29577],[13.126,48.27867],[13.0851,48.27711],[13.02083,48.25689],[12.95306,48.20629],[12.87126,48.20318],[12.84475,48.16556],[12.836,48.1647],[12.8362,48.15876],[12.82673,48.15245],[12.80676,48.14979],[12.78595,48.12445],[12.7617,48.12796],[12.74973,48.10885],[12.76141,48.07373],[12.8549,48.01122],[12.87476,47.96195],[12.91683,47.95647],[12.9211,47.95135],[12.91985,47.94069],[12.92668,47.93879],[12.93419,47.94063],[12.93642,47.94436],[12.93886,47.94046],[12.94163,47.92927],[13.00588,47.84374],[12.98543,47.82896],[12.96311,47.79957],[12.93202,47.77302],[12.94371,47.76281],[12.9353,47.74788],[12.91711,47.74026],[12.90274,47.72513],[12.91333,47.7178],[12.92969,47.71094],[12.98578,47.7078],[13.01382,47.72116],[13.07692,47.68814],[13.09562,47.63304],[13.06407,47.60075],[13.06641,47.58577],[13.04537,47.58183],[13.05355,47.56291],[13.03252,47.53373],[13.04537,47.49426],[12.9998,47.46267],[12.98344,47.48716],[12.9624,47.47452],[12.85256,47.52741],[12.84672,47.54556],[12.80699,47.54477],[12.77427,47.58025],[12.82101,47.61493],[12.76492,47.64485],[12.77777,47.66689],[12.7357,47.6787],[12.6071,47.6741],[12.57438,47.63238],[12.53816,47.63553],[12.50076,47.62293],[12.44117,47.6741],[12.43883,47.6977],[12.37222,47.68433],[12.336,47.69534],[12.27991,47.68827],[12.26004,47.67725],[12.24017,47.69534],[12.26238,47.73544],[12.2542,47.7433],[12.22571,47.71776],[12.18303,47.70065],[12.16217,47.70105],[12.16769,47.68167],[12.18347,47.66663],[12.18507,47.65984],[12.19895,47.64085],[12.20801,47.61082],[12.20398,47.60667],[12.18568,47.6049],[12.17737,47.60121],[12.18145,47.61019],[12.17824,47.61506],[12.13734,47.60639],[12.05788,47.61742],[12.02282,47.61033],[12.0088,47.62451],[11.85572,47.60166],[11.84052,47.58354],[11.63934,47.59202],[11.60681,47.57881],[11.58811,47.55515],[11.58578,47.52281],[11.52618,47.50939],[11.4362,47.51413],[11.38128,47.47465],[11.4175,47.44621],[11.33804,47.44937],[11.29597,47.42566],[11.27844,47.39956],[11.22002,47.3964],[11.25157,47.43277],[11.20482,47.43198],[11.12536,47.41222],[11.11835,47.39719],[10.97111,47.39561],[10.97111,47.41617],[10.98513,47.42882],[10.92437,47.46991],[10.93839,47.48018],[10.90918,47.48571],[10.87061,47.4786],[10.86945,47.5015],[10.91268,47.51334],[10.88814,47.53701],[10.77596,47.51729],[10.7596,47.53228],[10.6965,47.54253],[10.68832,47.55752],[10.63456,47.5591],[10.60337,47.56755],[10.56912,47.53584],[10.48849,47.54057],[10.47329,47.58552],[10.43473,47.58394],[10.44992,47.5524],[10.4324,47.50111],[10.44291,47.48453],[10.46278,47.47901],[10.47446,47.43318],[10.4359,47.41183],[10.4324,47.38494],[10.39851,47.37623],[10.33424,47.30813],[10.23257,47.27088],[10.17531,47.27167],[10.17648,47.29149],[10.2147,47.31014],[10.19998,47.32832],[10.23757,47.37609],[10.22774,47.38904],[10.2127,47.38019],[10.17648,47.38889],[10.16362,47.36674],[10.11805,47.37228],[10.09819,47.35724],[10.06897,47.40709],[10.1052,47.4316],[10.09001,47.46005],[10.07131,47.45531],[10.03859,47.48927],[10.00003,47.48216],[9.96029,47.53899],[9.92407,47.53111],[9.87733,47.54688],[9.87499,47.52953],[9.8189,47.54688],[9.82591,47.58158],[9.80254,47.59419],[9.76748,47.5934],[9.72736,47.53457],[9.55125,47.53629],[9.25619,47.65939],[9.18203,47.65598],[9.17593,47.65399],[9.1755,47.65584],[9.1705,47.65513],[9.15181,47.66904],[9.13845,47.66389],[9.09891,47.67801],[9.02093,47.6868],[8.94093,47.65596],[8.89946,47.64769],[8.87625,47.65441],[8.87383,47.67045],[8.85065,47.68209],[8.86989,47.70504],[8.82002,47.71458],[8.80663,47.73821],[8.77309,47.72059],[8.76965,47.7075],[8.79966,47.70222],[8.79511,47.67462],[8.75856,47.68969],[8.72809,47.69282],[8.72617,47.69651]]]]}},{type:"Feature",properties:{iso1A2:"SL",iso1A3:"SLE",iso1N3:"694",wikidata:"Q1044",nameEn:"Sierra Leone",groups:["011","202","002"],callingCodes:["232"]},geometry:{type:"MultiPolygon",coordinates:[[[[-10.27575,8.48711],[-10.30084,8.30008],[-10.31635,8.28554],[-10.29839,8.21283],[-10.35227,8.15223],[-10.45023,8.15627],[-10.51554,8.1393],[-10.57523,8.04829],[-10.60492,8.04072],[-10.60422,7.7739],[-11.29417,7.21576],[-11.4027,6.97746],[-11.50429,6.92704],[-12.15048,6.15992],[-14.36218,8.64107],[-13.29911,9.04245],[-13.18586,9.0925],[-13.08953,9.0409],[-12.94095,9.26335],[-12.76788,9.3133],[-12.47254,9.86834],[-12.24262,9.92386],[-12.12634,9.87203],[-11.91023,9.93927],[-11.89624,9.99763],[-11.2118,10.00098],[-10.6534,9.29919],[-10.74484,9.07998],[-10.5783,9.06386],[-10.56197,8.81225],[-10.47707,8.67669],[-10.61422,8.5314],[-10.70565,8.29235],[-10.63934,8.35326],[-10.54891,8.31174],[-10.37257,8.48941],[-10.27575,8.48711]]]]}},{type:"Feature",properties:{iso1A2:"DM",iso1A3:"DMA",iso1N3:"212",wikidata:"Q784",nameEn:"Dominica",groups:["029","003","419","019"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["1 767"]},geometry:{type:"MultiPolygon",coordinates:[[[[-61.51867,14.96709],[-61.81728,15.58058],[-61.44899,15.79571],[-60.95725,15.70997],[-60.69955,15.22234],[-61.51867,14.96709]]]]}},{type:"Feature",properties:{iso1A2:"SM",iso1A3:"SMR",iso1N3:"674",wikidata:"Q238",nameEn:"San Marino",groups:["039","150"],callingCodes:["378"]},geometry:{type:"MultiPolygon",coordinates:[[[[12.45648,43.89369],[12.44184,43.90498],[12.41641,43.89991],[12.40935,43.9024],[12.41233,43.90956],[12.40733,43.92379],[12.41551,43.92984],[12.41165,43.93769],[12.40506,43.94325],[12.40415,43.95485],[12.41414,43.95273],[12.42005,43.9578],[12.43662,43.95698],[12.44684,43.96597],[12.46205,43.97463],[12.47853,43.98052],[12.49406,43.98492],[12.50678,43.99113],[12.51463,43.99122],[12.5154,43.98508],[12.51064,43.98165],[12.51109,43.97201],[12.50622,43.97131],[12.50875,43.96198],[12.50655,43.95796],[12.51427,43.94897],[12.51553,43.94096],[12.50496,43.93017],[12.50269,43.92363],[12.49724,43.92248],[12.49247,43.91774],[12.49429,43.90973],[12.48771,43.89706],[12.45648,43.89369]]]]}},{type:"Feature",properties:{iso1A2:"EC",iso1A3:"ECU",iso1N3:"218",wikidata:"Q736",nameEn:"Ecuador",groups:["005","419","019"],callingCodes:["593"]},geometry:{type:"MultiPolygon",coordinates:[[[[-75.25764,-0.11943],[-75.40192,-0.17196],[-75.61997,-0.10012],[-75.60169,-0.18708],[-75.53615,-0.19213],[-75.22862,-0.60048],[-75.22862,-0.95588],[-75.3872,-0.9374],[-75.57429,-1.55961],[-76.05203,-2.12179],[-76.6324,-2.58397],[-77.94147,-3.05454],[-78.19369,-3.36431],[-78.14324,-3.47653],[-78.22642,-3.51113],[-78.24589,-3.39907],[-78.34362,-3.38633],[-78.68394,-4.60754],[-78.85149,-4.66795],[-79.01659,-5.01481],[-79.1162,-4.97774],[-79.26248,-4.95167],[-79.59402,-4.46848],[-79.79722,-4.47558],[-80.13945,-4.29786],[-80.39256,-4.48269],[-80.46386,-4.41516],[-80.32114,-4.21323],[-80.45023,-4.20938],[-80.4822,-4.05477],[-80.46386,-4.01342],[-80.13232,-3.90317],[-80.19926,-3.68894],[-80.18741,-3.63994],[-80.19848,-3.59249],[-80.21642,-3.5888],[-80.20535,-3.51667],[-80.22629,-3.501],[-80.23651,-3.48652],[-80.24586,-3.48677],[-80.24475,-3.47846],[-80.24123,-3.46124],[-80.20647,-3.431],[-80.30602,-3.39149],[-92.46744,-2.52874],[-93.12365,2.64343],[-78.87137,1.47457],[-78.42749,1.15389],[-77.85677,0.80197],[-77.7148,0.85003],[-77.68613,0.83029],[-77.66416,0.81604],[-77.67815,0.73863],[-77.49984,0.64476],[-77.52001,0.40782],[-76.89177,0.24736],[-76.4094,0.24015],[-76.41215,0.38228],[-76.23441,0.42294],[-75.82927,0.09578],[-75.25764,-0.11943]]]]}},{type:"Feature",properties:{iso1A2:"SN",iso1A3:"SEN",iso1N3:"686",wikidata:"Q1041",nameEn:"Senegal",groups:["011","202","002"],callingCodes:["221"]},geometry:{type:"MultiPolygon",coordinates:[[[[-14.32144,16.61495],[-13.80075,16.13961],[-13.43135,16.09022],[-13.11029,15.52116],[-12.23936,14.76324],[-11.93043,13.84505],[-12.06897,13.71049],[-11.83345,13.33333],[-11.63025,13.39174],[-11.39935,12.97808],[-11.37536,12.40788],[-11.46267,12.44559],[-11.91331,12.42008],[-12.35415,12.32758],[-12.87336,12.51892],[-13.06603,12.49342],[-13.05296,12.64003],[-13.70523,12.68013],[-15.17582,12.6847],[-15.67302,12.42974],[-16.20591,12.46157],[-16.38191,12.36449],[-16.70562,12.34803],[-17.4623,11.92379],[-17.43966,13.04579],[-16.74676,13.06025],[-16.69343,13.16791],[-15.80355,13.16729],[-15.80478,13.34832],[-15.26908,13.37768],[-15.14917,13.57989],[-14.36795,13.23033],[-13.79409,13.34472],[-13.8955,13.59126],[-14.34721,13.46578],[-14.93719,13.80173],[-15.36504,13.79313],[-15.47902,13.58758],[-17.43598,13.59273],[-18.35085,14.63444],[-17.15288,16.07139],[-16.50854,16.09032],[-16.48967,16.0496],[-16.44814,16.09753],[-16.4429,16.20605],[-16.27016,16.51565],[-15.6509,16.50315],[-15.00557,16.64997],[-14.32144,16.61495]]]]}},{type:"Feature",properties:{iso1A2:"ER",iso1A3:"ERI",iso1N3:"232",wikidata:"Q986",nameEn:"Eritrea",groups:["014","202","002"],callingCodes:["291"]},geometry:{type:"MultiPolygon",coordinates:[[[[41.37609,16.19728],[41.29956,15.565],[42.63806,13.58268],[43.29075,12.79154],[42.86195,12.58747],[42.7996,12.42629],[42.6957,12.36201],[42.46941,12.52661],[42.4037,12.46478],[42.2798,12.6355],[42.21469,12.75832],[42.05841,12.80912],[41.62864,13.38626],[41.25097,13.60787],[40.9167,14.11152],[40.25686,14.41445],[40.21128,14.39342],[40.14649,14.53969],[40.07236,14.54264],[39.9443,14.41024],[39.76632,14.54264],[39.58182,14.60987],[39.50585,14.55735],[39.52756,14.49011],[39.37685,14.54402],[39.2519,14.40393],[39.2302,14.44598],[39.26927,14.48801],[39.23888,14.56365],[39.19547,14.56996],[39.14772,14.61827],[39.16074,14.65187],[39.02834,14.63717],[38.98058,14.54895],[38.78306,14.4754],[38.45748,14.41445],[38.3533,14.51323],[38.25562,14.67287],[38.0364,14.72745],[37.91287,14.89447],[37.528,14.18413],[37.47319,14.2149],[37.3106,14.44657],[37.13206,14.40746],[37.09486,14.27155],[37.01622,14.2561],[36.85787,14.32201],[36.63364,14.31172],[36.55659,14.28237],[36.56536,14.26177],[36.54376,14.25597],[36.44337,15.14963],[36.54276,15.23478],[36.69761,15.75323],[36.76371,15.80831],[36.92193,16.23451],[36.99777,17.07172],[37.42694,17.04041],[37.50967,17.32199],[38.13362,17.53906],[38.37133,17.66269],[38.45916,17.87167],[38.57727,17.98125],[39.63762,18.37348],[41.37609,16.19728]]]]}},{type:"Feature",properties:{iso1A2:"SO",iso1A3:"SOM",iso1N3:"706",wikidata:"Q1045",nameEn:"Somalia",groups:["014","202","002"],callingCodes:["252"]},geometry:{type:"MultiPolygon",coordinates:[[[[48.95249,11.56816],[51.12877,12.56479],[52.253,11.68582],[49.16337,2.78611],[41.75542,-1.85308],[41.56362,-1.66375],[41.56,-1.59812],[41.00099,-0.83068],[40.98767,2.82959],[41.31368,3.14314],[41.89488,3.97375],[42.07619,4.17667],[42.55853,4.20518],[42.84526,4.28357],[42.97746,4.44032],[43.04177,4.57923],[43.40263,4.79289],[44.02436,4.9451],[44.98104,4.91821],[47.97917,8.00124],[47.92477,8.00111],[46.99339,7.9989],[44.19222,8.93028],[43.32613,9.59205],[43.23518,9.84605],[43.0937,9.90579],[42.87643,10.18441],[42.69452,10.62672],[42.95776,10.98533],[43.42425,11.70983],[48.95249,11.56816]]]]}},{type:"Feature",properties:{iso1A2:"FI",iso1A3:"FIN",iso1N3:"246",wikidata:"Q33",nameEn:"Finland",aliases:["SF"],groups:["EU","154","150"],callingCodes:["358"]},geometry:{type:"MultiPolygon",coordinates:[[[[29.12697,69.69193],[29.31664,69.47994],[28.8629,69.22395],[28.81248,69.11997],[28.91738,69.04774],[28.45957,68.91417],[28.78224,68.86696],[28.43941,68.53366],[28.62982,68.19816],[29.34179,68.06655],[29.66955,67.79872],[30.02041,67.67523],[29.91155,67.51507],[28.9839,66.94139],[29.91155,66.13863],[30.16363,65.66935],[29.97205,65.70256],[29.74013,65.64025],[29.84096,65.56945],[29.68972,65.31803],[29.61914,65.23791],[29.8813,65.22101],[29.84096,65.1109],[29.61914,65.05993],[29.68972,64.80789],[30.05271,64.79072],[30.12329,64.64862],[30.01238,64.57513],[30.06279,64.35782],[30.4762,64.25728],[30.55687,64.09036],[30.25437,63.83364],[29.98213,63.75795],[30.49637,63.46666],[31.23244,63.22239],[31.29294,63.09035],[31.58535,62.91642],[31.38369,62.66284],[31.10136,62.43042],[29.01829,61.17448],[28.82816,61.1233],[28.47974,60.93365],[27.77352,60.52722],[27.71177,60.3893],[27.44953,60.22766],[26.32936,60.00121],[20.5104,59.15546],[21.35468,59.67511],[21.02509,60.12142],[21.08159,60.20167],[21.15143,60.54555],[20.96741,60.71528],[19.23413,60.61414],[20.15877,63.06556],[24.14112,65.39731],[24.15107,65.81427],[24.14798,65.83466],[24.15791,65.85385],[23.90497,66.15802],[23.71339,66.21299],[23.64982,66.30603],[23.67591,66.3862],[23.63776,66.43568],[23.85959,66.56434],[23.89488,66.772],[23.98059,66.79585],[23.98563,66.84149],[23.56214,67.17038],[23.58735,67.20752],[23.54701,67.25435],[23.75372,67.29914],[23.75372,67.43688],[23.39577,67.46974],[23.54701,67.59306],[23.45627,67.85297],[23.65793,67.9497],[23.40081,68.05545],[23.26469,68.15134],[23.15377,68.14759],[23.10336,68.26551],[22.73028,68.40881],[22.00429,68.50692],[21.03001,68.88969],[20.90649,68.89696],[20.85104,68.93142],[20.91658,68.96764],[20.78802,69.03087],[20.55258,69.06069],[20.72171,69.11874],[21.05775,69.0356],[21.11099,69.10291],[20.98641,69.18809],[21.00732,69.22755],[21.27827,69.31281],[21.63833,69.27485],[22.27276,68.89514],[22.38367,68.71561],[22.53321,68.74393],[23.13064,68.64684],[23.68017,68.70276],[23.781,68.84514],[24.02299,68.81601],[24.18432,68.73936],[24.74898,68.65143],[24.90023,68.55579],[24.93048,68.61102],[25.10189,68.63307],[25.12206,68.78684],[25.42455,68.90328],[25.61613,68.89602],[25.75729,68.99383],[25.69679,69.27039],[25.96904,69.68397],[26.40261,69.91377],[26.64461,69.96565],[27.05802,69.92069],[27.57226,70.06215],[27.95542,70.0965],[27.97558,69.99671],[28.32849,69.88605],[28.36883,69.81658],[29.12697,69.69193]]]]}},{type:"Feature",properties:{iso1A2:"SR",iso1A3:"SUR",iso1N3:"740",wikidata:"Q730",nameEn:"Suriname",groups:["005","419","019"],driveSide:"left",callingCodes:["597"]},geometry:{type:"MultiPolygon",coordinates:[[[[-54.26916,5.26909],[-54.4717,4.91964],[-54.38444,4.13222],[-54.19367,3.84387],[-54.05128,3.63557],[-53.98914,3.627],[-53.9849,3.58697],[-54.28534,2.67798],[-54.42864,2.42442],[-54.6084,2.32856],[-55.01919,2.564],[-55.71493,2.40342],[-55.96292,2.53188],[-56.13054,2.27723],[-55.92159,2.05236],[-55.89863,1.89861],[-55.99278,1.83137],[-56.47045,1.95135],[-56.55439,2.02003],[-56.70519,2.02964],[-57.35891,3.32121],[-58.0307,3.95513],[-57.8699,4.89394],[-57.37442,5.0208],[-57.22536,5.15605],[-57.31629,5.33714],[-56.84822,6.73257],[-53.7094,6.2264],[-54.01074,5.68785],[-54.01877,5.52789],[-54.26916,5.26909]]]]}},{type:"Feature",properties:{iso1A2:"FO",iso1A3:"FRO",iso1N3:"234",wikidata:"Q4628",nameEn:"Faroe Islands",country:"DK",groups:["154","150"],callingCodes:["298"]},geometry:{type:"MultiPolygon",coordinates:[[[[-8.51774,62.35338],[-5.70102,62.77194],[-6.51083,60.95272],[-8.51774,62.35338]]]]}},{type:"Feature",properties:{iso1A2:"SS",iso1A3:"SSD",iso1N3:"728",wikidata:"Q958",nameEn:"South Sudan",groups:["014","202","002"],callingCodes:["211"]},geometry:{type:"MultiPolygon",coordinates:[[[[34.10229,9.50238],[34.14304,9.04654],[34.14453,8.60204],[34.01346,8.50041],[33.89579,8.4842],[33.87195,8.41938],[33.71407,8.3678],[33.66938,8.44442],[33.54575,8.47094],[33.3119,8.45474],[33.19721,8.40317],[33.1853,8.29264],[33.18083,8.13047],[33.08401,8.05822],[33.0006,7.90333],[33.04944,7.78989],[33.24637,7.77939],[33.32531,7.71297],[33.44745,7.7543],[33.71407,7.65983],[33.87642,7.5491],[34.02984,7.36449],[34.03878,7.27437],[34.01495,7.25664],[34.19369,7.12807],[34.19369,7.04382],[34.35753,6.91963],[34.47669,6.91076],[34.53925,6.82794],[34.53776,6.74808],[34.65096,6.72589],[34.77459,6.5957],[34.87736,6.60161],[35.01738,6.46991],[34.96227,6.26415],[35.00546,5.89387],[35.12611,5.68937],[35.13058,5.62118],[35.31188,5.50106],[35.29938,5.34042],[35.50792,5.42431],[35.8576,5.33413],[35.81968,5.10757],[35.82118,4.77382],[35.9419,4.61933],[35.51424,4.61643],[35.42366,4.76969],[35.47843,4.91872],[35.30992,4.90402],[35.34151,5.02364],[34.47601,4.72162],[33.9873,4.23316],[33.51264,3.75068],[33.18356,3.77812],[33.02852,3.89296],[32.89746,3.81339],[32.72021,3.77327],[32.41337,3.748],[32.20782,3.6053],[32.19888,3.50867],[32.08866,3.53543],[32.08491,3.56287],[32.05187,3.589],[31.95907,3.57408],[31.96205,3.6499],[31.86821,3.78664],[31.81459,3.82083],[31.72075,3.74354],[31.50776,3.63652],[31.50478,3.67814],[31.29476,3.8015],[31.16666,3.79853],[30.97601,3.693],[30.85153,3.48867],[30.85997,3.5743],[30.80713,3.60506],[30.78512,3.67097],[30.56277,3.62703],[30.57378,3.74567],[30.55396,3.84451],[30.47691,3.83353],[30.27658,3.95653],[30.22374,3.93896],[30.1621,4.10586],[30.06964,4.13221],[29.79666,4.37809],[29.82087,4.56246],[29.49726,4.7007],[29.43341,4.50101],[29.22207,4.34297],[29.03054,4.48784],[28.8126,4.48784],[28.6651,4.42638],[28.20719,4.35614],[27.79551,4.59976],[27.76469,4.79284],[27.65462,4.89375],[27.56656,4.89375],[27.44012,5.07349],[27.26886,5.25876],[27.23017,5.37167],[27.28621,5.56382],[27.22705,5.62889],[27.22705,5.71254],[26.51721,6.09655],[26.58259,6.1987],[26.32729,6.36272],[26.38022,6.63493],[25.90076,7.09549],[25.37461,7.33024],[25.35281,7.42595],[25.20337,7.50312],[25.20649,7.61115],[25.29214,7.66675],[25.25319,7.8487],[24.98855,7.96588],[24.85156,8.16933],[24.35965,8.26177],[24.13238,8.36959],[24.25691,8.69288],[23.51905,8.71749],[23.59065,8.99743],[23.44744,8.99128],[23.4848,9.16959],[23.56263,9.19418],[23.64358,9.28637],[23.64981,9.44303],[23.62179,9.53823],[23.69155,9.67566],[24.09319,9.66572],[24.12744,9.73784],[24.49389,9.79962],[24.84653,9.80643],[24.97739,9.9081],[25.05688,10.06776],[25.0918,10.33718],[25.78141,10.42599],[25.93163,10.38159],[25.93241,10.17941],[26.21338,9.91545],[26.35815,9.57946],[26.70685,9.48735],[27.14427,9.62858],[27.90704,9.61323],[28.99983,9.67155],[29.06988,9.74826],[29.53844,9.75133],[29.54,10.07949],[29.94629,10.29245],[30.00389,10.28633],[30.53005,9.95992],[30.82893,9.71451],[30.84605,9.7498],[31.28504,9.75287],[31.77539,10.28939],[31.99177,10.65065],[32.46967,11.04662],[32.39358,11.18207],[32.39578,11.70208],[32.10079,11.95203],[32.73921,11.95203],[32.73921,12.22757],[33.25876,12.22111],[33.13988,11.43248],[33.26977,10.83632],[33.24645,10.77913],[33.52294,10.64382],[33.66604,10.44254],[33.80913,10.32994],[33.90159,10.17179],[33.96984,10.15446],[33.99185,9.99623],[33.96323,9.80972],[33.9082,9.762],[33.87958,9.49937],[34.10229,9.50238]]]]}},{type:"Feature",properties:{iso1A2:"GB",iso1A3:"GBR",iso1N3:"826",wikidata:"Q145",nameEn:"United Kingdom",aliases:["UK","Britain","Great Britain"],groups:["EU","154","150"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["44"]},geometry:{type:"MultiPolygon",coordinates:[[[[-5.83481,53.87749],[-6.26218,54.09785],[-6.29003,54.11278],[-6.32694,54.09337],[-6.36279,54.11248],[-6.36605,54.07234],[-6.47849,54.06947],[-6.62842,54.03503],[-6.66264,54.0666],[-6.6382,54.17071],[-6.70175,54.20218],[-6.74575,54.18788],[-6.81583,54.22791],[-6.85179,54.29176],[-6.87775,54.34682],[-7.02034,54.4212],[-7.19145,54.31296],[-7.14908,54.22732],[-7.25012,54.20063],[-7.26316,54.13863],[-7.29493,54.12013],[-7.29687,54.1354],[-7.28017,54.16714],[-7.29157,54.17191],[-7.34005,54.14698],[-7.30553,54.11869],[-7.32834,54.11475],[-7.44567,54.1539],[-7.4799,54.12239],[-7.55812,54.12239],[-7.69501,54.20731],[-7.81397,54.20159],[-7.8596,54.21779],[-7.87101,54.29299],[-8.04555,54.36292],[-8.179,54.46763],[-8.04538,54.48941],[-7.99812,54.54427],[-7.8596,54.53671],[-7.70315,54.62077],[-7.93293,54.66603],[-7.83352,54.73854],[-7.75041,54.7103],[-7.64449,54.75265],[-7.54671,54.74606],[-7.54508,54.79401],[-7.47626,54.83084],[-7.4473,54.87003],[-7.44404,54.9403],[-7.40004,54.94498],[-7.4033,55.00391],[-7.34464,55.04688],[-7.2471,55.06933],[-6.9734,55.19878],[-6.71944,55.27952],[-6.79943,55.54107],[-7.93366,55.84142],[-14.78497,57.60709],[-0.3751,61.32236],[2.56575,51.85301],[2.18458,51.52087],[1.17405,50.74239],[-7.74976,48.64773],[-5.79914,52.03902],[-5.37267,53.63269],[-3.64906,54.12723],[-4.1819,54.57861],[-5.83481,53.87749]]],[[[33.70575,34.97947],[33.70639,34.99303],[33.71514,35.00294],[33.69731,35.01754],[33.69938,35.03123],[33.67678,35.03866],[33.67742,35.05963],[33.68474,35.06602],[33.69095,35.06237],[33.70861,35.07644],[33.7161,35.07279],[33.70209,35.04882],[33.71482,35.03722],[33.73824,35.05321],[33.76106,35.04253],[33.78581,35.05104],[33.82067,35.07826],[33.84168,35.06823],[33.8541,35.07201],[33.87479,35.08881],[33.87097,35.09389],[33.87622,35.10457],[33.87224,35.12293],[33.88561,35.12449],[33.88943,35.12007],[33.88737,35.11408],[33.89853,35.11377],[33.91789,35.08688],[33.91299,35.07579],[33.90247,35.07686],[33.89485,35.06873],[33.88367,35.07877],[33.85261,35.0574],[33.8355,35.05777],[33.82051,35.0667],[33.8012,35.04786],[33.81524,35.04192],[33.83055,35.02865],[33.82875,35.01685],[33.84045,35.00616],[33.85216,35.00579],[33.85891,35.001],[33.85621,34.98956],[33.83505,34.98108],[33.84811,34.97075],[33.86432,34.97592],[33.90075,34.96623],[33.98684,34.76642],[33.83531,34.73974],[33.70575,34.97947]],[[33.77312,34.9976],[33.75994,35.00113],[33.75682,34.99916],[33.76605,34.99543],[33.76738,34.99188],[33.7778,34.98981],[33.77843,34.988],[33.78149,34.98854],[33.78318,34.98699],[33.78571,34.98951],[33.78917,34.98854],[33.79191,34.98914],[33.78516,34.99582],[33.77553,34.99518],[33.77312,34.9976]],[[33.74144,35.01053],[33.7492,35.01319],[33.74983,35.02274],[33.74265,35.02329],[33.73781,35.02181],[33.7343,35.01178],[33.74144,35.01053]]],[[[32.86014,34.70585],[32.86167,34.68734],[32.9068,34.66102],[32.91398,34.67343],[32.93043,34.67091],[32.92807,34.66736],[32.93449,34.66241],[32.93693,34.67027],[32.94379,34.67111],[32.94683,34.67907],[32.95539,34.68471],[32.99135,34.68061],[32.98668,34.67268],[32.99014,34.65518],[32.97736,34.65277],[32.97079,34.66112],[32.95325,34.66462],[32.94796,34.6587],[32.94976,34.65204],[32.95471,34.64528],[32.95323,34.64075],[32.95891,34.62919],[32.96718,34.63446],[32.96968,34.64046],[33.0138,34.64424],[33.26744,34.49942],[32.74412,34.43926],[32.75515,34.64985],[32.76136,34.68318],[32.79433,34.67883],[32.82717,34.70622],[32.86014,34.70585]]]]}},{type:"Feature",properties:{iso1A2:"ST",iso1A3:"STP",iso1N3:"678",wikidata:"Q1039",nameEn:"São Tomé and Principe",groups:["017","202","002"],callingCodes:["239"]},geometry:{type:"MultiPolygon",coordinates:[[[[5.9107,-0.09539],[7.23334,2.23756],[8.0168,1.79377],[6.69416,-0.53945],[5.9107,-0.09539]]]]}},{type:"Feature",properties:{iso1A2:"GG",iso1A3:"GGY",iso1N3:"831",wikidata:"Q25230",nameEn:"Guernsey",country:"GB",groups:["830","154","150"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["44 01481"]},geometry:{type:"MultiPolygon",coordinates:[[[[-2.65349,49.15373],[-3.28154,49.57329],[-2.02963,49.91866],[-2.09454,49.46288],[-2.36485,49.48223],[-2.65349,49.15373]]]]}},{type:"Feature",properties:{iso1A2:"SV",iso1A3:"SLV",iso1N3:"222",wikidata:"Q792",nameEn:"El Salvador",groups:["013","003","419","019"],callingCodes:["503"]},geometry:{type:"MultiPolygon",coordinates:[[[[-89.34776,14.43013],[-89.04187,14.33644],[-88.94608,14.20207],[-88.85785,14.17763],[-88.815,14.11652],[-88.73182,14.10919],[-88.70661,14.04317],[-88.49738,13.97224],[-88.48982,13.86458],[-88.25791,13.91108],[-88.23018,13.99915],[-88.07641,13.98447],[-88.00331,13.86948],[-87.7966,13.91353],[-87.68821,13.80829],[-87.73106,13.75443],[-87.78148,13.52906],[-87.71657,13.50577],[-87.72115,13.46083],[-87.73841,13.44169],[-87.77354,13.45767],[-87.83467,13.44655],[-87.84675,13.41078],[-87.80177,13.35689],[-87.73714,13.32715],[-87.69751,13.25228],[-87.55124,13.12523],[-87.7346,13.13228],[-88.11443,12.63306],[-90.55276,12.8866],[-90.11344,13.73679],[-90.10505,13.85104],[-89.88937,14.0396],[-89.81807,14.07073],[-89.76103,14.02923],[-89.73251,14.04133],[-89.75569,14.07073],[-89.70756,14.1537],[-89.61844,14.21937],[-89.52397,14.22628],[-89.50614,14.26084],[-89.58814,14.33165],[-89.57441,14.41637],[-89.39028,14.44561],[-89.34776,14.43013]]]]}},{type:"Feature",properties:{iso1A2:"GM",iso1A3:"GMB",iso1N3:"270",wikidata:"Q1005",nameEn:"The Gambia",groups:["011","202","002"],callingCodes:["220"]},geometry:{type:"MultiPolygon",coordinates:[[[[-15.14917,13.57989],[-15.26908,13.37768],[-15.80478,13.34832],[-15.80355,13.16729],[-16.69343,13.16791],[-16.74676,13.06025],[-17.43966,13.04579],[-17.43598,13.59273],[-15.47902,13.58758],[-15.36504,13.79313],[-14.93719,13.80173],[-14.34721,13.46578],[-13.8955,13.59126],[-13.79409,13.34472],[-14.36795,13.23033],[-15.14917,13.57989]]]]}},{type:"Feature",properties:{iso1A2:"SX",iso1A3:"SXM",iso1N3:"534",wikidata:"Q26273",nameEn:"Sint Maarten",country:"NL",groups:["029","003","419","019"],callingCodes:["1 721"]},geometry:{type:"MultiPolygon",coordinates:[[[[-63.29212,17.90532],[-63.33064,17.9615],[-63.13584,18.0541],[-63.11096,18.05368],[-63.09686,18.04608],[-63.07759,18.04943],[-63.0579,18.06614],[-63.04039,18.05619],[-63.02323,18.05757],[-62.93924,18.02904],[-63.07669,17.79659],[-63.29212,17.90532]]]]}},{type:"Feature",properties:{iso1A2:"GR",iso1A3:"GRC",iso1N3:"300",wikidata:"Q41",nameEn:"Greece",aliases:["EL"],groups:["EU","039","150"],callingCodes:["30"]},geometry:{type:"MultiPolygon",coordinates:[[[[26.03489,40.73051],[25.94795,40.72797],[26.04292,40.3958],[25.61285,40.17161],[25.94257,39.39358],[26.43357,39.43096],[26.70773,39.0312],[26.61814,38.81372],[26.21136,38.65436],[26.32173,38.48731],[26.24183,38.44695],[26.21136,38.17558],[27.05537,37.9131],[27.16428,37.72343],[26.99377,37.69034],[26.95583,37.64989],[27.14757,37.32],[27.20312,36.94571],[27.45627,36.9008],[27.24613,36.71622],[27.46117,36.53789],[27.89482,36.69898],[27.95037,36.46155],[28.23708,36.56812],[29.30783,36.01033],[29.48192,36.18377],[29.61002,36.1731],[29.61805,36.14179],[29.69611,36.10365],[29.73302,35.92555],[22.5213,33.45682],[19.20409,39.7532],[19.0384,40.35325],[19.95905,39.82857],[19.97622,39.78684],[19.92466,39.69533],[19.98042,39.6504],[20.00957,39.69227],[20.05189,39.69112],[20.12956,39.65805],[20.15988,39.652],[20.22376,39.64532],[20.22707,39.67459],[20.27412,39.69884],[20.31961,39.72799],[20.29152,39.80421],[20.30804,39.81563],[20.38572,39.78516],[20.41475,39.81437],[20.41546,39.82832],[20.31135,39.99438],[20.37911,39.99058],[20.42373,40.06777],[20.48487,40.06271],[20.51297,40.08168],[20.55593,40.06524],[20.61081,40.07866],[20.62566,40.0897],[20.67162,40.09433],[20.71789,40.27739],[20.78234,40.35803],[20.7906,40.42726],[20.83688,40.47882],[20.94925,40.46625],[20.96908,40.51526],[21.03932,40.56299],[21.05833,40.66586],[20.98134,40.76046],[20.95752,40.76982],[20.98396,40.79109],[20.97887,40.85475],[21.15262,40.85546],[21.21105,40.8855],[21.25779,40.86165],[21.35595,40.87578],[21.41555,40.9173],[21.53007,40.90759],[21.57448,40.86076],[21.69601,40.9429],[21.7556,40.92525],[21.91102,41.04786],[21.90869,41.09191],[22.06527,41.15617],[22.1424,41.12449],[22.17629,41.15969],[22.26744,41.16409],[22.42285,41.11921],[22.5549,41.13065],[22.58295,41.11568],[22.62852,41.14385],[22.65306,41.18168],[22.71266,41.13945],[22.74538,41.16321],[22.76408,41.32225],[22.81199,41.3398],[22.93334,41.34104],[23.1833,41.31755],[23.21953,41.33773],[23.22771,41.37106],[23.31301,41.40525],[23.33639,41.36317],[23.40416,41.39999],[23.52453,41.40262],[23.63203,41.37632],[23.67644,41.41139],[23.76525,41.40175],[23.80148,41.43943],[23.89613,41.45257],[23.91483,41.47971],[23.96975,41.44118],[24.06908,41.46132],[24.06323,41.53222],[24.10063,41.54796],[24.18126,41.51735],[24.27124,41.57682],[24.30513,41.51297],[24.52599,41.56808],[24.61129,41.42278],[24.71529,41.41928],[24.8041,41.34913],[24.82514,41.4035],[24.86136,41.39298],[24.90928,41.40876],[24.942,41.38685],[25.11611,41.34212],[25.28322,41.23411],[25.48187,41.28506],[25.52394,41.2798],[25.55082,41.31667],[25.61042,41.30614],[25.66183,41.31316],[25.70507,41.29209],[25.8266,41.34563],[25.87919,41.30526],[26.12926,41.35878],[26.16548,41.42278],[26.20288,41.43943],[26.14796,41.47533],[26.176,41.50072],[26.17951,41.55409],[26.14328,41.55496],[26.15146,41.60828],[26.07083,41.64584],[26.06148,41.70345],[26.16841,41.74858],[26.21325,41.73223],[26.22888,41.74139],[26.2654,41.71544],[26.30255,41.70925],[26.35957,41.71149],[26.47958,41.67037],[26.5209,41.62592],[26.59196,41.60491],[26.59742,41.48058],[26.61767,41.42281],[26.62997,41.34613],[26.5837,41.32131],[26.5209,41.33993],[26.39861,41.25053],[26.32259,41.24929],[26.31928,41.07386],[26.3606,41.02027],[26.33297,40.98388],[26.35894,40.94292],[26.32259,40.94042],[26.28623,40.93005],[26.29441,40.89119],[26.26169,40.9168],[26.20856,40.86048],[26.21351,40.83298],[26.15685,40.80709],[26.12854,40.77339],[26.12495,40.74283],[26.08638,40.73214],[26.0754,40.72772],[26.03489,40.73051]]]]}},{type:"Feature",properties:{iso1A2:"SY",iso1A3:"SYR",iso1N3:"760",wikidata:"Q858",nameEn:"Syria",groups:["145","142"],callingCodes:["963"]},geometry:{type:"MultiPolygon",coordinates:[[[[42.23683,37.2863],[42.26039,37.27017],[42.2824,37.2798],[42.34735,37.22548],[42.32313,37.17814],[42.35724,37.10998],[42.36697,37.0627],[41.81736,36.58782],[41.40058,36.52502],[41.28864,36.35368],[41.2564,36.06012],[41.37027,35.84095],[41.38184,35.62502],[41.26569,35.42708],[41.21654,35.1508],[41.2345,34.80049],[41.12388,34.65742],[40.97676,34.39788],[40.64314,34.31604],[38.79171,33.37328],[36.83946,32.31293],[36.40959,32.37908],[36.23948,32.50108],[36.20875,32.49529],[36.20379,32.52751],[36.08074,32.51463],[36.02239,32.65911],[35.96633,32.66237],[35.93307,32.71966],[35.88405,32.71321],[35.75983,32.74803],[35.78745,32.77938],[35.83758,32.82817],[35.84021,32.8725],[35.87012,32.91976],[35.89298,32.9456],[35.87188,32.98028],[35.84802,33.1031],[35.81911,33.11077],[35.81911,33.1336],[35.84285,33.16673],[35.83846,33.19397],[35.81647,33.2028],[35.81295,33.24841],[35.77513,33.27342],[35.813,33.3172],[35.77477,33.33609],[35.81324,33.36354],[35.82577,33.40479],[35.88668,33.43183],[35.94816,33.47886],[35.94465,33.52774],[36.05723,33.57904],[35.9341,33.6596],[36.06778,33.82927],[36.14517,33.85118],[36.3967,33.83365],[36.38263,33.86579],[36.28589,33.91981],[36.41078,34.05253],[36.50576,34.05982],[36.5128,34.09916],[36.62537,34.20251],[36.59195,34.2316],[36.58667,34.27667],[36.60778,34.31009],[36.56556,34.31881],[36.53039,34.3798],[36.55853,34.41609],[36.46179,34.46541],[36.4442,34.50165],[36.34745,34.5002],[36.3369,34.52629],[36.39846,34.55672],[36.41429,34.61175],[36.45299,34.59438],[36.46003,34.6378],[36.42941,34.62505],[36.35384,34.65447],[36.35135,34.68516],[36.32399,34.69334],[36.29165,34.62991],[35.98718,34.64977],[35.97386,34.63322],[35.48515,34.70851],[35.51152,36.10954],[35.931,35.92109],[35.98499,35.94107],[36.00514,35.94113],[36.01844,35.92403],[35.99829,35.88242],[36.11827,35.85923],[36.13919,35.83692],[36.14029,35.81015],[36.1623,35.80925],[36.17441,35.92076],[36.19973,35.95195],[36.25366,35.96264],[36.27678,35.94839],[36.29769,35.96086],[36.28338,36.00273],[36.30099,36.00985],[36.33956,35.98687],[36.37474,36.01163],[36.39206,36.22088],[36.4617,36.20461],[36.50463,36.2419],[36.6125,36.22592],[36.68672,36.23677],[36.65653,36.33861],[36.6081,36.33772],[36.54206,36.49539],[36.58829,36.58295],[36.57398,36.65186],[36.62681,36.71189],[36.61581,36.74629],[36.66727,36.82901],[36.99557,36.75997],[36.99886,36.74012],[37.04399,36.73483],[37.04619,36.71101],[37.01647,36.69512],[37.02088,36.66422],[37.08279,36.63495],[37.10894,36.6704],[37.16177,36.66069],[37.21988,36.6736],[37.47253,36.63243],[37.49103,36.66904],[37.68048,36.75065],[37.81974,36.76055],[38.21064,36.91842],[38.38859,36.90064],[38.55908,36.84429],[38.74042,36.70629],[39.03217,36.70911],[39.21538,36.66834],[39.81589,36.75538],[40.69136,37.0996],[40.90856,37.13147],[41.21937,37.07665],[41.515,37.08084],[42.00894,37.17209],[42.18225,37.28569],[42.19301,37.31323],[42.2112,37.32491],[42.22257,37.31395],[42.22381,37.30238],[42.20454,37.28715],[42.21548,37.28026],[42.23683,37.2863]]]]}},{type:"Feature",properties:{iso1A2:"GW",iso1A3:"GNB",iso1N3:"624",wikidata:"Q1007",nameEn:"Guinea-Bissau",groups:["011","202","002"],callingCodes:["245"]},geometry:{type:"MultiPolygon",coordinates:[[[[-14.31513,11.60713],[-14.51173,11.49708],[-14.66677,11.51188],[-14.77786,11.36323],[-14.95993,10.99244],[-15.07174,10.89557],[-15.96748,10.162],[-17.4623,11.92379],[-16.70562,12.34803],[-16.38191,12.36449],[-16.20591,12.46157],[-15.67302,12.42974],[-15.17582,12.6847],[-13.70523,12.68013],[-13.7039,12.60313],[-13.65089,12.49515],[-13.64168,12.42764],[-13.70851,12.24978],[-13.92745,12.24077],[-13.94589,12.16869],[-13.7039,12.00869],[-13.7039,11.70195],[-14.09799,11.63649],[-14.26623,11.67486],[-14.31513,11.60713]]]]}},{type:"Feature",properties:{iso1A2:"SZ",iso1A3:"SWZ",iso1N3:"748",wikidata:"Q1050",nameEn:"Eswatini",aliases:["Swaziland"],groups:["018","202","002"],driveSide:"left",callingCodes:["268"]},geometry:{type:"MultiPolygon",coordinates:[[[[31.86881,-25.99973],[31.974,-25.95387],[32.00916,-25.999],[32.08599,-26.00978],[32.10435,-26.15656],[32.07352,-26.40185],[32.13409,-26.5317],[32.13315,-26.84345],[32.09664,-26.80721],[32.00893,-26.8096],[31.97463,-27.11057],[31.97592,-27.31675],[31.49834,-27.31549],[31.15027,-27.20151],[30.96088,-27.0245],[30.97757,-26.92706],[30.88826,-26.79622],[30.81101,-26.84722],[30.78927,-26.48271],[30.95819,-26.26303],[31.13073,-25.91558],[31.31237,-25.7431],[31.4175,-25.71886],[31.86881,-25.99973]]]]}},{type:"Feature",properties:{iso1A2:"HN",iso1A3:"HND",iso1N3:"340",wikidata:"Q783",nameEn:"Honduras",groups:["013","003","419","019"],callingCodes:["504"]},geometry:{type:"MultiPolygon",coordinates:[[[[-83.86109,17.73736],[-81.58685,18.0025],[-82.06974,14.49418],[-83.04763,15.03256],[-83.13724,15.00002],[-83.49268,15.01158],[-83.62101,14.89448],[-83.89551,14.76697],[-84.10584,14.76353],[-84.48373,14.63249],[-84.70119,14.68078],[-84.82596,14.82212],[-84.90082,14.80489],[-85.1575,14.53934],[-85.18602,14.24929],[-85.32149,14.2562],[-85.45762,14.11304],[-85.73964,13.9698],[-85.75477,13.8499],[-86.03458,13.99181],[-86.00685,14.08474],[-86.14801,14.04317],[-86.35219,13.77157],[-86.76812,13.79605],[-86.71267,13.30348],[-86.87066,13.30641],[-86.93383,13.18677],[-86.93197,13.05313],[-87.03785,12.98682],[-87.06306,13.00892],[-87.37107,12.98646],[-87.55124,13.12523],[-87.69751,13.25228],[-87.73714,13.32715],[-87.80177,13.35689],[-87.84675,13.41078],[-87.83467,13.44655],[-87.77354,13.45767],[-87.73841,13.44169],[-87.72115,13.46083],[-87.71657,13.50577],[-87.78148,13.52906],[-87.73106,13.75443],[-87.68821,13.80829],[-87.7966,13.91353],[-88.00331,13.86948],[-88.07641,13.98447],[-88.23018,13.99915],[-88.25791,13.91108],[-88.48982,13.86458],[-88.49738,13.97224],[-88.70661,14.04317],[-88.73182,14.10919],[-88.815,14.11652],[-88.85785,14.17763],[-88.94608,14.20207],[-89.04187,14.33644],[-89.34776,14.43013],[-89.35189,14.47553],[-89.23719,14.58046],[-89.15653,14.57802],[-89.13132,14.71582],[-89.23467,14.85596],[-89.15149,14.97775],[-89.18048,14.99967],[-89.15149,15.07392],[-88.97343,15.14039],[-88.32467,15.63665],[-88.31459,15.66942],[-88.24022,15.69247],[-88.22552,15.72294],[-88.20359,16.03858],[-83.86109,17.73736]]]]}},{type:"Feature",properties:{iso1A2:"TA",iso1A3:"TAA",wikidata:"Q220982",nameEn:"Tristan da Cunha",country:"GB",groups:["SH","011","202","002"],isoStatus:"excRes",driveSide:"left",roadSpeedUnit:"mph",callingCodes:["290 8","44 20"]},geometry:{type:"MultiPolygon",coordinates:[[[[-13.48367,-36.6746],[-11.55782,-36.60319],[-11.48092,-37.8367],[-13.41694,-37.88844],[-13.48367,-36.6746]]]]}},{type:"Feature",properties:{iso1A2:"IC",wikidata:"Q5813",nameEn:"Canary Islands",country:"ES",groups:["EU","039","150"],isoStatus:"excRes",callingCodes:["34"]},geometry:{type:"MultiPolygon",coordinates:[[[[-15.92339,29.50503],[-9.94494,32.97138],[-14.43883,27.02969],[-25.3475,27.87574],[-15.92339,29.50503]]]]}},{type:"Feature",properties:{iso1A2:"TC",iso1A3:"TCA",iso1N3:"796",wikidata:"Q18221",nameEn:"Turks and Caicos Islands",country:"GB",groups:["029","003","419","019"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["1 649"]},geometry:{type:"MultiPolygon",coordinates:[[[[-72.41726,22.40371],[-70.63262,21.53631],[-71.46138,20.64433],[-72.72017,21.48055],[-72.41726,22.40371]]]]}},{type:"Feature",properties:{iso1A2:"IM",iso1A3:"IMN",iso1N3:"833",wikidata:"Q9676",nameEn:"Isle of Man",country:"GB",groups:["154","150"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["44 01624","44 07624","44 07524","44 07924"]},geometry:{type:"MultiPolygon",coordinates:[[[[-3.64906,54.12723],[-5.37267,53.63269],[-5.83481,53.87749],[-4.1819,54.57861],[-3.64906,54.12723]]]]}},{type:"Feature",properties:{iso1A2:"TD",iso1A3:"TCD",iso1N3:"148",wikidata:"Q657",nameEn:"Chad",groups:["017","202","002"],callingCodes:["235"]},geometry:{type:"MultiPolygon",coordinates:[[[[23.99539,19.49944],[23.99997,15.69575],[23.62785,15.7804],[23.38812,15.69649],[23.10792,15.71297],[22.93201,15.55107],[22.92579,15.47007],[22.99584,15.40105],[22.99584,15.22989],[22.66115,14.86308],[22.70474,14.69149],[22.38562,14.58907],[22.44944,14.24986],[22.55997,14.23024],[22.5553,14.11704],[22.22995,13.96754],[22.08674,13.77863],[22.29689,13.3731],[22.1599,13.19281],[22.02914,13.13976],[21.94819,13.05637],[21.81432,12.81362],[21.89371,12.68001],[21.98711,12.63292],[22.15679,12.66634],[22.22684,12.74682],[22.46345,12.61925],[22.38873,12.45514],[22.50548,12.16769],[22.48369,12.02766],[22.64092,12.07485],[22.54907,11.64372],[22.7997,11.40424],[22.93124,11.41645],[22.97249,11.21955],[22.87758,10.91915],[22.45889,11.00246],[21.72139,10.64136],[21.71479,10.29932],[21.63553,10.217],[21.52766,10.2105],[21.34934,9.95907],[21.26348,9.97642],[20.82979,9.44696],[20.36748,9.11019],[19.06421,9.00367],[18.86388,8.87971],[19.11044,8.68172],[18.79783,8.25929],[18.67455,8.22226],[18.62612,8.14163],[18.64153,8.08714],[18.6085,8.05009],[18.02731,8.01085],[17.93926,7.95853],[17.67288,7.98905],[16.8143,7.53971],[16.6668,7.67281],[16.658,7.75353],[16.59415,7.76444],[16.58315,7.88657],[16.41583,7.77971],[16.40703,7.68809],[15.79942,7.44149],[15.73118,7.52006],[15.49743,7.52179],[15.56964,7.58936],[15.59272,7.7696],[15.50743,7.79302],[15.20426,8.50892],[15.09484,8.65982],[14.83566,8.80557],[14.35707,9.19611],[14.37094,9.2954],[13.97544,9.6365],[14.01793,9.73169],[14.1317,9.82413],[14.20411,10.00055],[14.4673,10.00264],[14.80082,9.93818],[14.95722,9.97926],[15.05999,9.94845],[15.14043,9.99246],[15.24618,9.99246],[15.41408,9.92876],[15.68761,9.99344],[15.50535,10.1098],[15.30874,10.31063],[15.23724,10.47764],[15.14936,10.53915],[15.15532,10.62846],[15.06737,10.80921],[15.09127,10.87431],[15.04957,11.02347],[15.10021,11.04101],[15.0585,11.40481],[15.13149,11.5537],[15.06595,11.71126],[15.11579,11.79313],[15.04808,11.8731],[15.05786,12.0608],[15.0349,12.10698],[15.00146,12.1223],[14.96952,12.0925],[14.89019,12.16593],[14.90827,12.3269],[14.83314,12.62963],[14.55058,12.78256],[14.56101,12.91036],[14.46881,13.08259],[14.08251,13.0797],[13.6302,13.71094],[13.47559,14.40881],[13.48259,14.46704],[13.68573,14.55276],[13.67878,14.64013],[13.809,14.72915],[13.78991,14.87519],[13.86301,15.04043],[14.37425,15.72591],[15.50373,16.89649],[15.6032,18.77402],[15.75098,19.93002],[15.99632,20.35364],[15.6721,20.70069],[15.59841,20.74039],[15.56004,20.79488],[15.55382,20.86507],[15.57248,20.92138],[15.62515,20.95395],[15.28332,21.44557],[15.20213,21.49365],[15.19692,21.99339],[14.99751,23.00539],[15.99566,23.49639],[23.99539,19.49944]]]]}},{type:"Feature",properties:{iso1A2:"IR",iso1A3:"IRN",iso1N3:"364",wikidata:"Q794",nameEn:"Iran",groups:["034","142"],callingCodes:["98"]},geometry:{type:"MultiPolygon",coordinates:[[[[44.96746,39.42998],[45.05932,39.36435],[45.08751,39.35052],[45.16168,39.21952],[45.30489,39.18333],[45.40148,39.09007],[45.40452,39.07224],[45.44811,39.04927],[45.44966,38.99243],[45.6131,38.964],[45.6155,38.94304],[45.65172,38.95199],[45.83883,38.90768],[45.90266,38.87739],[45.94624,38.89072],[46.00228,38.87376],[46.06766,38.87861],[46.14785,38.84206],[46.20601,38.85262],[46.34059,38.92076],[46.53497,38.86548],[46.75752,39.03231],[46.83822,39.13143],[46.92539,39.16644],[46.95341,39.13505],[47.05771,39.20143],[47.05927,39.24846],[47.31301,39.37492],[47.38978,39.45999],[47.50099,39.49615],[47.84774,39.66285],[47.98977,39.70999],[48.34264,39.42935],[48.37385,39.37584],[48.15984,39.30028],[48.12404,39.25208],[48.15361,39.19419],[48.31239,39.09278],[48.33884,39.03022],[48.28437,38.97186],[48.08627,38.94434],[48.07734,38.91616],[48.01409,38.90333],[48.02581,38.82705],[48.24773,38.71883],[48.3146,38.59958],[48.45084,38.61013],[48.58793,38.45076],[48.62217,38.40198],[48.70001,38.40564],[48.78979,38.45026],[48.81072,38.44853],[48.84969,38.45015],[48.88288,38.43975],[53.89734,37.3464],[54.24565,37.32047],[54.36211,37.34912],[54.58664,37.45809],[54.67247,37.43532],[54.77822,37.51597],[54.81804,37.61285],[54.77684,37.62264],[54.851,37.75739],[55.13412,37.94705],[55.44152,38.08564],[55.76561,38.12238],[55.97847,38.08024],[56.33278,38.08132],[56.32454,38.18502],[56.43303,38.26054],[56.62255,38.24005],[56.73928,38.27887],[57.03453,38.18717],[57.21169,38.28965],[57.37236,38.09321],[57.35042,37.98546],[57.79534,37.89299],[58.21399,37.77281],[58.22999,37.6856],[58.39959,37.63134],[58.47786,37.6433],[58.5479,37.70526],[58.6921,37.64548],[58.9338,37.67374],[59.22905,37.51161],[59.33507,37.53146],[59.39797,37.47892],[59.39385,37.34257],[59.55178,37.13594],[59.74678,37.12499],[60.00768,37.04102],[60.34767,36.63214],[61.14516,36.64644],[61.18187,36.55348],[61.1393,36.38782],[61.22719,36.12759],[61.12007,35.95992],[61.22444,35.92879],[61.26152,35.80749],[61.22719,35.67038],[61.27371,35.61482],[61.18187,35.30249],[61.0991,35.27845],[61.12831,35.09938],[61.06926,34.82139],[61.00197,34.70631],[60.99922,34.63064],[60.72316,34.52857],[60.91321,34.30411],[60.66502,34.31539],[60.50209,34.13992],[60.5838,33.80793],[60.5485,33.73422],[60.57762,33.59772],[60.69573,33.56054],[60.91133,33.55596],[60.88908,33.50219],[60.56485,33.12944],[60.86191,32.22565],[60.84541,31.49561],[61.70929,31.37391],[61.80569,31.16167],[61.80957,31.12576],[61.83257,31.0452],[61.8335,30.97669],[61.78268,30.92724],[61.80829,30.84224],[60.87231,29.86514],[61.31508,29.38903],[61.53765,29.00507],[61.65978,28.77937],[61.93581,28.55284],[62.40259,28.42703],[62.59499,28.24842],[62.79412,28.28108],[62.7638,28.02992],[62.84905,27.47627],[62.79684,27.34381],[62.80604,27.22412],[63.19649,27.25674],[63.32283,27.14437],[63.25005,27.08692],[63.25005,26.84212],[63.18688,26.83844],[63.1889,26.65072],[62.77352,26.64099],[62.31484,26.528],[62.21304,26.26601],[62.05117,26.31647],[61.89391,26.26251],[61.83831,26.07249],[61.83968,25.7538],[61.683,25.66638],[61.6433,25.27541],[61.57592,25.0492],[61.5251,24.57287],[56.86325,25.03856],[56.82555,25.7713],[56.79239,26.41236],[56.68954,26.76645],[56.2644,26.58649],[55.81777,26.18798],[55.14145,25.62624],[54.39838,25.68383],[50.37726,27.89227],[49.98877,27.87827],[48.83867,29.78572],[48.61441,29.93675],[48.51011,29.96238],[48.44785,30.00148],[48.4494,30.04456],[48.43384,30.08233],[48.38869,30.11062],[48.38714,30.13485],[48.41671,30.17254],[48.41117,30.19846],[48.26393,30.3408],[48.24385,30.33846],[48.21279,30.31644],[48.19425,30.32796],[48.18321,30.39703],[48.14585,30.44133],[48.02443,30.4789],[48.03221,30.9967],[47.68219,31.00004],[47.6804,31.39086],[47.86337,31.78422],[47.64771,32.07666],[47.52474,32.15972],[47.57144,32.20583],[47.37529,32.47808],[47.17218,32.45393],[46.46788,32.91992],[46.32298,32.9731],[46.17198,32.95612],[46.09103,32.98354],[46.15175,33.07229],[46.03966,33.09577],[46.05367,33.13097],[46.11905,33.11924],[46.20623,33.20395],[45.99919,33.5082],[45.86687,33.49263],[45.96183,33.55751],[45.89801,33.63661],[45.77814,33.60938],[45.50261,33.94968],[45.42789,33.9458],[45.41077,33.97421],[45.47264,34.03099],[45.56176,34.15088],[45.58667,34.30147],[45.53552,34.35148],[45.49171,34.3439],[45.46697,34.38221],[45.43879,34.45949],[45.51883,34.47692],[45.53219,34.60441],[45.59074,34.55558],[45.60224,34.55057],[45.73923,34.54416],[45.70031,34.69277],[45.65672,34.7222],[45.68284,34.76624],[45.70031,34.82322],[45.73641,34.83975],[45.79682,34.85133],[45.78904,34.91135],[45.86532,34.89858],[45.89477,34.95805],[45.87864,35.03441],[45.92173,35.0465],[45.92203,35.09538],[45.93108,35.08148],[45.94756,35.09188],[46.06508,35.03699],[46.07747,35.0838],[46.11763,35.07551],[46.19116,35.11097],[46.15642,35.1268],[46.16229,35.16984],[46.19738,35.18536],[46.18457,35.22561],[46.11367,35.23729],[46.15474,35.2883],[46.13152,35.32548],[46.05358,35.38568],[45.98453,35.49848],[46.01518,35.52012],[45.97584,35.58132],[46.03028,35.57416],[46.01307,35.59756],[46.0165,35.61501],[45.99452,35.63574],[46.0117,35.65059],[46.01631,35.69139],[46.23736,35.71414],[46.34166,35.78363],[46.32921,35.82655],[46.17198,35.8013],[46.08325,35.8581],[45.94711,35.82218],[45.89784,35.83708],[45.81442,35.82107],[45.76145,35.79898],[45.6645,35.92872],[45.60018,35.96069],[45.55245,35.99943],[45.46594,36.00042],[45.38275,35.97156],[45.33916,35.99424],[45.37652,36.06222],[45.37312,36.09917],[45.32235,36.17383],[45.30038,36.27769],[45.26261,36.3001],[45.27394,36.35846],[45.23953,36.43257],[45.11811,36.40751],[45.00759,36.5402],[45.06985,36.62645],[45.06985,36.6814],[45.01537,36.75128],[44.84725,36.77622],[44.83479,36.81362],[44.90173,36.86096],[44.91199,36.91468],[44.89862,37.01897],[44.81611,37.04383],[44.75229,37.11958],[44.78319,37.1431],[44.7868,37.16644],[44.75986,37.21549],[44.81021,37.2915],[44.58449,37.45018],[44.61401,37.60165],[44.56887,37.6429],[44.62096,37.71985],[44.55498,37.783],[44.45948,37.77065],[44.3883,37.85433],[44.22509,37.88859],[44.42476,38.25763],[44.50115,38.33939],[44.44386,38.38295],[44.38309,38.36117],[44.3119,38.37887],[44.3207,38.49799],[44.32058,38.62752],[44.28065,38.6465],[44.26155,38.71427],[44.30322,38.81581],[44.18863,38.93881],[44.20946,39.13975],[44.1043,39.19842],[44.03667,39.39223],[44.22452,39.4169],[44.29818,39.378],[44.37921,39.4131],[44.42832,39.4131],[44.41849,39.56659],[44.48111,39.61579],[44.47298,39.68788],[44.6137,39.78393],[44.65422,39.72163],[44.71806,39.71124],[44.81043,39.62677],[44.88916,39.59653],[44.96746,39.42998]]]]}},{type:"Feature",properties:{iso1A2:"TF",iso1A3:"ATF",iso1N3:"260",wikidata:"Q129003",nameEn:"French Southern and Antarctic Lands",country:"FR",groups:["014","202","002"]},geometry:{type:"MultiPolygon",coordinates:[[[[53.53458,-16.36909],[54.61476,-15.02273],[54.96649,-16.28353],[53.53458,-16.36909]]],[[[39.10324,-21.48967],[41.06663,-17.08802],[43.72277,-16.09877],[40.40841,-23.17181],[39.10324,-21.48967]]],[[[46.52682,-10.83678],[48.86266,-10.8109],[47.29063,-12.45583],[46.52682,-10.83678]]],[[[80.15867,-36.04977],[70.67507,-51.14192],[46.31615,-46.28749],[80.15867,-36.04977]]]]}},{type:"Feature",properties:{iso1A2:"JM",iso1A3:"JAM",iso1N3:"388",wikidata:"Q766",nameEn:"Jamaica",aliases:["JA"],groups:["029","003","419","019"],driveSide:"left",callingCodes:["1 876","1 658"]},geometry:{type:"MultiPolygon",coordinates:[[[[-75.50728,17.08879],[-78.34606,16.57862],[-78.75694,18.78765],[-76.34192,18.86145],[-75.50728,17.08879]]]]}},{type:"Feature",properties:{iso1A2:"TG",iso1A3:"TGO",iso1N3:"768",wikidata:"Q945",nameEn:"Togo",groups:["011","202","002"],callingCodes:["228"]},geometry:{type:"MultiPolygon",coordinates:[[[[0.50388,11.01011],[0.48852,10.98561],[0.50521,10.98035],[0.4958,10.93269],[0.66104,10.99964],[0.91245,10.99597],[0.8804,10.803],[0.80358,10.71459],[0.77666,10.37665],[1.35507,9.99525],[1.36624,9.5951],[1.33675,9.54765],[1.41746,9.3226],[1.5649,9.16941],[1.61838,9.0527],[1.64249,6.99562],[1.55877,6.99737],[1.61812,6.74843],[1.58105,6.68619],[1.76906,6.43189],[1.79826,6.28221],[1.62913,6.24075],[1.67336,6.02702],[1.27574,5.93551],[1.19771,6.11522],[1.19966,6.17069],[1.09187,6.17074],[1.05969,6.22998],[1.03108,6.24064],[0.99652,6.33779],[0.89283,6.33779],[0.71048,6.53083],[0.74862,6.56517],[0.63659,6.63857],[0.6497,6.73682],[0.58176,6.76049],[0.57406,6.80348],[0.52853,6.82921],[0.56508,6.92971],[0.52098,6.94391],[0.52217,6.9723],[0.59606,7.01252],[0.65327,7.31643],[0.62943,7.41099],[0.57223,7.39326],[0.52455,7.45354],[0.51979,7.58706],[0.58295,7.62368],[0.62943,7.85751],[0.58891,8.12779],[0.6056,8.13959],[0.61156,8.18324],[0.5913,8.19622],[0.63897,8.25873],[0.73432,8.29529],[0.64731,8.48866],[0.47211,8.59945],[0.37319,8.75262],[0.52455,8.87746],[0.45424,9.04581],[0.56388,9.40697],[0.49118,9.48339],[0.36485,9.49749],[0.33148,9.44812],[0.25758,9.42696],[0.2254,9.47869],[0.31241,9.50337],[0.30406,9.521],[0.2409,9.52335],[0.23851,9.57389],[0.38153,9.58682],[0.36008,9.6256],[0.29334,9.59387],[0.26712,9.66437],[0.28261,9.69022],[0.32313,9.6491],[0.34816,9.66907],[0.34816,9.71607],[0.32075,9.72781],[0.36366,10.03309],[0.41252,10.02018],[0.41371,10.06361],[0.35293,10.09412],[0.39584,10.31112],[0.33028,10.30408],[0.29453,10.41546],[0.18846,10.4096],[0.12886,10.53149],[-0.05945,10.63458],[-0.09141,10.7147],[-0.07327,10.71845],[-0.07183,10.76794],[-0.0228,10.81916],[-0.02685,10.8783],[-0.00908,10.91644],[-0.0063,10.96417],[0.03355,10.9807],[0.02395,11.06229],[0.00342,11.08317],[-0.00514,11.10763],[-0.0275,11.11202],[-0.05733,11.08628],[-0.14462,11.10811],[-0.13493,11.14075],[0.50388,11.01011]]]]}},{type:"Feature",properties:{iso1A2:"KG",iso1A3:"KGZ",iso1N3:"417",wikidata:"Q813",nameEn:"Kyrgyzstan",groups:["143","142"],callingCodes:["996"]},geometry:{type:"MultiPolygon",coordinates:[[[[74.88756,42.98612],[75.22619,42.85528],[75.29966,42.86183],[75.72174,42.79672],[75.82823,42.94848],[78.48469,42.89649],[78.91502,42.76839],[79.19763,42.804],[79.52921,42.44778],[79.97364,42.42816],[80.17807,42.21166],[80.17842,42.03211],[79.92977,42.04113],[78.3732,41.39603],[78.15757,41.38565],[78.12873,41.23091],[77.81287,41.14307],[77.76206,41.01574],[77.52723,41.00227],[77.3693,41.0375],[77.28004,41.0033],[76.99302,41.0696],[76.75681,40.95354],[76.5261,40.46114],[76.33659,40.3482],[75.96168,40.38064],[75.91361,40.2948],[75.69663,40.28642],[75.5854,40.66874],[75.22834,40.45382],[75.08243,40.43945],[74.82013,40.52197],[74.78168,40.44886],[74.85996,40.32857],[74.69875,40.34668],[74.35063,40.09742],[74.25533,40.13191],[73.97049,40.04378],[73.83006,39.76136],[73.9051,39.75073],[73.92354,39.69565],[73.94683,39.60733],[73.87018,39.47879],[73.59831,39.46425],[73.45096,39.46677],[73.31912,39.38615],[73.18454,39.35536],[72.85934,39.35116],[72.62027,39.39696],[72.33173,39.33093],[72.23834,39.17248],[72.17242,39.2661],[72.09689,39.26823],[72.04059,39.36704],[71.90601,39.27674],[71.79202,39.27355],[71.7522,39.32031],[71.80164,39.40631],[71.76816,39.45456],[71.62688,39.44056],[71.5517,39.45722],[71.55856,39.57588],[71.49814,39.61397],[71.08752,39.50704],[71.06418,39.41586],[70.7854,39.38933],[70.64087,39.58792],[70.44757,39.60128],[70.2869,39.53141],[70.11111,39.58223],[69.87491,39.53882],[69.68677,39.59281],[69.3594,39.52516],[69.26938,39.8127],[69.35649,40.01994],[69.43134,39.98431],[69.43557,39.92877],[69.53615,39.93991],[69.5057,40.03277],[69.53855,40.0887],[69.53794,40.11833],[69.55555,40.12296],[69.57615,40.10524],[69.64704,40.12165],[69.67001,40.10639],[70.01283,40.23288],[70.58297,40.00891],[70.57384,39.99394],[70.47557,39.93216],[70.55033,39.96619],[70.58912,39.95211],[70.65946,39.9878],[70.65827,40.0981],[70.7928,40.12797],[70.80495,40.16813],[70.9818,40.22392],[70.95789,40.28761],[71.05901,40.28765],[71.13042,40.34106],[71.36663,40.31593],[71.4246,40.28619],[71.51215,40.26943],[71.51549,40.22986],[71.61725,40.20615],[71.61931,40.26775],[71.68386,40.26984],[71.70569,40.20391],[71.69621,40.18492],[71.71719,40.17886],[71.73054,40.14818],[71.82646,40.21872],[71.85002,40.25647],[72.05464,40.27586],[71.96401,40.31907],[72.18648,40.49893],[72.24368,40.46091],[72.40346,40.4007],[72.44191,40.48222],[72.41513,40.50856],[72.38384,40.51535],[72.41714,40.55736],[72.34406,40.60144],[72.40517,40.61917],[72.47795,40.5532],[72.66713,40.5219],[72.66713,40.59076],[72.69579,40.59778],[72.73995,40.58409],[72.74768,40.58051],[72.74862,40.57131],[72.75982,40.57273],[72.74894,40.59592],[72.74866,40.60873],[72.80137,40.67856],[72.84754,40.67229],[72.85372,40.7116],[72.8722,40.71111],[72.93296,40.73089],[72.99133,40.76457],[73.0612,40.76678],[73.13412,40.79122],[73.13267,40.83512],[73.01869,40.84681],[72.94454,40.8094],[72.84291,40.85512],[72.68157,40.84942],[72.59136,40.86947],[72.55109,40.96046],[72.48742,40.97136],[72.45206,41.03018],[72.38511,41.02785],[72.36138,41.04384],[72.34757,41.06104],[72.34026,41.04539],[72.324,41.03381],[72.18339,40.99571],[72.17594,41.02377],[72.21061,41.05607],[72.1792,41.10621],[72.14864,41.13363],[72.17594,41.15522],[72.16433,41.16483],[72.10745,41.15483],[72.07249,41.11739],[71.85964,41.19081],[71.91457,41.2982],[71.83914,41.3546],[71.76625,41.4466],[71.71132,41.43012],[71.73054,41.54713],[71.65914,41.49599],[71.6787,41.42111],[71.57227,41.29175],[71.46688,41.31883],[71.43814,41.19644],[71.46148,41.13958],[71.40198,41.09436],[71.34877,41.16807],[71.27187,41.11015],[71.25813,41.18796],[71.11806,41.15359],[71.02193,41.19494],[70.9615,41.16393],[70.86263,41.23833],[70.77885,41.24813],[70.78572,41.36419],[70.67586,41.47953],[70.48909,41.40335],[70.17682,41.5455],[70.69777,41.92554],[71.28719,42.18033],[71.13263,42.28356],[70.94483,42.26238],[70.85973,42.30188],[70.97717,42.50147],[71.15232,42.60486],[71.17807,42.67381],[71.22785,42.69248],[71.2724,42.77853],[71.53272,42.8014],[71.62405,42.76613],[71.88792,42.83578],[73.44393,42.43098],[73.50992,42.82356],[73.55634,43.03071],[74.22489,43.24657],[74.57491,43.13702],[74.64615,43.05881],[74.70331,43.02519],[74.75,42.99029],[74.88756,42.98612]],[[70.74189,39.86319],[70.53651,39.89155],[70.52631,39.86989],[70.54998,39.85137],[70.59667,39.83542],[70.63105,39.77923],[70.74189,39.86319]],[[71.86463,39.98598],[71.78838,40.01404],[71.71511,39.96348],[71.7504,39.93701],[71.84316,39.95582],[71.86463,39.98598]],[[71.21139,40.03369],[71.12218,40.03052],[71.06305,40.1771],[71.00236,40.18154],[71.01035,40.05481],[71.11037,40.01984],[71.11668,39.99291],[71.09063,39.99],[71.10501,39.95568],[71.04979,39.89808],[71.10531,39.91354],[71.16101,39.88423],[71.23067,39.93581],[71.1427,39.95026],[71.21139,40.03369]]]]}},{type:"Feature",properties:{iso1A2:"TH",iso1A3:"THA",iso1N3:"764",wikidata:"Q869",nameEn:"Thailand",groups:["035","142"],driveSide:"left",callingCodes:["66"]},geometry:{type:"MultiPolygon",coordinates:[[[[100.08404,20.36626],[100.09999,20.31614],[100.09337,20.26293],[100.11785,20.24787],[100.1712,20.24324],[100.16668,20.2986],[100.22076,20.31598],[100.25769,20.3992],[100.33383,20.4028],[100.37439,20.35156],[100.41473,20.25625],[100.44992,20.23644],[100.4537,20.19971],[100.47567,20.19133],[100.51052,20.14928],[100.55218,20.17741],[100.58808,20.15791],[100.5094,19.87904],[100.398,19.75047],[100.49604,19.53504],[100.58219,19.49164],[100.64606,19.55884],[100.77231,19.48324],[100.90302,19.61901],[101.08928,19.59748],[101.26545,19.59242],[101.26991,19.48324],[101.21347,19.46223],[101.20604,19.35296],[101.24911,19.33334],[101.261,19.12717],[101.35606,19.04716],[101.25803,18.89545],[101.22832,18.73377],[101.27585,18.68875],[101.06047,18.43247],[101.18227,18.34367],[101.15108,18.25624],[101.19118,18.2125],[101.1793,18.0544],[101.02185,17.87637],[100.96541,17.57926],[101.15108,17.47586],[101.44667,17.7392],[101.72294,17.92867],[101.78087,18.07559],[101.88485,18.02474],[102.11359,18.21532],[102.45523,17.97106],[102.59234,17.96127],[102.60971,17.95411],[102.61432,17.92273],[102.5896,17.84889],[102.59485,17.83537],[102.68194,17.80151],[102.69946,17.81686],[102.67543,17.84529],[102.68538,17.86653],[102.75954,17.89561],[102.79044,17.93612],[102.81988,17.94233],[102.86323,17.97531],[102.95812,18.0054],[102.9912,17.9949],[103.01998,17.97095],[103.0566,18.00144],[103.07823,18.03833],[103.07343,18.12351],[103.1493,18.17799],[103.14994,18.23172],[103.17093,18.2618],[103.29757,18.30475],[103.23818,18.34875],[103.24779,18.37807],[103.30977,18.4341],[103.41044,18.4486],[103.47773,18.42841],[103.60957,18.40528],[103.699,18.34125],[103.82449,18.33979],[103.85642,18.28666],[103.93916,18.33914],[103.97725,18.33631],[104.06533,18.21656],[104.10927,18.10826],[104.21776,17.99335],[104.2757,17.86139],[104.35432,17.82871],[104.45404,17.66788],[104.69867,17.53038],[104.80061,17.39367],[104.80716,17.19025],[104.73712,17.01404],[104.7373,16.91125],[104.76442,16.84752],[104.7397,16.81005],[104.76099,16.69302],[104.73349,16.565],[104.88057,16.37311],[105.00262,16.25627],[105.06204,16.09792],[105.42001,16.00657],[105.38508,15.987],[105.34115,15.92737],[105.37959,15.84074],[105.42285,15.76971],[105.46573,15.74742],[105.61756,15.68792],[105.60446,15.53301],[105.58191,15.41031],[105.47635,15.3796],[105.4692,15.33709],[105.50662,15.32054],[105.58043,15.32724],[105.46661,15.13132],[105.61162,15.00037],[105.5121,14.80802],[105.53864,14.55731],[105.43783,14.43865],[105.20894,14.34967],[105.17748,14.34432],[105.14012,14.23873],[105.08408,14.20402],[105.02804,14.23722],[104.97667,14.38806],[104.69335,14.42726],[104.55014,14.36091],[104.27616,14.39861],[103.93836,14.3398],[103.70175,14.38052],[103.71109,14.4348],[103.53518,14.42575],[103.39353,14.35639],[103.16469,14.33075],[102.93275,14.19044],[102.91251,14.01531],[102.77864,13.93374],[102.72727,13.77806],[102.56848,13.69366],[102.5481,13.6589],[102.58635,13.6286],[102.62483,13.60883],[102.57573,13.60461],[102.5358,13.56933],[102.44601,13.5637],[102.36859,13.57488],[102.33828,13.55613],[102.361,13.50551],[102.35563,13.47307],[102.35692,13.38274],[102.34611,13.35618],[102.36001,13.31142],[102.36146,13.26006],[102.43422,13.09061],[102.46011,13.08057],[102.52275,12.99813],[102.48694,12.97537],[102.49335,12.92711],[102.53053,12.77506],[102.4994,12.71736],[102.51963,12.66117],[102.57567,12.65358],[102.7796,12.43781],[102.78116,12.40284],[102.73134,12.37091],[102.70176,12.1686],[102.77026,12.06815],[102.78427,11.98746],[102.83957,11.8519],[102.90973,11.75613],[102.91449,11.65512],[102.52395,11.25257],[102.47649,9.66162],[102.46318,7.22462],[102.09086,6.23546],[102.08127,6.22679],[102.07732,6.193],[102.09182,6.14161],[102.01835,6.05407],[101.99209,6.04075],[101.97114,6.01992],[101.9714,6.00575],[101.94712,5.98421],[101.92819,5.85511],[101.91776,5.84269],[101.89188,5.8386],[101.80144,5.74505],[101.75074,5.79091],[101.69773,5.75881],[101.58019,5.93534],[101.25524,5.78633],[101.25755,5.71065],[101.14062,5.61613],[100.98815,5.79464],[101.02708,5.91013],[101.087,5.9193],[101.12388,6.11411],[101.06165,6.14161],[101.12618,6.19431],[101.10313,6.25617],[100.85884,6.24929],[100.81045,6.45086],[100.74822,6.46231],[100.74361,6.50811],[100.66986,6.45086],[100.43027,6.52389],[100.42351,6.51762],[100.41791,6.5189],[100.41152,6.52299],[100.35413,6.54932],[100.31929,6.65413],[100.32607,6.65933],[100.32671,6.66526],[100.31884,6.66423],[100.31618,6.66781],[100.30828,6.66462],[100.29651,6.68439],[100.19511,6.72559],[100.12,6.42105],[100.0756,6.4045],[99.91873,6.50233],[99.50117,6.44501],[99.31854,5.99868],[97.19814,8.18901],[97.63455,9.60854],[98.12555,9.44056],[98.33094,9.91973],[98.47298,9.95782],[98.52291,9.92389],[98.55174,9.92804],[98.7391,10.31488],[98.81944,10.52761],[98.77275,10.62548],[98.78511,10.68351],[98.86819,10.78336],[99.0069,10.85485],[98.99701,10.92962],[99.02337,10.97217],[99.06938,10.94857],[99.32756,11.28545],[99.31573,11.32081],[99.39485,11.3925],[99.47598,11.62434],[99.5672,11.62732],[99.64108,11.78948],[99.64891,11.82699],[99.53424,12.02317],[99.56445,12.14805],[99.47519,12.1353],[99.409,12.60603],[99.29254,12.68921],[99.18905,12.84799],[99.18748,12.9898],[99.10646,13.05804],[99.12225,13.19847],[99.20617,13.20575],[99.16695,13.72621],[98.97356,14.04868],[98.56762,14.37701],[98.24874,14.83013],[98.18821,15.13125],[98.22,15.21327],[98.30446,15.30667],[98.40522,15.25268],[98.41906,15.27103],[98.39351,15.34177],[98.4866,15.39154],[98.56027,15.33471],[98.58598,15.46821],[98.541,15.65406],[98.59853,15.87197],[98.57019,16.04578],[98.69585,16.13353],[98.8376,16.11706],[98.92656,16.36425],[98.84485,16.42354],[98.68074,16.27068],[98.63817,16.47424],[98.57912,16.55983],[98.5695,16.62826],[98.51113,16.64503],[98.51833,16.676],[98.51472,16.68521],[98.51579,16.69433],[98.51043,16.70107],[98.49713,16.69022],[98.50253,16.7139],[98.46994,16.73613],[98.53833,16.81934],[98.49603,16.8446],[98.52624,16.89979],[98.39441,17.06266],[98.34566,17.04822],[98.10439,17.33847],[98.11185,17.36829],[97.91829,17.54504],[97.76407,17.71595],[97.66794,17.88005],[97.73723,17.97912],[97.60841,18.23846],[97.64116,18.29778],[97.56219,18.33885],[97.50383,18.26844],[97.34522,18.54596],[97.36444,18.57138],[97.5258,18.4939],[97.76752,18.58097],[97.73836,18.88478],[97.66487,18.9371],[97.73654,18.9812],[97.73797,19.04261],[97.83479,19.09972],[97.84024,19.22217],[97.78606,19.26769],[97.84186,19.29526],[97.78769,19.39429],[97.88423,19.5041],[97.84715,19.55782],[98.04364,19.65755],[98.03314,19.80941],[98.13829,19.78541],[98.24884,19.67876],[98.51182,19.71303],[98.56065,19.67807],[98.83661,19.80931],[98.98679,19.7419],[99.0735,20.10298],[99.20328,20.12877],[99.416,20.08614],[99.52943,20.14811],[99.5569,20.20676],[99.46077,20.36198],[99.46008,20.39673],[99.68255,20.32077],[99.81096,20.33687],[99.86383,20.44371],[99.88211,20.44488],[99.88451,20.44596],[99.89168,20.44548],[99.89301,20.44311],[99.89692,20.44789],[99.90499,20.4487],[99.91616,20.44986],[99.95721,20.46301],[100.08404,20.36626]]]]}},{type:"Feature",properties:{iso1A2:"KN",iso1A3:"KNA",iso1N3:"659",wikidata:"Q763",nameEn:"St. Kitts and Nevis",groups:["029","003","419","019"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["1 869"]},geometry:{type:"MultiPolygon",coordinates:[[[[-62.27053,17.22145],[-62.62949,16.82364],[-63.11114,17.23125],[-62.76692,17.64353],[-62.27053,17.22145]]]]}},{type:"Feature",properties:{iso1A2:"TJ",iso1A3:"TJK",iso1N3:"762",wikidata:"Q863",nameEn:"Tajikistan",groups:["143","142"],callingCodes:["992"]},geometry:{type:"MultiPolygon",coordinates:[[[[70.45251,41.04438],[70.80009,40.72825],[70.49871,40.52503],[70.32626,40.45174],[70.37511,40.38605],[70.57149,40.3442],[70.56394,40.26421],[70.62342,40.17396],[70.8607,40.217],[70.9818,40.22392],[70.80495,40.16813],[70.7928,40.12797],[70.65827,40.0981],[70.65946,39.9878],[70.58912,39.95211],[70.55033,39.96619],[70.47557,39.93216],[70.57384,39.99394],[70.58297,40.00891],[70.01283,40.23288],[69.67001,40.10639],[69.64704,40.12165],[69.57615,40.10524],[69.55555,40.12296],[69.53794,40.11833],[69.53855,40.0887],[69.5057,40.03277],[69.53615,39.93991],[69.43557,39.92877],[69.43134,39.98431],[69.35649,40.01994],[69.26938,39.8127],[69.3594,39.52516],[69.68677,39.59281],[69.87491,39.53882],[70.11111,39.58223],[70.2869,39.53141],[70.44757,39.60128],[70.64087,39.58792],[70.7854,39.38933],[71.06418,39.41586],[71.08752,39.50704],[71.49814,39.61397],[71.55856,39.57588],[71.5517,39.45722],[71.62688,39.44056],[71.76816,39.45456],[71.80164,39.40631],[71.7522,39.32031],[71.79202,39.27355],[71.90601,39.27674],[72.04059,39.36704],[72.09689,39.26823],[72.17242,39.2661],[72.23834,39.17248],[72.33173,39.33093],[72.62027,39.39696],[72.85934,39.35116],[73.18454,39.35536],[73.31912,39.38615],[73.45096,39.46677],[73.59831,39.46425],[73.59241,39.40843],[73.5004,39.38402],[73.55396,39.3543],[73.54572,39.27567],[73.60638,39.24534],[73.75823,39.023],[73.81728,39.04007],[73.82964,38.91517],[73.7445,38.93867],[73.7033,38.84782],[73.80656,38.66449],[73.79806,38.61106],[73.97933,38.52945],[74.17022,38.65504],[74.51217,38.47034],[74.69619,38.42947],[74.69894,38.22155],[74.80331,38.19889],[74.82665,38.07359],[74.9063,38.03033],[74.92416,37.83428],[75.00935,37.77486],[74.8912,37.67576],[74.94338,37.55501],[75.06011,37.52779],[75.15899,37.41443],[75.09719,37.37297],[75.12328,37.31839],[74.88887,37.23275],[74.8294,37.3435],[74.68383,37.3948],[74.56161,37.37734],[74.41055,37.3948],[74.23339,37.41116],[74.20308,37.34208],[73.8564,37.26158],[73.82552,37.22659],[73.64974,37.23643],[73.61129,37.27469],[73.76647,37.33913],[73.77197,37.4417],[73.29633,37.46495],[73.06884,37.31729],[72.79693,37.22222],[72.66381,37.02014],[72.54095,37.00007],[72.31676,36.98115],[71.83229,36.68084],[71.67083,36.67346],[71.57195,36.74943],[71.51502,36.89128],[71.48481,36.93218],[71.46923,36.99925],[71.45578,37.03094],[71.43097,37.05855],[71.44127,37.11856],[71.4494,37.18137],[71.4555,37.21418],[71.47386,37.2269],[71.48339,37.23937],[71.4824,37.24921],[71.48536,37.26017],[71.50674,37.31502],[71.49821,37.31975],[71.4862,37.33405],[71.47685,37.40281],[71.49612,37.4279],[71.5256,37.47971],[71.50616,37.50733],[71.49693,37.53527],[71.5065,37.60912],[71.51972,37.61945],[71.54186,37.69691],[71.55234,37.73209],[71.53053,37.76534],[71.54324,37.77104],[71.55752,37.78677],[71.59255,37.79956],[71.58843,37.92425],[71.51565,37.95349],[71.32871,37.88564],[71.296,37.93403],[71.2809,37.91995],[71.24969,37.93031],[71.27278,37.96496],[71.27622,37.99946],[71.28922,38.01272],[71.29878,38.04429],[71.36444,38.15358],[71.37803,38.25641],[71.33869,38.27335],[71.33114,38.30339],[71.21291,38.32797],[71.1451,38.40106],[71.10957,38.40671],[71.10592,38.42077],[71.09542,38.42517],[71.0556,38.40176],[71.03545,38.44779],[70.98693,38.48862],[70.92728,38.43021],[70.88719,38.46826],[70.84376,38.44688],[70.82538,38.45394],[70.81697,38.44507],[70.80521,38.44447],[70.79766,38.44944],[70.78702,38.45031],[70.78581,38.45502],[70.77132,38.45548],[70.75455,38.4252],[70.72485,38.4131],[70.69807,38.41861],[70.67438,38.40597],[70.6761,38.39144],[70.69189,38.37031],[70.64966,38.34999],[70.61526,38.34774],[70.60407,38.28046],[70.54673,38.24541],[70.4898,38.12546],[70.17206,37.93276],[70.1863,37.84296],[70.27694,37.81258],[70.28243,37.66706],[70.15015,37.52519],[69.95971,37.5659],[69.93362,37.61378],[69.84435,37.60616],[69.80041,37.5746],[69.51888,37.5844],[69.44954,37.4869],[69.36645,37.40462],[69.45022,37.23315],[69.39529,37.16752],[69.25152,37.09426],[69.03274,37.25174],[68.96407,37.32603],[68.88168,37.33368],[68.91189,37.26704],[68.80889,37.32494],[68.81438,37.23862],[68.6798,37.27906],[68.61851,37.19815],[68.41888,37.13906],[68.41201,37.10402],[68.29253,37.10621],[68.27605,37.00977],[68.18542,37.02074],[68.02194,36.91923],[67.87917,37.0591],[67.7803,37.08978],[67.78329,37.1834],[67.8474,37.31594],[67.81566,37.43107],[68.12635,37.93],[68.27159,37.91477],[68.40343,38.19484],[68.13289,38.40822],[68.06274,38.39435],[68.11366,38.47169],[68.05873,38.56087],[68.0807,38.64136],[68.05598,38.71641],[68.12877,38.73677],[68.06948,38.82115],[68.19743,38.85985],[68.09704,39.02589],[67.68915,39.00775],[67.67833,39.14479],[67.33226,39.23739],[67.36522,39.31287],[67.45998,39.315],[67.46822,39.46146],[67.39681,39.52505],[67.46547,39.53564],[67.44899,39.57799],[67.62889,39.60234],[67.70992,39.66156],[68.12053,39.56317],[68.54166,39.53929],[68.61972,39.68905],[68.63071,39.85265],[68.88889,39.87163],[68.93695,39.91167],[68.84906,40.04952],[68.96579,40.06949],[69.01935,40.11466],[69.01523,40.15771],[68.62796,40.07789],[68.52771,40.11676],[68.5332,40.14826],[68.77902,40.20492],[68.79276,40.17555],[68.84357,40.18604],[68.85832,40.20885],[69.04544,40.22904],[69.15659,40.2162],[69.2074,40.21488],[69.30448,40.18774],[69.30104,40.24502],[69.25229,40.26362],[69.24817,40.30357],[69.30808,40.2821],[69.32833,40.29794],[69.33794,40.34819],[69.30774,40.36102],[69.28525,40.41894],[69.27066,40.49274],[69.21063,40.54469],[69.2643,40.57506],[69.3455,40.57988],[69.32834,40.70233],[69.38327,40.7918],[69.53021,40.77621],[69.59441,40.70181],[69.69434,40.62615],[70.36655,40.90296],[70.38028,41.02014],[70.45251,41.04438]]],[[[70.68112,40.90612],[70.6721,40.90555],[70.57501,40.98941],[70.54223,40.98787],[70.56077,41.00642],[70.6158,40.97661],[70.68112,40.90612]]],[[[70.74189,39.86319],[70.63105,39.77923],[70.59667,39.83542],[70.54998,39.85137],[70.52631,39.86989],[70.53651,39.89155],[70.74189,39.86319]]]]}},{type:"Feature",properties:{iso1A2:"AG",iso1A3:"ATG",iso1N3:"028",wikidata:"Q781",nameEn:"Antigua and Barbuda",groups:["029","003","419","019"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["1 268"]},geometry:{type:"MultiPolygon",coordinates:[[[[-62.12601,17.9235],[-61.45764,17.9187],[-61.44461,16.81958],[-61.83929,16.66647],[-62.14123,17.02632],[-62.52079,16.69392],[-62.62949,16.82364],[-62.27053,17.22145],[-62.12601,17.9235]]]]}},{type:"Feature",properties:{iso1A2:"TK",iso1A3:"TKL",iso1N3:"772",wikidata:"Q36823",nameEn:"Tokelau",country:"NZ",groups:["061","009"],driveSide:"left",callingCodes:["690"]},geometry:{type:"MultiPolygon",coordinates:[[[[-167.75195,-10.12005],[-174.17993,-10.13616],[-174.18707,-7.54408],[-167.75329,-7.52784],[-167.75195,-10.12005]]]]}},{type:"Feature",properties:{iso1A2:"AT",iso1A3:"AUT",iso1N3:"040",wikidata:"Q40",nameEn:"Austria",groups:["EU","155","150"],callingCodes:["43"]},geometry:{type:"MultiPolygon",coordinates:[[[[15.34823,48.98444],[15.48027,48.94481],[15.51357,48.91549],[15.61622,48.89541],[15.6921,48.85973],[15.75341,48.8516],[15.78087,48.87644],[15.84404,48.86921],[16.06034,48.75436],[16.37345,48.729],[16.40915,48.74576],[16.46134,48.80865],[16.67008,48.77699],[16.68518,48.7281],[16.71883,48.73806],[16.79779,48.70998],[16.90354,48.71541],[16.93955,48.60371],[16.94611,48.53614],[16.85204,48.44968],[16.8497,48.38321],[16.83588,48.3844],[16.83317,48.38138],[16.84243,48.35258],[16.90903,48.32519],[16.89461,48.31332],[16.97701,48.17385],[17.02919,48.13996],[17.05735,48.14179],[17.09168,48.09366],[17.07039,48.0317],[17.16001,48.00636],[17.09786,47.97336],[17.11022,47.92461],[17.08275,47.87719],[17.00997,47.86245],[17.07039,47.81129],[17.05048,47.79377],[17.08893,47.70928],[16.87538,47.68895],[16.86509,47.72268],[16.82938,47.68432],[16.7511,47.67878],[16.72089,47.73469],[16.65679,47.74197],[16.61183,47.76171],[16.54779,47.75074],[16.53514,47.73837],[16.55129,47.72268],[16.4222,47.66537],[16.58699,47.61772],[16.64193,47.63114],[16.71059,47.52692],[16.64821,47.50155],[16.6718,47.46139],[16.57152,47.40868],[16.52414,47.41007],[16.49908,47.39416],[16.45104,47.41181],[16.47782,47.25918],[16.44142,47.25079],[16.43663,47.21127],[16.41739,47.20649],[16.42801,47.18422],[16.4523,47.18812],[16.46442,47.16845],[16.44932,47.14418],[16.52863,47.13974],[16.46134,47.09395],[16.52176,47.05747],[16.43936,47.03548],[16.51369,47.00084],[16.28202,47.00159],[16.27594,46.9643],[16.22403,46.939],[16.19904,46.94134],[16.10983,46.867],[16.05786,46.83927],[15.99054,46.82772],[15.99126,46.78199],[15.98432,46.74991],[15.99769,46.7266],[16.02808,46.71094],[16.04347,46.68694],[16.04036,46.6549],[15.99988,46.67947],[15.98512,46.68463],[15.94864,46.68769],[15.87691,46.7211],[15.8162,46.71897],[15.78518,46.70712],[15.76771,46.69863],[15.73823,46.70011],[15.72279,46.69548],[15.69523,46.69823],[15.67411,46.70735],[15.6543,46.70616],[15.6543,46.69228],[15.6365,46.6894],[15.63255,46.68069],[15.62317,46.67947],[15.59826,46.68908],[15.54533,46.66985],[15.55333,46.64988],[15.54431,46.6312],[15.46906,46.61321],[15.45514,46.63697],[15.41235,46.65556],[15.23711,46.63994],[15.14215,46.66131],[15.01451,46.641],[14.98024,46.6009],[14.96002,46.63459],[14.92283,46.60848],[14.87129,46.61],[14.86419,46.59411],[14.83549,46.56614],[14.81836,46.51046],[14.72185,46.49974],[14.66892,46.44936],[14.5942,46.43434],[14.56463,46.37208],[14.52176,46.42617],[14.45877,46.41717],[14.42608,46.44614],[14.314,46.43327],[14.28326,46.44315],[14.15989,46.43327],[14.12097,46.47724],[14.04002,46.49117],[14.00422,46.48474],[13.89837,46.52331],[13.7148,46.5222],[13.64088,46.53438],[13.27627,46.56059],[12.94445,46.60401],[12.59992,46.6595],[12.38708,46.71529],[12.27591,46.88651],[12.2006,46.88854],[12.11675,47.01241],[12.21781,47.03996],[12.19254,47.09331],[11.74789,46.98484],[11.50739,47.00644],[11.33355,46.99862],[11.10618,46.92966],[11.00764,46.76896],[10.72974,46.78972],[10.75753,46.82258],[10.66405,46.87614],[10.54783,46.84505],[10.47197,46.85698],[10.48376,46.93891],[10.36933,47.00212],[10.30031,46.92093],[10.24128,46.93147],[10.22675,46.86942],[10.10715,46.84296],[9.98058,46.91434],[9.88266,46.93343],[9.87935,47.01337],[9.60717,47.06091],[9.61216,47.07732],[9.63395,47.08443],[9.62623,47.14685],[9.56539,47.17124],[9.58264,47.20673],[9.56981,47.21926],[9.55176,47.22585],[9.56766,47.24281],[9.53116,47.27029],[9.54773,47.2809],[9.55857,47.29919],[9.58513,47.31334],[9.59978,47.34671],[9.62476,47.36639],[9.65427,47.36824],[9.66243,47.37136],[9.6711,47.37824],[9.67445,47.38429],[9.67334,47.39191],[9.6629,47.39591],[9.65136,47.40504],[9.65043,47.41937],[9.6446,47.43233],[9.64483,47.43842],[9.65863,47.44847],[9.65728,47.45383],[9.6423,47.45599],[9.62475,47.45685],[9.62158,47.45858],[9.60841,47.47178],[9.60484,47.46358],[9.60205,47.46165],[9.59482,47.46305],[9.58208,47.48344],[9.56312,47.49495],[9.55125,47.53629],[9.72736,47.53457],[9.76748,47.5934],[9.80254,47.59419],[9.82591,47.58158],[9.8189,47.54688],[9.87499,47.52953],[9.87733,47.54688],[9.92407,47.53111],[9.96029,47.53899],[10.00003,47.48216],[10.03859,47.48927],[10.07131,47.45531],[10.09001,47.46005],[10.1052,47.4316],[10.06897,47.40709],[10.09819,47.35724],[10.11805,47.37228],[10.16362,47.36674],[10.17648,47.38889],[10.2127,47.38019],[10.22774,47.38904],[10.23757,47.37609],[10.19998,47.32832],[10.2147,47.31014],[10.17648,47.29149],[10.17531,47.27167],[10.23257,47.27088],[10.33424,47.30813],[10.39851,47.37623],[10.4324,47.38494],[10.4359,47.41183],[10.47446,47.43318],[10.46278,47.47901],[10.44291,47.48453],[10.4324,47.50111],[10.44992,47.5524],[10.43473,47.58394],[10.47329,47.58552],[10.48849,47.54057],[10.56912,47.53584],[10.60337,47.56755],[10.63456,47.5591],[10.68832,47.55752],[10.6965,47.54253],[10.7596,47.53228],[10.77596,47.51729],[10.88814,47.53701],[10.91268,47.51334],[10.86945,47.5015],[10.87061,47.4786],[10.90918,47.48571],[10.93839,47.48018],[10.92437,47.46991],[10.98513,47.42882],[10.97111,47.41617],[10.97111,47.39561],[11.11835,47.39719],[11.12536,47.41222],[11.20482,47.43198],[11.25157,47.43277],[11.22002,47.3964],[11.27844,47.39956],[11.29597,47.42566],[11.33804,47.44937],[11.4175,47.44621],[11.38128,47.47465],[11.4362,47.51413],[11.52618,47.50939],[11.58578,47.52281],[11.58811,47.55515],[11.60681,47.57881],[11.63934,47.59202],[11.84052,47.58354],[11.85572,47.60166],[12.0088,47.62451],[12.02282,47.61033],[12.05788,47.61742],[12.13734,47.60639],[12.17824,47.61506],[12.18145,47.61019],[12.17737,47.60121],[12.18568,47.6049],[12.20398,47.60667],[12.20801,47.61082],[12.19895,47.64085],[12.18507,47.65984],[12.18347,47.66663],[12.16769,47.68167],[12.16217,47.70105],[12.18303,47.70065],[12.22571,47.71776],[12.2542,47.7433],[12.26238,47.73544],[12.24017,47.69534],[12.26004,47.67725],[12.27991,47.68827],[12.336,47.69534],[12.37222,47.68433],[12.43883,47.6977],[12.44117,47.6741],[12.50076,47.62293],[12.53816,47.63553],[12.57438,47.63238],[12.6071,47.6741],[12.7357,47.6787],[12.77777,47.66689],[12.76492,47.64485],[12.82101,47.61493],[12.77427,47.58025],[12.80699,47.54477],[12.84672,47.54556],[12.85256,47.52741],[12.9624,47.47452],[12.98344,47.48716],[12.9998,47.46267],[13.04537,47.49426],[13.03252,47.53373],[13.05355,47.56291],[13.04537,47.58183],[13.06641,47.58577],[13.06407,47.60075],[13.09562,47.63304],[13.07692,47.68814],[13.01382,47.72116],[12.98578,47.7078],[12.92969,47.71094],[12.91333,47.7178],[12.90274,47.72513],[12.91711,47.74026],[12.9353,47.74788],[12.94371,47.76281],[12.93202,47.77302],[12.96311,47.79957],[12.98543,47.82896],[13.00588,47.84374],[12.94163,47.92927],[12.93886,47.94046],[12.93642,47.94436],[12.93419,47.94063],[12.92668,47.93879],[12.91985,47.94069],[12.9211,47.95135],[12.91683,47.95647],[12.87476,47.96195],[12.8549,48.01122],[12.76141,48.07373],[12.74973,48.10885],[12.7617,48.12796],[12.78595,48.12445],[12.80676,48.14979],[12.82673,48.15245],[12.8362,48.15876],[12.836,48.1647],[12.84475,48.16556],[12.87126,48.20318],[12.95306,48.20629],[13.02083,48.25689],[13.0851,48.27711],[13.126,48.27867],[13.18093,48.29577],[13.26039,48.29422],[13.30897,48.31575],[13.40709,48.37292],[13.43929,48.43386],[13.42527,48.45711],[13.45727,48.51092],[13.43695,48.55776],[13.45214,48.56472],[13.46967,48.55157],[13.50663,48.57506],[13.50131,48.58091],[13.51291,48.59023],[13.57535,48.55912],[13.59705,48.57013],[13.62508,48.55501],[13.65186,48.55092],[13.66113,48.53558],[13.72802,48.51208],[13.74816,48.53058],[13.7513,48.5624],[13.76921,48.55324],[13.80519,48.58026],[13.80038,48.59487],[13.82609,48.62345],[13.81901,48.6761],[13.81283,48.68426],[13.81791,48.69832],[13.79337,48.71375],[13.81863,48.73257],[13.82266,48.75544],[13.84023,48.76988],[14.06151,48.66873],[14.01482,48.63788],[14.09104,48.5943],[14.20691,48.5898],[14.33909,48.55852],[14.43076,48.58855],[14.4587,48.64695],[14.56139,48.60429],[14.60808,48.62881],[14.66762,48.58215],[14.71794,48.59794],[14.72756,48.69502],[14.80584,48.73489],[14.80821,48.77711],[14.81545,48.7874],[14.94773,48.76268],[14.95641,48.75915],[14.9758,48.76857],[14.98112,48.77524],[14.9782,48.7766],[14.98032,48.77959],[14.95072,48.79101],[14.98917,48.90082],[14.97612,48.96983],[14.99878,49.01444],[15.15534,48.99056],[15.16358,48.94278],[15.26177,48.95766],[15.28305,48.98831],[15.34823,48.98444]]]]}},{type:"Feature",properties:{iso1A2:"TL",iso1A3:"TLS",iso1N3:"626",wikidata:"Q574",nameEn:"East Timor",aliases:["Timor-Leste","TP"],groups:["035","142"],driveSide:"left",callingCodes:["670"]},geometry:{type:"MultiPolygon",coordinates:[[[[124.46701,-9.13002],[124.45971,-9.30263],[124.38554,-9.3582],[124.35258,-9.43002],[124.3535,-9.48493],[124.28115,-9.50453],[124.28115,-9.42189],[124.21247,-9.36904],[124.14517,-9.42324],[124.10539,-9.41206],[124.04286,-9.34243],[124.04628,-9.22671],[124.33472,-9.11416],[124.92337,-8.75859],[125.31127,-8.22976],[125.65946,-8.06136],[125.87691,-8.31789],[127.42116,-8.22471],[127.55165,-9.05052],[125.68138,-9.85176],[125.09025,-9.46406],[124.97892,-9.19281],[125.04044,-9.17093],[125.09434,-9.19669],[125.18907,-9.16434],[125.18632,-9.03142],[125.11764,-8.96359],[124.97742,-9.08128],[124.94011,-8.85617],[124.46701,-9.13002]]]]}},{type:"Feature",properties:{iso1A2:"BE",iso1A3:"BEL",iso1N3:"056",wikidata:"Q31",nameEn:"Belgium",groups:["EU","155","150"],callingCodes:["32"]},geometry:{type:"MultiPolygon",coordinates:[[[[4.93295,51.44945],[4.95244,51.45207],[4.9524,51.45014],[4.93909,51.44632],[4.93295,51.44945]]],[[[4.91493,51.4353],[4.91935,51.43634],[4.92227,51.44252],[4.91811,51.44621],[4.92287,51.44741],[4.92811,51.4437],[4.92566,51.44273],[4.92815,51.43856],[4.92879,51.44161],[4.93544,51.44634],[4.94025,51.44193],[4.93416,51.44185],[4.93471,51.43861],[4.94265,51.44003],[4.93986,51.43064],[4.92952,51.42984],[4.92652,51.43329],[4.91493,51.4353]]],[[[4.82946,51.4213],[4.78314,51.43319],[4.76577,51.43046],[4.77229,51.41337],[4.78941,51.41102],[4.84988,51.41502],[4.90016,51.41404],[4.92152,51.39487],[5.00393,51.44406],[5.0106,51.47167],[5.03281,51.48679],[5.04774,51.47022],[5.07891,51.4715],[5.10456,51.43163],[5.07102,51.39469],[5.13105,51.34791],[5.13377,51.31592],[5.16222,51.31035],[5.2002,51.32243],[5.24244,51.30495],[5.22542,51.26888],[5.23814,51.26064],[5.26461,51.26693],[5.29716,51.26104],[5.33886,51.26314],[5.347,51.27502],[5.41672,51.26248],[5.4407,51.28169],[5.46519,51.2849],[5.48476,51.30053],[5.515,51.29462],[5.5569,51.26544],[5.5603,51.22249],[5.65145,51.19788],[5.65528,51.18736],[5.70344,51.1829],[5.74617,51.18928],[5.77735,51.17845],[5.77697,51.1522],[5.82564,51.16753],[5.85508,51.14445],[5.80798,51.11661],[5.8109,51.10861],[5.83226,51.10585],[5.82921,51.09328],[5.79903,51.09371],[5.79835,51.05834],[5.77258,51.06196],[5.75961,51.03113],[5.77688,51.02483],[5.76242,50.99703],[5.71864,50.96092],[5.72875,50.95428],[5.74752,50.96202],[5.75927,50.95601],[5.74644,50.94723],[5.72545,50.92312],[5.72644,50.91167],[5.71626,50.90796],[5.69858,50.91046],[5.67886,50.88142],[5.64504,50.87107],[5.64009,50.84742],[5.65259,50.82309],[5.70118,50.80764],[5.68995,50.79641],[5.70107,50.7827],[5.68091,50.75804],[5.69469,50.75529],[5.72216,50.76398],[5.73904,50.75674],[5.74356,50.7691],[5.76533,50.78159],[5.77513,50.78308],[5.80673,50.7558],[5.84548,50.76542],[5.84888,50.75448],[5.88734,50.77092],[5.89129,50.75125],[5.89132,50.75124],[5.95942,50.7622],[5.97545,50.75441],[6.01976,50.75398],[6.03889,50.74618],[6.0326,50.72647],[6.0406,50.71848],[6.04428,50.72861],[6.11707,50.72231],[6.17852,50.6245],[6.26957,50.62444],[6.2476,50.60392],[6.24888,50.59869],[6.24005,50.58732],[6.22581,50.5907],[6.20281,50.56952],[6.17739,50.55875],[6.17802,50.54179],[6.19735,50.53576],[6.19579,50.5313],[6.18716,50.52653],[6.19193,50.5212],[6.20599,50.52089],[6.22335,50.49578],[6.26637,50.50272],[6.30809,50.50058],[6.3465,50.48833],[6.34005,50.46083],[6.37219,50.45397],[6.36852,50.40776],[6.34406,50.37994],[6.3688,50.35898],[6.40785,50.33557],[6.40641,50.32425],[6.35701,50.31139],[6.32488,50.32333],[6.29949,50.30887],[6.28797,50.27458],[6.208,50.25179],[6.16853,50.2234],[6.18364,50.20815],[6.18739,50.1822],[6.14588,50.17106],[6.14132,50.14971],[6.15298,50.14126],[6.1379,50.12964],[6.1137,50.13668],[6.12028,50.16374],[6.08577,50.17246],[6.06406,50.15344],[6.03093,50.16362],[6.02488,50.18283],[5.96453,50.17259],[5.95929,50.13295],[5.89488,50.11476],[5.8857,50.07824],[5.85474,50.06342],[5.86904,50.04614],[5.8551,50.02683],[5.81866,50.01286],[5.82331,49.99662],[5.83968,49.9892],[5.83467,49.97823],[5.81163,49.97142],[5.80833,49.96451],[5.77291,49.96056],[5.77314,49.93646],[5.73621,49.89796],[5.78415,49.87922],[5.75269,49.8711],[5.75861,49.85631],[5.74567,49.85368],[5.75884,49.84811],[5.74953,49.84709],[5.74975,49.83933],[5.74076,49.83823],[5.7404,49.83452],[5.74844,49.82435],[5.74364,49.82058],[5.74953,49.81428],[5.75409,49.79239],[5.78871,49.7962],[5.82245,49.75048],[5.83149,49.74729],[5.82562,49.72395],[5.84193,49.72161],[5.86503,49.72739],[5.88677,49.70951],[5.86527,49.69291],[5.86175,49.67862],[5.9069,49.66377],[5.90164,49.6511],[5.90599,49.63853],[5.88552,49.63507],[5.88393,49.62802],[5.87609,49.62047],[5.8762,49.60898],[5.84826,49.5969],[5.84971,49.58674],[5.86986,49.58756],[5.87256,49.57539],[5.8424,49.56082],[5.84692,49.55663],[5.84143,49.5533],[5.81838,49.54777],[5.79195,49.55228],[5.77435,49.56298],[5.7577,49.55915],[5.75649,49.54321],[5.64505,49.55146],[5.60909,49.51228],[5.55001,49.52729],[5.46541,49.49825],[5.46734,49.52648],[5.43713,49.5707],[5.3974,49.61596],[5.34837,49.62889],[5.33851,49.61599],[5.3137,49.61225],[5.30214,49.63055],[5.33039,49.6555],[5.31465,49.66846],[5.26232,49.69456],[5.14545,49.70287],[5.09249,49.76193],[4.96714,49.79872],[4.85464,49.78995],[4.86965,49.82271],[4.85134,49.86457],[4.88529,49.9236],[4.78827,49.95609],[4.8382,50.06738],[4.88602,50.15182],[4.83279,50.15331],[4.82438,50.16878],[4.75237,50.11314],[4.70064,50.09384],[4.68695,49.99685],[4.5414,49.96911],[4.51098,49.94659],[4.43488,49.94122],[4.35051,49.95315],[4.31963,49.97043],[4.20532,49.95803],[4.14239,49.98034],[4.13508,50.01976],[4.16294,50.04719],[4.23101,50.06945],[4.20147,50.13535],[4.13561,50.13078],[4.16014,50.19239],[4.15524,50.21103],[4.21945,50.25539],[4.20651,50.27333],[4.17861,50.27443],[4.17347,50.28838],[4.15524,50.2833],[4.16808,50.25786],[4.13665,50.25609],[4.11954,50.30425],[4.10957,50.30234],[4.10237,50.31247],[4.0689,50.3254],[4.0268,50.35793],[3.96771,50.34989],[3.90781,50.32814],[3.84314,50.35219],[3.73911,50.34809],[3.70987,50.3191],[3.71009,50.30305],[3.66976,50.34563],[3.65709,50.36873],[3.67262,50.38663],[3.67494,50.40239],[3.66153,50.45165],[3.64426,50.46275],[3.61014,50.49568],[3.58361,50.49049],[3.5683,50.50192],[3.49509,50.48885],[3.51564,50.5256],[3.47385,50.53397],[3.44629,50.51009],[3.37693,50.49538],[3.28575,50.52724],[3.2729,50.60718],[3.23951,50.6585],[3.264,50.67668],[3.2536,50.68977],[3.26141,50.69151],[3.26063,50.70086],[3.24593,50.71389],[3.22042,50.71019],[3.20845,50.71662],[3.19017,50.72569],[3.20064,50.73547],[3.18811,50.74025],[3.18339,50.74981],[3.16476,50.76843],[3.15017,50.79031],[3.1257,50.78603],[3.11987,50.79188],[3.11206,50.79416],[3.10614,50.78303],[3.09163,50.77717],[3.04314,50.77674],[3.00537,50.76588],[2.96778,50.75242],[2.95019,50.75138],[2.90873,50.702],[2.91036,50.6939],[2.90069,50.69263],[2.88504,50.70656],[2.87937,50.70298],[2.86985,50.7033],[2.8483,50.72276],[2.81056,50.71773],[2.71165,50.81295],[2.63331,50.81457],[2.59093,50.91751],[2.63074,50.94746],[2.57551,51.00326],[2.55904,51.07014],[2.18458,51.52087],[2.56575,51.85301],[3.36263,51.37112],[3.38696,51.33436],[3.35847,51.31572],[3.38289,51.27331],[3.41704,51.25933],[3.43488,51.24135],[3.52698,51.2458],[3.51502,51.28697],[3.58939,51.30064],[3.78999,51.25766],[3.78783,51.2151],[3.90125,51.20371],[3.97889,51.22537],[4.01957,51.24504],[4.05165,51.24171],[4.16721,51.29348],[4.24024,51.35371],[4.21923,51.37443],[4.33265,51.37687],[4.34086,51.35738],[4.39292,51.35547],[4.43777,51.36989],[4.38064,51.41965],[4.39747,51.43316],[4.38122,51.44905],[4.47736,51.4778],[4.5388,51.48184],[4.54675,51.47265],[4.52846,51.45002],[4.53521,51.4243],[4.57489,51.4324],[4.65442,51.42352],[4.72935,51.48424],[4.74578,51.48937],[4.77321,51.50529],[4.78803,51.50284],[4.84139,51.4799],[4.82409,51.44736],[4.82946,51.4213]]]]}},{type:"Feature",properties:{iso1A2:"TM",iso1A3:"TKM",iso1N3:"795",wikidata:"Q874",nameEn:"Turkmenistan",groups:["143","142"],callingCodes:["993"]},geometry:{type:"MultiPolygon",coordinates:[[[[60.5078,41.21694],[61.03261,41.25691],[61.22212,41.14946],[61.33199,41.14946],[61.39732,41.19873],[61.4446,41.29407],[61.87856,41.12257],[62.11751,40.58242],[62.34273,40.43206],[62.43337,39.98528],[63.6913,39.27666],[63.70778,39.22349],[64.19086,38.95561],[64.32576,38.98691],[65.55873,38.29052],[65.83913,38.25733],[66.24013,38.16238],[66.41042,38.02403],[66.56697,38.0435],[66.67684,37.96776],[66.53676,37.80084],[66.52852,37.58568],[66.65761,37.45497],[66.52303,37.39827],[66.55743,37.35409],[66.30993,37.32409],[65.72274,37.55438],[65.64137,37.45061],[65.64263,37.34388],[65.51778,37.23881],[64.97945,37.21913],[64.61141,36.6351],[64.62514,36.44311],[64.57295,36.34362],[64.43288,36.24401],[64.05385,36.10433],[63.98519,36.03773],[63.56496,35.95106],[63.53475,35.90881],[63.29579,35.85985],[63.12276,35.86208],[63.10318,35.81782],[63.23262,35.67487],[63.10079,35.63024],[63.12276,35.53196],[63.0898,35.43131],[62.90853,35.37086],[62.74098,35.25432],[62.62288,35.22067],[62.48006,35.28796],[62.29878,35.13312],[62.29191,35.25964],[62.15871,35.33278],[62.05709,35.43803],[61.97743,35.4604],[61.77693,35.41341],[61.58742,35.43803],[61.27371,35.61482],[61.22719,35.67038],[61.26152,35.80749],[61.22444,35.92879],[61.12007,35.95992],[61.22719,36.12759],[61.1393,36.38782],[61.18187,36.55348],[61.14516,36.64644],[60.34767,36.63214],[60.00768,37.04102],[59.74678,37.12499],[59.55178,37.13594],[59.39385,37.34257],[59.39797,37.47892],[59.33507,37.53146],[59.22905,37.51161],[58.9338,37.67374],[58.6921,37.64548],[58.5479,37.70526],[58.47786,37.6433],[58.39959,37.63134],[58.22999,37.6856],[58.21399,37.77281],[57.79534,37.89299],[57.35042,37.98546],[57.37236,38.09321],[57.21169,38.28965],[57.03453,38.18717],[56.73928,38.27887],[56.62255,38.24005],[56.43303,38.26054],[56.32454,38.18502],[56.33278,38.08132],[55.97847,38.08024],[55.76561,38.12238],[55.44152,38.08564],[55.13412,37.94705],[54.851,37.75739],[54.77684,37.62264],[54.81804,37.61285],[54.77822,37.51597],[54.67247,37.43532],[54.58664,37.45809],[54.36211,37.34912],[54.24565,37.32047],[53.89734,37.3464],[51.7708,40.29239],[52.26048,41.69249],[52.47884,41.78034],[52.97575,42.1308],[54.20635,42.38477],[54.95182,41.92424],[55.45471,41.25609],[56.00314,41.32584],[57.03423,41.25435],[57.13796,41.36625],[57.03359,41.41777],[56.96218,41.80383],[57.03633,41.92043],[57.30275,42.14076],[57.6296,42.16519],[57.84932,42.18555],[57.92897,42.24047],[57.90975,42.4374],[57.99214,42.50021],[58.3492,42.43335],[58.40688,42.29535],[58.51674,42.30348],[58.29427,42.56497],[58.14321,42.62159],[58.27504,42.69632],[58.57991,42.64988],[58.6266,42.79314],[58.93422,42.5407],[59.17317,42.52248],[59.2955,42.37064],[59.4341,42.29738],[59.94633,42.27655],[60.00539,42.212],[59.96419,42.1428],[60.04659,42.08982],[60.0356,42.01028],[59.95046,41.97966],[60.33223,41.75058],[60.08504,41.80997],[60.06032,41.76287],[60.18117,41.60082],[60.06581,41.4363],[60.5078,41.21694]]]]}},{type:"Feature",properties:{iso1A2:"BN",iso1A3:"BRN",iso1N3:"096",wikidata:"Q921",nameEn:"Brunei",groups:["035","142"],driveSide:"left",callingCodes:["673"]},geometry:{type:"MultiPolygon",coordinates:[[[[115.16236,5.01011],[115.15092,4.87604],[115.20737,4.8256],[115.27819,4.63661],[115.2851,4.42295],[115.36346,4.33563],[115.31275,4.30806],[115.09978,4.39123],[115.07737,4.53418],[115.04064,4.63706],[115.02278,4.74137],[115.02955,4.82087],[115.05038,4.90275],[114.99417,4.88201],[114.96982,4.81146],[114.88841,4.81905],[114.8266,4.75062],[114.77303,4.72871],[114.83189,4.42387],[114.88039,4.4257],[114.78539,4.12205],[114.64211,4.00694],[114.49922,4.13108],[114.4416,4.27588],[114.32176,4.2552],[114.32176,4.34942],[114.26876,4.49878],[114.15813,4.57],[114.07448,4.58441],[114.08532,4.64632],[115.02521,5.35005],[115.16236,5.01011]]]]}},{type:"Feature",properties:{iso1A2:"TN",iso1A3:"TUN",iso1N3:"788",wikidata:"Q948",nameEn:"Tunisia",groups:["015","002"],callingCodes:["216"]},geometry:{type:"MultiPolygon",coordinates:[[[[11.2718,37.6713],[11.66543,33.34642],[11.56255,33.16754],[11.55852,33.1409],[11.51549,33.09826],[11.46037,32.6307],[11.57828,32.48013],[11.53898,32.4138],[11.04234,32.2145],[10.7315,31.97235],[10.62788,31.96629],[10.48497,31.72956],[10.31364,31.72648],[10.12239,31.42098],[10.29516,30.90337],[9.88152,30.34074],[9.76848,30.34366],[9.55544,30.23971],[9.07483,32.07865],[8.35999,32.50101],[8.31895,32.83483],[8.1179,33.05086],[8.11433,33.10175],[7.83028,33.18851],[7.73687,33.42114],[7.54088,33.7726],[7.52851,34.06493],[7.66174,34.20167],[7.74207,34.16492],[7.81242,34.21841],[7.86264,34.3987],[8.20482,34.57575],[8.29655,34.72798],[8.25189,34.92009],[8.30727,34.95378],[8.3555,35.10007],[8.47318,35.23376],[8.30329,35.29884],[8.36086,35.47774],[8.35371,35.66373],[8.26472,35.73669],[8.2626,35.91733],[8.40731,36.42208],[8.18936,36.44939],[8.16167,36.48817],[8.47609,36.66607],[8.46537,36.7706],[8.57613,36.78062],[8.67706,36.8364],[8.62972,36.86499],[8.64044,36.9401],[8.59123,37.14286],[7.89009,38.19924],[11.2718,37.6713]]]]}},{type:"Feature",properties:{iso1A2:"BY",iso1A3:"BLR",iso1N3:"112",wikidata:"Q184",nameEn:"Belarus",groups:["151","150"],callingCodes:["375"]},geometry:{type:"MultiPolygon",coordinates:[[[[28.15217,56.16964],[28.30571,56.06035],[28.36888,56.05805],[28.37987,56.11399],[28.43068,56.09407],[28.5529,56.11705],[28.68337,56.10173],[28.63668,56.07262],[28.73418,55.97131],[29.08299,56.03427],[29.21717,55.98971],[29.44692,55.95978],[29.3604,55.75862],[29.51283,55.70294],[29.61446,55.77716],[29.80672,55.79569],[29.97975,55.87281],[30.12136,55.8358],[30.27776,55.86819],[30.30987,55.83592],[30.48257,55.81066],[30.51346,55.78982],[30.51037,55.76568],[30.63344,55.73079],[30.67464,55.64176],[30.72957,55.66268],[30.7845,55.58514],[30.86003,55.63169],[30.93419,55.6185],[30.95204,55.50667],[30.90123,55.46621],[30.93144,55.3914],[30.8257,55.3313],[30.81946,55.27931],[30.87944,55.28223],[30.97369,55.17134],[31.02071,55.06167],[31.00972,55.02783],[30.94243,55.03964],[30.9081,55.02232],[30.95754,54.98609],[30.93144,54.9585],[30.81759,54.94064],[30.8264,54.90062],[30.75165,54.80699],[30.95479,54.74346],[30.97127,54.71967],[31.0262,54.70698],[30.98226,54.68872],[30.99187,54.67046],[31.19339,54.66947],[31.21399,54.63113],[31.08543,54.50361],[31.22945,54.46585],[31.3177,54.34067],[31.30791,54.25315],[31.57002,54.14535],[31.89599,54.0837],[31.88744,54.03653],[31.85019,53.91801],[31.77028,53.80015],[31.89137,53.78099],[32.12621,53.81586],[32.36663,53.7166],[32.45717,53.74039],[32.50112,53.68594],[32.40499,53.6656],[32.47777,53.5548],[32.74968,53.45597],[32.73257,53.33494],[32.51725,53.28431],[32.40773,53.18856],[32.15368,53.07594],[31.82373,53.10042],[31.787,53.18033],[31.62496,53.22886],[31.56316,53.19432],[31.40523,53.21406],[31.36403,53.13504],[31.3915,53.09712],[31.33519,53.08805],[31.32283,53.04101],[31.24147,53.031],[31.35667,52.97854],[31.592,52.79011],[31.57277,52.71613],[31.50406,52.69707],[31.63869,52.55361],[31.56316,52.51518],[31.61397,52.48843],[31.62084,52.33849],[31.57971,52.32146],[31.70735,52.26711],[31.6895,52.1973],[31.77877,52.18636],[31.7822,52.11406],[31.38326,52.12991],[31.25142,52.04131],[31.13332,52.1004],[30.95589,52.07775],[30.90897,52.00699],[30.76443,51.89739],[30.68804,51.82806],[30.51946,51.59649],[30.64992,51.35014],[30.56203,51.25655],[30.36153,51.33984],[30.34642,51.42555],[30.17888,51.51025],[29.77376,51.4461],[29.7408,51.53417],[29.54372,51.48372],[29.49773,51.39814],[29.42357,51.4187],[29.32881,51.37843],[29.25191,51.49828],[29.25603,51.57089],[29.20659,51.56918],[29.16402,51.64679],[29.1187,51.65872],[28.99098,51.56833],[28.95528,51.59222],[28.81795,51.55552],[28.76027,51.48802],[28.78224,51.45294],[28.75615,51.41442],[28.73143,51.46236],[28.69161,51.44695],[28.64429,51.5664],[28.47051,51.59734],[28.37592,51.54505],[28.23452,51.66988],[28.10658,51.57857],[27.95827,51.56065],[27.91844,51.61952],[27.85253,51.62293],[27.76052,51.47604],[27.67125,51.50854],[27.71932,51.60672],[27.55727,51.63486],[27.51058,51.5854],[27.47212,51.61184],[27.24828,51.60161],[27.26613,51.65957],[27.20948,51.66713],[27.20602,51.77291],[26.99422,51.76933],[26.9489,51.73788],[26.80043,51.75777],[26.69759,51.82284],[26.46962,51.80501],[26.39367,51.87315],[26.19084,51.86781],[26.00408,51.92967],[25.83217,51.92587],[25.80574,51.94556],[25.73673,51.91973],[25.46163,51.92205],[25.20228,51.97143],[24.98784,51.91273],[24.37123,51.88222],[24.29021,51.80841],[24.3163,51.75063],[24.13075,51.66979],[23.99907,51.58369],[23.8741,51.59734],[23.91118,51.63316],[23.7766,51.66809],[23.60906,51.62122],[23.6736,51.50255],[23.62751,51.50512],[23.56236,51.53673],[23.57053,51.55938],[23.53198,51.74298],[23.62691,51.78208],[23.61523,51.92066],[23.68733,51.9906],[23.64066,52.07626],[23.61,52.11264],[23.54314,52.12148],[23.47859,52.18215],[23.20071,52.22848],[23.18196,52.28812],[23.34141,52.44845],[23.45112,52.53774],[23.58296,52.59868],[23.73615,52.6149],[23.93763,52.71332],[23.91805,52.94016],[23.94689,52.95919],[23.92184,53.02079],[23.87548,53.0831],[23.91393,53.16469],[23.85657,53.22923],[23.81995,53.24131],[23.62004,53.60942],[23.51284,53.95052],[23.61677,53.92691],[23.71726,53.93379],[23.80543,53.89558],[23.81309,53.94205],[23.95098,53.9613],[23.98837,53.92554],[24.19638,53.96405],[24.34128,53.90076],[24.44411,53.90076],[24.62275,54.00217],[24.69652,54.01901],[24.69185,53.96543],[24.74279,53.96663],[24.85311,54.02862],[24.77131,54.11091],[24.96894,54.17589],[24.991,54.14241],[25.0728,54.13419],[25.19199,54.219],[25.22705,54.26271],[25.35559,54.26544],[25.509,54.30267],[25.56823,54.25212],[25.51452,54.17799],[25.54724,54.14925],[25.64875,54.1259],[25.71084,54.16704],[25.78563,54.15747],[25.78553,54.23327],[25.68513,54.31727],[25.55425,54.31591],[25.5376,54.33158],[25.63371,54.42075],[25.62203,54.4656],[25.64813,54.48704],[25.68045,54.5321],[25.75977,54.57252],[25.74122,54.80108],[25.89462,54.93438],[25.99129,54.95705],[26.05907,54.94631],[26.13386,54.98924],[26.20397,54.99729],[26.26941,55.08032],[26.23202,55.10439],[26.30628,55.12536],[26.35121,55.1525],[26.46249,55.12814],[26.51481,55.16051],[26.54753,55.14181],[26.69243,55.16718],[26.68075,55.19787],[26.72983,55.21788],[26.73017,55.24226],[26.835,55.28182],[26.83266,55.30444],[26.80929,55.31642],[26.6714,55.33902],[26.5709,55.32572],[26.44937,55.34832],[26.5522,55.40277],[26.55094,55.5093],[26.63167,55.57887],[26.63231,55.67968],[26.64888,55.70515],[26.71802,55.70645],[26.76872,55.67658],[26.87448,55.7172],[26.97153,55.8102],[27.1559,55.85032],[27.27804,55.78299],[27.3541,55.8089],[27.61683,55.78558],[27.63065,55.89687],[27.97865,56.11849],[28.15217,56.16964]]]]}},{type:"Feature",properties:{iso1A2:"TO",iso1A3:"TON",iso1N3:"776",wikidata:"Q678",nameEn:"Tonga",groups:["061","009"],driveSide:"left",callingCodes:["676"]},geometry:{type:"MultiPolygon",coordinates:[[[[-176.74538,-22.89767],[-176.76826,-14.95183],[-174.17905,-14.94502],[-173.13438,-14.94228],[-173.11048,-23.23027],[-173.10761,-24.19665],[-180,-24.21376],[-180,-22.90585],[-176.74538,-22.89767]]]]}},{type:"Feature",properties:{iso1A2:"CI",iso1A3:"CIV",iso1N3:"384",wikidata:"Q1008",nameEn:"Côte d'Ivoire",groups:["011","202","002"],callingCodes:["225"]},geometry:{type:"MultiPolygon",coordinates:[[[[-7.52774,3.7105],[-7.53259,4.35145],[-7.59349,4.8909],[-7.53876,4.94294],[-7.55369,5.08667],[-7.48901,5.14118],[-7.46165,5.26256],[-7.36463,5.32944],[-7.43428,5.42355],[-7.37209,5.61173],[-7.43926,5.74787],[-7.43677,5.84687],[-7.46165,5.84934],[-7.48155,5.80974],[-7.67309,5.94337],[-7.70294,5.90625],[-7.78254,5.99037],[-7.79747,6.07696],[-7.8497,6.08932],[-7.83478,6.20309],[-7.90692,6.27728],[-8.00642,6.31684],[-8.17557,6.28222],[-8.3298,6.36381],[-8.38453,6.35887],[-8.45666,6.49977],[-8.48652,6.43797],[-8.59456,6.50612],[-8.31736,6.82837],[-8.29249,7.1691],[-8.37458,7.25794],[-8.41935,7.51203],[-8.47114,7.55676],[-8.4003,7.6285],[-8.21374,7.54466],[-8.09931,7.78626],[-8.13414,7.87991],[-8.06449,8.04989],[-7.94695,8.00925],[-7.99919,8.11023],[-7.98675,8.20134],[-8.062,8.16071],[-8.2411,8.24196],[-8.22991,8.48438],[-7.92518,8.50652],[-7.65653,8.36873],[-7.69882,8.66148],[-7.95503,8.81146],[-7.92518,8.99332],[-7.73862,9.08422],[-7.90777,9.20456],[-7.85056,9.41812],[-8.03463,9.39604],[-8.14657,9.55062],[-8.09434,9.86936],[-8.15652,9.94288],[-8.11921,10.04577],[-8.01225,10.1021],[-7.97971,10.17117],[-7.92107,10.15577],[-7.63048,10.46334],[-7.54462,10.40921],[-7.52261,10.4655],[-7.44555,10.44602],[-7.3707,10.24677],[-7.13331,10.24877],[-7.0603,10.14711],[-7.00966,10.15794],[-6.97444,10.21644],[-7.01186,10.25111],[-6.93921,10.35291],[-6.68164,10.35074],[-6.63541,10.66893],[-6.52974,10.59104],[-6.42847,10.5694],[-6.40646,10.69922],[-6.325,10.68624],[-6.24795,10.74248],[-6.1731,10.46983],[-6.18851,10.24244],[-5.99478,10.19694],[-5.78124,10.43952],[-5.65135,10.46767],[-5.51058,10.43177],[-5.39602,10.2929],[-5.12465,10.29788],[-4.96453,9.99923],[-4.96621,9.89132],[-4.6426,9.70696],[-4.31392,9.60062],[-4.25999,9.76012],[-3.69703,9.94279],[-3.31779,9.91125],[-3.27228,9.84981],[-3.19306,9.93781],[-3.16609,9.85147],[-3.00765,9.74019],[-2.93012,9.57403],[-2.76494,9.40778],[-2.68802,9.49343],[-2.69814,9.22717],[-2.77799,9.04949],[-2.66357,9.01771],[-2.58243,8.7789],[-2.49037,8.20872],[-2.62901,8.11495],[-2.61232,8.02645],[-2.67787,8.02055],[-2.74819,7.92613],[-2.78395,7.94974],[-2.79467,7.86002],[-2.92339,7.60847],[-2.97822,7.27165],[-2.95438,7.23737],[-3.23327,6.81744],[-3.21954,6.74407],[-3.25999,6.62521],[-3.01896,5.71697],[-2.95323,5.71865],[-2.96671,5.6415],[-2.93132,5.62137],[-2.85378,5.65156],[-2.76614,5.60963],[-2.72737,5.34789],[-2.77625,5.34621],[-2.73074,5.1364],[-2.75502,5.10657],[-2.95261,5.12477],[-2.96554,5.10397],[-3.063,5.13665],[-3.11073,5.12675],[-3.10675,5.08515],[-3.34019,4.17519],[-7.52774,3.7105]]]]}},{type:"Feature",properties:{iso1A2:"TR",iso1A3:"TUR",iso1N3:"792",wikidata:"Q43",nameEn:"Turkey",groups:["145","142"],callingCodes:["90"]},geometry:{type:"MultiPolygon",coordinates:[[[[41.54366,41.52185],[41.7148,41.4932],[41.7124,41.47417],[41.81939,41.43621],[41.95134,41.52466],[42.26387,41.49346],[42.51772,41.43606],[42.59202,41.58183],[42.72794,41.59714],[42.84471,41.58912],[42.78995,41.50126],[42.84899,41.47265],[42.8785,41.50516],[43.02956,41.37891],[43.21707,41.30331],[43.13373,41.25503],[43.1945,41.25242],[43.23096,41.17536],[43.36118,41.2028],[43.44973,41.17666],[43.4717,41.12611],[43.44984,41.0988],[43.47319,41.02251],[43.58683,40.98961],[43.67712,40.93084],[43.67712,40.84846],[43.74872,40.7365],[43.7425,40.66805],[43.63664,40.54159],[43.54791,40.47413],[43.60862,40.43267],[43.59928,40.34019],[43.71136,40.16673],[43.65221,40.14889],[43.65688,40.11199],[43.92307,40.01787],[44.1057,40.03555],[44.1778,40.02845],[44.26973,40.04866],[44.46635,39.97733],[44.61845,39.8281],[44.75779,39.7148],[44.80977,39.65768],[44.81043,39.62677],[44.71806,39.71124],[44.65422,39.72163],[44.6137,39.78393],[44.47298,39.68788],[44.48111,39.61579],[44.41849,39.56659],[44.42832,39.4131],[44.37921,39.4131],[44.29818,39.378],[44.22452,39.4169],[44.03667,39.39223],[44.1043,39.19842],[44.20946,39.13975],[44.18863,38.93881],[44.30322,38.81581],[44.26155,38.71427],[44.28065,38.6465],[44.32058,38.62752],[44.3207,38.49799],[44.3119,38.37887],[44.38309,38.36117],[44.44386,38.38295],[44.50115,38.33939],[44.42476,38.25763],[44.22509,37.88859],[44.3883,37.85433],[44.45948,37.77065],[44.55498,37.783],[44.62096,37.71985],[44.56887,37.6429],[44.61401,37.60165],[44.58449,37.45018],[44.81021,37.2915],[44.75986,37.21549],[44.7868,37.16644],[44.78319,37.1431],[44.76698,37.16162],[44.63179,37.19229],[44.42631,37.05825],[44.38117,37.05825],[44.35315,37.04955],[44.35937,37.02843],[44.30645,36.97373],[44.25975,36.98119],[44.18503,37.09551],[44.22239,37.15756],[44.27998,37.16501],[44.2613,37.25055],[44.13521,37.32486],[44.02002,37.33229],[43.90949,37.22453],[43.84878,37.22205],[43.82699,37.19477],[43.8052,37.22825],[43.7009,37.23692],[43.63085,37.21957],[43.56702,37.25675],[43.50787,37.24436],[43.33508,37.33105],[43.30083,37.30629],[43.11403,37.37436],[42.93705,37.32015],[42.78887,37.38615],[42.56725,37.14878],[42.35724,37.10998],[42.32313,37.17814],[42.34735,37.22548],[42.2824,37.2798],[42.26039,37.27017],[42.23683,37.2863],[42.21548,37.28026],[42.20454,37.28715],[42.22381,37.30238],[42.22257,37.31395],[42.2112,37.32491],[42.19301,37.31323],[42.18225,37.28569],[42.00894,37.17209],[41.515,37.08084],[41.21937,37.07665],[40.90856,37.13147],[40.69136,37.0996],[39.81589,36.75538],[39.21538,36.66834],[39.03217,36.70911],[38.74042,36.70629],[38.55908,36.84429],[38.38859,36.90064],[38.21064,36.91842],[37.81974,36.76055],[37.68048,36.75065],[37.49103,36.66904],[37.47253,36.63243],[37.21988,36.6736],[37.16177,36.66069],[37.10894,36.6704],[37.08279,36.63495],[37.02088,36.66422],[37.01647,36.69512],[37.04619,36.71101],[37.04399,36.73483],[36.99886,36.74012],[36.99557,36.75997],[36.66727,36.82901],[36.61581,36.74629],[36.62681,36.71189],[36.57398,36.65186],[36.58829,36.58295],[36.54206,36.49539],[36.6081,36.33772],[36.65653,36.33861],[36.68672,36.23677],[36.6125,36.22592],[36.50463,36.2419],[36.4617,36.20461],[36.39206,36.22088],[36.37474,36.01163],[36.33956,35.98687],[36.30099,36.00985],[36.28338,36.00273],[36.29769,35.96086],[36.27678,35.94839],[36.25366,35.96264],[36.19973,35.95195],[36.17441,35.92076],[36.1623,35.80925],[36.14029,35.81015],[36.13919,35.83692],[36.11827,35.85923],[35.99829,35.88242],[36.01844,35.92403],[36.00514,35.94113],[35.98499,35.94107],[35.931,35.92109],[35.51152,36.10954],[32.82353,35.70297],[29.73302,35.92555],[29.69611,36.10365],[29.61805,36.14179],[29.61002,36.1731],[29.48192,36.18377],[29.30783,36.01033],[28.23708,36.56812],[27.95037,36.46155],[27.89482,36.69898],[27.46117,36.53789],[27.24613,36.71622],[27.45627,36.9008],[27.20312,36.94571],[27.14757,37.32],[26.95583,37.64989],[26.99377,37.69034],[27.16428,37.72343],[27.05537,37.9131],[26.21136,38.17558],[26.24183,38.44695],[26.32173,38.48731],[26.21136,38.65436],[26.61814,38.81372],[26.70773,39.0312],[26.43357,39.43096],[25.94257,39.39358],[25.61285,40.17161],[26.04292,40.3958],[25.94795,40.72797],[26.03489,40.73051],[26.0754,40.72772],[26.08638,40.73214],[26.12495,40.74283],[26.12854,40.77339],[26.15685,40.80709],[26.21351,40.83298],[26.20856,40.86048],[26.26169,40.9168],[26.29441,40.89119],[26.28623,40.93005],[26.32259,40.94042],[26.35894,40.94292],[26.33297,40.98388],[26.3606,41.02027],[26.31928,41.07386],[26.32259,41.24929],[26.39861,41.25053],[26.5209,41.33993],[26.5837,41.32131],[26.62997,41.34613],[26.61767,41.42281],[26.59742,41.48058],[26.59196,41.60491],[26.5209,41.62592],[26.47958,41.67037],[26.35957,41.71149],[26.32952,41.73637],[26.33589,41.76802],[26.36952,41.82265],[26.53968,41.82653],[26.57961,41.90024],[26.56051,41.92995],[26.62996,41.97644],[26.79143,41.97386],[26.95638,42.00741],[27.03277,42.0809],[27.08486,42.08735],[27.19251,42.06028],[27.22376,42.10152],[27.27411,42.10409],[27.45478,41.96591],[27.52379,41.93756],[27.55191,41.90928],[27.69949,41.97515],[27.81235,41.94803],[27.83492,41.99709],[27.91479,41.97902],[28.02971,41.98066],[28.32297,41.98371],[34.8305,42.4581],[40.89217,41.72528],[41.54366,41.52185]]]]}},{type:"Feature",properties:{iso1A2:"CU",iso1A3:"CUB",iso1N3:"192",wikidata:"Q241",nameEn:"Cuba",groups:["029","003","419","019"],callingCodes:["53"]},geometry:{type:"MultiPolygon",coordinates:[[[[-73.62304,20.6935],[-74.81171,18.82201],[-85.77883,21.92705],[-82.02215,24.23074],[-73.62304,20.6935]]]]}},{type:"Feature",properties:{iso1A2:"TT",iso1A3:"TTO",iso1N3:"780",wikidata:"Q754",nameEn:"Trinidad and Tobago",groups:["029","003","419","019"],driveSide:"left",callingCodes:["1 868"]},geometry:{type:"MultiPolygon",coordinates:[[[[-61.62505,11.18974],[-60.07172,11.77667],[-60.89962,9.81445],[-62.08693,10.04435],[-61.62505,11.18974]]]]}},{type:"Feature",properties:{iso1A2:"DJ",iso1A3:"DJI",iso1N3:"262",wikidata:"Q977",nameEn:"Djibouti",groups:["014","202","002"],callingCodes:["253"]},geometry:{type:"MultiPolygon",coordinates:[[[[43.42425,11.70983],[42.95776,10.98533],[42.79037,10.98493],[42.75111,11.06992],[42.62989,11.09711],[42.42669,10.98493],[42.13691,10.97586],[42.06302,10.92599],[41.80056,10.97127],[41.8096,11.33606],[41.77727,11.49902],[41.82878,11.72361],[41.95461,11.81157],[42.4037,12.46478],[42.46941,12.52661],[42.6957,12.36201],[42.7996,12.42629],[42.86195,12.58747],[43.29075,12.79154],[43.32909,12.59711],[43.90659,12.3823],[43.42425,11.70983]]]]}},{type:"Feature",properties:{iso1A2:"TV",iso1A3:"TUV",iso1N3:"798",wikidata:"Q672",nameEn:"Tuvalu",groups:["061","009"],driveSide:"left",callingCodes:["688"]},geometry:{type:"MultiPolygon",coordinates:[[[[174,-5],[179.99999,-5],[179.99999,-11.5],[174,-11.5],[174,-5]]]]}},{type:"Feature",properties:{iso1A2:"EG",iso1A3:"EGY",iso1N3:"818",wikidata:"Q79",nameEn:"Egypt",groups:["015","002"],callingCodes:["20"]},geometry:{type:"MultiPolygon",coordinates:[[[[33.62659,31.82938],[34.052,31.46619],[34.21853,31.32363],[34.23572,31.2966],[34.24012,31.29591],[34.26742,31.21998],[34.92298,29.45305],[34.88293,29.37455],[34.46254,27.99552],[34.51305,27.70027],[37.8565,22.00903],[34.0765,22.00501],[33.17563,22.00405],[24.99885,21.99535],[24.99968,29.24574],[24.71117,30.17441],[25.01077,30.73861],[24.83101,31.31921],[25.06041,31.57937],[25.14001,31.67534],[25.63787,31.9359],[33.62659,31.82938]]]]}},{type:"Feature",properties:{iso1A2:"TW",iso1A3:"TWN",iso1N3:"158",wikidata:"Q865",nameEn:"Taiwan",groups:["030","142"],callingCodes:["886"]},geometry:{type:"MultiPolygon",coordinates:[[[[123.0791,22.07818],[120.69238,21.52331],[118.11703,24.39734],[118.28244,24.51231],[118.35291,24.51645],[118.42453,24.54644],[118.56434,24.49266],[120.49232,25.22863],[122.26612,25.98197],[123.0791,22.07818]]]]}},{type:"Feature",properties:{iso1A2:"FK",iso1A3:"FLK",iso1N3:"238",wikidata:"Q9648",nameEn:"Falkland Islands",country:"GB",groups:["005","419","019"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["500"]},geometry:{type:"MultiPolygon",coordinates:[[[[-63.67376,-55.11859],[-61.26735,-50.63919],[-54.56126,-51.26248],[-63.67376,-55.11859]]]]}},{type:"Feature",properties:{iso1A2:"TZ",iso1A3:"TZA",iso1N3:"834",wikidata:"Q924",nameEn:"Tanzania",groups:["014","202","002"],driveSide:"left",callingCodes:["255"]},geometry:{type:"MultiPolygon",coordinates:[[[[30.80408,-0.99911],[33.93107,-0.99298],[34.02286,-1.00779],[34.03084,-1.05101],[34.0824,-1.02264],[37.67199,-3.06222],[37.71745,-3.304],[37.5903,-3.42735],[37.63099,-3.50723],[37.75036,-3.54243],[37.81321,-3.69179],[39.21631,-4.67835],[39.44306,-4.93877],[39.62121,-4.68136],[40.14328,-4.64201],[40.74206,-10.25691],[40.44265,-10.4618],[40.00295,-10.80255],[39.58249,-10.96043],[39.24395,-11.17433],[38.88996,-11.16978],[38.47258,-11.4199],[38.21598,-11.27289],[37.93618,-11.26228],[37.8388,-11.3123],[37.76614,-11.53352],[37.3936,-11.68949],[36.80309,-11.56836],[36.62068,-11.72884],[36.19094,-11.70008],[36.19094,-11.57593],[35.82767,-11.41081],[35.63599,-11.55927],[34.96296,-11.57354],[34.91153,-11.39799],[34.79375,-11.32245],[34.63305,-11.11731],[34.61161,-11.01611],[34.67047,-10.93796],[34.65946,-10.6828],[34.57581,-10.56271],[34.51911,-10.12279],[34.54499,-10.0678],[34.03865,-9.49398],[33.95829,-9.54066],[33.9638,-9.62206],[33.93298,-9.71647],[33.76677,-9.58516],[33.48052,-9.62442],[33.31581,-9.48554],[33.14925,-9.49322],[32.99397,-9.36712],[32.95389,-9.40138],[32.76233,-9.31963],[32.75611,-9.28583],[32.53661,-9.24281],[32.49147,-9.14754],[32.43543,-9.11988],[32.25486,-9.13371],[32.16146,-9.05993],[32.08206,-9.04609],[31.98866,-9.07069],[31.94196,-9.02303],[31.94663,-8.93846],[31.81587,-8.88618],[31.71158,-8.91386],[31.57147,-8.81388],[31.57147,-8.70619],[31.37533,-8.60769],[31.00796,-8.58615],[30.79243,-8.27382],[30.2567,-7.14121],[29.52552,-6.2731],[29.43673,-4.44845],[29.63827,-4.44681],[29.75109,-4.45836],[29.77289,-4.41733],[29.82885,-4.36153],[29.88172,-4.35743],[30.03323,-4.26631],[30.22042,-4.01738],[30.45915,-3.56532],[30.84165,-3.25152],[30.83823,-2.97837],[30.6675,-2.98987],[30.57926,-2.89791],[30.4987,-2.9573],[30.40662,-2.86151],[30.52747,-2.65841],[30.41789,-2.66266],[30.54501,-2.41404],[30.83915,-2.35795],[30.89303,-2.08223],[30.80802,-1.91477],[30.84079,-1.64652],[30.71974,-1.43244],[30.57123,-1.33264],[30.50889,-1.16412],[30.45116,-1.10641],[30.47194,-1.0555],[30.64166,-1.06601],[30.70631,-1.01175],[30.76635,-0.9852],[30.80408,-0.99911]]]]}},{type:"Feature",properties:{iso1A2:"GE",iso1A3:"GEO",iso1N3:"268",wikidata:"Q230",nameEn:"Georgia",groups:["145","142"],callingCodes:["995"]},geometry:{type:"MultiPolygon",coordinates:[[[[46.42738,41.91323],[46.3984,41.84399],[46.30863,41.79133],[46.23962,41.75811],[46.20538,41.77205],[46.17891,41.72094],[46.19759,41.62327],[46.24429,41.59883],[46.26531,41.63339],[46.28182,41.60089],[46.3253,41.60912],[46.34039,41.5947],[46.34126,41.57454],[46.29794,41.5724],[46.33925,41.4963],[46.40307,41.48464],[46.4669,41.43331],[46.63658,41.37727],[46.72375,41.28609],[46.66148,41.20533],[46.63969,41.09515],[46.55096,41.1104],[46.48558,41.0576],[46.456,41.09984],[46.37661,41.10805],[46.27698,41.19011],[46.13221,41.19479],[45.95786,41.17956],[45.80842,41.2229],[45.69946,41.29545],[45.75705,41.35157],[45.71035,41.36208],[45.68389,41.3539],[45.45973,41.45898],[45.4006,41.42402],[45.31352,41.47168],[45.26285,41.46433],[45.1797,41.42231],[45.09867,41.34065],[45.0133,41.29747],[44.93493,41.25685],[44.81437,41.30371],[44.80053,41.25949],[44.81749,41.23488],[44.84358,41.23088],[44.89911,41.21366],[44.87887,41.20195],[44.82084,41.21513],[44.72814,41.20338],[44.61462,41.24018],[44.59322,41.1933],[44.46791,41.18204],[44.34417,41.2382],[44.34337,41.20312],[44.32139,41.2079],[44.18148,41.24644],[44.16591,41.19141],[43.84835,41.16329],[43.74717,41.1117],[43.67712,41.13398],[43.4717,41.12611],[43.44973,41.17666],[43.36118,41.2028],[43.23096,41.17536],[43.1945,41.25242],[43.13373,41.25503],[43.21707,41.30331],[43.02956,41.37891],[42.8785,41.50516],[42.84899,41.47265],[42.78995,41.50126],[42.84471,41.58912],[42.72794,41.59714],[42.59202,41.58183],[42.51772,41.43606],[42.26387,41.49346],[41.95134,41.52466],[41.81939,41.43621],[41.7124,41.47417],[41.7148,41.4932],[41.54366,41.52185],[40.89217,41.72528],[39.81147,43.06294],[40.0078,43.38551],[40.00853,43.40578],[40.01552,43.42025],[40.01007,43.42411],[40.03312,43.44262],[40.04445,43.47776],[40.10657,43.57344],[40.65957,43.56212],[41.64935,43.22331],[42.40563,43.23226],[42.66667,43.13917],[42.75889,43.19651],[43.03322,43.08883],[43.0419,43.02413],[43.81453,42.74297],[43.73119,42.62043],[43.95517,42.55396],[44.54202,42.75699],[44.70002,42.74679],[44.80941,42.61277],[44.88754,42.74934],[45.15318,42.70598],[45.36501,42.55268],[45.78692,42.48358],[45.61676,42.20768],[46.42738,41.91323]]]]}},{type:"Feature",properties:{iso1A2:"UA",iso1A3:"UKR",iso1N3:"804",wikidata:"Q212",nameEn:"Ukraine",groups:["151","150"],callingCodes:["380"]},geometry:{type:"MultiPolygon",coordinates:[[[[33.57318,46.10317],[33.59087,46.06013],[33.54017,46.0123],[31.62627,45.50633],[30.04414,45.08461],[29.69272,45.19227],[29.65428,45.25629],[29.68175,45.26885],[29.59798,45.38857],[29.42632,45.44545],[29.24779,45.43388],[28.96077,45.33164],[28.94292,45.28045],[28.81383,45.3384],[28.78911,45.24179],[28.71358,45.22631],[28.5735,45.24759],[28.34554,45.32102],[28.28504,45.43907],[28.21139,45.46895],[28.30201,45.54744],[28.41836,45.51715],[28.43072,45.48538],[28.51449,45.49982],[28.49252,45.56716],[28.54196,45.58062],[28.51587,45.6613],[28.47879,45.66994],[28.52823,45.73803],[28.70401,45.78019],[28.69852,45.81753],[28.78503,45.83475],[28.74383,45.96664],[28.98004,46.00385],[29.00613,46.04962],[28.94643,46.09176],[29.06656,46.19716],[28.94953,46.25852],[28.98478,46.31803],[29.004,46.31495],[28.9306,46.45699],[29.01241,46.46177],[29.02409,46.49582],[29.23547,46.55435],[29.24886,46.37912],[29.35357,46.49505],[29.49914,46.45889],[29.5939,46.35472],[29.6763,46.36041],[29.66359,46.4215],[29.74496,46.45605],[29.88329,46.35851],[29.94114,46.40114],[30.09103,46.38694],[30.16794,46.40967],[30.02511,46.45132],[29.88916,46.54302],[29.94409,46.56002],[29.9743,46.75325],[29.94522,46.80055],[29.98814,46.82358],[29.87405,46.88199],[29.75458,46.8604],[29.72986,46.92234],[29.57056,46.94766],[29.62137,47.05069],[29.61038,47.09932],[29.53044,47.07851],[29.49732,47.12878],[29.57696,47.13581],[29.54996,47.24962],[29.59665,47.25521],[29.5733,47.36508],[29.48678,47.36043],[29.47854,47.30366],[29.39889,47.30179],[29.3261,47.44664],[29.18603,47.43387],[29.11743,47.55001],[29.22414,47.60012],[29.22242,47.73607],[29.27255,47.79953],[29.20663,47.80367],[29.27804,47.88893],[29.19839,47.89261],[29.1723,47.99013],[28.9306,47.96255],[28.8414,48.03392],[28.85232,48.12506],[28.69896,48.13106],[28.53921,48.17453],[28.48428,48.0737],[28.42454,48.12047],[28.43701,48.15832],[28.38712,48.17567],[28.34009,48.13147],[28.30609,48.14018],[28.30586,48.1597],[28.34912,48.1787],[28.36996,48.20543],[28.35519,48.24957],[28.32508,48.23384],[28.2856,48.23202],[28.19314,48.20749],[28.17666,48.25963],[28.07504,48.23494],[28.09873,48.3124],[28.04527,48.32661],[27.95883,48.32368],[27.88391,48.36699],[27.87533,48.4037],[27.81902,48.41874],[27.79225,48.44244],[27.74422,48.45926],[27.6658,48.44034],[27.59027,48.46311],[27.5889,48.49224],[27.46942,48.454],[27.44333,48.41209],[27.37741,48.41026],[27.37604,48.44398],[27.32159,48.4434],[27.27855,48.37534],[27.13434,48.37288],[27.08078,48.43214],[27.0231,48.42485],[27.03821,48.37653],[26.93384,48.36558],[26.85556,48.41095],[26.71274,48.40388],[26.82809,48.31629],[26.79239,48.29071],[26.6839,48.35828],[26.62823,48.25804],[26.55202,48.22445],[26.33504,48.18418],[26.17711,47.99246],[26.05901,47.9897],[25.77723,47.93919],[25.63878,47.94924],[25.23778,47.89403],[25.11144,47.75203],[24.88896,47.7234],[24.81893,47.82031],[24.70632,47.84428],[24.61994,47.95062],[24.43578,47.97131],[24.34926,47.9244],[24.22566,47.90231],[24.11281,47.91487],[24.06466,47.95317],[24.02999,47.95087],[24.00801,47.968],[23.98553,47.96076],[23.96337,47.96672],[23.94192,47.94868],[23.89352,47.94512],[23.8602,47.9329],[23.80904,47.98142],[23.75188,47.99705],[23.66262,47.98786],[23.63894,48.00293],[23.5653,48.00499],[23.52803,48.01818],[23.4979,47.96858],[23.33577,48.0237],[23.27397,48.08245],[23.15999,48.12188],[23.1133,48.08061],[23.08858,48.00716],[23.0158,47.99338],[22.92241,48.02002],[22.94301,47.96672],[22.89849,47.95851],[22.84276,47.98602],[22.87847,48.04665],[22.81804,48.11363],[22.73427,48.12005],[22.66835,48.09162],[22.58733,48.10813],[22.59007,48.15121],[22.49806,48.25189],[22.38133,48.23726],[22.2083,48.42534],[22.14689,48.4005],[22.16023,48.56548],[22.21379,48.6218],[22.34151,48.68893],[22.42934,48.92857],[22.48296,48.99172],[22.54338,49.01424],[22.56155,49.08865],[22.89122,49.00725],[22.86336,49.10513],[22.72009,49.20288],[22.748,49.32759],[22.69444,49.49378],[22.64534,49.53094],[22.78304,49.65543],[22.80261,49.69098],[22.83179,49.69875],[22.99329,49.84249],[23.28221,50.0957],[23.67635,50.33385],[23.71382,50.38248],[23.79445,50.40481],[23.99563,50.41289],[24.03668,50.44507],[24.07048,50.5071],[24.0996,50.60752],[24.0595,50.71625],[23.95925,50.79271],[23.99254,50.83847],[24.0952,50.83262],[24.14524,50.86128],[24.04576,50.90196],[23.92217,51.00836],[23.90376,51.07697],[23.80678,51.18405],[23.63858,51.32182],[23.69905,51.40871],[23.62751,51.50512],[23.6736,51.50255],[23.60906,51.62122],[23.7766,51.66809],[23.91118,51.63316],[23.8741,51.59734],[23.99907,51.58369],[24.13075,51.66979],[24.3163,51.75063],[24.29021,51.80841],[24.37123,51.88222],[24.98784,51.91273],[25.20228,51.97143],[25.46163,51.92205],[25.73673,51.91973],[25.80574,51.94556],[25.83217,51.92587],[26.00408,51.92967],[26.19084,51.86781],[26.39367,51.87315],[26.46962,51.80501],[26.69759,51.82284],[26.80043,51.75777],[26.9489,51.73788],[26.99422,51.76933],[27.20602,51.77291],[27.20948,51.66713],[27.26613,51.65957],[27.24828,51.60161],[27.47212,51.61184],[27.51058,51.5854],[27.55727,51.63486],[27.71932,51.60672],[27.67125,51.50854],[27.76052,51.47604],[27.85253,51.62293],[27.91844,51.61952],[27.95827,51.56065],[28.10658,51.57857],[28.23452,51.66988],[28.37592,51.54505],[28.47051,51.59734],[28.64429,51.5664],[28.69161,51.44695],[28.73143,51.46236],[28.75615,51.41442],[28.78224,51.45294],[28.76027,51.48802],[28.81795,51.55552],[28.95528,51.59222],[28.99098,51.56833],[29.1187,51.65872],[29.16402,51.64679],[29.20659,51.56918],[29.25603,51.57089],[29.25191,51.49828],[29.32881,51.37843],[29.42357,51.4187],[29.49773,51.39814],[29.54372,51.48372],[29.7408,51.53417],[29.77376,51.4461],[30.17888,51.51025],[30.34642,51.42555],[30.36153,51.33984],[30.56203,51.25655],[30.64992,51.35014],[30.51946,51.59649],[30.68804,51.82806],[30.76443,51.89739],[30.90897,52.00699],[30.95589,52.07775],[31.13332,52.1004],[31.25142,52.04131],[31.38326,52.12991],[31.7822,52.11406],[31.81722,52.09955],[31.85018,52.11305],[31.96141,52.08015],[31.92159,52.05144],[32.08813,52.03319],[32.23331,52.08085],[32.2777,52.10266],[32.34044,52.1434],[32.33083,52.23685],[32.38988,52.24946],[32.3528,52.32842],[32.54781,52.32423],[32.69475,52.25535],[32.85405,52.27888],[32.89937,52.2461],[33.18913,52.3754],[33.51323,52.35779],[33.48027,52.31499],[33.55718,52.30324],[33.78789,52.37204],[34.05239,52.20132],[34.11199,52.14087],[34.09413,52.00835],[34.41136,51.82793],[34.42922,51.72852],[34.07765,51.67065],[34.17599,51.63253],[34.30562,51.5205],[34.22048,51.4187],[34.33446,51.363],[34.23009,51.26429],[34.31661,51.23936],[34.38802,51.2746],[34.6613,51.25053],[34.6874,51.18],[34.82472,51.17483],[34.97304,51.2342],[35.14058,51.23162],[35.12685,51.16191],[35.20375,51.04723],[35.31774,51.08434],[35.40837,51.04119],[35.32598,50.94524],[35.39307,50.92145],[35.41367,50.80227],[35.47704,50.77274],[35.48116,50.66405],[35.39464,50.64751],[35.47463,50.49247],[35.58003,50.45117],[35.61711,50.35707],[35.73659,50.35489],[35.80388,50.41356],[35.8926,50.43829],[36.06893,50.45205],[36.20763,50.3943],[36.30101,50.29088],[36.47817,50.31457],[36.58371,50.28563],[36.56655,50.2413],[36.64571,50.218],[36.69377,50.26982],[36.91762,50.34963],[37.08468,50.34935],[37.48204,50.46079],[37.47243,50.36277],[37.62486,50.29966],[37.62879,50.24481],[37.61113,50.21976],[37.75807,50.07896],[37.79515,50.08425],[37.90776,50.04194],[38.02999,49.94482],[38.02999,49.90592],[38.21675,49.98104],[38.18517,50.08161],[38.32524,50.08866],[38.35408,50.00664],[38.65688,49.97176],[38.68677,50.00904],[38.73311,49.90238],[38.90477,49.86787],[38.9391,49.79524],[39.1808,49.88911],[39.27968,49.75976],[39.44496,49.76067],[39.59142,49.73758],[39.65047,49.61761],[39.84548,49.56064],[40.13249,49.61672],[40.16683,49.56865],[40.03636,49.52321],[40.03087,49.45452],[40.1141,49.38798],[40.14912,49.37681],[40.18331,49.34996],[40.22176,49.25683],[40.01988,49.1761],[39.93437,49.05709],[39.6836,49.05121],[39.6683,48.99454],[39.71353,48.98959],[39.72649,48.9754],[39.74874,48.98675],[39.78368,48.91596],[39.98967,48.86901],[40.03636,48.91957],[40.08168,48.87443],[39.97182,48.79398],[39.79466,48.83739],[39.73104,48.7325],[39.71765,48.68673],[39.67226,48.59368],[39.79764,48.58668],[39.84548,48.57821],[39.86196,48.46633],[39.88794,48.44226],[39.94847,48.35055],[39.84136,48.33321],[39.84273,48.30947],[39.90041,48.3049],[39.91465,48.26743],[39.95248,48.29972],[39.9693,48.29904],[39.97325,48.31399],[39.99241,48.31768],[40.00752,48.22445],[39.94847,48.22811],[39.83724,48.06501],[39.88256,48.04482],[39.77544,48.04206],[39.82213,47.96396],[39.73935,47.82876],[38.87979,47.87719],[38.79628,47.81109],[38.76379,47.69346],[38.35062,47.61631],[38.28679,47.53552],[38.28954,47.39255],[38.22225,47.30788],[38.33074,47.30508],[38.32112,47.2585],[38.23049,47.2324],[38.22955,47.12069],[38.3384,46.98085],[38.12112,46.86078],[37.62608,46.82615],[35.23066,45.79231],[34.96015,45.75634],[34.79905,45.81009],[34.80153,45.90047],[34.75479,45.90705],[34.66679,45.97136],[34.60861,45.99347],[34.55889,45.99347],[34.52011,45.95097],[34.48729,45.94267],[34.44155,45.95995],[34.41221,46.00245],[34.33912,46.06114],[34.25111,46.0532],[34.181,46.06804],[34.12929,46.10494],[34.07311,46.11769],[34.05272,46.10838],[33.91549,46.15938],[33.85234,46.19863],[33.79715,46.20482],[33.74047,46.18555],[33.646,46.23028],[33.61517,46.22615],[33.63854,46.14147],[33.61467,46.13561],[33.57318,46.10317]]]]}},{type:"Feature",properties:{iso1A2:"GP",iso1A3:"GLP",iso1N3:"312",wikidata:"Q17012",nameEn:"Guadeloupe",country:"FR",groups:["EU","029","003","419","019"],callingCodes:["590"]},geometry:{type:"MultiPolygon",coordinates:[[[[-60.95725,15.70997],[-61.44899,15.79571],[-61.81728,15.58058],[-62.17275,16.35721],[-61.83929,16.66647],[-61.44461,16.81958],[-60.71337,16.48911],[-60.95725,15.70997]]]]}},{type:"Feature",properties:{iso1A2:"UG",iso1A3:"UGA",iso1N3:"800",wikidata:"Q1036",nameEn:"Uganda",groups:["014","202","002"],driveSide:"left",callingCodes:["256"]},geometry:{type:"MultiPolygon",coordinates:[[[[33.93107,-0.99298],[30.80408,-0.99911],[30.76635,-0.9852],[30.70631,-1.01175],[30.64166,-1.06601],[30.47194,-1.0555],[30.35212,-1.06896],[30.16369,-1.34303],[29.912,-1.48269],[29.82657,-1.31187],[29.59061,-1.39016],[29.58388,-0.89821],[29.63006,-0.8997],[29.62708,-0.71055],[29.67176,-0.55714],[29.67474,-0.47969],[29.65091,-0.46777],[29.72687,-0.08051],[29.7224,0.07291],[29.77454,0.16675],[29.81922,0.16824],[29.87284,0.39166],[29.97413,0.52124],[29.95477,0.64486],[29.98307,0.84295],[30.1484,0.89805],[30.22139,0.99635],[30.24671,1.14974],[30.48503,1.21675],[31.30127,2.11006],[31.28042,2.17853],[31.20148,2.2217],[31.1985,2.29462],[31.12104,2.27676],[31.07934,2.30207],[31.06593,2.35862],[30.96911,2.41071],[30.91102,2.33332],[30.83059,2.42559],[30.74271,2.43601],[30.75612,2.5863],[30.8857,2.83923],[30.8574,2.9508],[30.77101,3.04897],[30.84251,3.26908],[30.93486,3.40737],[30.94081,3.50847],[30.85153,3.48867],[30.97601,3.693],[31.16666,3.79853],[31.29476,3.8015],[31.50478,3.67814],[31.50776,3.63652],[31.72075,3.74354],[31.81459,3.82083],[31.86821,3.78664],[31.96205,3.6499],[31.95907,3.57408],[32.05187,3.589],[32.08491,3.56287],[32.08866,3.53543],[32.19888,3.50867],[32.20782,3.6053],[32.41337,3.748],[32.72021,3.77327],[32.89746,3.81339],[33.02852,3.89296],[33.18356,3.77812],[33.51264,3.75068],[33.9873,4.23316],[34.06046,4.15235],[34.15429,3.80464],[34.45815,3.67385],[34.44922,3.51627],[34.39112,3.48802],[34.41794,3.44342],[34.40006,3.37949],[34.45815,3.18319],[34.56242,3.11478],[34.60114,2.93034],[34.65774,2.8753],[34.73967,2.85447],[34.78137,2.76223],[34.77244,2.70272],[34.95267,2.47209],[34.90947,2.42447],[34.98692,1.97348],[34.9899,1.6668],[34.92734,1.56109],[34.87819,1.5596],[34.7918,1.36752],[34.82606,1.30944],[34.82606,1.26626],[34.80223,1.22754],[34.67562,1.21265],[34.58029,1.14712],[34.57427,1.09868],[34.52369,1.10692],[34.43349,0.85254],[34.40041,0.80266],[34.31516,0.75693],[34.27345,0.63182],[34.20196,0.62289],[34.13493,0.58118],[34.11408,0.48884],[34.08727,0.44713],[34.10067,0.36372],[33.90936,0.10581],[33.98449,-0.13079],[33.9264,-0.54188],[33.93107,-0.99298]]]]}},{type:"Feature",properties:{iso1A2:"HK",iso1A3:"HKG",iso1N3:"344",wikidata:"Q8646",nameEn:"Hong Kong",country:"CN",groups:["030","142"],driveSide:"left",callingCodes:["852"]},geometry:{type:"MultiPolygon",coordinates:[[[[113.92195,22.13873],[113.83338,22.1826],[113.81621,22.2163],[113.86771,22.42972],[114.03113,22.5065],[114.05438,22.5026],[114.05729,22.51104],[114.06272,22.51617],[114.07267,22.51855],[114.07817,22.52997],[114.08606,22.53276],[114.09048,22.53716],[114.09692,22.53435],[114.1034,22.5352],[114.11181,22.52878],[114.11656,22.53415],[114.12665,22.54003],[114.13823,22.54319],[114.1482,22.54091],[114.15123,22.55163],[114.1597,22.56041],[114.17247,22.55944],[114.18338,22.55444],[114.20655,22.55706],[114.22185,22.55343],[114.22888,22.5436],[114.25154,22.55977],[114.44998,22.55977],[114.50148,22.15017],[113.92195,22.13873]]]]}},{type:"Feature",properties:{iso1A2:"UM",iso1A3:"UMI",iso1N3:"581",wikidata:"Q16645",nameEn:"United States Minor Outlying Islands",country:"US",groups:["057","009"]},geometry:{type:"MultiPolygon",coordinates:[[[[-175.33482,-1.40631],[-177.43039,-1.43294],[-177.43928,1.65656],[-175.33167,1.67574],[-175.33482,-1.40631]]],[[[-161.04969,-1.36251],[-161.05669,1.11722],[-158.62734,1.1296],[-158.62058,-1.35506],[-161.04969,-1.36251]]],[[[-161.06795,5.2462],[-163.24478,5.24198],[-163.24994,7.12322],[-161.0731,7.1291],[-161.06795,5.2462]]],[[[-170.65691,16.57199],[-169.2329,17.4933],[-168.87689,16.01159],[-170.65691,16.57199]]],[[[-176.29741,29.09786],[-177.5224,27.7635],[-177.77531,29.29793],[-176.29741,29.09786]]],[[[-74.7289,18.71009],[-74.76465,18.06252],[-75.71816,18.46438],[-74.7289,18.71009]]],[[[167.34779,18.97692],[165.82549,18.97692],[166.67967,20.14834],[167.34779,18.97692]]]]}},{type:"Feature",properties:{iso1A2:"IE",iso1A3:"IRL",iso1N3:"372",wikidata:"Q27",nameEn:"Ireland",groups:["EU","154","150"],driveSide:"left",callingCodes:["353"]},geometry:{type:"MultiPolygon",coordinates:[[[[-6.26218,54.09785],[-5.83481,53.87749],[-5.37267,53.63269],[-5.79914,52.03902],[-22.01468,48.19557],[-7.93366,55.84142],[-6.79943,55.54107],[-6.71944,55.27952],[-6.9734,55.19878],[-7.2471,55.06933],[-7.34464,55.04688],[-7.4033,55.00391],[-7.40004,54.94498],[-7.44404,54.9403],[-7.4473,54.87003],[-7.47626,54.83084],[-7.54508,54.79401],[-7.54671,54.74606],[-7.64449,54.75265],[-7.75041,54.7103],[-7.83352,54.73854],[-7.93293,54.66603],[-7.70315,54.62077],[-7.8596,54.53671],[-7.99812,54.54427],[-8.04538,54.48941],[-8.179,54.46763],[-8.04555,54.36292],[-7.87101,54.29299],[-7.8596,54.21779],[-7.81397,54.20159],[-7.69501,54.20731],[-7.55812,54.12239],[-7.4799,54.12239],[-7.44567,54.1539],[-7.32834,54.11475],[-7.30553,54.11869],[-7.34005,54.14698],[-7.29157,54.17191],[-7.28017,54.16714],[-7.29687,54.1354],[-7.29493,54.12013],[-7.26316,54.13863],[-7.25012,54.20063],[-7.14908,54.22732],[-7.19145,54.31296],[-7.02034,54.4212],[-6.87775,54.34682],[-6.85179,54.29176],[-6.81583,54.22791],[-6.74575,54.18788],[-6.70175,54.20218],[-6.6382,54.17071],[-6.66264,54.0666],[-6.62842,54.03503],[-6.47849,54.06947],[-6.36605,54.07234],[-6.36279,54.11248],[-6.32694,54.09337],[-6.29003,54.11278],[-6.26218,54.09785]]]]}},{type:"Feature",properties:{iso1A2:"US",iso1A3:"USA",iso1N3:"840",wikidata:"Q30",nameEn:"United States of America",groups:["021","003","019"],roadSpeedUnit:"mph",callingCodes:["1"]},geometry:{type:"MultiPolygon",coordinates:[[[[-177.8563,29.18961],[-177.5224,27.7635],[-154.05867,45.51124],[-151.6784,9.55515],[-179.49839,27.86265],[-177.8563,29.18961]]],[[[169.34848,52.47228],[179.84401,55.10087],[180,51.0171],[169.34848,52.47228]]],[[[-168.95635,65.98512],[-168.25765,71.99091],[-140.97446,84.39275],[-141.00116,60.30648],[-140.5227,60.22077],[-140.45648,60.30919],[-139.98024,60.18027],[-139.68991,60.33693],[-139.05831,60.35205],[-139.20603,60.08896],[-139.05365,59.99655],[-138.71149,59.90728],[-138.62145,59.76431],[-137.60623,59.24465],[-137.4925,58.89415],[-136.82619,59.16198],[-136.52365,59.16752],[-136.47323,59.46617],[-136.33727,59.44466],[-136.22381,59.55526],[-136.31566,59.59083],[-135.48007,59.79937],[-135.03069,59.56208],[-135.00267,59.28745],[-134.7047,59.2458],[-134.55699,59.1297],[-134.48059,59.13231],[-134.27175,58.8634],[-133.84645,58.73543],[-133.38523,58.42773],[-131.8271,56.62247],[-130.77769,56.36185],[-130.33965,56.10849],[-130.10173,56.12178],[-130.00093,56.00325],[-130.00857,55.91344],[-130.15373,55.74895],[-129.97513,55.28029],[-130.08035,55.21556],[-130.18765,55.07744],[-130.27203,54.97174],[-130.44184,54.85377],[-130.64499,54.76912],[-130.61931,54.70835],[-133.92876,54.62289],[-179.55295,50.81807],[-179.55295,57.62081],[-172.76104,63.77445],[-169.03888,65.48473],[-168.95635,65.98512]]],[[[-97.13927,25.96583],[-97.35946,25.92189],[-97.37332,25.83854],[-97.42511,25.83969],[-97.45669,25.86874],[-97.49828,25.89877],[-97.52025,25.88518],[-97.66511,26.01708],[-97.95155,26.0625],[-97.97017,26.05232],[-98.24603,26.07191],[-98.27075,26.09457],[-98.30491,26.10475],[-98.35126,26.15129],[-99.00546,26.3925],[-99.03053,26.41249],[-99.08477,26.39849],[-99.53573,27.30926],[-99.49744,27.43746],[-99.482,27.47128],[-99.48045,27.49016],[-99.50208,27.50021],[-99.52955,27.49747],[-99.51478,27.55836],[-99.55409,27.61314],[-100.50029,28.66117],[-100.51222,28.70679],[-100.5075,28.74066],[-100.52313,28.75598],[-100.59809,28.88197],[-100.63689,28.90812],[-100.67294,29.09744],[-100.79696,29.24688],[-100.87982,29.296],[-100.94056,29.33371],[-100.94579,29.34523],[-100.96725,29.3477],[-101.01128,29.36947],[-101.05686,29.44738],[-101.47277,29.7744],[-102.60596,29.8192],[-103.15787,28.93865],[-104.37752,29.54255],[-104.39363,29.55396],[-104.3969,29.57105],[-104.5171,29.64671],[-104.77674,30.4236],[-106.00363,31.39181],[-106.09025,31.40569],[-106.20346,31.46305],[-106.23711,31.51262],[-106.24612,31.54193],[-106.28084,31.56173],[-106.30305,31.62154],[-106.33419,31.66303],[-106.34864,31.69663],[-106.3718,31.71165],[-106.38003,31.73151],[-106.41773,31.75196],[-106.43419,31.75478],[-106.45244,31.76523],[-106.46726,31.75998],[-106.47298,31.75054],[-106.48815,31.74769],[-106.50111,31.75714],[-106.50962,31.76155],[-106.51251,31.76922],[-106.52266,31.77509],[-106.529,31.784],[-108.20899,31.78534],[-108.20979,31.33316],[-109.05235,31.3333],[-111.07523,31.33232],[-112.34553,31.7357],[-114.82011,32.49609],[-114.79524,32.55731],[-114.81141,32.55543],[-114.80584,32.62028],[-114.76736,32.64094],[-114.71871,32.71894],[-115.88053,32.63624],[-117.1243,32.53427],[-118.48109,32.5991],[-133.98258,38.06389],[-125.03842,48.53282],[-123.50039,48.21223],[-123.15614,48.35395],[-123.26565,48.6959],[-123.0093,48.76586],[-123.0093,48.83186],[-123.32163,49.00419],[-117.03266,49.00056],[-116.04938,48.99999],[-114.0683,48.99885],[-110.0051,48.99901],[-104.05004,48.99925],[-101.36198,48.99935],[-97.24024,48.99952],[-95.15355,48.9996],[-95.15357,49.384],[-95.12903,49.37056],[-95.05825,49.35311],[-95.01419,49.35647],[-94.99532,49.36579],[-94.95681,49.37035],[-94.85381,49.32492],[-94.8159,49.32299],[-94.82487,49.29483],[-94.77355,49.11998],[-94.75017,49.09931],[-94.687,48.84077],[-94.70087,48.8339],[-94.70486,48.82365],[-94.69669,48.80918],[-94.69335,48.77883],[-94.58903,48.71803],[-94.54885,48.71543],[-94.53826,48.70216],[-94.44258,48.69223],[-94.4174,48.71049],[-94.27153,48.70232],[-94.25172,48.68404],[-94.25104,48.65729],[-94.23215,48.65202],[-93.85769,48.63284],[-93.83288,48.62745],[-93.80676,48.58232],[-93.80939,48.52439],[-93.79267,48.51631],[-93.66382,48.51845],[-93.47022,48.54357],[-93.44472,48.59147],[-93.40693,48.60948],[-93.39758,48.60364],[-93.3712,48.60599],[-93.33946,48.62787],[-93.25391,48.64266],[-92.94973,48.60866],[-92.7287,48.54005],[-92.6342,48.54133],[-92.62747,48.50278],[-92.69927,48.49573],[-92.71323,48.46081],[-92.65606,48.43471],[-92.50712,48.44921],[-92.45588,48.40624],[-92.48147,48.36609],[-92.37185,48.22259],[-92.27167,48.25046],[-92.30939,48.31251],[-92.26662,48.35651],[-92.202,48.35252],[-92.14732,48.36578],[-92.05339,48.35958],[-91.98929,48.25409],[-91.86125,48.21278],[-91.71231,48.19875],[-91.70451,48.11805],[-91.55649,48.10611],[-91.58025,48.04339],[-91.45829,48.07454],[-91.43248,48.04912],[-91.25025,48.08522],[-91.08016,48.18096],[-90.87588,48.2484],[-90.75045,48.09143],[-90.56444,48.12184],[-90.56312,48.09488],[-90.07418,48.11043],[-89.89974,47.98109],[-89.77248,48.02607],[-89.57972,48.00023],[-89.48837,48.01412],[-88.37033,48.30586],[-84.85871,46.88881],[-84.55635,46.45974],[-84.47607,46.45225],[-84.4481,46.48972],[-84.42101,46.49853],[-84.34174,46.50683],[-84.29893,46.49127],[-84.26351,46.49508],[-84.2264,46.53337],[-84.1945,46.54061],[-84.17723,46.52753],[-84.12885,46.53068],[-84.11196,46.50248],[-84.13451,46.39218],[-84.11254,46.32329],[-84.11615,46.2681],[-84.09756,46.25512],[-84.1096,46.23987],[-83.95399,46.05634],[-83.90453,46.05922],[-83.83329,46.12169],[-83.57017,46.105],[-83.43746,45.99749],[-83.59589,45.82131],[-82.48419,45.30225],[-82.42469,42.992],[-82.4146,42.97626],[-82.4253,42.95423],[-82.45331,42.93139],[-82.4826,42.8068],[-82.46613,42.76615],[-82.51063,42.66025],[-82.51858,42.611],[-82.57583,42.5718],[-82.58873,42.54984],[-82.64242,42.55594],[-82.82964,42.37355],[-83.02253,42.33045],[-83.07837,42.30978],[-83.09837,42.28877],[-83.12724,42.2376],[-83.14962,42.04089],[-83.11184,41.95671],[-82.67862,41.67615],[-78.93684,42.82887],[-78.90712,42.89733],[-78.90905,42.93022],[-78.93224,42.95229],[-78.96312,42.95509],[-78.98126,42.97],[-79.02074,42.98444],[-79.02424,43.01983],[-78.99941,43.05612],[-79.01055,43.06659],[-79.07486,43.07845],[-79.05671,43.10937],[-79.06881,43.12029],[-79.0427,43.13934],[-79.04652,43.16396],[-79.05384,43.17418],[-79.05002,43.20133],[-79.05544,43.21224],[-79.05512,43.25375],[-79.06921,43.26183],[-79.25796,43.54052],[-76.79706,43.63099],[-76.43859,44.09393],[-76.35324,44.13493],[-76.31222,44.19894],[-76.244,44.19643],[-76.1664,44.23051],[-76.16285,44.28262],[-76.00018,44.34896],[-75.95947,44.34463],[-75.8217,44.43176],[-75.76813,44.51537],[-75.41441,44.76614],[-75.2193,44.87821],[-75.01363,44.95608],[-74.99101,44.98051],[-74.8447,45.00606],[-74.66689,45.00646],[-74.32699,44.99029],[-73.35025,45.00942],[-71.50067,45.01357],[-71.48735,45.07784],[-71.42778,45.12624],[-71.40364,45.21382],[-71.44252,45.2361],[-71.37133,45.24624],[-71.29371,45.29996],[-71.22338,45.25184],[-71.19723,45.25438],[-71.14568,45.24128],[-71.08364,45.30623],[-71.01866,45.31573],[-71.0107,45.34819],[-70.95193,45.33895],[-70.91169,45.29849],[-70.89864,45.2398],[-70.84816,45.22698],[-70.80236,45.37444],[-70.82638,45.39828],[-70.78372,45.43269],[-70.65383,45.37592],[-70.62518,45.42286],[-70.72651,45.49771],[-70.68516,45.56964],[-70.54019,45.67291],[-70.38934,45.73215],[-70.41523,45.79497],[-70.25976,45.89675],[-70.24694,45.95138],[-70.31025,45.96424],[-70.23855,46.1453],[-70.29078,46.18832],[-70.18547,46.35357],[-70.05812,46.41768],[-69.99966,46.69543],[-69.22119,47.46461],[-69.05148,47.42012],[-69.05073,47.30076],[-69.05039,47.2456],[-68.89222,47.1807],[-68.70125,47.24399],[-68.60575,47.24659],[-68.57914,47.28431],[-68.38332,47.28723],[-68.37458,47.35851],[-68.23244,47.35712],[-67.94843,47.1925],[-67.87993,47.10377],[-67.78578,47.06473],[-67.78111,45.9392],[-67.75196,45.91814],[-67.80961,45.87531],[-67.75654,45.82324],[-67.80653,45.80022],[-67.80705,45.69528],[-67.6049,45.60725],[-67.43815,45.59162],[-67.42144,45.50584],[-67.50578,45.48971],[-67.42394,45.37969],[-67.48201,45.27351],[-67.34927,45.122],[-67.29754,45.14865],[-67.29748,45.18173],[-67.27039,45.1934],[-67.22751,45.16344],[-67.20349,45.1722],[-67.19603,45.16771],[-67.15965,45.16179],[-67.11316,45.11176],[-67.0216,44.95333],[-66.96824,44.90965],[-66.98249,44.87071],[-66.96824,44.83078],[-66.93432,44.82597],[-67.16117,44.20069],[-61.98255,37.34815],[-79.14818,27.83105],[-79.89631,24.6597],[-82.02215,24.23074],[-96.92418,25.97377],[-97.13927,25.96583]]]]}},{type:"Feature",properties:{iso1A2:"IT",iso1A3:"ITA",iso1N3:"380",wikidata:"Q38",nameEn:"Italy",groups:["EU","039","150"],callingCodes:["39"]},geometry:{type:"MultiPolygon",coordinates:[[[[8.95861,45.96485],[8.96668,45.98436],[8.97741,45.98317],[8.97604,45.96151],[8.95861,45.96485]]],[[[7.63035,43.57419],[7.53006,43.78405],[7.50423,43.84345],[7.49355,43.86551],[7.51162,43.88301],[7.56075,43.89932],[7.56858,43.94506],[7.60771,43.95772],[7.65266,43.9763],[7.66848,43.99943],[7.6597,44.03009],[7.72508,44.07578],[7.66878,44.12795],[7.68694,44.17487],[7.63245,44.17877],[7.62155,44.14881],[7.36364,44.11882],[7.34547,44.14359],[7.27827,44.1462],[7.16929,44.20352],[7.00764,44.23736],[6.98221,44.28289],[6.89171,44.36637],[6.88784,44.42043],[6.94504,44.43112],[6.86233,44.49834],[6.85507,44.53072],[6.96042,44.62129],[6.95133,44.66264],[7.00582,44.69364],[7.07484,44.68073],[7.00401,44.78782],[7.02217,44.82519],[6.93499,44.8664],[6.90774,44.84322],[6.75518,44.89915],[6.74519,44.93661],[6.74791,45.01939],[6.66981,45.02324],[6.62803,45.11175],[6.7697,45.16044],[6.85144,45.13226],[6.96706,45.20841],[7.07074,45.21228],[7.13115,45.25386],[7.10572,45.32924],[7.18019,45.40071],[7.00037,45.509],[6.98948,45.63869],[6.80785,45.71864],[6.80785,45.83265],[6.95315,45.85163],[7.04151,45.92435],[7.10685,45.85653],[7.56343,45.97421],[7.85949,45.91485],[7.9049,45.99945],[7.98881,45.99867],[8.02906,46.10331],[8.11383,46.11577],[8.16866,46.17817],[8.08814,46.26692],[8.31162,46.38044],[8.30648,46.41587],[8.42464,46.46367],[8.46317,46.43712],[8.45032,46.26869],[8.62242,46.12112],[8.75697,46.10395],[8.80778,46.10085],[8.85617,46.0748],[8.79414,46.00913],[8.78585,45.98973],[8.79362,45.99207],[8.8319,45.9879],[8.85121,45.97239],[8.86688,45.96135],[8.88904,45.95465],[8.93649,45.86775],[8.94372,45.86587],[8.93504,45.86245],[8.91129,45.8388],[8.94737,45.84285],[8.9621,45.83707],[8.99663,45.83466],[9.00324,45.82055],[9.0298,45.82127],[9.03279,45.82865],[9.03793,45.83548],[9.03505,45.83976],[9.04059,45.8464],[9.04546,45.84968],[9.06642,45.8761],[9.09065,45.89906],[8.99257,45.9698],[9.01618,46.04928],[9.24503,46.23616],[9.29226,46.32717],[9.25502,46.43743],[9.28136,46.49685],[9.36128,46.5081],[9.40487,46.46621],[9.45936,46.50873],[9.46117,46.37481],[9.57015,46.2958],[9.71273,46.29266],[9.73086,46.35071],[9.95249,46.38045],[10.07055,46.21668],[10.14439,46.22992],[10.17862,46.25626],[10.10506,46.3372],[10.165,46.41051],[10.03715,46.44479],[10.10307,46.61003],[10.23674,46.63484],[10.25309,46.57432],[10.46136,46.53164],[10.49375,46.62049],[10.44686,46.64162],[10.40475,46.63671],[10.38659,46.67847],[10.47197,46.85698],[10.54783,46.84505],[10.66405,46.87614],[10.75753,46.82258],[10.72974,46.78972],[11.00764,46.76896],[11.10618,46.92966],[11.33355,46.99862],[11.50739,47.00644],[11.74789,46.98484],[12.19254,47.09331],[12.21781,47.03996],[12.11675,47.01241],[12.2006,46.88854],[12.27591,46.88651],[12.38708,46.71529],[12.59992,46.6595],[12.94445,46.60401],[13.27627,46.56059],[13.64088,46.53438],[13.7148,46.5222],[13.68684,46.43881],[13.59777,46.44137],[13.5763,46.42613],[13.5763,46.40915],[13.47019,46.3621],[13.43418,46.35992],[13.44808,46.33507],[13.37671,46.29668],[13.42218,46.20758],[13.47587,46.22725],[13.56114,46.2054],[13.56682,46.18703],[13.64451,46.18966],[13.66472,46.17392],[13.64053,46.13587],[13.57072,46.09022],[13.50104,46.05986],[13.49568,46.04839],[13.50998,46.04498],[13.49702,46.01832],[13.47474,46.00546],[13.50104,45.98078],[13.52963,45.96588],[13.56759,45.96991],[13.58903,45.99009],[13.62074,45.98388],[13.63458,45.98947],[13.64307,45.98326],[13.6329,45.94894],[13.63815,45.93607],[13.61931,45.91782],[13.60857,45.89907],[13.59565,45.89446],[13.58644,45.88173],[13.57563,45.8425],[13.58858,45.83503],[13.59784,45.8072],[13.66986,45.79955],[13.8235,45.7176],[13.83332,45.70855],[13.83422,45.68703],[13.87933,45.65207],[13.9191,45.6322],[13.8695,45.60835],[13.86771,45.59898],[13.84106,45.58185],[13.78445,45.5825],[13.74587,45.59811],[13.7198,45.59352],[13.6076,45.64761],[13.45644,45.59464],[13.05142,45.33128],[13.12821,44.48877],[16.15283,42.18525],[18.83516,40.36999],[17.67657,35.68918],[14.02721,36.53141],[12.13667,34.20326],[11.2718,37.6713],[7.89009,38.19924],[7.60802,41.05927],[10.09675,41.44089],[9.56115,43.20816],[7.63035,43.57419]],[[12.45181,41.90056],[12.45446,41.90028],[12.45435,41.90143],[12.45626,41.90172],[12.45691,41.90125],[12.4577,41.90115],[12.45834,41.90174],[12.45826,41.90281],[12.45755,41.9033],[12.45762,41.9058],[12.45561,41.90629],[12.45543,41.90738],[12.45091,41.90625],[12.44984,41.90545],[12.44815,41.90326],[12.44582,41.90194],[12.44834,41.90095],[12.45181,41.90056]],[[12.45648,43.89369],[12.48771,43.89706],[12.49429,43.90973],[12.49247,43.91774],[12.49724,43.92248],[12.50269,43.92363],[12.50496,43.93017],[12.51553,43.94096],[12.51427,43.94897],[12.50655,43.95796],[12.50875,43.96198],[12.50622,43.97131],[12.51109,43.97201],[12.51064,43.98165],[12.5154,43.98508],[12.51463,43.99122],[12.50678,43.99113],[12.49406,43.98492],[12.47853,43.98052],[12.46205,43.97463],[12.44684,43.96597],[12.43662,43.95698],[12.42005,43.9578],[12.41414,43.95273],[12.40415,43.95485],[12.40506,43.94325],[12.41165,43.93769],[12.41551,43.92984],[12.40733,43.92379],[12.41233,43.90956],[12.40935,43.9024],[12.41641,43.89991],[12.44184,43.90498],[12.45648,43.89369]]]]}},{type:"Feature",properties:{iso1A2:"UY",iso1A3:"URY",iso1N3:"858",wikidata:"Q77",nameEn:"Uruguay",groups:["005","419","019"],callingCodes:["598"]},geometry:{type:"MultiPolygon",coordinates:[[[[-57.65132,-30.19229],[-57.22502,-30.26121],[-56.90236,-30.02578],[-56.49267,-30.39471],[-56.4795,-30.3899],[-56.4619,-30.38457],[-55.87388,-31.05053],[-55.58866,-30.84117],[-55.5634,-30.8686],[-55.55373,-30.8732],[-55.55218,-30.88193],[-55.54572,-30.89051],[-55.53431,-30.89714],[-55.53276,-30.90218],[-55.52712,-30.89997],[-55.51862,-30.89828],[-55.50841,-30.9027],[-55.50821,-30.91349],[-54.17384,-31.86168],[-53.76024,-32.0751],[-53.39572,-32.58596],[-53.37671,-32.57005],[-53.1111,-32.71147],[-53.53459,-33.16843],[-53.52794,-33.68908],[-53.44031,-33.69344],[-53.39593,-33.75169],[-53.37138,-33.74313],[-52.83257,-34.01481],[-54.78916,-36.21945],[-57.83001,-34.69099],[-58.34425,-34.15035],[-58.44442,-33.84033],[-58.40475,-33.11777],[-58.1224,-32.98842],[-58.22362,-32.52416],[-58.10036,-32.25338],[-58.20252,-31.86966],[-58.00076,-31.65016],[-58.0023,-31.53084],[-58.07569,-31.44916],[-57.98127,-31.3872],[-57.9908,-31.34924],[-57.86729,-31.06352],[-57.89476,-30.95994],[-57.8024,-30.77193],[-57.89115,-30.49572],[-57.64859,-30.35095],[-57.61478,-30.25165],[-57.65132,-30.19229]]]]}},{type:"Feature",properties:{iso1A2:"KI",iso1A3:"KIR",iso1N3:"296",wikidata:"Q710",nameEn:"Kiribati",groups:["057","009"],driveSide:"left",callingCodes:["686"]},geometry:{type:"MultiPolygon",coordinates:[[[[169,3.9],[178,3.9],[178,-3.5],[169,-3.5],[169,3.9]]],[[[-158.62058,-1.35506],[-158.62734,1.1296],[-161.05669,1.11722],[-161.06795,5.2462],[-149.65979,5.27712],[-149.6249,-7.51261],[-149.61166,-12.30171],[-156.4957,-12.32002],[-156.50903,-7.4975],[-167.75329,-7.52784],[-174.18707,-7.54408],[-175.31804,-7.54825],[-175.33482,-1.40631],[-161.04969,-1.36251],[-158.62058,-1.35506]]]]}},{type:"Feature",properties:{iso1A2:"UZ",iso1A3:"UZB",iso1N3:"860",wikidata:"Q265",nameEn:"Uzbekistan",groups:["143","142"],callingCodes:["998"]},geometry:{type:"MultiPolygon",coordinates:[[[[65.85194,42.85481],[66.09482,42.93426],[66.00546,41.94455],[66.53302,41.87388],[66.69129,41.1311],[67.9644,41.14611],[67.98511,41.02794],[68.08273,41.08148],[68.1271,41.0324],[67.96736,40.83798],[68.49983,40.56437],[68.63,40.59358],[68.58444,40.91447],[68.49983,40.99669],[68.62221,41.03019],[68.65662,40.93861],[68.73945,40.96989],[68.7217,41.05025],[69.01308,41.22804],[69.05006,41.36183],[69.15137,41.43078],[69.17701,41.43769],[69.18528,41.45175],[69.20439,41.45391],[69.22671,41.46298],[69.23332,41.45847],[69.25059,41.46693],[69.29778,41.43673],[69.35554,41.47211],[69.37468,41.46555],[69.45081,41.46246],[69.39485,41.51518],[69.45751,41.56863],[69.49545,41.545],[70.94483,42.26238],[71.13263,42.28356],[71.28719,42.18033],[70.69777,41.92554],[70.17682,41.5455],[70.48909,41.40335],[70.67586,41.47953],[70.78572,41.36419],[70.77885,41.24813],[70.86263,41.23833],[70.9615,41.16393],[71.02193,41.19494],[71.11806,41.15359],[71.25813,41.18796],[71.27187,41.11015],[71.34877,41.16807],[71.40198,41.09436],[71.46148,41.13958],[71.43814,41.19644],[71.46688,41.31883],[71.57227,41.29175],[71.6787,41.42111],[71.65914,41.49599],[71.73054,41.54713],[71.71132,41.43012],[71.76625,41.4466],[71.83914,41.3546],[71.91457,41.2982],[71.85964,41.19081],[72.07249,41.11739],[72.10745,41.15483],[72.16433,41.16483],[72.17594,41.15522],[72.14864,41.13363],[72.1792,41.10621],[72.21061,41.05607],[72.17594,41.02377],[72.18339,40.99571],[72.324,41.03381],[72.34026,41.04539],[72.34757,41.06104],[72.36138,41.04384],[72.38511,41.02785],[72.45206,41.03018],[72.48742,40.97136],[72.55109,40.96046],[72.59136,40.86947],[72.68157,40.84942],[72.84291,40.85512],[72.94454,40.8094],[73.01869,40.84681],[73.13267,40.83512],[73.13412,40.79122],[73.0612,40.76678],[72.99133,40.76457],[72.93296,40.73089],[72.8722,40.71111],[72.85372,40.7116],[72.84754,40.67229],[72.80137,40.67856],[72.74866,40.60873],[72.74894,40.59592],[72.75982,40.57273],[72.74862,40.57131],[72.74768,40.58051],[72.73995,40.58409],[72.69579,40.59778],[72.66713,40.59076],[72.66713,40.5219],[72.47795,40.5532],[72.40517,40.61917],[72.34406,40.60144],[72.41714,40.55736],[72.38384,40.51535],[72.41513,40.50856],[72.44191,40.48222],[72.40346,40.4007],[72.24368,40.46091],[72.18648,40.49893],[71.96401,40.31907],[72.05464,40.27586],[71.85002,40.25647],[71.82646,40.21872],[71.73054,40.14818],[71.71719,40.17886],[71.69621,40.18492],[71.70569,40.20391],[71.68386,40.26984],[71.61931,40.26775],[71.61725,40.20615],[71.51549,40.22986],[71.51215,40.26943],[71.4246,40.28619],[71.36663,40.31593],[71.13042,40.34106],[71.05901,40.28765],[70.95789,40.28761],[70.9818,40.22392],[70.8607,40.217],[70.62342,40.17396],[70.56394,40.26421],[70.57149,40.3442],[70.37511,40.38605],[70.32626,40.45174],[70.49871,40.52503],[70.80009,40.72825],[70.45251,41.04438],[70.38028,41.02014],[70.36655,40.90296],[69.69434,40.62615],[69.59441,40.70181],[69.53021,40.77621],[69.38327,40.7918],[69.32834,40.70233],[69.3455,40.57988],[69.2643,40.57506],[69.21063,40.54469],[69.27066,40.49274],[69.28525,40.41894],[69.30774,40.36102],[69.33794,40.34819],[69.32833,40.29794],[69.30808,40.2821],[69.24817,40.30357],[69.25229,40.26362],[69.30104,40.24502],[69.30448,40.18774],[69.2074,40.21488],[69.15659,40.2162],[69.04544,40.22904],[68.85832,40.20885],[68.84357,40.18604],[68.79276,40.17555],[68.77902,40.20492],[68.5332,40.14826],[68.52771,40.11676],[68.62796,40.07789],[69.01523,40.15771],[69.01935,40.11466],[68.96579,40.06949],[68.84906,40.04952],[68.93695,39.91167],[68.88889,39.87163],[68.63071,39.85265],[68.61972,39.68905],[68.54166,39.53929],[68.12053,39.56317],[67.70992,39.66156],[67.62889,39.60234],[67.44899,39.57799],[67.46547,39.53564],[67.39681,39.52505],[67.46822,39.46146],[67.45998,39.315],[67.36522,39.31287],[67.33226,39.23739],[67.67833,39.14479],[67.68915,39.00775],[68.09704,39.02589],[68.19743,38.85985],[68.06948,38.82115],[68.12877,38.73677],[68.05598,38.71641],[68.0807,38.64136],[68.05873,38.56087],[68.11366,38.47169],[68.06274,38.39435],[68.13289,38.40822],[68.40343,38.19484],[68.27159,37.91477],[68.12635,37.93],[67.81566,37.43107],[67.8474,37.31594],[67.78329,37.1834],[67.51868,37.26102],[67.2581,37.17216],[67.2224,37.24545],[67.13039,37.27168],[67.08232,37.35469],[66.95598,37.40162],[66.64699,37.32958],[66.55743,37.35409],[66.52303,37.39827],[66.65761,37.45497],[66.52852,37.58568],[66.53676,37.80084],[66.67684,37.96776],[66.56697,38.0435],[66.41042,38.02403],[66.24013,38.16238],[65.83913,38.25733],[65.55873,38.29052],[64.32576,38.98691],[64.19086,38.95561],[63.70778,39.22349],[63.6913,39.27666],[62.43337,39.98528],[62.34273,40.43206],[62.11751,40.58242],[61.87856,41.12257],[61.4446,41.29407],[61.39732,41.19873],[61.33199,41.14946],[61.22212,41.14946],[61.03261,41.25691],[60.5078,41.21694],[60.06581,41.4363],[60.18117,41.60082],[60.06032,41.76287],[60.08504,41.80997],[60.33223,41.75058],[59.95046,41.97966],[60.0356,42.01028],[60.04659,42.08982],[59.96419,42.1428],[60.00539,42.212],[59.94633,42.27655],[59.4341,42.29738],[59.2955,42.37064],[59.17317,42.52248],[58.93422,42.5407],[58.6266,42.79314],[58.57991,42.64988],[58.27504,42.69632],[58.14321,42.62159],[58.29427,42.56497],[58.51674,42.30348],[58.40688,42.29535],[58.3492,42.43335],[57.99214,42.50021],[57.90975,42.4374],[57.92897,42.24047],[57.84932,42.18555],[57.6296,42.16519],[57.30275,42.14076],[57.03633,41.92043],[56.96218,41.80383],[57.03359,41.41777],[57.13796,41.36625],[57.03423,41.25435],[56.00314,41.32584],[55.97584,44.99322],[55.97584,44.99328],[55.97584,44.99338],[55.97584,44.99343],[55.97584,44.99348],[55.97584,44.99353],[55.97584,44.99359],[55.97584,44.99369],[55.97584,44.99374],[55.97584,44.99384],[55.97584,44.9939],[55.97584,44.994],[55.97584,44.99405],[55.97584,44.99415],[55.97584,44.99421],[55.97584,44.99426],[55.97584,44.99431],[55.97584,44.99436],[55.97584,44.99441],[55.97594,44.99446],[55.97605,44.99452],[55.97605,44.99457],[55.97605,44.99462],[55.97605,44.99467],[55.97605,44.99477],[55.97615,44.99477],[55.97615,44.99483],[55.97615,44.99493],[55.97615,44.99498],[55.97615,44.99503],[55.97615,44.99508],[55.97625,44.99514],[55.97636,44.99519],[55.97636,44.99524],[55.97646,44.99529],[55.97646,44.99534],[55.97656,44.99539],[55.97667,44.99545],[55.97677,44.9955],[55.97677,44.99555],[55.97677,44.9956],[55.97687,44.9956],[55.97698,44.99565],[55.97698,44.9957],[55.97708,44.99576],[55.97718,44.99581],[55.97729,44.99586],[55.97739,44.99586],[55.97739,44.99591],[55.97749,44.99591],[55.9776,44.99591],[55.9777,44.99596],[55.9777,44.99601],[55.9778,44.99607],[55.97791,44.99607],[55.97801,44.99607],[55.97801,44.99612],[55.97811,44.99617],[55.97822,44.99617],[55.97832,44.99622],[55.97842,44.99622],[58.59711,45.58671],[61.01475,44.41383],[62.01711,43.51008],[63.34656,43.64003],[64.53885,43.56941],[64.96464,43.74748],[65.18666,43.48835],[65.53277,43.31856],[65.85194,42.85481]],[[70.68112,40.90612],[70.6158,40.97661],[70.56077,41.00642],[70.54223,40.98787],[70.57501,40.98941],[70.6721,40.90555],[70.68112,40.90612]]],[[[71.21139,40.03369],[71.1427,39.95026],[71.23067,39.93581],[71.16101,39.88423],[71.10531,39.91354],[71.04979,39.89808],[71.10501,39.95568],[71.09063,39.99],[71.11668,39.99291],[71.11037,40.01984],[71.01035,40.05481],[71.00236,40.18154],[71.06305,40.1771],[71.12218,40.03052],[71.21139,40.03369]]],[[[71.86463,39.98598],[71.84316,39.95582],[71.7504,39.93701],[71.71511,39.96348],[71.78838,40.01404],[71.86463,39.98598]]]]}},{type:"Feature",properties:{iso1A2:"AO",iso1A3:"AGO",iso1N3:"024",wikidata:"Q916",nameEn:"Angola",groups:["017","202","002"],callingCodes:["244"]},geometry:{type:"MultiPolygon",coordinates:[[[[16.55507,-5.85631],[16.96282,-7.21787],[17.5828,-8.13784],[18.33635,-8.00126],[19.33698,-7.99743],[19.5469,-7.00195],[20.30218,-6.98955],[20.31846,-6.91953],[20.61689,-6.90876],[20.56263,-7.28566],[21.79824,-7.29628],[21.84856,-9.59871],[22.19039,-9.94628],[22.32604,-10.76291],[22.17954,-10.85884],[22.25951,-11.24911],[22.54205,-11.05784],[23.16602,-11.10577],[23.45631,-10.946],[23.86868,-11.02856],[24.00027,-10.89356],[24.02603,-11.15368],[23.98804,-12.13149],[24.06672,-12.29058],[23.90937,-12.844],[24.03339,-12.99091],[21.97988,-13.00148],[22.00323,-16.18028],[22.17217,-16.50269],[23.20038,-17.47563],[23.47474,-17.62877],[21.42741,-18.02787],[21.14283,-17.94318],[18.84226,-17.80375],[18.39229,-17.38927],[14.28743,-17.38814],[13.95896,-17.43141],[13.36212,-16.98048],[12.97145,-16.98567],[12.52111,-17.24495],[12.07076,-17.15165],[11.75063,-17.25013],[10.5065,-17.25284],[11.50888,-5.33417],[12.00924,-5.02627],[12.16068,-4.90089],[12.20901,-4.75642],[12.25587,-4.79437],[12.32324,-4.78415],[12.40964,-4.60609],[12.64835,-4.55937],[12.76844,-4.38709],[12.87096,-4.40315],[12.91489,-4.47907],[13.09648,-4.63739],[13.11195,-4.67745],[12.8733,-4.74346],[12.70868,-4.95505],[12.63465,-4.94632],[12.60251,-5.01715],[12.46297,-5.09408],[12.49815,-5.14058],[12.51589,-5.1332],[12.53586,-5.14658],[12.53599,-5.1618],[12.52301,-5.17481],[12.52318,-5.74353],[12.26557,-5.74031],[12.20376,-5.76338],[11.95767,-5.94705],[12.42245,-6.07585],[13.04371,-5.87078],[16.55507,-5.85631]]]]}},{type:"Feature",properties:{iso1A2:"VA",iso1A3:"VAT",iso1N3:"336",wikidata:"Q237",nameEn:"Vatican City",aliases:["Holy See"],groups:["039","150"],callingCodes:["379","39 06"]},geometry:{type:"MultiPolygon",coordinates:[[[[12.45181,41.90056],[12.44834,41.90095],[12.44582,41.90194],[12.44815,41.90326],[12.44984,41.90545],[12.45091,41.90625],[12.45543,41.90738],[12.45561,41.90629],[12.45762,41.9058],[12.45755,41.9033],[12.45826,41.90281],[12.45834,41.90174],[12.4577,41.90115],[12.45691,41.90125],[12.45626,41.90172],[12.45435,41.90143],[12.45446,41.90028],[12.45181,41.90056]]]]}},{type:"Feature",properties:{iso1A2:"BI",iso1A3:"BDI",iso1N3:"108",wikidata:"Q967",nameEn:"Burundi",groups:["014","202","002"],callingCodes:["257"]},geometry:{type:"MultiPolygon",coordinates:[[[[30.54501,-2.41404],[30.41789,-2.66266],[30.52747,-2.65841],[30.40662,-2.86151],[30.4987,-2.9573],[30.57926,-2.89791],[30.6675,-2.98987],[30.83823,-2.97837],[30.84165,-3.25152],[30.45915,-3.56532],[30.22042,-4.01738],[30.03323,-4.26631],[29.88172,-4.35743],[29.82885,-4.36153],[29.77289,-4.41733],[29.75109,-4.45836],[29.63827,-4.44681],[29.43673,-4.44845],[29.23708,-3.75856],[29.21463,-3.3514],[29.25633,-3.05471],[29.17258,-2.99385],[29.16037,-2.95457],[29.09797,-2.91935],[29.09119,-2.87871],[29.0505,-2.81774],[29.00404,-2.81978],[29.00167,-2.78523],[29.04081,-2.7416],[29.0562,-2.58632],[29.32234,-2.6483],[29.36805,-2.82933],[29.88237,-2.75105],[29.95911,-2.33348],[30.14034,-2.43626],[30.42933,-2.31064],[30.54501,-2.41404]]]]}},{type:"Feature",properties:{iso1A2:"VC",iso1A3:"VCT",iso1N3:"670",wikidata:"Q757",nameEn:"St. Vincent and the Grenadines",aliases:["WV"],groups:["029","003","419","019"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["1 784"]},geometry:{type:"MultiPolygon",coordinates:[[[[-61.73897,12.61191],[-61.43129,13.68336],[-60.70539,13.41452],[-61.13395,12.51526],[-61.38256,12.52991],[-61.73897,12.61191]]]]}},{type:"Feature",properties:{iso1A2:"CD",iso1A3:"COD",iso1N3:"180",wikidata:"Q974",nameEn:"Democratic Republic of the Congo",aliases:["ZR"],groups:["017","202","002"],callingCodes:["243"]},geometry:{type:"MultiPolygon",coordinates:[[[[27.44012,5.07349],[27.56656,4.89375],[27.65462,4.89375],[27.76469,4.79284],[27.79551,4.59976],[28.20719,4.35614],[28.6651,4.42638],[28.8126,4.48784],[29.03054,4.48784],[29.22207,4.34297],[29.43341,4.50101],[29.49726,4.7007],[29.82087,4.56246],[29.79666,4.37809],[30.06964,4.13221],[30.1621,4.10586],[30.22374,3.93896],[30.27658,3.95653],[30.47691,3.83353],[30.55396,3.84451],[30.57378,3.74567],[30.56277,3.62703],[30.78512,3.67097],[30.80713,3.60506],[30.85997,3.5743],[30.85153,3.48867],[30.94081,3.50847],[30.93486,3.40737],[30.84251,3.26908],[30.77101,3.04897],[30.8574,2.9508],[30.8857,2.83923],[30.75612,2.5863],[30.74271,2.43601],[30.83059,2.42559],[30.91102,2.33332],[30.96911,2.41071],[31.06593,2.35862],[31.07934,2.30207],[31.12104,2.27676],[31.1985,2.29462],[31.20148,2.2217],[31.28042,2.17853],[31.30127,2.11006],[30.48503,1.21675],[30.24671,1.14974],[30.22139,0.99635],[30.1484,0.89805],[29.98307,0.84295],[29.95477,0.64486],[29.97413,0.52124],[29.87284,0.39166],[29.81922,0.16824],[29.77454,0.16675],[29.7224,0.07291],[29.72687,-0.08051],[29.65091,-0.46777],[29.67474,-0.47969],[29.67176,-0.55714],[29.62708,-0.71055],[29.63006,-0.8997],[29.58388,-0.89821],[29.59061,-1.39016],[29.53062,-1.40499],[29.45038,-1.5054],[29.36322,-1.50887],[29.24323,-1.66826],[29.24458,-1.69663],[29.11847,-1.90576],[29.17562,-2.12278],[29.105,-2.27043],[29.00051,-2.29001],[28.95642,-2.37321],[28.89601,-2.37321],[28.86826,-2.41888],[28.86846,-2.44866],[28.89132,-2.47557],[28.89342,-2.49017],[28.88846,-2.50493],[28.87497,-2.50887],[28.86209,-2.5231],[28.86193,-2.53185],[28.87943,-2.55165],[28.89288,-2.55848],[28.90226,-2.62385],[28.89793,-2.66111],[28.94346,-2.69124],[29.00357,-2.70596],[29.04081,-2.7416],[29.00167,-2.78523],[29.00404,-2.81978],[29.0505,-2.81774],[29.09119,-2.87871],[29.09797,-2.91935],[29.16037,-2.95457],[29.17258,-2.99385],[29.25633,-3.05471],[29.21463,-3.3514],[29.23708,-3.75856],[29.43673,-4.44845],[29.52552,-6.2731],[30.2567,-7.14121],[30.79243,-8.27382],[28.88917,-8.4831],[28.9711,-8.66935],[28.38526,-9.23393],[28.36562,-9.30091],[28.52636,-9.35379],[28.51627,-9.44726],[28.56208,-9.49122],[28.68532,-9.78],[28.62795,-9.92942],[28.65032,-10.65133],[28.37241,-11.57848],[28.48357,-11.87532],[29.18592,-12.37921],[29.4992,-12.43843],[29.48404,-12.23604],[29.8139,-12.14898],[29.81551,-13.44683],[29.65078,-13.41844],[29.60531,-13.21685],[29.01918,-13.41353],[28.33199,-12.41375],[27.59932,-12.22123],[27.21025,-11.76157],[27.22541,-11.60323],[27.04351,-11.61312],[26.88687,-12.01868],[26.01777,-11.91488],[25.33058,-11.65767],[25.34069,-11.19707],[24.42612,-11.44975],[24.34528,-11.06816],[24.00027,-10.89356],[23.86868,-11.02856],[23.45631,-10.946],[23.16602,-11.10577],[22.54205,-11.05784],[22.25951,-11.24911],[22.17954,-10.85884],[22.32604,-10.76291],[22.19039,-9.94628],[21.84856,-9.59871],[21.79824,-7.29628],[20.56263,-7.28566],[20.61689,-6.90876],[20.31846,-6.91953],[20.30218,-6.98955],[19.5469,-7.00195],[19.33698,-7.99743],[18.33635,-8.00126],[17.5828,-8.13784],[16.96282,-7.21787],[16.55507,-5.85631],[13.04371,-5.87078],[12.42245,-6.07585],[11.95767,-5.94705],[12.20376,-5.76338],[12.26557,-5.74031],[12.52318,-5.74353],[12.52301,-5.17481],[12.53599,-5.1618],[12.53586,-5.14658],[12.51589,-5.1332],[12.49815,-5.14058],[12.46297,-5.09408],[12.60251,-5.01715],[12.63465,-4.94632],[12.70868,-4.95505],[12.8733,-4.74346],[13.11195,-4.67745],[13.09648,-4.63739],[13.11182,-4.5942],[13.41764,-4.89897],[13.50305,-4.77818],[13.70417,-4.72601],[13.71794,-4.44864],[13.81162,-4.41842],[13.9108,-4.50906],[14.40672,-4.28381],[14.3957,-4.36623],[14.47284,-4.42941],[14.37366,-4.56125],[14.41499,-4.8825],[14.5059,-4.84956],[14.67948,-4.92093],[14.83101,-4.80838],[15.1978,-4.32388],[15.25411,-4.31121],[15.32693,-4.27282],[15.41785,-4.28381],[15.48121,-4.22062],[15.53081,-4.042],[15.89448,-3.9513],[16.21407,-3.2969],[16.1755,-3.25014],[16.22785,-2.59528],[16.16173,-2.16586],[16.50336,-1.8795],[16.70724,-1.45815],[16.97999,-1.12762],[17.32438,-0.99265],[17.72112,-0.52707],[17.66051,-0.26535],[17.81204,0.23884],[17.93877,0.32424],[17.95255,0.48128],[17.86989,0.58873],[17.85887,1.04327],[18.08034,1.58553],[18.10683,2.26876],[18.63857,3.19342],[18.62755,3.47564],[20.60184,4.42394],[20.90383,4.44877],[21.08793,4.39603],[21.11214,4.33895],[21.21341,4.29285],[21.25744,4.33676],[21.55904,4.25553],[21.6405,4.317],[22.10721,4.20723],[22.27682,4.11347],[22.45504,4.13039],[22.5431,4.22041],[22.60915,4.48821],[22.6928,4.47285],[22.78526,4.71423],[22.84691,4.69887],[22.89094,4.79321],[22.94817,4.82392],[23.38847,4.60013],[24.46719,5.0915],[24.71816,4.90509],[25.31256,5.03668],[25.34558,5.29101],[25.53271,5.37431],[25.86073,5.19455],[26.13371,5.25594],[26.48595,5.04984],[26.74572,5.10685],[26.85579,5.03887],[26.93064,5.13535],[27.09575,5.22305],[27.44012,5.07349]]]]}},{type:"Feature",properties:{iso1A2:"VE",iso1A3:"VEN",iso1N3:"862",wikidata:"Q717",nameEn:"Venezuela",aliases:["YV"],groups:["005","419","019"],callingCodes:["58"]},geometry:{type:"MultiPolygon",coordinates:[[[[-71.22331,13.01387],[-68.99639,11.79035],[-68.33524,11.78151],[-68.01417,11.77722],[-67.89186,12.4116],[-63.19938,16.44103],[-63.73917,11.92623],[-61.62505,11.18974],[-62.08693,10.04435],[-60.89962,9.81445],[-59.54058,8.6862],[-59.98508,8.53046],[-59.85562,8.35213],[-59.80661,8.28906],[-59.83156,8.23261],[-59.97059,8.20791],[-60.02407,8.04557],[-60.38056,7.8302],[-60.51959,7.83373],[-60.64793,7.56877],[-60.71923,7.55817],[-60.59802,7.33194],[-60.63367,7.25061],[-60.54098,7.14804],[-60.44116,7.20817],[-60.28074,7.1162],[-60.39419,6.94847],[-60.54873,6.8631],[-61.13632,6.70922],[-61.20762,6.58174],[-61.15058,6.19558],[-61.4041,5.95304],[-60.73204,5.20931],[-60.5802,4.94312],[-60.86539,4.70512],[-60.98303,4.54167],[-61.15703,4.49839],[-61.31457,4.54167],[-61.29675,4.44216],[-61.48569,4.43149],[-61.54629,4.2822],[-62.13094,4.08309],[-62.44822,4.18621],[-62.57656,4.04754],[-62.74411,4.03331],[-62.7655,3.73099],[-62.98296,3.59935],[-63.21111,3.96219],[-63.4464,3.9693],[-63.42233,3.89995],[-63.50611,3.83592],[-63.67099,4.01731],[-63.70218,3.91417],[-63.86082,3.94796],[-63.99183,3.90172],[-64.14512,4.12932],[-64.57648,4.12576],[-64.72977,4.28931],[-64.84028,4.24665],[-64.48379,3.7879],[-64.02908,2.79797],[-64.0257,2.48156],[-63.39114,2.4317],[-63.39827,2.16098],[-64.06135,1.94722],[-64.08274,1.64792],[-64.34654,1.35569],[-64.38932,1.5125],[-65.11657,1.12046],[-65.57288,0.62856],[-65.50158,0.92086],[-65.6727,1.01353],[-66.28507,0.74585],[-66.85795,1.22998],[-67.21967,2.35778],[-67.65696,2.81691],[-67.85862,2.79173],[-67.85862,2.86727],[-67.30945,3.38393],[-67.50067,3.75812],[-67.62671,3.74303],[-67.85358,4.53249],[-67.83341,5.31104],[-67.59141,5.5369],[-67.63914,5.64963],[-67.58558,5.84537],[-67.43513,5.98835],[-67.4625,6.20625],[-67.60654,6.2891],[-69.41843,6.1072],[-70.10716,6.96516],[-70.7596,7.09799],[-71.03941,6.98163],[-71.37234,7.01588],[-71.42212,7.03854],[-71.44118,7.02116],[-71.82441,7.04314],[-72.04895,7.03837],[-72.19437,7.37034],[-72.43132,7.40034],[-72.47415,7.48928],[-72.45321,7.57232],[-72.47827,7.65604],[-72.46763,7.79518],[-72.44454,7.86031],[-72.46183,7.90682],[-72.45806,7.91141],[-72.47042,7.92306],[-72.48183,7.92909],[-72.48801,7.94329],[-72.47213,7.96106],[-72.39137,8.03534],[-72.35163,8.01163],[-72.36987,8.19976],[-72.4042,8.36513],[-72.65474,8.61428],[-72.77415,9.10165],[-72.94052,9.10663],[-73.02119,9.27584],[-73.36905,9.16636],[-72.98085,9.85253],[-72.88002,10.44309],[-72.4767,11.1117],[-72.24983,11.14138],[-71.9675,11.65536],[-71.3275,11.85],[-70.92579,11.96275],[-71.22331,13.01387]]]]}},{type:"Feature",properties:{iso1A2:"CY",iso1A3:"CYP",iso1N3:"196",wikidata:"Q229",nameEn:"Cyprus",groups:["EU","145","142"],driveSide:"left",callingCodes:["357"]},geometry:{type:"MultiPolygon",coordinates:[[[[33.70639,34.99303],[33.70575,34.97947],[33.83531,34.73974],[33.26744,34.49942],[33.0138,34.64424],[32.96968,34.64046],[32.96718,34.63446],[32.95891,34.62919],[32.95323,34.64075],[32.95471,34.64528],[32.94976,34.65204],[32.94796,34.6587],[32.95325,34.66462],[32.97079,34.66112],[32.97736,34.65277],[32.99014,34.65518],[32.98668,34.67268],[32.99135,34.68061],[32.95539,34.68471],[32.94683,34.67907],[32.94379,34.67111],[32.93693,34.67027],[32.93449,34.66241],[32.92807,34.66736],[32.93043,34.67091],[32.91398,34.67343],[32.9068,34.66102],[32.86167,34.68734],[32.86014,34.70585],[32.82717,34.70622],[32.79433,34.67883],[32.76136,34.68318],[32.75515,34.64985],[32.74412,34.43926],[30.15137,34.08517],[32.82353,35.70297],[35.51152,36.10954],[35.48515,34.70851],[33.98684,34.76642],[33.90075,34.96623],[33.86432,34.97592],[33.84811,34.97075],[33.83505,34.98108],[33.85621,34.98956],[33.85891,35.001],[33.85216,35.00579],[33.84045,35.00616],[33.82875,35.01685],[33.83055,35.02865],[33.81524,35.04192],[33.8012,35.04786],[33.82051,35.0667],[33.8355,35.05777],[33.85261,35.0574],[33.88367,35.07877],[33.89485,35.06873],[33.90247,35.07686],[33.91299,35.07579],[33.91789,35.08688],[33.89853,35.11377],[33.88737,35.11408],[33.88943,35.12007],[33.88561,35.12449],[33.87224,35.12293],[33.87622,35.10457],[33.87097,35.09389],[33.87479,35.08881],[33.8541,35.07201],[33.84168,35.06823],[33.82067,35.07826],[33.78581,35.05104],[33.76106,35.04253],[33.73824,35.05321],[33.71482,35.03722],[33.70209,35.04882],[33.7161,35.07279],[33.70861,35.07644],[33.69095,35.06237],[33.68474,35.06602],[33.67742,35.05963],[33.67678,35.03866],[33.69938,35.03123],[33.69731,35.01754],[33.71514,35.00294],[33.70639,34.99303]]],[[[33.74144,35.01053],[33.7343,35.01178],[33.73781,35.02181],[33.74265,35.02329],[33.74983,35.02274],[33.7492,35.01319],[33.74144,35.01053]]],[[[33.77312,34.9976],[33.77553,34.99518],[33.78516,34.99582],[33.79191,34.98914],[33.78917,34.98854],[33.78571,34.98951],[33.78318,34.98699],[33.78149,34.98854],[33.77843,34.988],[33.7778,34.98981],[33.76738,34.99188],[33.76605,34.99543],[33.75682,34.99916],[33.75994,35.00113],[33.77312,34.9976]]]]}},{type:"Feature",properties:{iso1A2:"VG",iso1A3:"VGB",iso1N3:"092",wikidata:"Q25305",nameEn:"British Virgin Islands",country:"GB",groups:["029","003","419","019"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["1 284"]},geometry:{type:"MultiPolygon",coordinates:[[[[-64.03057,18.08241],[-64.646,18.10286],[-64.64067,18.36478],[-64.86027,18.39056],[-65.02435,18.73231],[-63.75633,19.39745],[-64.03057,18.08241]]]]}},{type:"Feature",properties:{iso1A2:"ET",iso1A3:"ETH",iso1N3:"231",wikidata:"Q115",nameEn:"Ethiopia",groups:["014","202","002"],callingCodes:["251"]},geometry:{type:"MultiPolygon",coordinates:[[[[42.4037,12.46478],[41.95461,11.81157],[41.82878,11.72361],[41.77727,11.49902],[41.8096,11.33606],[41.80056,10.97127],[42.06302,10.92599],[42.13691,10.97586],[42.42669,10.98493],[42.62989,11.09711],[42.75111,11.06992],[42.79037,10.98493],[42.95776,10.98533],[42.69452,10.62672],[42.87643,10.18441],[43.0937,9.90579],[43.23518,9.84605],[43.32613,9.59205],[44.19222,8.93028],[46.99339,7.9989],[47.92477,8.00111],[47.97917,8.00124],[44.98104,4.91821],[44.02436,4.9451],[43.40263,4.79289],[43.04177,4.57923],[42.97746,4.44032],[42.84526,4.28357],[42.55853,4.20518],[42.07619,4.17667],[41.89488,3.97375],[41.1754,3.94079],[40.77498,4.27683],[39.86043,3.86974],[39.76808,3.67058],[39.58339,3.47434],[39.55132,3.39634],[39.51551,3.40895],[39.49444,3.45521],[39.19954,3.47834],[39.07736,3.5267],[38.91938,3.51198],[38.52336,3.62551],[38.45812,3.60445],[38.14168,3.62487],[37.07724,4.33503],[36.84474,4.44518],[36.03924,4.44406],[35.95449,4.53244],[35.9419,4.61933],[35.82118,4.77382],[35.81968,5.10757],[35.8576,5.33413],[35.50792,5.42431],[35.29938,5.34042],[35.31188,5.50106],[35.13058,5.62118],[35.12611,5.68937],[35.00546,5.89387],[34.96227,6.26415],[35.01738,6.46991],[34.87736,6.60161],[34.77459,6.5957],[34.65096,6.72589],[34.53776,6.74808],[34.53925,6.82794],[34.47669,6.91076],[34.35753,6.91963],[34.19369,7.04382],[34.19369,7.12807],[34.01495,7.25664],[34.03878,7.27437],[34.02984,7.36449],[33.87642,7.5491],[33.71407,7.65983],[33.44745,7.7543],[33.32531,7.71297],[33.24637,7.77939],[33.04944,7.78989],[33.0006,7.90333],[33.08401,8.05822],[33.18083,8.13047],[33.1853,8.29264],[33.19721,8.40317],[33.3119,8.45474],[33.54575,8.47094],[33.66938,8.44442],[33.71407,8.3678],[33.87195,8.41938],[33.89579,8.4842],[34.01346,8.50041],[34.14453,8.60204],[34.14304,9.04654],[34.10229,9.50238],[34.08717,9.55243],[34.13186,9.7492],[34.20484,9.9033],[34.22718,10.02506],[34.32102,10.11599],[34.34783,10.23914],[34.2823,10.53508],[34.4372,10.781],[34.59062,10.89072],[34.77383,10.74588],[34.77532,10.69027],[34.86618,10.74588],[34.86916,10.78832],[34.97491,10.86147],[34.97789,10.91559],[34.93172,10.95946],[35.01215,11.19626],[34.95704,11.24448],[35.09556,11.56278],[35.05832,11.71158],[35.11492,11.85156],[35.24302,11.91132],[35.70476,12.67101],[36.01458,12.72478],[36.14268,12.70879],[36.16651,12.88019],[36.13374,12.92665],[36.24545,13.36759],[36.38993,13.56459],[36.48824,13.83954],[36.44653,13.95666],[36.54376,14.25597],[36.56536,14.26177],[36.55659,14.28237],[36.63364,14.31172],[36.85787,14.32201],[37.01622,14.2561],[37.09486,14.27155],[37.13206,14.40746],[37.3106,14.44657],[37.47319,14.2149],[37.528,14.18413],[37.91287,14.89447],[38.0364,14.72745],[38.25562,14.67287],[38.3533,14.51323],[38.45748,14.41445],[38.78306,14.4754],[38.98058,14.54895],[39.02834,14.63717],[39.16074,14.65187],[39.14772,14.61827],[39.19547,14.56996],[39.23888,14.56365],[39.26927,14.48801],[39.2302,14.44598],[39.2519,14.40393],[39.37685,14.54402],[39.52756,14.49011],[39.50585,14.55735],[39.58182,14.60987],[39.76632,14.54264],[39.9443,14.41024],[40.07236,14.54264],[40.14649,14.53969],[40.21128,14.39342],[40.25686,14.41445],[40.9167,14.11152],[41.25097,13.60787],[41.62864,13.38626],[42.05841,12.80912],[42.21469,12.75832],[42.2798,12.6355],[42.4037,12.46478]]]]}},{type:"Feature",properties:{iso1A2:"VI",iso1A3:"VIR",iso1N3:"850",wikidata:"Q11703",nameEn:"United States Virgin Islands",country:"US",groups:["029","003","419","019"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["1 340"]},geometry:{type:"MultiPolygon",coordinates:[[[[-65.02435,18.73231],[-64.86027,18.39056],[-64.64067,18.36478],[-64.646,18.10286],[-64.35558,17.48384],[-65.27974,17.56928],[-65.02435,18.73231]]]]}},{type:"Feature",properties:{iso1A2:"GI",iso1A3:"GIB",iso1N3:"292",wikidata:"Q1410",nameEn:"Gibraltar",country:"GB",groups:["EU","039","150"],callingCodes:["350"]},geometry:{type:"MultiPolygon",coordinates:[[[[-5.28217,36.09907],[-5.3004,36.07439],[-5.32837,36.05935],[-5.36503,36.06205],[-5.39074,36.10278],[-5.40134,36.14896],[-5.38545,36.15481],[-5.36494,36.15496],[-5.34536,36.15501],[-5.33822,36.15272],[-5.27801,36.14942],[-5.28217,36.09907]]]]}},{type:"Feature",properties:{iso1A2:"VN",iso1A3:"VNM",iso1N3:"704",wikidata:"Q881",nameEn:"Vietnam",groups:["035","142"],callingCodes:["84"]},geometry:{type:"MultiPolygon",coordinates:[[[[108.10003,21.47338],[108.00365,17.98159],[111.60491,13.57105],[109.55486,8.10026],[104.81582,8.03101],[102.47649,9.66162],[103.99198,10.48391],[104.43778,10.42386],[104.47963,10.43046],[104.49869,10.4057],[104.59018,10.53073],[104.87933,10.52833],[104.95094,10.64003],[105.09571,10.72722],[105.02722,10.89236],[105.08326,10.95656],[105.11449,10.96332],[105.34011,10.86179],[105.42884,10.96878],[105.50045,10.94586],[105.77751,11.03671],[105.86376,10.89839],[105.84603,10.85873],[105.93403,10.83853],[105.94535,10.9168],[106.06708,10.8098],[106.18539,10.79451],[106.14301,10.98176],[106.20095,10.97795],[106.1757,11.07301],[106.1527,11.10476],[106.10444,11.07879],[105.86782,11.28343],[105.88962,11.43605],[105.87328,11.55953],[105.81645,11.56876],[105.80867,11.60536],[105.8507,11.66635],[105.88962,11.67854],[105.95188,11.63738],[106.00792,11.7197],[106.02038,11.77457],[106.06708,11.77761],[106.13158,11.73283],[106.18539,11.75171],[106.26478,11.72122],[106.30525,11.67549],[106.37219,11.69836],[106.44691,11.66787],[106.45158,11.68616],[106.41577,11.76999],[106.44535,11.8279],[106.44068,11.86294],[106.4687,11.86751],[106.4111,11.97413],[106.70687,11.96956],[106.79405,12.0807],[106.92325,12.06548],[106.99953,12.08983],[107.15831,12.27547],[107.34511,12.33327],[107.42917,12.24657],[107.4463,12.29373],[107.55059,12.36824],[107.5755,12.52177],[107.55993,12.7982],[107.49611,12.88926],[107.49144,13.01215],[107.62843,13.3668],[107.61909,13.52577],[107.53503,13.73908],[107.45252,13.78897],[107.46498,13.91593],[107.44318,13.99751],[107.38247,13.99147],[107.35757,14.02319],[107.37158,14.07906],[107.33577,14.11832],[107.40427,14.24509],[107.39493,14.32655],[107.44941,14.41552],[107.48521,14.40346],[107.52569,14.54665],[107.52102,14.59034],[107.55371,14.628],[107.54361,14.69092],[107.51579,14.79282],[107.59285,14.87795],[107.48277,14.93751],[107.46516,15.00982],[107.61486,15.0566],[107.61926,15.13949],[107.58844,15.20111],[107.62587,15.2266],[107.60605,15.37524],[107.62367,15.42193],[107.53341,15.40496],[107.50699,15.48771],[107.3815,15.49832],[107.34408,15.62345],[107.27583,15.62769],[107.27143,15.71459],[107.21859,15.74638],[107.21419,15.83747],[107.34188,15.89464],[107.39471,15.88829],[107.46296,16.01106],[107.44975,16.08511],[107.33968,16.05549],[107.25822,16.13587],[107.14595,16.17816],[107.15035,16.26271],[107.09091,16.3092],[107.02597,16.31132],[106.97385,16.30204],[106.96638,16.34938],[106.88067,16.43594],[106.88727,16.52671],[106.84104,16.55415],[106.74418,16.41904],[106.65832,16.47816],[106.66052,16.56892],[106.61477,16.60713],[106.58267,16.6012],[106.59013,16.62259],[106.55485,16.68704],[106.55265,16.86831],[106.52183,16.87884],[106.51963,16.92097],[106.54824,16.92729],[106.55045,17.0031],[106.50862,16.9673],[106.43597,17.01362],[106.31929,17.20509],[106.29287,17.3018],[106.24444,17.24714],[106.18991,17.28227],[106.09019,17.36399],[105.85744,17.63221],[105.76612,17.67147],[105.60381,17.89356],[105.64784,17.96687],[105.46292,18.22008],[105.38366,18.15315],[105.15942,18.38691],[105.10408,18.43533],[105.1327,18.58355],[105.19654,18.64196],[105.12829,18.70453],[104.64617,18.85668],[104.5361,18.97747],[103.87125,19.31854],[104.06058,19.43484],[104.10832,19.51575],[104.05617,19.61743],[104.06498,19.66926],[104.23229,19.70242],[104.41281,19.70035],[104.53169,19.61743],[104.64837,19.62365],[104.68359,19.72729],[104.8355,19.80395],[104.8465,19.91783],[104.9874,20.09573],[104.91695,20.15567],[104.86852,20.14121],[104.61315,20.24452],[104.62195,20.36633],[104.72102,20.40554],[104.66158,20.47774],[104.47886,20.37459],[104.40621,20.3849],[104.38199,20.47155],[104.63957,20.6653],[104.27412,20.91433],[104.11121,20.96779],[103.98024,20.91531],[103.82282,20.8732],[103.73478,20.6669],[103.68633,20.66324],[103.45737,20.82382],[103.38032,20.79501],[103.21497,20.89832],[103.12055,20.89994],[103.03469,21.05821],[102.97745,21.05821],[102.89825,21.24707],[102.80794,21.25736],[102.88939,21.3107],[102.94223,21.46034],[102.86297,21.4255],[102.98846,21.58936],[102.97965,21.74076],[102.86077,21.71213],[102.85637,21.84501],[102.81894,21.83888],[102.82115,21.73667],[102.74189,21.66713],[102.67145,21.65894],[102.62301,21.91447],[102.49092,21.99002],[102.51734,22.02676],[102.18712,22.30403],[102.14099,22.40092],[102.16621,22.43336],[102.26428,22.41321],[102.25339,22.4607],[102.41061,22.64184],[102.38415,22.67919],[102.42618,22.69212],[102.46665,22.77108],[102.51802,22.77969],[102.57095,22.7036],[102.60675,22.73376],[102.8636,22.60735],[102.9321,22.48659],[103.0722,22.44775],[103.07843,22.50097],[103.17961,22.55705],[103.15782,22.59873],[103.18895,22.64471],[103.28079,22.68063],[103.32282,22.8127],[103.43179,22.75816],[103.43646,22.70648],[103.52675,22.59155],[103.57812,22.65764],[103.56255,22.69499],[103.64506,22.79979],[103.87904,22.56683],[103.93286,22.52703],[103.94513,22.52553],[103.95191,22.5134],[103.96352,22.50584],[103.96783,22.51173],[103.97384,22.50634],[103.99247,22.51958],[104.01088,22.51823],[104.03734,22.72945],[104.11384,22.80363],[104.27084,22.8457],[104.25683,22.76534],[104.35593,22.69353],[104.47225,22.75813],[104.58122,22.85571],[104.60457,22.81841],[104.65283,22.83419],[104.72755,22.81984],[104.77114,22.90017],[104.84942,22.93631],[104.86765,22.95178],[104.8334,23.01484],[104.79478,23.12934],[104.87382,23.12854],[104.87992,23.17141],[104.91435,23.18666],[104.9486,23.17235],[104.96532,23.20463],[104.98712,23.19176],[105.07002,23.26248],[105.11672,23.25247],[105.17276,23.28679],[105.22569,23.27249],[105.32376,23.39684],[105.40782,23.28107],[105.42805,23.30824],[105.49966,23.20669],[105.56037,23.16806],[105.57594,23.075],[105.72382,23.06641],[105.8726,22.92756],[105.90119,22.94168],[105.99568,22.94178],[106.00179,22.99049],[106.19705,22.98475],[106.27022,22.87722],[106.34961,22.86718],[106.49749,22.91164],[106.51306,22.94891],[106.55976,22.92311],[106.60179,22.92884],[106.6516,22.86862],[106.6734,22.89587],[106.71387,22.88296],[106.71128,22.85982],[106.78422,22.81532],[106.81271,22.8226],[106.83685,22.8098],[106.82404,22.7881],[106.76293,22.73491],[106.72321,22.63606],[106.71698,22.58432],[106.65316,22.5757],[106.61269,22.60301],[106.58395,22.474],[106.55665,22.46498],[106.57221,22.37],[106.55976,22.34841],[106.6516,22.33977],[106.69986,22.22309],[106.67495,22.1885],[106.6983,22.15102],[106.70142,22.02409],[106.68274,21.99811],[106.69276,21.96013],[106.72551,21.97923],[106.74345,22.00965],[106.81038,21.97934],[106.9178,21.97357],[106.92714,21.93459],[106.97228,21.92592],[106.99252,21.95191],[107.05634,21.92303],[107.06101,21.88982],[107.00964,21.85948],[107.02615,21.81981],[107.10771,21.79879],[107.20734,21.71493],[107.24625,21.7077],[107.29296,21.74674],[107.35834,21.6672],[107.35989,21.60063],[107.38636,21.59774],[107.41593,21.64839],[107.47197,21.6672],[107.49532,21.62958],[107.49065,21.59774],[107.54047,21.5934],[107.56537,21.61945],[107.66967,21.60787],[107.80355,21.66141],[107.86114,21.65128],[107.90006,21.5905],[107.92652,21.58906],[107.95232,21.5388],[107.96774,21.53601],[107.97074,21.54072],[107.97383,21.53961],[107.97932,21.54503],[108.02926,21.54997],[108.0569,21.53604],[108.10003,21.47338]]]]}},{type:"Feature",properties:{iso1A2:"HT",iso1A3:"HTI",iso1N3:"332",wikidata:"Q790",nameEn:"Haiti",aliases:["RH"],groups:["029","003","419","019"],callingCodes:["509"]},geometry:{type:"MultiPolygon",coordinates:[[[[-71.71885,18.78423],[-71.82556,18.62551],[-71.95412,18.64939],[-72.00201,18.62312],[-71.88102,18.50125],[-71.90875,18.45821],[-71.69952,18.34101],[-71.78271,18.18302],[-71.75465,18.14405],[-71.74994,18.11115],[-71.73783,18.07177],[-71.75671,18.03456],[-72.29523,17.48026],[-74.76465,18.06252],[-74.7289,18.71009],[-73.37289,20.43199],[-72.38946,20.27111],[-71.77419,19.73128],[-71.75865,19.70231],[-71.7429,19.58445],[-71.71449,19.55364],[-71.71268,19.53374],[-71.6802,19.45008],[-71.69448,19.37866],[-71.77766,19.33823],[-71.73229,19.26686],[-71.62642,19.21212],[-71.65337,19.11759],[-71.69938,19.10916],[-71.71088,19.08353],[-71.74088,19.0437],[-71.88102,18.95007],[-71.77766,18.95007],[-71.72624,18.87802],[-71.71885,18.78423]]]]}},{type:"Feature",properties:{iso1A2:"VU",iso1A3:"VUT",iso1N3:"548",wikidata:"Q686",nameEn:"Vanuatu",groups:["054","009"],callingCodes:["678"]},geometry:{type:"MultiPolygon",coordinates:[[[[162.93363,-17.28904],[166.02864,-12.9396],[168.21179,-12.88558],[173.26254,-22.69968],[162.93363,-17.28904]]]]}},{type:"Feature",properties:{iso1A2:"JP",iso1A3:"JPN",iso1N3:"392",wikidata:"Q17",nameEn:"Japan",groups:["030","142"],driveSide:"left",callingCodes:["81"]},geometry:{type:"MultiPolygon",coordinates:[[[[145.82361,43.38904],[155.16731,23.60141],[123.92912,17.8782],[122.26612,25.98197],[129.2669,34.87122],[133.61399,37.41],[140.9182,45.92937],[145.82343,44.571],[145.23667,43.76813],[145.82361,43.38904]]]]}},{type:"Feature",properties:{iso1A2:"WF",iso1A3:"WLF",iso1N3:"876",wikidata:"Q35555",nameEn:"Wallis and Futuna",country:"FR",groups:["061","009"],callingCodes:["681"]},geometry:{type:"MultiPolygon",coordinates:[[[[-178.60161,-14.95666],[-178.60852,-12.49232],[-174.18596,-12.48057],[-174.17905,-14.94502],[-176.76826,-14.95183],[-178.60161,-14.95666]]]]}},{type:"Feature",properties:{iso1A2:"AZ",iso1A3:"AZE",iso1N3:"031",wikidata:"Q227",nameEn:"Azerbaijan",groups:["145","142"],callingCodes:["994"]},geometry:{type:"MultiPolygon",coordinates:[[[[46.42738,41.91323],[46.5332,41.87389],[46.58924,41.80547],[46.75269,41.8623],[46.8134,41.76252],[47.00955,41.63583],[46.99554,41.59743],[47.03757,41.55434],[47.10762,41.59044],[47.34579,41.27884],[47.49004,41.26366],[47.54504,41.20275],[47.62288,41.22969],[47.75831,41.19455],[47.87973,41.21798],[48.07587,41.49957],[48.22064,41.51472],[48.2878,41.56221],[48.40277,41.60441],[48.42301,41.65444],[48.55078,41.77917],[48.5867,41.84306],[48.80971,41.95365],[52.39847,39.43556],[48.88288,38.43975],[48.84969,38.45015],[48.81072,38.44853],[48.78979,38.45026],[48.70001,38.40564],[48.62217,38.40198],[48.58793,38.45076],[48.45084,38.61013],[48.3146,38.59958],[48.24773,38.71883],[48.02581,38.82705],[48.01409,38.90333],[48.07734,38.91616],[48.08627,38.94434],[48.28437,38.97186],[48.33884,39.03022],[48.31239,39.09278],[48.15361,39.19419],[48.12404,39.25208],[48.15984,39.30028],[48.37385,39.37584],[48.34264,39.42935],[47.98977,39.70999],[47.84774,39.66285],[47.50099,39.49615],[47.38978,39.45999],[47.31301,39.37492],[47.05927,39.24846],[47.05771,39.20143],[46.95341,39.13505],[46.92539,39.16644],[46.83822,39.13143],[46.75752,39.03231],[46.53497,38.86548],[46.51805,38.94982],[46.54296,39.07078],[46.44022,39.19636],[46.52584,39.18912],[46.54141,39.15895],[46.58032,39.21204],[46.63481,39.23013],[46.56476,39.24942],[46.50093,39.33736],[46.43244,39.35181],[46.37795,39.42039],[46.4013,39.45405],[46.53051,39.47809],[46.51027,39.52373],[46.57721,39.54414],[46.57098,39.56694],[46.52117,39.58734],[46.42465,39.57534],[46.40286,39.63651],[46.18493,39.60533],[45.96543,39.78859],[45.82533,39.82925],[45.7833,39.9475],[45.60895,39.97733],[45.59806,40.0131],[45.78642,40.03218],[45.83779,39.98925],[45.97944,40.181],[45.95609,40.27846],[45.65098,40.37696],[45.42994,40.53804],[45.45484,40.57707],[45.35366,40.65979],[45.4206,40.7424],[45.55914,40.78366],[45.60584,40.87436],[45.40814,40.97904],[45.44083,41.01663],[45.39725,41.02603],[45.35677,40.99784],[45.28859,41.03757],[45.26162,41.0228],[45.25897,41.0027],[45.1994,41.04518],[45.16493,41.05068],[45.1634,41.08082],[45.1313,41.09369],[45.12923,41.06059],[45.06784,41.05379],[45.08028,41.10917],[45.19942,41.13299],[45.1969,41.168],[45.11811,41.19967],[45.05201,41.19211],[45.02932,41.2101],[45.05497,41.2464],[45.0133,41.29747],[45.09867,41.34065],[45.1797,41.42231],[45.26285,41.46433],[45.31352,41.47168],[45.4006,41.42402],[45.45973,41.45898],[45.68389,41.3539],[45.71035,41.36208],[45.75705,41.35157],[45.69946,41.29545],[45.80842,41.2229],[45.95786,41.17956],[46.13221,41.19479],[46.27698,41.19011],[46.37661,41.10805],[46.456,41.09984],[46.48558,41.0576],[46.55096,41.1104],[46.63969,41.09515],[46.66148,41.20533],[46.72375,41.28609],[46.63658,41.37727],[46.4669,41.43331],[46.40307,41.48464],[46.33925,41.4963],[46.29794,41.5724],[46.34126,41.57454],[46.34039,41.5947],[46.3253,41.60912],[46.28182,41.60089],[46.26531,41.63339],[46.24429,41.59883],[46.19759,41.62327],[46.17891,41.72094],[46.20538,41.77205],[46.23962,41.75811],[46.30863,41.79133],[46.3984,41.84399],[46.42738,41.91323]],[[45.50279,40.58424],[45.56071,40.64765],[45.51825,40.67382],[45.47927,40.65023],[45.50279,40.58424]]],[[[45.00864,41.03411],[44.9903,41.05657],[44.96031,41.06345],[44.95383,41.07553],[44.97169,41.09176],[45.00864,41.09407],[45.03406,41.07931],[45.04517,41.06653],[45.03792,41.03938],[45.00864,41.03411]]],[[[45.21324,40.9817],[45.21219,40.99001],[45.20518,40.99348],[45.19312,40.98998],[45.18382,41.0066],[45.20625,41.01484],[45.23487,41.00226],[45.23095,40.97828],[45.21324,40.9817]]],[[[45.46992,39.49888],[45.70547,39.60174],[45.80804,39.56716],[45.83,39.46487],[45.79225,39.3695],[45.99774,39.28931],[46.02303,39.09978],[46.06973,39.0744],[46.14785,38.84206],[46.06766,38.87861],[46.00228,38.87376],[45.94624,38.89072],[45.90266,38.87739],[45.83883,38.90768],[45.65172,38.95199],[45.6155,38.94304],[45.6131,38.964],[45.44966,38.99243],[45.44811,39.04927],[45.40452,39.07224],[45.40148,39.09007],[45.30489,39.18333],[45.16168,39.21952],[45.08751,39.35052],[45.05932,39.36435],[44.96746,39.42998],[44.88916,39.59653],[44.81043,39.62677],[44.80977,39.65768],[44.75779,39.7148],[44.88354,39.74432],[44.92869,39.72157],[45.06604,39.79277],[45.18554,39.67846],[45.17464,39.58614],[45.21784,39.58074],[45.23535,39.61373],[45.30385,39.61373],[45.29606,39.57654],[45.46992,39.49888]]]]}},{type:"Feature",properties:{iso1A2:"WS",iso1A3:"WSM",iso1N3:"882",wikidata:"Q683",nameEn:"Samoa",groups:["061","009"],driveSide:"left",callingCodes:["685"]},geometry:{type:"MultiPolygon",coordinates:[[[[-174.17905,-14.94502],[-174.18596,-12.48057],[-171.14953,-12.4725],[-171.14262,-14.93704],[-173.13438,-14.94228],[-174.17905,-14.94502]]]]}},{type:"Feature",properties:{iso1A2:"CN",iso1A3:"CHN",iso1N3:"156",wikidata:"Q148",nameEn:"China",aliases:["RC"],groups:["030","142"],callingCodes:["86"]},geometry:{type:"MultiPolygon",coordinates:[[[[125.6131,53.07229],[126.558,52.13738],[126.44606,51.98254],[126.68349,51.70607],[126.90369,51.3238],[126.93135,51.0841],[127.14586,50.91152],[127.28165,50.72075],[127.36335,50.58306],[127.28765,50.46585],[127.36009,50.43787],[127.37384,50.28393],[127.60515,50.23503],[127.49299,50.01251],[127.53516,49.84306],[127.83476,49.5748],[128.72896,49.58676],[129.11153,49.36813],[129.23232,49.40353],[129.35317,49.3481],[129.40398,49.44194],[129.50685,49.42398],[129.67598,49.29596],[129.85416,49.11067],[130.2355,48.86741],[130.43232,48.90844],[130.66946,48.88251],[130.52147,48.61745],[130.84462,48.30942],[130.65103,48.10052],[130.90915,47.90623],[130.95985,47.6957],[131.09871,47.6852],[131.2635,47.73325],[131.90448,47.68011],[132.57309,47.71741],[132.66989,47.96491],[134.49516,48.42884],[134.75328,48.36763],[134.67098,48.1564],[134.55508,47.98651],[134.7671,47.72051],[134.50898,47.4812],[134.20016,47.33458],[134.03538,46.75668],[133.84104,46.46681],[133.91496,46.4274],[133.88097,46.25066],[133.68047,46.14697],[133.72695,46.05576],[133.67569,45.9759],[133.60442,45.90053],[133.48457,45.86203],[133.41083,45.57723],[133.19419,45.51913],[133.09279,45.25693],[133.12293,45.1332],[132.96373,45.0212],[132.83978,45.05916],[131.99417,45.2567],[131.86903,45.33636],[131.76532,45.22609],[131.66852,45.2196],[131.68466,45.12374],[131.48415,44.99513],[130.95639,44.85154],[131.1108,44.70266],[131.30365,44.04262],[131.25484,44.03131],[131.23583,43.96085],[131.26176,43.94011],[131.21105,43.82383],[131.19492,43.53047],[131.29402,43.46695],[131.30324,43.39498],[131.19031,43.21385],[131.20414,43.13654],[131.10274,43.04734],[131.135,42.94114],[131.02668,42.91246],[131.02438,42.86518],[130.66524,42.84753],[130.44361,42.76205],[130.40213,42.70788],[130.56576,42.68925],[130.62107,42.58413],[130.55143,42.52158],[130.50123,42.61636],[130.44361,42.54849],[130.41826,42.6011],[130.2385,42.71127],[130.23068,42.80125],[130.26095,42.9027],[130.09764,42.91425],[130.12957,42.98361],[129.96409,42.97306],[129.95082,43.01051],[129.8865,43.00395],[129.85261,42.96494],[129.83277,42.86746],[129.80719,42.79218],[129.7835,42.76521],[129.77183,42.69435],[129.75294,42.59409],[129.72541,42.43739],[129.60482,42.44461],[129.54701,42.37254],[129.42882,42.44702],[129.28541,42.41574],[129.22423,42.3553],[129.22285,42.26491],[129.15178,42.17224],[128.96068,42.06657],[128.94007,42.03537],[128.04487,42.01769],[128.15119,41.74568],[128.30716,41.60322],[128.20061,41.40895],[128.18546,41.41279],[128.12967,41.37931],[128.03311,41.39232],[128.02633,41.42103],[127.92943,41.44291],[127.29712,41.49473],[127.17841,41.59714],[126.90729,41.79955],[126.60631,41.65565],[126.53189,41.35206],[126.242,41.15454],[126.00335,40.92835],[125.76869,40.87908],[125.71172,40.85223],[124.86913,40.45387],[124.40719,40.13655],[124.38556,40.11047],[124.3322,40.05573],[124.37089,40.03004],[124.35029,39.95639],[124.23201,39.9248],[124.17532,39.8232],[123.90497,38.79949],[123.85601,37.49093],[122.80525,33.30571],[122.29378,31.76513],[123.5458,31.01942],[121.03532,26.8787],[120.49232,25.22863],[118.56434,24.49266],[118.42453,24.54644],[118.35291,24.51645],[118.28244,24.51231],[118.11703,24.39734],[118.41371,24.06775],[111.60491,13.57105],[108.00365,17.98159],[108.10003,21.47338],[108.0569,21.53604],[108.02926,21.54997],[107.97932,21.54503],[107.97383,21.53961],[107.97074,21.54072],[107.96774,21.53601],[107.95232,21.5388],[107.92652,21.58906],[107.90006,21.5905],[107.86114,21.65128],[107.80355,21.66141],[107.66967,21.60787],[107.56537,21.61945],[107.54047,21.5934],[107.49065,21.59774],[107.49532,21.62958],[107.47197,21.6672],[107.41593,21.64839],[107.38636,21.59774],[107.35989,21.60063],[107.35834,21.6672],[107.29296,21.74674],[107.24625,21.7077],[107.20734,21.71493],[107.10771,21.79879],[107.02615,21.81981],[107.00964,21.85948],[107.06101,21.88982],[107.05634,21.92303],[106.99252,21.95191],[106.97228,21.92592],[106.92714,21.93459],[106.9178,21.97357],[106.81038,21.97934],[106.74345,22.00965],[106.72551,21.97923],[106.69276,21.96013],[106.68274,21.99811],[106.70142,22.02409],[106.6983,22.15102],[106.67495,22.1885],[106.69986,22.22309],[106.6516,22.33977],[106.55976,22.34841],[106.57221,22.37],[106.55665,22.46498],[106.58395,22.474],[106.61269,22.60301],[106.65316,22.5757],[106.71698,22.58432],[106.72321,22.63606],[106.76293,22.73491],[106.82404,22.7881],[106.83685,22.8098],[106.81271,22.8226],[106.78422,22.81532],[106.71128,22.85982],[106.71387,22.88296],[106.6734,22.89587],[106.6516,22.86862],[106.60179,22.92884],[106.55976,22.92311],[106.51306,22.94891],[106.49749,22.91164],[106.34961,22.86718],[106.27022,22.87722],[106.19705,22.98475],[106.00179,22.99049],[105.99568,22.94178],[105.90119,22.94168],[105.8726,22.92756],[105.72382,23.06641],[105.57594,23.075],[105.56037,23.16806],[105.49966,23.20669],[105.42805,23.30824],[105.40782,23.28107],[105.32376,23.39684],[105.22569,23.27249],[105.17276,23.28679],[105.11672,23.25247],[105.07002,23.26248],[104.98712,23.19176],[104.96532,23.20463],[104.9486,23.17235],[104.91435,23.18666],[104.87992,23.17141],[104.87382,23.12854],[104.79478,23.12934],[104.8334,23.01484],[104.86765,22.95178],[104.84942,22.93631],[104.77114,22.90017],[104.72755,22.81984],[104.65283,22.83419],[104.60457,22.81841],[104.58122,22.85571],[104.47225,22.75813],[104.35593,22.69353],[104.25683,22.76534],[104.27084,22.8457],[104.11384,22.80363],[104.03734,22.72945],[104.01088,22.51823],[103.99247,22.51958],[103.97384,22.50634],[103.96783,22.51173],[103.96352,22.50584],[103.95191,22.5134],[103.94513,22.52553],[103.93286,22.52703],[103.87904,22.56683],[103.64506,22.79979],[103.56255,22.69499],[103.57812,22.65764],[103.52675,22.59155],[103.43646,22.70648],[103.43179,22.75816],[103.32282,22.8127],[103.28079,22.68063],[103.18895,22.64471],[103.15782,22.59873],[103.17961,22.55705],[103.07843,22.50097],[103.0722,22.44775],[102.9321,22.48659],[102.8636,22.60735],[102.60675,22.73376],[102.57095,22.7036],[102.51802,22.77969],[102.46665,22.77108],[102.42618,22.69212],[102.38415,22.67919],[102.41061,22.64184],[102.25339,22.4607],[102.26428,22.41321],[102.16621,22.43336],[102.14099,22.40092],[102.1245,22.43372],[102.03633,22.46164],[101.98487,22.42766],[101.91344,22.44417],[101.90714,22.38688],[101.86828,22.38397],[101.7685,22.50337],[101.68973,22.46843],[101.61306,22.27515],[101.56789,22.28876],[101.53638,22.24794],[101.60675,22.13513],[101.57525,22.13026],[101.62566,21.96574],[101.7791,21.83019],[101.74555,21.72852],[101.83257,21.61562],[101.80001,21.57461],[101.7475,21.5873],[101.7727,21.51794],[101.74224,21.48276],[101.74014,21.30967],[101.84412,21.25291],[101.83887,21.20983],[101.76745,21.21571],[101.79266,21.19025],[101.7622,21.14813],[101.70548,21.14911],[101.66977,21.20004],[101.60886,21.17947],[101.59491,21.18621],[101.6068,21.23329],[101.54563,21.25668],[101.29326,21.17254],[101.2229,21.23271],[101.26912,21.36482],[101.19349,21.41959],[101.2124,21.56422],[101.15156,21.56129],[101.11744,21.77659],[100.87265,21.67396],[100.72143,21.51898],[100.57861,21.45637],[100.4811,21.46148],[100.42892,21.54325],[100.35201,21.53176],[100.25863,21.47043],[100.18447,21.51898],[100.1625,21.48704],[100.12542,21.50365],[100.10757,21.59945],[100.17486,21.65306],[100.12679,21.70539],[100.04956,21.66843],[99.98654,21.71064],[99.94003,21.82782],[99.99084,21.97053],[99.96612,22.05965],[99.85351,22.04183],[99.47585,22.13345],[99.33166,22.09656],[99.1552,22.15874],[99.19176,22.16983],[99.17318,22.18025],[99.28771,22.4105],[99.37972,22.50188],[99.38247,22.57544],[99.31243,22.73893],[99.45654,22.85726],[99.43537,22.94086],[99.54218,22.90014],[99.52214,23.08218],[99.34127,23.13099],[99.25741,23.09025],[99.04601,23.12215],[99.05975,23.16382],[98.88597,23.18656],[98.92515,23.29535],[98.93958,23.31414],[98.87573,23.33038],[98.92104,23.36946],[98.87683,23.48995],[98.82877,23.47908],[98.80294,23.5345],[98.88396,23.59555],[98.81775,23.694],[98.82933,23.72921],[98.79607,23.77947],[98.68209,23.80492],[98.67797,23.9644],[98.89632,24.10612],[98.87998,24.15624],[98.85319,24.13042],[98.59256,24.08371],[98.54476,24.13119],[98.20666,24.11406],[98.07806,24.07988],[98.06703,24.08028],[98.0607,24.07812],[98.05671,24.07961],[98.05302,24.07408],[98.04709,24.07616],[97.99583,24.04932],[97.98691,24.03897],[97.93951,24.01953],[97.90998,24.02094],[97.88616,24.00463],[97.88414,23.99405],[97.88814,23.98605],[97.89683,23.98389],[97.89676,23.97931],[97.8955,23.97758],[97.88811,23.97446],[97.86545,23.97723],[97.84328,23.97603],[97.79416,23.95663],[97.79456,23.94836],[97.72302,23.89288],[97.64667,23.84574],[97.5247,23.94032],[97.62363,24.00506],[97.72903,24.12606],[97.75305,24.16902],[97.72799,24.18883],[97.72998,24.2302],[97.76799,24.26365],[97.71941,24.29652],[97.66723,24.30027],[97.65624,24.33781],[97.7098,24.35658],[97.66998,24.45288],[97.60029,24.4401],[97.52757,24.43748],[97.56286,24.54535],[97.56525,24.72838],[97.54675,24.74202],[97.5542,24.74943],[97.56383,24.75535],[97.56648,24.76475],[97.64354,24.79171],[97.70181,24.84557],[97.73127,24.83015],[97.76481,24.8289],[97.79949,24.85655],[97.72903,24.91332],[97.72216,25.08508],[97.77023,25.11492],[97.83614,25.2715],[97.92541,25.20815],[98.14925,25.41547],[98.12591,25.50722],[98.18084,25.56298],[98.16848,25.62739],[98.25774,25.6051],[98.31268,25.55307],[98.40606,25.61129],[98.54064,25.85129],[98.63128,25.79937],[98.70818,25.86241],[98.60763,26.01512],[98.57085,26.11547],[98.63128,26.15492],[98.66884,26.09165],[98.7329,26.17218],[98.67797,26.24487],[98.72741,26.36183],[98.77547,26.61994],[98.7333,26.85615],[98.69582,27.56499],[98.43353,27.67086],[98.42529,27.55404],[98.32641,27.51385],[98.13964,27.9478],[98.15337,28.12114],[97.90069,28.3776],[97.79632,28.33168],[97.70705,28.5056],[97.56835,28.55628],[97.50518,28.49716],[97.47085,28.2688],[97.41729,28.29783],[97.34547,28.21385],[97.1289,28.3619],[96.98882,28.32564],[96.88445,28.39452],[96.85561,28.4875],[96.6455,28.61657],[96.48895,28.42955],[96.40929,28.51526],[96.61391,28.72742],[96.3626,29.10607],[96.20467,29.02325],[96.18682,29.11087],[96.31316,29.18643],[96.05361,29.38167],[95.84899,29.31464],[95.75149,29.32063],[95.72086,29.20797],[95.50842,29.13487],[95.41091,29.13007],[95.3038,29.13847],[95.26122,29.07727],[95.2214,29.10727],[95.11291,29.09527],[95.0978,29.14446],[94.81353,29.17804],[94.69318,29.31739],[94.2752,29.11687],[94.35897,29.01965],[93.72797,28.68821],[93.44621,28.67189],[93.18069,28.50319],[93.14635,28.37035],[92.93075,28.25671],[92.67486,28.15018],[92.65472,28.07632],[92.73025,28.05814],[92.7275,27.98662],[92.42538,27.80092],[92.32101,27.79363],[92.27432,27.89077],[91.87057,27.7195],[91.84722,27.76325],[91.6469,27.76358],[91.5629,27.84823],[91.48973,27.93903],[91.46327,28.0064],[91.25779,28.07509],[91.20019,27.98715],[90.69894,28.07784],[90.58842,28.02838],[90.13387,28.19178],[89.79762,28.23979],[89.59525,28.16433],[89.12825,27.62502],[89.0582,27.60985],[88.97213,27.51671],[88.95355,27.4106],[89.00216,27.32532],[88.96947,27.30319],[88.93678,27.33777],[88.91901,27.32483],[88.82981,27.38814],[88.77517,27.45415],[88.88091,27.85192],[88.83559,28.01936],[88.63235,28.12356],[88.54858,28.06057],[88.25332,27.9478],[88.1278,27.95417],[88.13378,27.88015],[87.82681,27.95248],[87.72718,27.80938],[87.56996,27.84517],[87.11696,27.84104],[87.03757,27.94835],[86.75582,28.04182],[86.74181,28.10638],[86.56265,28.09569],[86.51609,27.96623],[86.42736,27.91122],[86.22966,27.9786],[86.18607,28.17364],[86.088,28.09264],[86.08333,28.02121],[86.12069,27.93047],[86.06309,27.90021],[85.94946,27.9401],[85.97813,27.99023],[85.90743,28.05144],[85.84672,28.18187],[85.74864,28.23126],[85.71907,28.38064],[85.69105,28.38475],[85.60854,28.25045],[85.59765,28.30529],[85.4233,28.32996],[85.38127,28.28336],[85.10729,28.34092],[85.18668,28.54076],[85.19135,28.62825],[85.06059,28.68562],[84.85511,28.58041],[84.62317,28.73887],[84.47528,28.74023],[84.2231,28.89571],[84.24801,29.02783],[84.18107,29.23451],[83.97559,29.33091],[83.82303,29.30513],[83.63156,29.16249],[83.44787,29.30513],[83.28131,29.56813],[83.07116,29.61957],[82.73024,29.81695],[82.5341,29.9735],[82.38622,30.02608],[82.16984,30.0692],[82.19475,30.16884],[82.10757,30.23745],[82.10135,30.35439],[81.99082,30.33423],[81.62033,30.44703],[81.41018,30.42153],[81.39928,30.21862],[81.33355,30.15303],[81.2623,30.14596],[81.29032,30.08806],[81.24362,30.0126],[81.12842,30.01395],[81.03953,30.20059],[80.83343,30.32023],[80.54504,30.44936],[80.20721,30.58541],[79.93255,30.88288],[79.59884,30.93943],[79.22805,31.34963],[79.14016,31.43403],[79.01931,31.42817],[78.77898,31.31209],[78.71032,31.50197],[78.84516,31.60631],[78.69933,31.78723],[78.78036,31.99478],[78.74404,32.00384],[78.68754,32.10256],[78.49609,32.2762],[78.4645,32.45367],[78.38897,32.53938],[78.73916,32.69438],[78.7831,32.46873],[78.96713,32.33655],[78.99322,32.37948],[79.0979,32.38051],[79.13174,32.47766],[79.26768,32.53277],[79.46562,32.69668],[79.14016,33.02545],[79.15252,33.17156],[78.73636,33.56521],[78.67599,33.66445],[78.77349,33.73871],[78.73367,34.01121],[78.65657,34.03195],[78.66225,34.08858],[78.91769,34.15452],[78.99802,34.3027],[79.05364,34.32482],[78.74465,34.45174],[78.56475,34.50835],[78.54964,34.57283],[78.27781,34.61484],[78.18435,34.7998],[78.22692,34.88771],[78.00033,35.23954],[78.03466,35.3785],[78.11664,35.48022],[77.80532,35.52058],[77.70232,35.46244],[77.44277,35.46132],[76.96624,35.5932],[76.84539,35.67356],[76.77323,35.66062],[76.50961,35.8908],[76.33453,35.84296],[76.14913,35.82848],[76.15325,35.9264],[75.93028,36.13136],[76.00906,36.17511],[76.0324,36.41198],[75.92391,36.56986],[75.72737,36.7529],[75.45562,36.71971],[75.40481,36.95382],[75.13839,37.02622],[74.56453,37.03023],[74.49981,37.24518],[74.80605,37.21565],[74.88887,37.23275],[75.12328,37.31839],[75.09719,37.37297],[75.15899,37.41443],[75.06011,37.52779],[74.94338,37.55501],[74.8912,37.67576],[75.00935,37.77486],[74.92416,37.83428],[74.9063,38.03033],[74.82665,38.07359],[74.80331,38.19889],[74.69894,38.22155],[74.69619,38.42947],[74.51217,38.47034],[74.17022,38.65504],[73.97933,38.52945],[73.79806,38.61106],[73.80656,38.66449],[73.7033,38.84782],[73.7445,38.93867],[73.82964,38.91517],[73.81728,39.04007],[73.75823,39.023],[73.60638,39.24534],[73.54572,39.27567],[73.55396,39.3543],[73.5004,39.38402],[73.59241,39.40843],[73.59831,39.46425],[73.87018,39.47879],[73.94683,39.60733],[73.92354,39.69565],[73.9051,39.75073],[73.83006,39.76136],[73.97049,40.04378],[74.25533,40.13191],[74.35063,40.09742],[74.69875,40.34668],[74.85996,40.32857],[74.78168,40.44886],[74.82013,40.52197],[75.08243,40.43945],[75.22834,40.45382],[75.5854,40.66874],[75.69663,40.28642],[75.91361,40.2948],[75.96168,40.38064],[76.33659,40.3482],[76.5261,40.46114],[76.75681,40.95354],[76.99302,41.0696],[77.28004,41.0033],[77.3693,41.0375],[77.52723,41.00227],[77.76206,41.01574],[77.81287,41.14307],[78.12873,41.23091],[78.15757,41.38565],[78.3732,41.39603],[79.92977,42.04113],[80.17842,42.03211],[80.17807,42.21166],[80.26841,42.23797],[80.16892,42.61137],[80.26886,42.8366],[80.38169,42.83142],[80.58999,42.9011],[80.3735,43.01557],[80.62913,43.141],[80.78817,43.14235],[80.77771,43.30065],[80.69718,43.32589],[80.75156,43.44948],[80.40031,44.10986],[80.40229,44.23319],[80.38384,44.63073],[79.8987,44.89957],[80.11169,45.03352],[81.73278,45.3504],[82.51374,45.1755],[82.58474,45.40027],[82.21792,45.56619],[83.04622,47.19053],[83.92184,46.98912],[84.73077,47.01394],[84.93995,46.87399],[85.22443,47.04816],[85.54294,47.06171],[85.69696,47.2898],[85.61067,47.49753],[85.5169,48.05493],[85.73581,48.3939],[86.38069,48.46064],[86.75343,48.70331],[86.73568,48.99918],[86.87238,49.12432],[87.28386,49.11626],[87.478,49.07403],[87.48983,49.13794],[87.81333,49.17354],[87.88171,48.95853],[87.73822,48.89582],[88.0788,48.71436],[87.96361,48.58478],[88.58939,48.34531],[88.58316,48.21893],[88.8011,48.11302],[88.93186,48.10263],[89.0711,47.98528],[89.55453,48.0423],[89.76624,47.82745],[90.06512,47.88177],[90.10871,47.7375],[90.33598,47.68303],[90.48854,47.41826],[90.48542,47.30438],[90.76108,46.99399],[90.84035,46.99525],[91.03649,46.72916],[91.0147,46.58171],[91.07696,46.57315],[90.89639,46.30711],[90.99672,46.14207],[91.03026,46.04194],[90.70907,45.73437],[90.65114,45.49314],[90.89169,45.19667],[91.64048,45.07408],[93.51161,44.95964],[94.10003,44.71016],[94.71959,44.35284],[95.01191,44.25274],[95.39772,44.2805],[95.32891,44.02407],[95.52594,43.99353],[95.89543,43.2528],[96.35658,42.90363],[96.37926,42.72055],[97.1777,42.7964],[99.50671,42.56535],[100.33297,42.68231],[100.84979,42.67087],[101.28833,42.58524],[101.80515,42.50074],[102.07645,42.22519],[102.42826,42.15137],[102.72403,42.14675],[103.3685,41.89696],[103.92804,41.78246],[104.52258,41.8706],[104.51667,41.66113],[104.91272,41.64619],[105.01119,41.58382],[105.24708,41.7442],[106.76517,42.28741],[107.24774,42.36107],[107.29755,42.41395],[107.49681,42.46221],[107.57258,42.40898],[108.23156,42.45532],[108.84489,42.40246],[109.00679,42.45302],[109.452,42.44842],[109.89402,42.63111],[110.08401,42.6411],[110.4327,42.78293],[111.0149,43.3289],[111.59087,43.51207],[111.79758,43.6637],[111.93776,43.68709],[111.96289,43.81596],[111.40498,44.3461],[111.76275,44.98032],[111.98695,45.09074],[112.4164,45.06858],[112.74662,44.86297],[113.63821,44.74326],[113.909,44.91444],[114.08071,44.92847],[114.5166,45.27189],[114.54801,45.38337],[114.74612,45.43585],[114.94546,45.37377],[115.35757,45.39106],[115.69688,45.45761],[115.91898,45.6227],[116.16989,45.68603],[116.27366,45.78637],[116.24012,45.8778],[116.26678,45.96479],[116.58612,46.30211],[116.75551,46.33083],[116.83166,46.38637],[117.07252,46.35818],[117.36609,46.36335],[117.41782,46.57862],[117.60748,46.59771],[117.69554,46.50991],[118.30534,46.73519],[118.78747,46.68689],[118.8337,46.77742],[118.89974,46.77139],[118.92616,46.72765],[119.00541,46.74273],[119.10448,46.65516],[119.24978,46.64761],[119.30261,46.6083],[119.37306,46.61132],[119.42827,46.63783],[119.65265,46.62342],[119.68127,46.59015],[119.77373,46.62947],[119.80455,46.67631],[119.89261,46.66423],[119.91242,46.90091],[119.85518,46.92196],[119.71209,47.19192],[119.62403,47.24575],[119.56019,47.24874],[119.54918,47.29505],[119.31964,47.42617],[119.35892,47.48104],[119.13995,47.53997],[119.12343,47.66458],[118.7564,47.76947],[118.55766,47.99277],[118.29654,48.00246],[118.22677,48.03853],[118.11009,48.04],[118.03676,48.00982],[117.80196,48.01661],[117.50181,47.77216],[117.37875,47.63627],[117.08918,47.82242],[116.87527,47.88836],[116.67405,47.89039],[116.4465,47.83662],[116.2527,47.87766],[116.08431,47.80693],[115.94296,47.67741],[115.57128,47.91988],[115.52082,48.15367],[115.811,48.25699],[115.78876,48.51781],[116.06565,48.81716],[116.03781,48.87014],[116.71193,49.83813],[117.07142,49.68482],[117.27597,49.62544],[117.48208,49.62324],[117.82343,49.52696],[118.61623,49.93809],[119.11003,50.00276],[119.27996,50.13348],[119.38598,50.35162],[119.13553,50.37412],[120.10963,51.671],[120.65907,51.93544],[120.77337,52.20805],[120.61346,52.32447],[120.71673,52.54099],[120.46454,52.63811],[120.04049,52.58773],[120.0451,52.7359],[120.85633,53.28499],[121.39213,53.31888],[122.35063,53.49565],[122.85966,53.47395],[123.26989,53.54843],[123.86158,53.49391],[124.46078,53.21881],[125.17522,53.20225],[125.6131,53.07229]],[[113.56865,22.20973],[113.57123,22.20416],[113.60504,22.20464],[113.63011,22.10782],[113.57191,22.07696],[113.54839,22.10909],[113.54942,22.14519],[113.54093,22.15497],[113.52659,22.18271],[113.53552,22.20607],[113.53301,22.21235],[113.53591,22.21369],[113.54093,22.21314],[113.54333,22.21688],[113.5508,22.21672],[113.56865,22.20973]],[[114.50148,22.15017],[113.92195,22.13873],[113.83338,22.1826],[113.81621,22.2163],[113.86771,22.42972],[114.03113,22.5065],[114.05438,22.5026],[114.05729,22.51104],[114.06272,22.51617],[114.07267,22.51855],[114.07817,22.52997],[114.08606,22.53276],[114.09048,22.53716],[114.09692,22.53435],[114.1034,22.5352],[114.11181,22.52878],[114.11656,22.53415],[114.12665,22.54003],[114.13823,22.54319],[114.1482,22.54091],[114.15123,22.55163],[114.1597,22.56041],[114.17247,22.55944],[114.18338,22.55444],[114.20655,22.55706],[114.22185,22.55343],[114.22888,22.5436],[114.25154,22.55977],[114.44998,22.55977],[114.50148,22.15017]]]]}},{type:"Feature",properties:{iso1A2:"XK",wikidata:"Q1246",nameEn:"Kosovo",groups:["039","150"],isoStatus:"usrAssn",callingCodes:["383"]},geometry:{type:"MultiPolygon",coordinates:[[[[21.39045,42.74888],[21.47498,42.74695],[21.59154,42.72643],[21.58755,42.70418],[21.6626,42.67813],[21.75025,42.70125],[21.79413,42.65923],[21.75672,42.62695],[21.7327,42.55041],[21.70522,42.54176],[21.7035,42.51899],[21.62556,42.45106],[21.64209,42.41081],[21.62887,42.37664],[21.59029,42.38042],[21.57021,42.3647],[21.53467,42.36809],[21.5264,42.33634],[21.56772,42.30946],[21.58992,42.25915],[21.52145,42.24465],[21.50823,42.27156],[21.43882,42.2789],[21.43882,42.23609],[21.38428,42.24465],[21.30496,42.1418],[21.29913,42.13954],[21.31983,42.10993],[21.22728,42.08909],[21.16614,42.19815],[21.11491,42.20794],[20.75464,42.05229],[20.76786,41.91839],[20.68523,41.85318],[20.59524,41.8818],[20.57946,41.91593],[20.63069,41.94913],[20.59434,42.03879],[20.55633,42.08173],[20.56955,42.12097],[20.48857,42.25444],[20.3819,42.3029],[20.34479,42.32656],[20.24399,42.32168],[20.21797,42.41237],[20.17127,42.50469],[20.07761,42.55582],[20.0969,42.65559],[20.02915,42.71147],[20.02088,42.74789],[20.04898,42.77701],[20.2539,42.76245],[20.27869,42.81945],[20.35692,42.8335],[20.40594,42.84853],[20.43734,42.83157],[20.53484,42.8885],[20.48692,42.93208],[20.59929,43.01067],[20.64557,43.00826],[20.69515,43.09641],[20.59929,43.20492],[20.68688,43.21335],[20.73811,43.25068],[20.82145,43.26769],[20.88685,43.21697],[20.83727,43.17842],[20.96287,43.12416],[21.00749,43.13984],[21.05378,43.10707],[21.08952,43.13471],[21.14465,43.11089],[21.16734,42.99694],[21.2041,43.02277],[21.23877,43.00848],[21.23534,42.95523],[21.2719,42.8994],[21.32974,42.90424],[21.36941,42.87397],[21.44047,42.87276],[21.39045,42.74888]]]]}},{type:"Feature",properties:{iso1A2:"FX",iso1A3:"FXX",iso1N3:"249",wikidata:"Q212429",nameEn:"Metropolitan France",country:"FR",groups:["EU","155","150"],isoStatus:"excRes",callingCodes:["33"]},geometry:{type:"MultiPolygon",coordinates:[[[[2.55904,51.07014],[2.57551,51.00326],[2.63074,50.94746],[2.59093,50.91751],[2.63331,50.81457],[2.71165,50.81295],[2.81056,50.71773],[2.8483,50.72276],[2.86985,50.7033],[2.87937,50.70298],[2.88504,50.70656],[2.90069,50.69263],[2.91036,50.6939],[2.90873,50.702],[2.95019,50.75138],[2.96778,50.75242],[3.00537,50.76588],[3.04314,50.77674],[3.09163,50.77717],[3.10614,50.78303],[3.11206,50.79416],[3.11987,50.79188],[3.1257,50.78603],[3.15017,50.79031],[3.16476,50.76843],[3.18339,50.74981],[3.18811,50.74025],[3.20064,50.73547],[3.19017,50.72569],[3.20845,50.71662],[3.22042,50.71019],[3.24593,50.71389],[3.26063,50.70086],[3.26141,50.69151],[3.2536,50.68977],[3.264,50.67668],[3.23951,50.6585],[3.2729,50.60718],[3.28575,50.52724],[3.37693,50.49538],[3.44629,50.51009],[3.47385,50.53397],[3.51564,50.5256],[3.49509,50.48885],[3.5683,50.50192],[3.58361,50.49049],[3.61014,50.49568],[3.64426,50.46275],[3.66153,50.45165],[3.67494,50.40239],[3.67262,50.38663],[3.65709,50.36873],[3.66976,50.34563],[3.71009,50.30305],[3.70987,50.3191],[3.73911,50.34809],[3.84314,50.35219],[3.90781,50.32814],[3.96771,50.34989],[4.0268,50.35793],[4.0689,50.3254],[4.10237,50.31247],[4.10957,50.30234],[4.11954,50.30425],[4.13665,50.25609],[4.16808,50.25786],[4.15524,50.2833],[4.17347,50.28838],[4.17861,50.27443],[4.20651,50.27333],[4.21945,50.25539],[4.15524,50.21103],[4.16014,50.19239],[4.13561,50.13078],[4.20147,50.13535],[4.23101,50.06945],[4.16294,50.04719],[4.13508,50.01976],[4.14239,49.98034],[4.20532,49.95803],[4.31963,49.97043],[4.35051,49.95315],[4.43488,49.94122],[4.51098,49.94659],[4.5414,49.96911],[4.68695,49.99685],[4.70064,50.09384],[4.75237,50.11314],[4.82438,50.16878],[4.83279,50.15331],[4.88602,50.15182],[4.8382,50.06738],[4.78827,49.95609],[4.88529,49.9236],[4.85134,49.86457],[4.86965,49.82271],[4.85464,49.78995],[4.96714,49.79872],[5.09249,49.76193],[5.14545,49.70287],[5.26232,49.69456],[5.31465,49.66846],[5.33039,49.6555],[5.30214,49.63055],[5.3137,49.61225],[5.33851,49.61599],[5.34837,49.62889],[5.3974,49.61596],[5.43713,49.5707],[5.46734,49.52648],[5.46541,49.49825],[5.55001,49.52729],[5.60909,49.51228],[5.64505,49.55146],[5.75649,49.54321],[5.7577,49.55915],[5.77435,49.56298],[5.79195,49.55228],[5.81838,49.54777],[5.80871,49.5425],[5.81664,49.53775],[5.83648,49.5425],[5.84466,49.53027],[5.83467,49.52717],[5.83389,49.52152],[5.86571,49.50015],[5.94128,49.50034],[5.94224,49.49608],[5.96876,49.49053],[5.97693,49.45513],[6.02648,49.45451],[6.02743,49.44845],[6.04176,49.44801],[6.05553,49.46663],[6.07887,49.46399],[6.08373,49.45594],[6.10072,49.45268],[6.09845,49.46351],[6.10325,49.4707],[6.12346,49.4735],[6.12814,49.49365],[6.14321,49.48796],[6.16115,49.49297],[6.15366,49.50226],[6.17386,49.50934],[6.19543,49.50536],[6.2409,49.51408],[6.25029,49.50609],[6.27875,49.503],[6.28818,49.48465],[6.3687,49.4593],[6.36778,49.46937],[6.38352,49.46463],[6.39168,49.4667],[6.40274,49.46546],[6.42432,49.47683],[6.55404,49.42464],[6.533,49.40748],[6.60091,49.36864],[6.58807,49.35358],[6.572,49.35027],[6.60186,49.31055],[6.66583,49.28065],[6.69274,49.21661],[6.71843,49.2208],[6.73256,49.20486],[6.71137,49.18808],[6.73765,49.16375],[6.78265,49.16793],[6.83385,49.15162],[6.84703,49.15734],[6.86225,49.18185],[6.85016,49.19354],[6.85119,49.20038],[6.83555,49.21249],[6.85939,49.22376],[6.89298,49.20863],[6.91875,49.22261],[6.93831,49.2223],[6.94028,49.21641],[6.95963,49.203],[6.97273,49.2099],[7.01318,49.19018],[7.03459,49.19096],[7.0274,49.17042],[7.03178,49.15734],[7.04662,49.13724],[7.04409,49.12123],[7.04843,49.11422],[7.05548,49.11185],[7.06642,49.11415],[7.07162,49.1255],[7.09007,49.13094],[7.07859,49.15031],[7.10715,49.15631],[7.10384,49.13787],[7.12504,49.14253],[7.1358,49.1282],[7.1593,49.1204],[7.23473,49.12971],[7.29514,49.11426],[7.3195,49.14231],[7.35995,49.14399],[7.3662,49.17308],[7.44052,49.18354],[7.44455,49.16765],[7.49473,49.17],[7.49172,49.13915],[7.53012,49.09818],[7.56416,49.08136],[7.62575,49.07654],[7.63618,49.05428],[7.75948,49.04562],[7.79557,49.06583],[7.86386,49.03499],[7.93641,49.05544],[7.97783,49.03161],[8.14189,48.97833],[8.22604,48.97352],[8.20031,48.95856],[8.19989,48.95825],[8.12813,48.87985],[8.10253,48.81829],[8.06802,48.78957],[8.0326,48.79017],[8.01534,48.76085],[7.96994,48.75606],[7.96812,48.72491],[7.89002,48.66317],[7.84098,48.64217],[7.80057,48.5857],[7.80167,48.54758],[7.80647,48.51239],[7.76833,48.48945],[7.73109,48.39192],[7.74562,48.32736],[7.69022,48.30018],[7.6648,48.22219],[7.57137,48.12292],[7.56966,48.03265],[7.62302,47.97898],[7.55673,47.87371],[7.52921,47.77747],[7.54761,47.72912],[7.53722,47.71635],[7.51266,47.70197],[7.51915,47.68335],[7.52067,47.66437],[7.53384,47.65115],[7.5591,47.63849],[7.57423,47.61628],[7.58851,47.60794],[7.59301,47.60058],[7.58945,47.59017],[7.58386,47.57536],[7.56684,47.57785],[7.56548,47.57617],[7.55689,47.57232],[7.55652,47.56779],[7.53634,47.55553],[7.52831,47.55347],[7.51723,47.54578],[7.50873,47.54546],[7.49691,47.53821],[7.50588,47.52856],[7.51904,47.53515],[7.53199,47.5284],[7.5229,47.51644],[7.49804,47.51798],[7.51076,47.49651],[7.47534,47.47932],[7.43356,47.49712],[7.42923,47.48628],[7.4583,47.47216],[7.4462,47.46264],[7.43088,47.45846],[7.40308,47.43638],[7.35603,47.43432],[7.33526,47.44186],[7.24669,47.4205],[7.17026,47.44312],[7.19583,47.49455],[7.16249,47.49025],[7.12781,47.50371],[7.07425,47.48863],[7.0231,47.50522],[6.98425,47.49432],[7.0024,47.45264],[6.93953,47.43388],[6.93744,47.40714],[6.88542,47.37262],[6.87959,47.35335],[7.03125,47.36996],[7.0564,47.35134],[7.05305,47.33304],[6.94316,47.28747],[6.95108,47.26428],[6.9508,47.24338],[6.8489,47.15933],[6.76788,47.1208],[6.68823,47.06616],[6.71531,47.0494],[6.43341,46.92703],[6.46456,46.88865],[6.43216,46.80336],[6.45209,46.77502],[6.38351,46.73171],[6.27135,46.68251],[6.11084,46.57649],[6.1567,46.54402],[6.07269,46.46244],[6.08427,46.44305],[6.06407,46.41676],[6.09926,46.40768],[6.15016,46.3778],[6.15985,46.37721],[6.16987,46.36759],[6.15738,46.3491],[6.13876,46.33844],[6.1198,46.31157],[6.11697,46.29547],[6.1013,46.28512],[6.11926,46.2634],[6.12446,46.25059],[6.10071,46.23772],[6.08563,46.24651],[6.07072,46.24085],[6.0633,46.24583],[6.05029,46.23518],[6.04602,46.23127],[6.03342,46.2383],[6.02461,46.23313],[5.97542,46.21525],[5.96515,46.19638],[5.99573,46.18587],[5.98846,46.17046],[5.98188,46.17392],[5.97508,46.15863],[5.9641,46.14412],[5.95781,46.12925],[5.97893,46.13303],[5.9871,46.14499],[6.01791,46.14228],[6.03614,46.13712],[6.04564,46.14031],[6.05203,46.15191],[6.07491,46.14879],[6.09199,46.15191],[6.09926,46.14373],[6.13397,46.1406],[6.15305,46.15194],[6.18116,46.16187],[6.18871,46.16644],[6.18707,46.17999],[6.19552,46.18401],[6.19807,46.18369],[6.20539,46.19163],[6.21114,46.1927],[6.21273,46.19409],[6.21603,46.19507],[6.21844,46.19837],[6.22222,46.19888],[6.22175,46.20045],[6.23544,46.20714],[6.23913,46.20511],[6.24821,46.20531],[6.26007,46.21165],[6.27694,46.21566],[6.29663,46.22688],[6.31041,46.24417],[6.29474,46.26221],[6.26749,46.24745],[6.24952,46.26255],[6.23775,46.27822],[6.25137,46.29014],[6.24826,46.30175],[6.21981,46.31304],[6.25432,46.3632],[6.53358,46.45431],[6.82312,46.42661],[6.8024,46.39171],[6.77152,46.34784],[6.86052,46.28512],[6.78968,46.14058],[6.89321,46.12548],[6.87868,46.03855],[6.93862,46.06502],[7.00946,45.9944],[7.04151,45.92435],[6.95315,45.85163],[6.80785,45.83265],[6.80785,45.71864],[6.98948,45.63869],[7.00037,45.509],[7.18019,45.40071],[7.10572,45.32924],[7.13115,45.25386],[7.07074,45.21228],[6.96706,45.20841],[6.85144,45.13226],[6.7697,45.16044],[6.62803,45.11175],[6.66981,45.02324],[6.74791,45.01939],[6.74519,44.93661],[6.75518,44.89915],[6.90774,44.84322],[6.93499,44.8664],[7.02217,44.82519],[7.00401,44.78782],[7.07484,44.68073],[7.00582,44.69364],[6.95133,44.66264],[6.96042,44.62129],[6.85507,44.53072],[6.86233,44.49834],[6.94504,44.43112],[6.88784,44.42043],[6.89171,44.36637],[6.98221,44.28289],[7.00764,44.23736],[7.16929,44.20352],[7.27827,44.1462],[7.34547,44.14359],[7.36364,44.11882],[7.62155,44.14881],[7.63245,44.17877],[7.68694,44.17487],[7.66878,44.12795],[7.72508,44.07578],[7.6597,44.03009],[7.66848,43.99943],[7.65266,43.9763],[7.60771,43.95772],[7.56858,43.94506],[7.56075,43.89932],[7.51162,43.88301],[7.49355,43.86551],[7.50423,43.84345],[7.53006,43.78405],[7.47823,43.73341],[7.4379,43.74963],[7.4389,43.75151],[7.43708,43.75197],[7.43624,43.75014],[7.43013,43.74895],[7.42809,43.74396],[7.42443,43.74087],[7.42299,43.74176],[7.42062,43.73977],[7.41233,43.73439],[7.41298,43.73311],[7.41291,43.73168],[7.41113,43.73156],[7.40903,43.7296],[7.42422,43.72209],[7.50102,43.51859],[9.56115,43.20816],[10.09675,41.44089],[7.60802,41.05927],[3.4481,42.4358],[3.17156,42.43545],[3.11379,42.43646],[3.10027,42.42621],[3.08167,42.42748],[3.03734,42.47363],[2.96518,42.46692],[2.94283,42.48174],[2.92107,42.4573],[2.88413,42.45938],[2.86983,42.46843],[2.85675,42.45444],[2.84335,42.45724],[2.77464,42.41046],[2.75497,42.42578],[2.72056,42.42298],[2.65311,42.38771],[2.6747,42.33974],[2.57934,42.35808],[2.55516,42.35351],[2.54382,42.33406],[2.48457,42.33933],[2.43508,42.37568],[2.43299,42.39423],[2.38504,42.39977],[2.25551,42.43757],[2.20578,42.41633],[2.16599,42.42314],[2.12789,42.41291],[2.11621,42.38393],[2.06241,42.35906],[2.00488,42.35399],[1.96482,42.37787],[1.9574,42.42401],[1.94084,42.43039],[1.94061,42.43333],[1.94292,42.44316],[1.93663,42.45439],[1.88853,42.4501],[1.83037,42.48395],[1.76335,42.48863],[1.72515,42.50338],[1.73683,42.55492],[1.7858,42.57698],[1.72588,42.59098],[1.73452,42.61515],[1.68267,42.62533],[1.6625,42.61982],[1.63485,42.62957],[1.60085,42.62703],[1.55418,42.65669],[1.50867,42.64483],[1.48043,42.65203],[1.46718,42.63296],[1.47986,42.61346],[1.44197,42.60217],[1.35562,42.71944],[1.15928,42.71407],[1.0804,42.78569],[0.98292,42.78754],[0.96166,42.80629],[0.93089,42.79154],[0.711,42.86372],[0.66121,42.84021],[0.65421,42.75872],[0.67873,42.69458],[0.40214,42.69779],[0.36251,42.72282],[0.29407,42.67431],[0.25336,42.7174],[0.17569,42.73424],[-0.02468,42.68513],[-0.10519,42.72761],[-0.16141,42.79535],[-0.17939,42.78974],[-0.3122,42.84788],[-0.38833,42.80132],[-0.41319,42.80776],[-0.44334,42.79939],[-0.50863,42.82713],[-0.55497,42.77846],[-0.67637,42.88303],[-0.69837,42.87945],[-0.72608,42.89318],[-0.73422,42.91228],[-0.72037,42.92541],[-0.75478,42.96916],[-0.81652,42.95166],[-0.97133,42.96239],[-1.00963,42.99279],[-1.10333,43.0059],[-1.22881,43.05534],[-1.25244,43.04164],[-1.30531,43.06859],[-1.30052,43.09581],[-1.27118,43.11961],[-1.32209,43.1127],[-1.34419,43.09665],[-1.35272,43.02658],[-1.44067,43.047],[-1.47555,43.08372],[-1.41562,43.12815],[-1.3758,43.24511],[-1.40942,43.27272],[-1.45289,43.27049],[-1.50992,43.29481],[-1.55963,43.28828],[-1.57674,43.25269],[-1.61341,43.25269],[-1.63052,43.28591],[-1.62481,43.30726],[-1.69407,43.31378],[-1.73074,43.29481],[-1.7397,43.32979],[-1.75079,43.3317],[-1.75334,43.34107],[-1.77068,43.34396],[-1.78714,43.35476],[-1.78332,43.36399],[-1.79319,43.37497],[-1.77289,43.38957],[-1.81005,43.59738],[-6.13339,48.73907],[-2.65349,49.15373],[-2.00491,48.86706],[-1.83944,49.23037],[-2.09454,49.46288],[-2.02963,49.91866],[1.17405,50.74239],[2.18458,51.52087],[2.55904,51.07014]]]]}},{type:"Feature",properties:{iso1A2:"AC",iso1A3:"ASC",wikidata:"Q46197",nameEn:"Ascension Island",country:"GB",groups:["SH","011","202","002"],isoStatus:"excRes",driveSide:"left",roadSpeedUnit:"mph",callingCodes:["247"]},geometry:{type:"MultiPolygon",coordinates:[[[[-14.82771,-8.70814],[-14.91926,-6.63386],[-13.33271,-8.07391],[-14.82771,-8.70814]]]]}},{type:"Feature",properties:{iso1A2:"ZM",iso1A3:"ZMB",iso1N3:"894",wikidata:"Q953",nameEn:"Zambia",groups:["014","202","002"],driveSide:"left",callingCodes:["260"]},geometry:{type:"MultiPolygon",coordinates:[[[[32.95389,-9.40138],[33.00476,-9.5133],[33.00256,-9.63053],[33.05485,-9.61316],[33.10163,-9.66525],[33.12144,-9.58929],[33.2095,-9.61099],[33.31517,-9.82364],[33.36581,-9.81063],[33.37902,-9.9104],[33.31297,-10.05133],[33.53863,-10.20148],[33.54797,-10.36077],[33.70675,-10.56896],[33.47636,-10.78465],[33.28022,-10.84428],[33.25998,-10.88862],[33.39697,-11.15296],[33.29267,-11.3789],[33.29267,-11.43536],[33.23663,-11.40637],[33.24252,-11.59302],[33.32692,-11.59248],[33.33937,-11.91252],[33.25998,-12.14242],[33.3705,-12.34931],[33.47636,-12.32498],[33.54485,-12.35996],[33.37517,-12.54085],[33.28177,-12.54692],[33.18837,-12.61377],[33.05917,-12.59554],[32.94397,-12.76868],[32.96733,-12.88251],[33.02181,-12.88707],[32.98289,-13.12671],[33.0078,-13.19492],[32.86113,-13.47292],[32.84176,-13.52794],[32.73683,-13.57682],[32.68436,-13.55769],[32.66468,-13.60019],[32.68654,-13.64268],[32.7828,-13.64805],[32.84528,-13.71576],[32.76962,-13.77224],[32.79015,-13.80755],[32.88985,-13.82956],[32.99042,-13.95689],[33.02977,-14.05022],[33.07568,-13.98447],[33.16749,-13.93992],[33.24249,-14.00019],[30.22098,-14.99447],[30.41902,-15.62269],[30.35574,-15.6513],[29.8317,-15.6126],[29.4437,-15.68702],[29.21955,-15.76589],[29.01298,-15.93805],[28.9243,-15.93987],[28.8501,-16.04537],[28.81454,-16.48611],[28.76199,-16.51575],[28.73725,-16.5528],[27.83141,-16.96274],[27.62795,-17.24365],[27.61377,-17.34378],[27.30736,-17.60487],[27.14196,-17.81398],[26.89926,-17.98756],[26.74314,-18.0199],[26.68403,-18.07411],[26.55918,-17.99638],[26.21601,-17.88608],[26.0908,-17.93021],[26.08925,-17.98168],[25.85892,-17.97726],[25.85738,-17.91403],[25.6827,-17.81987],[25.51646,-17.86232],[25.26433,-17.79571],[25.00198,-17.58221],[24.70864,-17.49501],[24.5621,-17.52963],[24.38712,-17.46818],[24.32811,-17.49082],[24.23619,-17.47489],[23.47474,-17.62877],[23.20038,-17.47563],[22.17217,-16.50269],[22.00323,-16.18028],[21.97988,-13.00148],[24.03339,-12.99091],[23.90937,-12.844],[24.06672,-12.29058],[23.98804,-12.13149],[24.02603,-11.15368],[24.00027,-10.89356],[24.34528,-11.06816],[24.42612,-11.44975],[25.34069,-11.19707],[25.33058,-11.65767],[26.01777,-11.91488],[26.88687,-12.01868],[27.04351,-11.61312],[27.22541,-11.60323],[27.21025,-11.76157],[27.59932,-12.22123],[28.33199,-12.41375],[29.01918,-13.41353],[29.60531,-13.21685],[29.65078,-13.41844],[29.81551,-13.44683],[29.8139,-12.14898],[29.48404,-12.23604],[29.4992,-12.43843],[29.18592,-12.37921],[28.48357,-11.87532],[28.37241,-11.57848],[28.65032,-10.65133],[28.62795,-9.92942],[28.68532,-9.78],[28.56208,-9.49122],[28.51627,-9.44726],[28.52636,-9.35379],[28.36562,-9.30091],[28.38526,-9.23393],[28.9711,-8.66935],[28.88917,-8.4831],[30.79243,-8.27382],[31.00796,-8.58615],[31.37533,-8.60769],[31.57147,-8.70619],[31.57147,-8.81388],[31.71158,-8.91386],[31.81587,-8.88618],[31.94663,-8.93846],[31.94196,-9.02303],[31.98866,-9.07069],[32.08206,-9.04609],[32.16146,-9.05993],[32.25486,-9.13371],[32.43543,-9.11988],[32.49147,-9.14754],[32.53661,-9.24281],[32.75611,-9.28583],[32.76233,-9.31963],[32.95389,-9.40138]]]]}},{type:"Feature",properties:{iso1A2:"ZA",iso1A3:"ZAF",iso1N3:"710",wikidata:"Q258",nameEn:"South Africa",groups:["018","202","002"],driveSide:"left",callingCodes:["27"]},geometry:{type:"MultiPolygon",coordinates:[[[[31.30611,-22.422],[31.55779,-23.176],[31.56539,-23.47268],[31.67942,-23.60858],[31.70223,-23.72695],[31.77445,-23.90082],[31.87707,-23.95293],[31.90368,-24.18892],[31.9835,-24.29983],[32.03196,-25.10785],[32.01676,-25.38117],[31.97875,-25.46356],[32.00631,-25.65044],[31.92649,-25.84216],[31.974,-25.95387],[31.86881,-25.99973],[31.4175,-25.71886],[31.31237,-25.7431],[31.13073,-25.91558],[30.95819,-26.26303],[30.78927,-26.48271],[30.81101,-26.84722],[30.88826,-26.79622],[30.97757,-26.92706],[30.96088,-27.0245],[31.15027,-27.20151],[31.49834,-27.31549],[31.97592,-27.31675],[31.97463,-27.11057],[32.00893,-26.8096],[32.09664,-26.80721],[32.13315,-26.84345],[32.19409,-26.84032],[32.22302,-26.84136],[32.29584,-26.852],[32.35222,-26.86027],[34.51034,-26.91792],[38.88176,-48.03306],[12.51595,-32.27486],[16.45332,-28.63117],[16.46592,-28.57126],[16.59922,-28.53246],[16.90446,-28.057],[17.15405,-28.08573],[17.4579,-28.68718],[18.99885,-28.89165],[19.99882,-28.42622],[19.99817,-24.76768],[20.02809,-24.78725],[20.03678,-24.81004],[20.29826,-24.94869],[20.64795,-25.47827],[20.86081,-26.14892],[20.61754,-26.4692],[20.63275,-26.78181],[20.68596,-26.9039],[20.87031,-26.80047],[21.13353,-26.86661],[21.37869,-26.82083],[21.69322,-26.86152],[21.7854,-26.79199],[21.77114,-26.69015],[21.83291,-26.65959],[21.90703,-26.66808],[22.06192,-26.61882],[22.21206,-26.3773],[22.41921,-26.23078],[22.56365,-26.19668],[22.70808,-25.99186],[22.86012,-25.50572],[23.03497,-25.29971],[23.47588,-25.29971],[23.9244,-25.64286],[24.18287,-25.62916],[24.36531,-25.773],[24.44703,-25.73021],[24.67319,-25.81749],[24.8946,-25.80723],[25.01718,-25.72507],[25.12266,-25.75931],[25.33076,-25.76616],[25.58543,-25.6343],[25.6643,-25.4491],[25.69661,-25.29284],[25.72702,-25.25503],[25.88571,-24.87802],[25.84295,-24.78661],[25.8515,-24.75727],[26.39409,-24.63468],[26.46346,-24.60358],[26.51667,-24.47219],[26.84165,-24.24885],[26.99749,-23.65486],[27.33768,-23.40917],[27.52393,-23.37952],[27.6066,-23.21894],[27.74154,-23.2137],[27.93539,-23.04941],[27.93729,-22.96194],[28.04752,-22.90243],[28.04562,-22.8394],[28.34874,-22.5694],[28.63287,-22.55887],[28.91889,-22.44299],[29.0151,-22.22907],[29.10881,-22.21202],[29.15268,-22.21399],[29.18974,-22.18599],[29.21955,-22.17771],[29.37703,-22.19581],[29.64609,-22.12917],[29.76848,-22.14128],[29.92242,-22.19408],[30.13147,-22.30841],[30.2265,-22.2961],[30.28351,-22.35587],[30.38614,-22.34533],[30.48686,-22.31368],[30.6294,-22.32599],[30.86696,-22.28907],[31.08932,-22.34884],[31.16344,-22.32599],[31.30611,-22.422]],[[29.33204,-29.45598],[29.44883,-29.3772],[29.40524,-29.21246],[28.68043,-28.58744],[28.65091,-28.57025],[28.40612,-28.6215],[28.30518,-28.69531],[28.2348,-28.69471],[28.1317,-28.7293],[28.02503,-28.85991],[27.98675,-28.8787],[27.9392,-28.84864],[27.88933,-28.88156],[27.8907,-28.91612],[27.75458,-28.89839],[27.55974,-29.18954],[27.5158,-29.2261],[27.54258,-29.25575],[27.48679,-29.29349],[27.45125,-29.29708],[27.47254,-29.31968],[27.4358,-29.33465],[27.33464,-29.48161],[27.01016,-29.65439],[27.09489,-29.72796],[27.22719,-30.00718],[27.29603,-30.05473],[27.32555,-30.14785],[27.40778,-30.14577],[27.37293,-30.19401],[27.36649,-30.27246],[27.38108,-30.33456],[27.45452,-30.32239],[27.56901,-30.42504],[27.56781,-30.44562],[27.62137,-30.50509],[27.6521,-30.51707],[27.67819,-30.53437],[27.69467,-30.55862],[27.74814,-30.60635],[28.12073,-30.68072],[28.2319,-30.28476],[28.399,-30.1592],[28.68627,-30.12885],[28.80222,-30.10579],[28.9338,-30.05072],[29.16548,-29.91706],[29.12553,-29.76266],[29.28545,-29.58456],[29.33204,-29.45598]]]]}},{type:"Feature",properties:{iso1A2:"YT",iso1A3:"MYT",iso1N3:"175",wikidata:"Q17063",nameEn:"Mayotte",country:"FR",groups:["EU","014","202","002"],callingCodes:["262"]},geometry:{type:"MultiPolygon",coordinates:[[[[43.83794,-13.66915],[45.50237,-11.90315],[45.54824,-13.22353],[43.83794,-13.66915]]]]}},{type:"Feature",properties:{iso1A2:"YE",iso1A3:"YEM",iso1N3:"887",wikidata:"Q805",nameEn:"Yemen",groups:["145","142"],callingCodes:["967"]},geometry:{type:"MultiPolygon",coordinates:[[[[53.32998,16.16312],[55.69862,12.12478],[52.253,11.68582],[51.12877,12.56479],[50.51849,13.0483],[43.90659,12.3823],[43.32909,12.59711],[43.29075,12.79154],[42.63806,13.58268],[41.29956,15.565],[41.37609,16.19728],[42.15205,16.40211],[42.76801,16.40371],[42.94625,16.39721],[42.94351,16.49467],[42.97215,16.51093],[43.11601,16.53166],[43.15274,16.67248],[43.22066,16.65179],[43.21325,16.74416],[43.25857,16.75304],[43.26303,16.79479],[43.24801,16.80613],[43.22956,16.80613],[43.22012,16.83932],[43.18338,16.84852],[43.1398,16.90696],[43.19328,16.94703],[43.1813,16.98438],[43.18233,17.02673],[43.23967,17.03428],[43.17787,17.14717],[43.20156,17.25901],[43.32653,17.31179],[43.22533,17.38343],[43.29185,17.53224],[43.43005,17.56148],[43.70631,17.35762],[44.50126,17.47475],[46.31018,17.20464],[46.76494,17.29151],[47.00571,16.94765],[47.48245,17.10808],[47.58351,17.50366],[48.19996,18.20584],[49.04884,18.59899],[52.00311,19.00083],[52.78009,17.35124],[52.74267,17.29519],[52.81185,17.28568],[53.09917,16.67084],[53.32998,16.16312]]]]}},{type:"Feature",properties:{iso1A2:"KR",iso1A3:"KOR",iso1N3:"410",wikidata:"Q884",nameEn:"South Korea",groups:["030","142"],callingCodes:["82"]},geometry:{type:"MultiPolygon",coordinates:[[[[133.61399,37.41],[129.2669,34.87122],[125.99728,32.63328],[122.80525,33.30571],[123.85601,37.49093],[124.67666,38.05679],[124.84224,37.977],[124.87921,37.80827],[125.06408,37.66334],[125.37112,37.62643],[125.81159,37.72949],[126.13074,37.70512],[126.18776,37.74728],[126.19097,37.81462],[126.24402,37.83113],[126.43239,37.84095],[126.46818,37.80873],[126.56709,37.76857],[126.59918,37.76364],[126.66067,37.7897],[126.68793,37.83728],[126.68793,37.9175],[126.67023,37.95852],[126.84961,38.0344],[126.88106,38.10246],[126.95887,38.1347],[126.95338,38.17735],[127.04479,38.25518],[127.15749,38.30722],[127.38727,38.33227],[127.49672,38.30647],[127.55013,38.32257],[128.02917,38.31861],[128.27652,38.41657],[128.31105,38.58462],[128.37487,38.62345],[128.65655,38.61914],[133.61399,37.41]]]]}},{type:"Feature",properties:{iso1A2:"GT",iso1A3:"GTM",iso1N3:"320",wikidata:"Q774",nameEn:"Guatemala",groups:["013","003","419","019"],callingCodes:["502"]},geometry:{type:"MultiPolygon",coordinates:[[[[-89.14985,17.81563],[-89.15025,17.04813],[-89.22683,15.88619],[-89.17418,15.90898],[-89.02415,15.9063],[-88.95358,15.88698],[-88.40779,16.09624],[-88.20359,16.03858],[-88.22552,15.72294],[-88.24022,15.69247],[-88.31459,15.66942],[-88.32467,15.63665],[-88.97343,15.14039],[-89.15149,15.07392],[-89.18048,14.99967],[-89.15149,14.97775],[-89.23467,14.85596],[-89.13132,14.71582],[-89.15653,14.57802],[-89.23719,14.58046],[-89.35189,14.47553],[-89.34776,14.43013],[-89.39028,14.44561],[-89.57441,14.41637],[-89.58814,14.33165],[-89.50614,14.26084],[-89.52397,14.22628],[-89.61844,14.21937],[-89.70756,14.1537],[-89.75569,14.07073],[-89.73251,14.04133],[-89.76103,14.02923],[-89.81807,14.07073],[-89.88937,14.0396],[-90.10505,13.85104],[-90.11344,13.73679],[-90.55276,12.8866],[-92.37213,14.39277],[-92.2261,14.53423],[-92.1454,14.6804],[-92.18161,14.84147],[-92.1423,14.88647],[-92.1454,14.98143],[-92.0621,15.07406],[-92.20983,15.26077],[-91.73182,16.07371],[-90.44567,16.07573],[-90.40499,16.40524],[-90.61212,16.49832],[-90.69064,16.70697],[-91.04436,16.92175],[-91.43809,17.25373],[-90.99199,17.25192],[-90.98678,17.81655],[-89.14985,17.81563]]]]}},{type:"Feature",properties:{iso1A2:"DZ",iso1A3:"DZA",iso1N3:"012",wikidata:"Q262",nameEn:"Algeria",groups:["015","002"],callingCodes:["213"]},geometry:{type:"MultiPolygon",coordinates:[[[[8.59123,37.14286],[8.64044,36.9401],[8.62972,36.86499],[8.67706,36.8364],[8.57613,36.78062],[8.46537,36.7706],[8.47609,36.66607],[8.16167,36.48817],[8.18936,36.44939],[8.40731,36.42208],[8.2626,35.91733],[8.26472,35.73669],[8.35371,35.66373],[8.36086,35.47774],[8.30329,35.29884],[8.47318,35.23376],[8.3555,35.10007],[8.30727,34.95378],[8.25189,34.92009],[8.29655,34.72798],[8.20482,34.57575],[7.86264,34.3987],[7.81242,34.21841],[7.74207,34.16492],[7.66174,34.20167],[7.52851,34.06493],[7.54088,33.7726],[7.73687,33.42114],[7.83028,33.18851],[8.11433,33.10175],[8.1179,33.05086],[8.31895,32.83483],[8.35999,32.50101],[9.07483,32.07865],[9.55544,30.23971],[9.3876,30.16738],[9.78136,29.40961],[9.89569,26.57696],[9.51696,26.39148],[9.38834,26.19288],[10.03146,25.35635],[10.02432,24.98124],[10.33159,24.5465],[10.85323,24.5595],[11.41061,24.21456],[11.62498,24.26669],[11.96886,23.51735],[7.48273,20.87258],[7.38361,20.79165],[5.8153,19.45101],[4.26651,19.14224],[3.36082,18.9745],[3.12501,19.1366],[3.24648,19.81703],[1.20992,20.73533],[1.15698,21.12843],[-4.83423,24.99935],[-8.66674,27.31569],[-8.66879,27.6666],[-8.6715,28.71194],[-7.61585,29.36252],[-6.95824,29.50924],[-6.78351,29.44634],[-6.69965,29.51623],[-5.75616,29.61407],[-5.72121,29.52322],[-5.58831,29.48103],[-5.21671,29.95253],[-4.6058,30.28343],[-4.31774,30.53229],[-3.64735,30.67539],[-3.65418,30.85566],[-3.54944,31.0503],[-3.77103,31.14984],[-3.77647,31.31912],[-3.66386,31.39202],[-3.66314,31.6339],[-2.82784,31.79459],[-2.93873,32.06557],[-2.46166,32.16603],[-1.22829,32.07832],[-1.15735,32.12096],[-1.24453,32.1917],[-1.24998,32.32993],[-0.9912,32.52467],[-1.37794,32.73628],[-1.54244,32.95499],[-1.46249,33.0499],[-1.67067,33.27084],[-1.59508,33.59929],[-1.73494,33.71721],[-1.64666,34.10405],[-1.78042,34.39018],[-1.69788,34.48056],[-1.84569,34.61907],[-1.73707,34.74226],[-1.97469,34.886],[-1.97833,34.93218],[-2.04734,34.93218],[-2.21445,35.04378],[-2.21248,35.08532],[-2.27707,35.35051],[2.46645,37.97429],[8.59123,37.14286]]]]}},{type:"Feature",properties:{iso1A2:"BS",iso1A3:"BHS",iso1N3:"044",wikidata:"Q778",nameEn:"The Bahamas",groups:["029","003","419","019"],driveSide:"left",roadSpeedUnit:"mph",callingCodes:["1 242"]},geometry:{type:"MultiPolygon",coordinates:[[[[-72.98446,20.4801],[-80.88924,23.80416],[-79.89631,24.6597],[-79.14818,27.83105],[-71.70065,25.7637],[-72.98446,20.4801]]]]}}];
	var rawBorders = {
	type: type,
	features: features
	};

	let borders = rawBorders;
	let whichPolygonGetter = {};
	let featuresByCode = {};
	let idFilterRegex = /\bThe\b|\bthe\b|\band\b|\bof\b|[-_ .,()&[\]/]/g;
	let levels = [
	  'subterritory',
	  'territory',
	  'country',
	  'intermediateRegion',
	  'subregion',
	  'region',
	  'union',
	  'world'
	];
	loadDerivedDataAndCaches(borders);
	function loadDerivedDataAndCaches(borders) {
	  let identifierProps = ['iso1A2', 'iso1A3', 'm49', 'wikidata', 'emojiFlag', 'nameEn'];
	  let geometryFeatures = [];
	  for (let i in borders.features) {
	    let feature = borders.features[i];
	    feature.properties.id = feature.properties.iso1A2 || feature.properties.m49;
	    loadM49(feature);
	    loadIsoStatus(feature);
	    loadLevel(feature);
	    loadGroups(feature);
	    loadRoadSpeedUnit(feature);
	    loadDriveSide(feature);
	    loadFlag(feature);
	    cacheFeatureByIDs(feature);
	    if (feature.geometry) geometryFeatures.push(feature);
	  }
	  for (let i in borders.features) {
	    let feature = borders.features[i];
	    feature.properties.groups.sort(function(groupID1, groupID2) {
	      return (
	        levels.indexOf(featuresByCode[groupID1].properties.level) -
	        levels.indexOf(featuresByCode[groupID2].properties.level)
	      );
	    });
	    loadMembersForGroupsOf(feature);
	  }
	  let geometryOnlyCollection = {
	    type: 'RegionFeatureCollection',
	    features: geometryFeatures
	  };
	  whichPolygonGetter = whichPolygon_1(geometryOnlyCollection);
	  function loadGroups(feature) {
	    let props = feature.properties;
	    if (!props.groups) {
	      props.groups = [];
	    }
	    if (props.country) {
	      props.groups.push(props.country);
	    }
	    if (props.m49 !== '001') {
	      props.groups.push('001');
	    }
	  }
	  function loadM49(feature) {
	    let props = feature.properties;
	    if (!props.m49 && props.iso1N3) {
	      props.m49 = props.iso1N3;
	    }
	  }
	  function loadIsoStatus(feature) {
	    let props = feature.properties;
	    if (!props.isoStatus && props.iso1A2) {
	      props.isoStatus = 'official';
	    }
	  }
	  function loadLevel(feature) {
	    let props = feature.properties;
	    if (props.level) return;
	    if (!props.country) {
	      props.level = 'country';
	    } else if (props.isoStatus === 'official') {
	      props.level = 'territory';
	    } else {
	      props.level = 'subterritory';
	    }
	  }
	  function loadRoadSpeedUnit(feature) {
	    let props = feature.properties;
	    if (props.roadSpeedUnit === undefined && props.iso1A2 && props.iso1A2 !== 'EU') {
	      props.roadSpeedUnit = 'km/h';
	    }
	  }
	  function loadDriveSide(feature) {
	    let props = feature.properties;
	    if (props.driveSide === undefined && props.iso1A2 && props.iso1A2 !== 'EU') {
	      props.driveSide = 'right';
	    }
	  }
	  function loadFlag(feature) {
	    if (!feature.properties.iso1A2) return;
	    let flag = feature.properties.iso1A2.replace(/./g, function(char) {
	      return String.fromCodePoint(char.charCodeAt(0) + 127397);
	    });
	    feature.properties.emojiFlag = flag;
	  }
	  function loadMembersForGroupsOf(feature) {
	    let featureID = feature.properties.id;
	    let standardizedGroupIDs = [];
	    for (let j in feature.properties.groups) {
	      let groupID = feature.properties.groups[j];
	      let groupFeature = featuresByCode[groupID];
	      standardizedGroupIDs.push(groupFeature.properties.id);
	      if (groupFeature.properties.members) {
	        groupFeature.properties.members.push(featureID);
	      } else {
	        groupFeature.properties.members = [featureID];
	      }
	    }
	    feature.properties.groups = standardizedGroupIDs;
	  }
	  function cacheFeatureByIDs(feature) {
	    for (let k in identifierProps) {
	      let prop = identifierProps[k];
	      let id = prop && feature.properties[prop];
	      if (id) {
	        id = id.replace(idFilterRegex, '').toUpperCase();
	        featuresByCode[id] = feature;
	      }
	    }
	    if (feature.properties.aliases) {
	      for (let j in feature.properties.aliases) {
	        let alias = feature.properties.aliases[j].replace(idFilterRegex, '').toUpperCase();
	        featuresByCode[alias] = feature;
	      }
	    }
	  }
	}
	function locArray(loc) {
	  if (Array.isArray(loc)) {
	    return loc;
	  } else if (loc.coordinates) {
	    return loc.coordinates;
	  }
	  return loc.geometry.coordinates;
	}
	function smallestFeature(loc) {
	  let query = locArray(loc);
	  let featureProperties = whichPolygonGetter(query);
	  if (!featureProperties) return null;
	  return featuresByCode[featureProperties.id];
	}
	function countryFeature(loc) {
	  let feature = smallestFeature(loc);
	  if (!feature) return null;
	  let countryCode = feature.properties.country || feature.properties.iso1A2;
	  return featuresByCode[countryCode];
	}
	function featureForLoc(loc, opts) {
	  if (opts && opts.level && opts.level !== 'country') {
	    let features = featuresContaining(loc);
	    let targetLevel = opts.level;
	    let targetLevelIndex = levels.indexOf(targetLevel);
	    if (targetLevelIndex === -1) return null;
	    for (let i in features) {
	      let feature = features[i];
	      if (
	        feature.properties.level === targetLevel ||
	        levels.indexOf(feature.properties.level) > targetLevelIndex
	      ) {
	        return feature;
	      }
	    }
	    return null;
	  }
	  return countryFeature(loc);
	}
	function featureForID(id) {
	  let stringID;
	  if (typeof id === 'number') {
	    stringID = id.toString();
	    if (stringID.length === 1) {
	      stringID = '00' + stringID;
	    } else if (stringID.length === 2) {
	      stringID = '0' + stringID;
	    }
	  } else {
	    stringID = id.replace(idFilterRegex, '').toUpperCase();
	  }
	  return featuresByCode[stringID] || null;
	}
	function smallestOrMatchingFeature(query) {
	  if (typeof query === 'object') {
	    return smallestFeature(query);
	  }
	  return featureForID(query);
	}
	function feature(query, opts) {
	  if (typeof query === 'object') {
	    return featureForLoc(query, opts);
	  }
	  return featureForID(query);
	}
	function featuresContaining(query, strict) {
	  let feature = smallestOrMatchingFeature(query);
	  if (!feature) return [];
	  let features = [];
	  if (!strict || typeof query === 'object') {
	    features.push(feature);
	  }
	  let properties = feature.properties;
	  for (let i in properties.groups) {
	    let groupID = properties.groups[i];
	    features.push(featuresByCode[groupID]);
	  }
	  return features;
	}

	var RADIUS = 6378137;
	var FLATTENING = 1/298.257223563;
	var POLAR_RADIUS = 6356752.3142;

	var wgs84 = {
		RADIUS: RADIUS,
		FLATTENING: FLATTENING,
		POLAR_RADIUS: POLAR_RADIUS
	};

	var geometry_1 = geometry;
	var ring = ringArea;

	function geometry(_) {
	    var area = 0, i;
	    switch (_.type) {
	        case 'Polygon':
	            return polygonArea(_.coordinates);
	        case 'MultiPolygon':
	            for (i = 0; i < _.coordinates.length; i++) {
	                area += polygonArea(_.coordinates[i]);
	            }
	            return area;
	        case 'Point':
	        case 'MultiPoint':
	        case 'LineString':
	        case 'MultiLineString':
	            return 0;
	        case 'GeometryCollection':
	            for (i = 0; i < _.geometries.length; i++) {
	                area += geometry(_.geometries[i]);
	            }
	            return area;
	    }
	}

	function polygonArea(coords) {
	    var area = 0;
	    if (coords && coords.length > 0) {
	        area += Math.abs(ringArea(coords[0]));
	        for (var i = 1; i < coords.length; i++) {
	            area -= Math.abs(ringArea(coords[i]));
	        }
	    }
	    return area;
	}

	/**
	 * Calculate the approximate area of the polygon were it projected onto
	 *     the earth.  Note that this area will be positive if ring is oriented
	 *     clockwise, otherwise it will be negative.
	 *
	 * Reference:
	 * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for
	 *     Polygons on a Sphere", JPL Publication 07-03, Jet Propulsion
	 *     Laboratory, Pasadena, CA, June 2007 http://trs-new.jpl.nasa.gov/dspace/handle/2014/40409
	 *
	 * Returns:
	 * {float} The approximate signed geodesic area of the polygon in square
	 *     meters.
	 */

	function ringArea(coords) {
	    var p1, p2, p3, lowerIndex, middleIndex, upperIndex, i,
	    area = 0,
	    coordsLength = coords.length;

	    if (coordsLength > 2) {
	        for (i = 0; i < coordsLength; i++) {
	            if (i === coordsLength - 2) {// i = N-2
	                lowerIndex = coordsLength - 2;
	                middleIndex = coordsLength -1;
	                upperIndex = 0;
	            } else if (i === coordsLength - 1) {// i = N-1
	                lowerIndex = coordsLength - 1;
	                middleIndex = 0;
	                upperIndex = 1;
	            } else { // i = 0 to N-3
	                lowerIndex = i;
	                middleIndex = i+1;
	                upperIndex = i+2;
	            }
	            p1 = coords[lowerIndex];
	            p2 = coords[middleIndex];
	            p3 = coords[upperIndex];
	            area += ( rad(p3[0]) - rad(p1[0]) ) * Math.sin( rad(p2[1]));
	        }

	        area = area * wgs84.RADIUS * wgs84.RADIUS / 2;
	    }

	    return area;
	}

	function rad(_) {
	    return _ * Math.PI / 180;
	}

	var geojsonArea = {
		geometry: geometry_1,
		ring: ring
	};

	function toRadians(angleInDegrees) {
	  return angleInDegrees * Math.PI / 180;
	}

	function toDegrees(angleInRadians) {
	  return angleInRadians * 180 / Math.PI;
	}

	function offset(c1, distance, bearing) {
	  var lat1 = toRadians(c1[1]);
	  var lon1 = toRadians(c1[0]);
	  var dByR = distance / 6378137; // distance divided by 6378137 (radius of the earth) wgs84
	  var lat = Math.asin(
	    Math.sin(lat1) * Math.cos(dByR) +
	    Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));
	  var lon = lon1 + Math.atan2(
	      Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),
	      Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));
	  return [toDegrees(lon), toDegrees(lat)];
	}

	var circleToPolygon = function circleToPolygon(center, radius, numberOfSegments) {
	  var n = numberOfSegments ? numberOfSegments : 32;
	  var flatCoordinates = [];
	  var coordinates = [];
	  for (var i = 0; i < n; ++i) {
	    flatCoordinates.push.apply(flatCoordinates, offset(center, radius, 2 * Math.PI * i / n));
	  }
	  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);

	  for (var i = 0, j = 0; j < flatCoordinates.length; j += 2) {
	    coordinates[i++] = flatCoordinates.slice(j, j + 2);
	  }

	  return {
	    type: 'Polygon',
	    coordinates: [coordinates.reverse()]
	  };
	};

	var geojsonPrecision = createCommonjsModule(function (module) {
	(function() {

	  function parse(t, precision) {

	    function point(p) {
	      return p.map(function(e) {
	        return 1 * e.toFixed(precision);
	      });
	    }

	    function multi(l) {
	      return l.map(point);
	    }

	    function poly(p) {
	      return p.map(multi);
	    }

	    function multiPoly(m) {
	      return m.map(poly);
	    }

	    function geometry(obj) {
	      if (!obj) {
	        return {};
	      }
	      
	      switch (obj.type) {
	        case "Point":
	          obj.coordinates = point(obj.coordinates);
	          return obj;
	        case "LineString":
	        case "MultiPoint":
	          obj.coordinates = multi(obj.coordinates);
	          return obj;
	        case "Polygon":
	        case "MultiLineString":
	          obj.coordinates = poly(obj.coordinates);
	          return obj;
	        case "MultiPolygon":
	          obj.coordinates = multiPoly(obj.coordinates);
	          return obj;
	        case "GeometryCollection":
	          obj.geometries = obj.geometries.map(geometry);
	          return obj;
	        default :
	          return {};
	      }
	    }

	    function feature(obj) {
	      obj.geometry = geometry(obj.geometry);
	      return obj
	    }

	    function featureCollection(f) {
	      f.features = f.features.map(feature);
	      return f;
	    }

	    function geometryCollection(g) {
	      g.geometries = g.geometries.map(geometry);
	      return g;
	    }

	    if (!t) {
	      return t;
	    }

	    switch (t.type) {
	      case "Feature":
	        return feature(t);
	      case "GeometryCollection" :
	        return geometryCollection(t);
	      case "FeatureCollection" :
	        return featureCollection(t);
	      case "Point":
	      case "LineString":
	      case "Polygon":
	      case "MultiPoint":
	      case "MultiPolygon":
	      case "MultiLineString":
	        return geometry(t);
	      default :
	        return t;
	    }
	      
	  }

	  module.exports = parse;
	  module.exports.parse = parse;

	}());
	});
	var geojsonPrecision_1 = geojsonPrecision.parse;

	/* Polyfill service v3.13.0
	 * For detailed credits and licence information see http://github.com/financial-times/polyfill-service
	 *
	 * - Array.prototype.fill, License: CC0 */

	if (!('fill' in Array.prototype)) {
	  Object.defineProperty(Array.prototype, 'fill', {
	    configurable: true,
	    value: function fill (value) {
	      if (this === undefined || this === null) {
	        throw new TypeError(this + ' is not an object')
	      }

	      var arrayLike = Object(this);

	      var length = Math.max(Math.min(arrayLike.length, 9007199254740991), 0) || 0;

	      var relativeStart = 1 in arguments ? parseInt(Number(arguments[1]), 10) || 0 : 0;

	      relativeStart = relativeStart < 0 ? Math.max(length + relativeStart, 0) : Math.min(relativeStart, length);

	      var relativeEnd = 2 in arguments && arguments[2] !== undefined ? parseInt(Number(arguments[2]), 10) || 0 : length;

	      relativeEnd = relativeEnd < 0 ? Math.max(length + arguments[2], 0) : Math.min(relativeEnd, length);

	      while (relativeStart < relativeEnd) {
	        arrayLike[relativeStart] = value;

	        ++relativeStart;
	      }

	      return arrayLike
	    },
	    writable: true
	  });
	}

	/**
	 * Polyfill for IE support
	 */
	Number.isFinite = Number.isFinite || function (value) {
	  return typeof value === 'number' && isFinite(value)
	};

	Number.isInteger = Number.isInteger || function (val) {
	  return typeof val === 'number' &&
	  isFinite(val) &&
	  Math.floor(val) === val
	};

	Number.parseFloat = Number.parseFloat || parseFloat;

	Number.isNaN = Number.isNaN || function (value) {
	  return value !== value // eslint-disable-line
	};

	/**
	 * Polyfill for IE support
	 */
	Math.trunc = Math.trunc || function (x) {
	  return x < 0 ? Math.ceil(x) : Math.floor(x)
	};

	var NumberUtil = function NumberUtil () {};

	NumberUtil.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	NumberUtil.prototype.getClass = function getClass () {
	  return NumberUtil
	};
	NumberUtil.prototype.equalsWithTolerance = function equalsWithTolerance (x1, x2, tolerance) {
	  return Math.abs(x1 - x2) <= tolerance
	};

	var IllegalArgumentException = (function (Error) {
		function IllegalArgumentException (message) {
			Error.call(this, message);
			this.name = 'IllegalArgumentException';
			this.message = message;
			this.stack = (new Error()).stack;
		}

		if ( Error ) IllegalArgumentException.__proto__ = Error;
		IllegalArgumentException.prototype = Object.create( Error && Error.prototype );
		IllegalArgumentException.prototype.constructor = IllegalArgumentException;

		return IllegalArgumentException;
	}(Error));

	var Double = function Double () {};

	var staticAccessors$1 = { MAX_VALUE: { configurable: true } };

	Double.isNaN = function isNaN (n) { return Number.isNaN(n) };
	Double.doubleToLongBits = function doubleToLongBits (n) { return n };
	Double.longBitsToDouble = function longBitsToDouble (n) { return n };
	Double.isInfinite = function isInfinite (n) { return !Number.isFinite(n) };
	staticAccessors$1.MAX_VALUE.get = function () { return Number.MAX_VALUE };

	Object.defineProperties( Double, staticAccessors$1 );

	var Comparable = function Comparable () {};

	var Clonable = function Clonable () {};

	var Comparator = function Comparator () {};

	function Serializable () {}

	// import Assert from '../util/Assert'

	var Coordinate = function Coordinate () {
	  this.x = null;
	  this.y = null;
	  this.z = null;
	  if (arguments.length === 0) {
	    this.x = 0.0;
	    this.y = 0.0;
	    this.z = Coordinate.NULL_ORDINATE;
	  } else if (arguments.length === 1) {
	    var c = arguments[0];
	    this.x = c.x;
	    this.y = c.y;
	    this.z = c.z;
	  } else if (arguments.length === 2) {
	    this.x = arguments[0];
	    this.y = arguments[1];
	    this.z = Coordinate.NULL_ORDINATE;
	  } else if (arguments.length === 3) {
	    this.x = arguments[0];
	    this.y = arguments[1];
	    this.z = arguments[2];
	  }
	};

	var staticAccessors = { DimensionalComparator: { configurable: true },serialVersionUID: { configurable: true },NULL_ORDINATE: { configurable: true },X: { configurable: true },Y: { configurable: true },Z: { configurable: true } };
	Coordinate.prototype.setOrdinate = function setOrdinate (ordinateIndex, value) {
	  switch (ordinateIndex) {
	    case Coordinate.X:
	      this.x = value;
	      break
	    case Coordinate.Y:
	      this.y = value;
	      break
	    case Coordinate.Z:
	      this.z = value;
	      break
	    default:
	      throw new IllegalArgumentException('Invalid ordinate index: ' + ordinateIndex)
	  }
	};
	Coordinate.prototype.equals2D = function equals2D () {
	  if (arguments.length === 1) {
	    var other = arguments[0];
	    if (this.x !== other.x) {
	      return false
	    }
	    if (this.y !== other.y) {
	      return false
	    }
	    return true
	  } else if (arguments.length === 2) {
	    var c = arguments[0];
	    var tolerance = arguments[1];
	    if (!NumberUtil.equalsWithTolerance(this.x, c.x, tolerance)) {
	      return false
	    }
	    if (!NumberUtil.equalsWithTolerance(this.y, c.y, tolerance)) {
	      return false
	    }
	    return true
	  }
	};
	Coordinate.prototype.getOrdinate = function getOrdinate (ordinateIndex) {
	  switch (ordinateIndex) {
	    case Coordinate.X:
	      return this.x
	    case Coordinate.Y:
	      return this.y
	    case Coordinate.Z:
	      return this.z
	  }
	  throw new IllegalArgumentException('Invalid ordinate index: ' + ordinateIndex)
	};
	Coordinate.prototype.equals3D = function equals3D (other) {
	  return this.x === other.x &&
	         this.y === other.y &&
	         ((this.z === other.z || Double.isNaN(this.z)) &&
	         Double.isNaN(other.z))
	};
	Coordinate.prototype.equals = function equals (other) {
	  if (!(other instanceof Coordinate)) {
	    return false
	  }
	  return this.equals2D(other)
	};
	Coordinate.prototype.equalInZ = function equalInZ (c, tolerance) {
	  return NumberUtil.equalsWithTolerance(this.z, c.z, tolerance)
	};
	Coordinate.prototype.compareTo = function compareTo (o) {
	  var other = o;
	  if (this.x < other.x) { return -1 }
	  if (this.x > other.x) { return 1 }
	  if (this.y < other.y) { return -1 }
	  if (this.y > other.y) { return 1 }
	  return 0
	};
	Coordinate.prototype.clone = function clone () {
	  // try {
	  // var coord = null
	  // return coord
	  // } catch (e) {
	  // if (e instanceof CloneNotSupportedException) {
	  //   Assert.shouldNeverReachHere("this shouldn't happen because this class is Cloneable")
	  //   return null
	  // } else throw e
	  // } finally {}
	};
	Coordinate.prototype.copy = function copy () {
	  return new Coordinate(this)
	};
	Coordinate.prototype.toString = function toString () {
	  return '(' + this.x + ', ' + this.y + ', ' + this.z + ')'
	};
	Coordinate.prototype.distance3D = function distance3D (c) {
	  var dx = this.x - c.x;
	  var dy = this.y - c.y;
	  var dz = this.z - c.z;
	  return Math.sqrt(dx * dx + dy * dy + dz * dz)
	};
	Coordinate.prototype.distance = function distance (c) {
	  var dx = this.x - c.x;
	  var dy = this.y - c.y;
	  return Math.sqrt(dx * dx + dy * dy)
	};
	Coordinate.prototype.hashCode = function hashCode () {
	  var result = 17;
	  result = 37 * result + Coordinate.hashCode(this.x);
	  result = 37 * result + Coordinate.hashCode(this.y);
	  return result
	};
	Coordinate.prototype.setCoordinate = function setCoordinate (other) {
	  this.x = other.x;
	  this.y = other.y;
	  this.z = other.z;
	};
	Coordinate.prototype.interfaces_ = function interfaces_ () {
	  return [Comparable, Clonable, Serializable]
	};
	Coordinate.prototype.getClass = function getClass () {
	  return Coordinate
	};
	Coordinate.hashCode = function hashCode () {
	  if (arguments.length === 1) {
	    var x = arguments[0];
	    var f = Double.doubleToLongBits(x);
	    return Math.trunc((f ^ f) >>> 32)
	  }
	};
	staticAccessors.DimensionalComparator.get = function () { return DimensionalComparator };
	staticAccessors.serialVersionUID.get = function () { return 6683108902428366910 };
	staticAccessors.NULL_ORDINATE.get = function () { return Double.NaN };
	staticAccessors.X.get = function () { return 0 };
	staticAccessors.Y.get = function () { return 1 };
	staticAccessors.Z.get = function () { return 2 };

	Object.defineProperties( Coordinate, staticAccessors );

	var DimensionalComparator = function DimensionalComparator (dimensionsToTest) {
	  this._dimensionsToTest = 2;
	  if (arguments.length === 0) ; else if (arguments.length === 1) {
	    var dimensionsToTest$1 = arguments[0];
	    if (dimensionsToTest$1 !== 2 && dimensionsToTest$1 !== 3) { throw new IllegalArgumentException('only 2 or 3 dimensions may be specified') }
	    this._dimensionsToTest = dimensionsToTest$1;
	  }
	};
	DimensionalComparator.prototype.compare = function compare (o1, o2) {
	  var c1 = o1;
	  var c2 = o2;
	  var compX = DimensionalComparator.compare(c1.x, c2.x);
	  if (compX !== 0) { return compX }
	  var compY = DimensionalComparator.compare(c1.y, c2.y);
	  if (compY !== 0) { return compY }
	  if (this._dimensionsToTest <= 2) { return 0 }
	  var compZ = DimensionalComparator.compare(c1.z, c2.z);
	  return compZ
	};
	DimensionalComparator.prototype.interfaces_ = function interfaces_ () {
	  return [Comparator]
	};
	DimensionalComparator.prototype.getClass = function getClass () {
	  return DimensionalComparator
	};
	DimensionalComparator.compare = function compare (a, b) {
	  if (a < b) { return -1 }
	  if (a > b) { return 1 }
	  if (Double.isNaN(a)) {
	    if (Double.isNaN(b)) { return 0 }
	    return -1
	  }
	  if (Double.isNaN(b)) { return 1 }
	  return 0
	};

	// import hasInterface from '../../../../hasInterface'
	// import CoordinateSequence from './CoordinateSequence'

	var CoordinateSequenceFactory = function CoordinateSequenceFactory () {};

	CoordinateSequenceFactory.prototype.create = function create () {
	  // if (arguments.length === 1) {
	  // if (arguments[0] instanceof Array) {
	  //   let coordinates = arguments[0]
	  // } else if (hasInterface(arguments[0], CoordinateSequence)) {
	  //   let coordSeq = arguments[0]
	  // }
	  // } else if (arguments.length === 2) {
	  // let size = arguments[0]
	  // let dimension = arguments[1]
	  // }
	};
	CoordinateSequenceFactory.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	CoordinateSequenceFactory.prototype.getClass = function getClass () {
	  return CoordinateSequenceFactory
	};

	var Location = function Location () {};

	var staticAccessors$4 = { INTERIOR: { configurable: true },BOUNDARY: { configurable: true },EXTERIOR: { configurable: true },NONE: { configurable: true } };

	Location.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Location.prototype.getClass = function getClass () {
	  return Location
	};
	Location.toLocationSymbol = function toLocationSymbol (locationValue) {
	  switch (locationValue) {
	    case Location.EXTERIOR:
	      return 'e'
	    case Location.BOUNDARY:
	      return 'b'
	    case Location.INTERIOR:
	      return 'i'
	    case Location.NONE:
	      return '-'
	  }
	  throw new IllegalArgumentException('Unknown location value: ' + locationValue)
	};
	staticAccessors$4.INTERIOR.get = function () { return 0 };
	staticAccessors$4.BOUNDARY.get = function () { return 1 };
	staticAccessors$4.EXTERIOR.get = function () { return 2 };
	staticAccessors$4.NONE.get = function () { return -1 };

	Object.defineProperties( Location, staticAccessors$4 );

	var hasInterface = function (o, i) {
	  return o.interfaces_ && o.interfaces_().indexOf(i) > -1
	};

	var MathUtil = function MathUtil () {};

	var staticAccessors$5 = { LOG_10: { configurable: true } };

	MathUtil.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	MathUtil.prototype.getClass = function getClass () {
	  return MathUtil
	};
	MathUtil.log10 = function log10 (x) {
	  var ln = Math.log(x);
	  if (Double.isInfinite(ln)) { return ln }
	  if (Double.isNaN(ln)) { return ln }
	  return ln / MathUtil.LOG_10
	};
	MathUtil.min = function min (v1, v2, v3, v4) {
	  var min = v1;
	  if (v2 < min) { min = v2; }
	  if (v3 < min) { min = v3; }
	  if (v4 < min) { min = v4; }
	  return min
	};
	MathUtil.clamp = function clamp () {
	  if (typeof arguments[2] === 'number' && (typeof arguments[0] === 'number' && typeof arguments[1] === 'number')) {
	    var x = arguments[0];
	    var min = arguments[1];
	    var max = arguments[2];
	    if (x < min) { return min }
	    if (x > max) { return max }
	    return x
	  } else if (Number.isInteger(arguments[2]) && (Number.isInteger(arguments[0]) && Number.isInteger(arguments[1]))) {
	    var x$1 = arguments[0];
	    var min$1 = arguments[1];
	    var max$1 = arguments[2];
	    if (x$1 < min$1) { return min$1 }
	    if (x$1 > max$1) { return max$1 }
	    return x$1
	  }
	};
	MathUtil.wrap = function wrap (index, max) {
	  if (index < 0) {
	    return max - -index % max
	  }
	  return index % max
	};
	MathUtil.max = function max () {
	  if (arguments.length === 3) {
	    var v1 = arguments[0];
	    var v2 = arguments[1];
	    var v3 = arguments[2];
	    var max = v1;
	    if (v2 > max) { max = v2; }
	    if (v3 > max) { max = v3; }
	    return max
	  } else if (arguments.length === 4) {
	    var v1$1 = arguments[0];
	    var v2$1 = arguments[1];
	    var v3$1 = arguments[2];
	    var v4 = arguments[3];
	    var max$1 = v1$1;
	    if (v2$1 > max$1) { max$1 = v2$1; }
	    if (v3$1 > max$1) { max$1 = v3$1; }
	    if (v4 > max$1) { max$1 = v4; }
	    return max$1
	  }
	};
	MathUtil.average = function average (x1, x2) {
	  return (x1 + x2) / 2.0
	};
	staticAccessors$5.LOG_10.get = function () { return Math.log(10) };

	Object.defineProperties( MathUtil, staticAccessors$5 );

	var StringBuffer = function StringBuffer (str) {
	  this.str = str;
	};
	StringBuffer.prototype.append = function append (e) {
	  this.str += e;
	};

	StringBuffer.prototype.setCharAt = function setCharAt (i, c) {
	  this.str = this.str.substr(0, i) + c + this.str.substr(i + 1);
	};

	StringBuffer.prototype.toString = function toString (e) {
	  return this.str
	};

	var Integer = function Integer (value) {
	  this.value = value;
	};
	Integer.prototype.intValue = function intValue () {
	  return this.value
	};
	Integer.prototype.compareTo = function compareTo (o) {
	  if (this.value < o) { return -1 }
	  if (this.value > o) { return 1 }
	  return 0
	};
	Integer.isNaN = function isNaN (n) { return Number.isNaN(n) };

	var Character = function Character () {};

	Character.isWhitespace = function isWhitespace (c) { return ((c <= 32 && c >= 0) || c === 127) };
	Character.toUpperCase = function toUpperCase (c) { return c.toUpperCase() };

	var DD = function DD () {
	  this._hi = 0.0;
	  this._lo = 0.0;
	  if (arguments.length === 0) {
	    this.init(0.0);
	  } else if (arguments.length === 1) {
	    if (typeof arguments[0] === 'number') {
	      var x = arguments[0];
	      this.init(x);
	    } else if (arguments[0] instanceof DD) {
	      var dd = arguments[0];
	      this.init(dd);
	    } else if (typeof arguments[0] === 'string') {
	      var str = arguments[0];
	      DD.call(this, DD.parse(str));
	    }
	  } else if (arguments.length === 2) {
	    var hi = arguments[0];
	    var lo = arguments[1];
	    this.init(hi, lo);
	  }
	};

	var staticAccessors$7 = { PI: { configurable: true },TWO_PI: { configurable: true },PI_2: { configurable: true },E: { configurable: true },NaN: { configurable: true },EPS: { configurable: true },SPLIT: { configurable: true },MAX_PRINT_DIGITS: { configurable: true },TEN: { configurable: true },ONE: { configurable: true },SCI_NOT_EXPONENT_CHAR: { configurable: true },SCI_NOT_ZERO: { configurable: true } };
	DD.prototype.le = function le (y) {
	  return (this._hi < y._hi || this._hi === y._hi) && this._lo <= y._lo
	};
	DD.prototype.extractSignificantDigits = function extractSignificantDigits (insertDecimalPoint, magnitude) {
	  var y = this.abs();
	  var mag = DD.magnitude(y._hi);
	  var scale = DD.TEN.pow(mag);
	  y = y.divide(scale);
	  if (y.gt(DD.TEN)) {
	    y = y.divide(DD.TEN);
	    mag += 1;
	  } else if (y.lt(DD.ONE)) {
	    y = y.multiply(DD.TEN);
	    mag -= 1;
	  }
	  var decimalPointPos = mag + 1;
	  var buf = new StringBuffer();
	  var numDigits = DD.MAX_PRINT_DIGITS - 1;
	  for (var i = 0; i <= numDigits; i++) {
	    if (insertDecimalPoint && i === decimalPointPos) {
	      buf.append('.');
	    }
	    var digit = Math.trunc(y._hi);
	    if (digit < 0) {
	      break
	    }
	    var rebiasBy10 = false;
	    var digitChar = 0;
	    if (digit > 9) {
	      rebiasBy10 = true;
	      digitChar = '9';
	    } else {
	      digitChar = '0' + digit;
	    }
	    buf.append(digitChar);
	    y = y.subtract(DD.valueOf(digit)).multiply(DD.TEN);
	    if (rebiasBy10) { y.selfAdd(DD.TEN); }
	    var continueExtractingDigits = true;
	    var remMag = DD.magnitude(y._hi);
	    if (remMag < 0 && Math.abs(remMag) >= numDigits - i) { continueExtractingDigits = false; }
	    if (!continueExtractingDigits) { break }
	  }
	  magnitude[0] = mag;
	  return buf.toString()
	};
	DD.prototype.sqr = function sqr () {
	  return this.multiply(this)
	};
	DD.prototype.doubleValue = function doubleValue () {
	  return this._hi + this._lo
	};
	DD.prototype.subtract = function subtract () {
	  if (arguments[0] instanceof DD) {
	    var y = arguments[0];
	    return this.add(y.negate())
	  } else if (typeof arguments[0] === 'number') {
	    var y$1 = arguments[0];
	    return this.add(-y$1)
	  }
	};
	DD.prototype.equals = function equals () {
	  if (arguments.length === 1) {
	    var y = arguments[0];
	    return this._hi === y._hi && this._lo === y._lo
	  }
	};
	DD.prototype.isZero = function isZero () {
	  return this._hi === 0.0 && this._lo === 0.0
	};
	DD.prototype.selfSubtract = function selfSubtract () {
	  if (arguments[0] instanceof DD) {
	    var y = arguments[0];
	    if (this.isNaN()) { return this }
	    return this.selfAdd(-y._hi, -y._lo)
	  } else if (typeof arguments[0] === 'number') {
	    var y$1 = arguments[0];
	    if (this.isNaN()) { return this }
	    return this.selfAdd(-y$1, 0.0)
	  }
	};
	DD.prototype.getSpecialNumberString = function getSpecialNumberString () {
	  if (this.isZero()) { return '0.0' }
	  if (this.isNaN()) { return 'NaN ' }
	  return null
	};
	DD.prototype.min = function min (x) {
	  if (this.le(x)) {
	    return this
	  } else {
	    return x
	  }
	};
	DD.prototype.selfDivide = function selfDivide () {
	  if (arguments.length === 1) {
	    if (arguments[0] instanceof DD) {
	      var y = arguments[0];
	      return this.selfDivide(y._hi, y._lo)
	    } else if (typeof arguments[0] === 'number') {
	      var y$1 = arguments[0];
	      return this.selfDivide(y$1, 0.0)
	    }
	  } else if (arguments.length === 2) {
	    var yhi = arguments[0];
	    var ylo = arguments[1];
	    var hc = null;
	    var tc = null;
	    var hy = null;
	    var ty = null;
	    var C = null;
	    var c = null;
	    var U = null;
	    var u = null;
	    C = this._hi / yhi;
	    c = DD.SPLIT * C;
	    hc = c - C;
	    u = DD.SPLIT * yhi;
	    hc = c - hc;
	    tc = C - hc;
	    hy = u - yhi;
	    U = C * yhi;
	    hy = u - hy;
	    ty = yhi - hy;
	    u = hc * hy - U + hc * ty + tc * hy + tc * ty;
	    c = (this._hi - U - u + this._lo - C * ylo) / yhi;
	    u = C + c;
	    this._hi = u;
	    this._lo = C - u + c;
	    return this
	  }
	};
	DD.prototype.dump = function dump () {
	  return 'DD<' + this._hi + ', ' + this._lo + '>'
	};
	DD.prototype.divide = function divide () {
	  if (arguments[0] instanceof DD) {
	    var y = arguments[0];
	    var hc = null;
	    var tc = null;
	    var hy = null;
	    var ty = null;
	    var C = null;
	    var c = null;
	    var U = null;
	    var u = null;
	    C = this._hi / y._hi;
	    c = DD.SPLIT * C;
	    hc = c - C;
	    u = DD.SPLIT * y._hi;
	    hc = c - hc;
	    tc = C - hc;
	    hy = u - y._hi;
	    U = C * y._hi;
	    hy = u - hy;
	    ty = y._hi - hy;
	    u = hc * hy - U + hc * ty + tc * hy + tc * ty;
	    c = (this._hi - U - u + this._lo - C * y._lo) / y._hi;
	    u = C + c;
	    var zhi = u;
	    var zlo = C - u + c;
	    return new DD(zhi, zlo)
	  } else if (typeof arguments[0] === 'number') {
	    var y$1 = arguments[0];
	    if (Double.isNaN(y$1)) { return DD.createNaN() }
	    return DD.copy(this).selfDivide(y$1, 0.0)
	  }
	};
	DD.prototype.ge = function ge (y) {
	  return (this._hi > y._hi || this._hi === y._hi) && this._lo >= y._lo
	};
	DD.prototype.pow = function pow (exp) {
	  if (exp === 0.0) { return DD.valueOf(1.0) }
	  var r = new DD(this);
	  var s = DD.valueOf(1.0);
	  var n = Math.abs(exp);
	  if (n > 1) {
	    while (n > 0) {
	      if (n % 2 === 1) {
	        s.selfMultiply(r);
	      }
	      n /= 2;
	      if (n > 0) { r = r.sqr(); }
	    }
	  } else {
	    s = r;
	  }
	  if (exp < 0) { return s.reciprocal() }
	  return s
	};
	DD.prototype.ceil = function ceil () {
	  if (this.isNaN()) { return DD.NaN }
	  var fhi = Math.ceil(this._hi);
	  var flo = 0.0;
	  if (fhi === this._hi) {
	    flo = Math.ceil(this._lo);
	  }
	  return new DD(fhi, flo)
	};
	DD.prototype.compareTo = function compareTo (o) {
	  var other = o;
	  if (this._hi < other._hi) { return -1 }
	  if (this._hi > other._hi) { return 1 }
	  if (this._lo < other._lo) { return -1 }
	  if (this._lo > other._lo) { return 1 }
	  return 0
	};
	DD.prototype.rint = function rint () {
	  if (this.isNaN()) { return this }
	  var plus5 = this.add(0.5);
	  return plus5.floor()
	};
	DD.prototype.setValue = function setValue () {
	  if (arguments[0] instanceof DD) {
	    var value = arguments[0];
	    this.init(value);
	    return this
	  } else if (typeof arguments[0] === 'number') {
	    var value$1 = arguments[0];
	    this.init(value$1);
	    return this
	  }
	};
	DD.prototype.max = function max (x) {
	  if (this.ge(x)) {
	    return this
	  } else {
	    return x
	  }
	};
	DD.prototype.sqrt = function sqrt () {
	  if (this.isZero()) { return DD.valueOf(0.0) }
	  if (this.isNegative()) {
	    return DD.NaN
	  }
	  var x = 1.0 / Math.sqrt(this._hi);
	  var ax = this._hi * x;
	  var axdd = DD.valueOf(ax);
	  var diffSq = this.subtract(axdd.sqr());
	  var d2 = diffSq._hi * (x * 0.5);
	  return axdd.add(d2)
	};
	DD.prototype.selfAdd = function selfAdd () {
	  if (arguments.length === 1) {
	    if (arguments[0] instanceof DD) {
	      var y = arguments[0];
	      return this.selfAdd(y._hi, y._lo)
	    } else if (typeof arguments[0] === 'number') {
	      var y$1 = arguments[0];
	      var H = null;
	      var h = null;
	      var S = null;
	      var s = null;
	      var e = null;
	      var f = null;
	      S = this._hi + y$1;
	      e = S - this._hi;
	      s = S - e;
	      s = y$1 - e + (this._hi - s);
	      f = s + this._lo;
	      H = S + f;
	      h = f + (S - H);
	      this._hi = H + h;
	      this._lo = h + (H - this._hi);
	      return this
	    }
	  } else if (arguments.length === 2) {
	    var yhi = arguments[0];
	    var ylo = arguments[1];
	    var H$1 = null;
	    var h$1 = null;
	    var T = null;
	    var t = null;
	    var S$1 = null;
	    var s$1 = null;
	    var e$1 = null;
	    var f$1 = null;
	    S$1 = this._hi + yhi;
	    T = this._lo + ylo;
	    e$1 = S$1 - this._hi;
	    f$1 = T - this._lo;
	    s$1 = S$1 - e$1;
	    t = T - f$1;
	    s$1 = yhi - e$1 + (this._hi - s$1);
	    t = ylo - f$1 + (this._lo - t);
	    e$1 = s$1 + T;
	    H$1 = S$1 + e$1;
	    h$1 = e$1 + (S$1 - H$1);
	    e$1 = t + h$1;
	    var zhi = H$1 + e$1;
	    var zlo = e$1 + (H$1 - zhi);
	    this._hi = zhi;
	    this._lo = zlo;
	    return this
	  }
	};
	DD.prototype.selfMultiply = function selfMultiply () {
	  if (arguments.length === 1) {
	    if (arguments[0] instanceof DD) {
	      var y = arguments[0];
	      return this.selfMultiply(y._hi, y._lo)
	    } else if (typeof arguments[0] === 'number') {
	      var y$1 = arguments[0];
	      return this.selfMultiply(y$1, 0.0)
	    }
	  } else if (arguments.length === 2) {
	    var yhi = arguments[0];
	    var ylo = arguments[1];
	    var hx = null;
	    var tx = null;
	    var hy = null;
	    var ty = null;
	    var C = null;
	    var c = null;
	    C = DD.SPLIT * this._hi;
	    hx = C - this._hi;
	    c = DD.SPLIT * yhi;
	    hx = C - hx;
	    tx = this._hi - hx;
	    hy = c - yhi;
	    C = this._hi * yhi;
	    hy = c - hy;
	    ty = yhi - hy;
	    c = hx * hy - C + hx * ty + tx * hy + tx * ty + (this._hi * ylo + this._lo * yhi);
	    var zhi = C + c;
	    hx = C - zhi;
	    var zlo = c + hx;
	    this._hi = zhi;
	    this._lo = zlo;
	    return this
	  }
	};
	DD.prototype.selfSqr = function selfSqr () {
	  return this.selfMultiply(this)
	};
	DD.prototype.floor = function floor () {
	  if (this.isNaN()) { return DD.NaN }
	  var fhi = Math.floor(this._hi);
	  var flo = 0.0;
	  if (fhi === this._hi) {
	    flo = Math.floor(this._lo);
	  }
	  return new DD(fhi, flo)
	};
	DD.prototype.negate = function negate () {
	  if (this.isNaN()) { return this }
	  return new DD(-this._hi, -this._lo)
	};
	DD.prototype.clone = function clone () {
	  // try {
	  // return null
	  // } catch (ex) {
	  // if (ex instanceof CloneNotSupportedException) {
	  //   return null
	  // } else throw ex
	  // } finally {}
	};
	DD.prototype.multiply = function multiply () {
	  if (arguments[0] instanceof DD) {
	    var y = arguments[0];
	    if (y.isNaN()) { return DD.createNaN() }
	    return DD.copy(this).selfMultiply(y)
	  } else if (typeof arguments[0] === 'number') {
	    var y$1 = arguments[0];
	    if (Double.isNaN(y$1)) { return DD.createNaN() }
	    return DD.copy(this).selfMultiply(y$1, 0.0)
	  }
	};
	DD.prototype.isNaN = function isNaN () {
	  return Double.isNaN(this._hi)
	};
	DD.prototype.intValue = function intValue () {
	  return Math.trunc(this._hi)
	};
	DD.prototype.toString = function toString () {
	  var mag = DD.magnitude(this._hi);
	  if (mag >= -3 && mag <= 20) { return this.toStandardNotation() }
	  return this.toSciNotation()
	};
	DD.prototype.toStandardNotation = function toStandardNotation () {
	  var specialStr = this.getSpecialNumberString();
	  if (specialStr !== null) { return specialStr }
	  var magnitude = new Array(1).fill(null);
	  var sigDigits = this.extractSignificantDigits(true, magnitude);
	  var decimalPointPos = magnitude[0] + 1;
	  var num = sigDigits;
	  if (sigDigits.charAt(0) === '.') {
	    num = '0' + sigDigits;
	  } else if (decimalPointPos < 0) {
	    num = '0.' + DD.stringOfChar('0', -decimalPointPos) + sigDigits;
	  } else if (sigDigits.indexOf('.') === -1) {
	    var numZeroes = decimalPointPos - sigDigits.length;
	    var zeroes = DD.stringOfChar('0', numZeroes);
	    num = sigDigits + zeroes + '.0';
	  }
	  if (this.isNegative()) { return '-' + num }
	  return num
	};
	DD.prototype.reciprocal = function reciprocal () {
	  var hc = null;
	  var tc = null;
	  var hy = null;
	  var ty = null;
	  var C = null;
	  var c = null;
	  var U = null;
	  var u = null;
	  C = 1.0 / this._hi;
	  c = DD.SPLIT * C;
	  hc = c - C;
	  u = DD.SPLIT * this._hi;
	  hc = c - hc;
	  tc = C - hc;
	  hy = u - this._hi;
	  U = C * this._hi;
	  hy = u - hy;
	  ty = this._hi - hy;
	  u = hc * hy - U + hc * ty + tc * hy + tc * ty;
	  c = (1.0 - U - u - C * this._lo) / this._hi;
	  var zhi = C + c;
	  var zlo = C - zhi + c;
	  return new DD(zhi, zlo)
	};
	DD.prototype.toSciNotation = function toSciNotation () {
	  if (this.isZero()) { return DD.SCI_NOT_ZERO }
	  var specialStr = this.getSpecialNumberString();
	  if (specialStr !== null) { return specialStr }
	  var magnitude = new Array(1).fill(null);
	  var digits = this.extractSignificantDigits(false, magnitude);
	  var expStr = DD.SCI_NOT_EXPONENT_CHAR + magnitude[0];
	  if (digits.charAt(0) === '0') {
	    throw new Error('Found leading zero: ' + digits)
	  }
	  var trailingDigits = '';
	  if (digits.length > 1) { trailingDigits = digits.substring(1); }
	  var digitsWithDecimal = digits.charAt(0) + '.' + trailingDigits;
	  if (this.isNegative()) { return '-' + digitsWithDecimal + expStr }
	  return digitsWithDecimal + expStr
	};
	DD.prototype.abs = function abs () {
	  if (this.isNaN()) { return DD.NaN }
	  if (this.isNegative()) { return this.negate() }
	  return new DD(this)
	};
	DD.prototype.isPositive = function isPositive () {
	  return (this._hi > 0.0 || this._hi === 0.0) && this._lo > 0.0
	};
	DD.prototype.lt = function lt (y) {
	  return (this._hi < y._hi || this._hi === y._hi) && this._lo < y._lo
	};
	DD.prototype.add = function add () {
	  if (arguments[0] instanceof DD) {
	    var y = arguments[0];
	    return DD.copy(this).selfAdd(y)
	  } else if (typeof arguments[0] === 'number') {
	    var y$1 = arguments[0];
	    return DD.copy(this).selfAdd(y$1)
	  }
	};
	DD.prototype.init = function init () {
	  if (arguments.length === 1) {
	    if (typeof arguments[0] === 'number') {
	      var x = arguments[0];
	      this._hi = x;
	      this._lo = 0.0;
	    } else if (arguments[0] instanceof DD) {
	      var dd = arguments[0];
	      this._hi = dd._hi;
	      this._lo = dd._lo;
	    }
	  } else if (arguments.length === 2) {
	    var hi = arguments[0];
	    var lo = arguments[1];
	    this._hi = hi;
	    this._lo = lo;
	  }
	};
	DD.prototype.gt = function gt (y) {
	  return (this._hi > y._hi || this._hi === y._hi) && this._lo > y._lo
	};
	DD.prototype.isNegative = function isNegative () {
	  return (this._hi < 0.0 || this._hi === 0.0) && this._lo < 0.0
	};
	DD.prototype.trunc = function trunc () {
	  if (this.isNaN()) { return DD.NaN }
	  if (this.isPositive()) { return this.floor(); } else { return this.ceil() }
	};
	DD.prototype.signum = function signum () {
	  if (this._hi > 0) { return 1 }
	  if (this._hi < 0) { return -1 }
	  if (this._lo > 0) { return 1 }
	  if (this._lo < 0) { return -1 }
	  return 0
	};
	DD.prototype.interfaces_ = function interfaces_ () {
	  return [Serializable, Comparable, Clonable]
	};
	DD.prototype.getClass = function getClass () {
	  return DD
	};
	DD.sqr = function sqr (x) {
	  return DD.valueOf(x).selfMultiply(x)
	};
	DD.valueOf = function valueOf () {
	  if (typeof arguments[0] === 'string') {
	    var str = arguments[0];
	    return DD.parse(str)
	  } else if (typeof arguments[0] === 'number') {
	    var x = arguments[0];
	    return new DD(x)
	  }
	};
	DD.sqrt = function sqrt (x) {
	  return DD.valueOf(x).sqrt()
	};
	DD.parse = function parse (str) {
	  var i = 0;
	  var strlen = str.length;
	  while (Character.isWhitespace(str.charAt(i))) { i++; }
	  var isNegative = false;
	  if (i < strlen) {
	    var signCh = str.charAt(i);
	    if (signCh === '-' || signCh === '+') {
	      i++;
	      if (signCh === '-') { isNegative = true; }
	    }
	  }
	  var val = new DD();
	  var numDigits = 0;
	  var numBeforeDec = 0;
	  var exp = 0;
	  while (true) {
	    if (i >= strlen) { break }
	    var ch = str.charAt(i);
	    i++;
	    if (Character.isDigit(ch)) {
	      var d = ch - '0';
	      val.selfMultiply(DD.TEN);
	      val.selfAdd(d);
	      numDigits++;
	      continue
	    }
	    if (ch === '.') {
	      numBeforeDec = numDigits;
	      continue
	    }
	    if (ch === 'e' || ch === 'E') {
	      var expStr = str.substring(i);
	      try {
	        exp = Integer.parseInt(expStr);
	      } catch (ex) {
	        if (ex instanceof Error) {
	          throw new Error('Invalid exponent ' + expStr + ' in string ' + str)
	        } else { throw ex }
	      } finally {}
	      break
	    }
	    throw new Error("Unexpected character '" + ch + "' at position " + i + ' in string ' + str)
	  }
	  var val2 = val;
	  var numDecPlaces = numDigits - numBeforeDec - exp;
	  if (numDecPlaces === 0) {
	    val2 = val;
	  } else if (numDecPlaces > 0) {
	    var scale = DD.TEN.pow(numDecPlaces);
	    val2 = val.divide(scale);
	  } else if (numDecPlaces < 0) {
	    var scale$1 = DD.TEN.pow(-numDecPlaces);
	    val2 = val.multiply(scale$1);
	  }
	  if (isNegative) {
	    return val2.negate()
	  }
	  return val2
	};
	DD.createNaN = function createNaN () {
	  return new DD(Double.NaN, Double.NaN)
	};
	DD.copy = function copy (dd) {
	  return new DD(dd)
	};
	DD.magnitude = function magnitude (x) {
	  var xAbs = Math.abs(x);
	  var xLog10 = Math.log(xAbs) / Math.log(10);
	  var xMag = Math.trunc(Math.floor(xLog10));
	  var xApprox = Math.pow(10, xMag);
	  if (xApprox * 10 <= xAbs) { xMag += 1; }
	  return xMag
	};
	DD.stringOfChar = function stringOfChar (ch, len) {
	  var buf = new StringBuffer();
	  for (var i = 0; i < len; i++) {
	    buf.append(ch);
	  }
	  return buf.toString()
	};
	staticAccessors$7.PI.get = function () { return new DD(3.141592653589793116e+00, 1.224646799147353207e-16) };
	staticAccessors$7.TWO_PI.get = function () { return new DD(6.283185307179586232e+00, 2.449293598294706414e-16) };
	staticAccessors$7.PI_2.get = function () { return new DD(1.570796326794896558e+00, 6.123233995736766036e-17) };
	staticAccessors$7.E.get = function () { return new DD(2.718281828459045091e+00, 1.445646891729250158e-16) };
	staticAccessors$7.NaN.get = function () { return new DD(Double.NaN, Double.NaN) };
	staticAccessors$7.EPS.get = function () { return 1.23259516440783e-32 };
	staticAccessors$7.SPLIT.get = function () { return 134217729.0 };
	staticAccessors$7.MAX_PRINT_DIGITS.get = function () { return 32 };
	staticAccessors$7.TEN.get = function () { return DD.valueOf(10.0) };
	staticAccessors$7.ONE.get = function () { return DD.valueOf(1.0) };
	staticAccessors$7.SCI_NOT_EXPONENT_CHAR.get = function () { return 'E' };
	staticAccessors$7.SCI_NOT_ZERO.get = function () { return '0.0E0' };

	Object.defineProperties( DD, staticAccessors$7 );

	var CGAlgorithmsDD = function CGAlgorithmsDD () {};

	var staticAccessors$6 = { DP_SAFE_EPSILON: { configurable: true } };

	CGAlgorithmsDD.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	CGAlgorithmsDD.prototype.getClass = function getClass () {
	  return CGAlgorithmsDD
	};
	CGAlgorithmsDD.orientationIndex = function orientationIndex (p1, p2, q) {
	  var index = CGAlgorithmsDD.orientationIndexFilter(p1, p2, q);
	  if (index <= 1) { return index }
	  var dx1 = DD.valueOf(p2.x).selfAdd(-p1.x);
	  var dy1 = DD.valueOf(p2.y).selfAdd(-p1.y);
	  var dx2 = DD.valueOf(q.x).selfAdd(-p2.x);
	  var dy2 = DD.valueOf(q.y).selfAdd(-p2.y);
	  return dx1.selfMultiply(dy2).selfSubtract(dy1.selfMultiply(dx2)).signum()
	};
	CGAlgorithmsDD.signOfDet2x2 = function signOfDet2x2 (x1, y1, x2, y2) {
	  var det = x1.multiply(y2).selfSubtract(y1.multiply(x2));
	  return det.signum()
	};
	CGAlgorithmsDD.intersection = function intersection (p1, p2, q1, q2) {
	  var denom1 = DD.valueOf(q2.y).selfSubtract(q1.y).selfMultiply(DD.valueOf(p2.x).selfSubtract(p1.x));
	  var denom2 = DD.valueOf(q2.x).selfSubtract(q1.x).selfMultiply(DD.valueOf(p2.y).selfSubtract(p1.y));
	  var denom = denom1.subtract(denom2);
	  var numx1 = DD.valueOf(q2.x).selfSubtract(q1.x).selfMultiply(DD.valueOf(p1.y).selfSubtract(q1.y));
	  var numx2 = DD.valueOf(q2.y).selfSubtract(q1.y).selfMultiply(DD.valueOf(p1.x).selfSubtract(q1.x));
	  var numx = numx1.subtract(numx2);
	  var fracP = numx.selfDivide(denom).doubleValue();
	  var x = DD.valueOf(p1.x).selfAdd(DD.valueOf(p2.x).selfSubtract(p1.x).selfMultiply(fracP)).doubleValue();
	  var numy1 = DD.valueOf(p2.x).selfSubtract(p1.x).selfMultiply(DD.valueOf(p1.y).selfSubtract(q1.y));
	  var numy2 = DD.valueOf(p2.y).selfSubtract(p1.y).selfMultiply(DD.valueOf(p1.x).selfSubtract(q1.x));
	  var numy = numy1.subtract(numy2);
	  var fracQ = numy.selfDivide(denom).doubleValue();
	  var y = DD.valueOf(q1.y).selfAdd(DD.valueOf(q2.y).selfSubtract(q1.y).selfMultiply(fracQ)).doubleValue();
	  return new Coordinate(x, y)
	};
	CGAlgorithmsDD.orientationIndexFilter = function orientationIndexFilter (pa, pb, pc) {
	  var detsum = null;
	  var detleft = (pa.x - pc.x) * (pb.y - pc.y);
	  var detright = (pa.y - pc.y) * (pb.x - pc.x);
	  var det = detleft - detright;
	  if (detleft > 0.0) {
	    if (detright <= 0.0) {
	      return CGAlgorithmsDD.signum(det)
	    } else {
	      detsum = detleft + detright;
	    }
	  } else if (detleft < 0.0) {
	    if (detright >= 0.0) {
	      return CGAlgorithmsDD.signum(det)
	    } else {
	      detsum = -detleft - detright;
	    }
	  } else {
	    return CGAlgorithmsDD.signum(det)
	  }
	  var errbound = CGAlgorithmsDD.DP_SAFE_EPSILON * detsum;
	  if (det >= errbound || -det >= errbound) {
	    return CGAlgorithmsDD.signum(det)
	  }
	  return 2
	};
	CGAlgorithmsDD.signum = function signum (x) {
	  if (x > 0) { return 1 }
	  if (x < 0) { return -1 }
	  return 0
	};
	staticAccessors$6.DP_SAFE_EPSILON.get = function () { return 1e-15 };

	Object.defineProperties( CGAlgorithmsDD, staticAccessors$6 );

	var CoordinateSequence = function CoordinateSequence () {};

	var staticAccessors$8 = { X: { configurable: true },Y: { configurable: true },Z: { configurable: true },M: { configurable: true } };

	staticAccessors$8.X.get = function () { return 0 };
	staticAccessors$8.Y.get = function () { return 1 };
	staticAccessors$8.Z.get = function () { return 2 };
	staticAccessors$8.M.get = function () { return 3 };
	CoordinateSequence.prototype.setOrdinate = function setOrdinate (index, ordinateIndex, value) {};
	CoordinateSequence.prototype.size = function size () {};
	CoordinateSequence.prototype.getOrdinate = function getOrdinate (index, ordinateIndex) {};
	CoordinateSequence.prototype.getCoordinate = function getCoordinate () {};
	CoordinateSequence.prototype.getCoordinateCopy = function getCoordinateCopy (i) {};
	CoordinateSequence.prototype.getDimension = function getDimension () {};
	CoordinateSequence.prototype.getX = function getX (index) {};
	CoordinateSequence.prototype.clone = function clone () {};
	CoordinateSequence.prototype.expandEnvelope = function expandEnvelope (env) {};
	CoordinateSequence.prototype.copy = function copy () {};
	CoordinateSequence.prototype.getY = function getY (index) {};
	CoordinateSequence.prototype.toCoordinateArray = function toCoordinateArray () {};
	CoordinateSequence.prototype.interfaces_ = function interfaces_ () {
	  return [Clonable]
	};
	CoordinateSequence.prototype.getClass = function getClass () {
	  return CoordinateSequence
	};

	Object.defineProperties( CoordinateSequence, staticAccessors$8 );

	var Exception = function Exception () {};

	var NotRepresentableException = (function (Exception$$1) {
	  function NotRepresentableException () {
	    Exception$$1.call(this, 'Projective point not representable on the Cartesian plane.');
	  }

	  if ( Exception$$1 ) NotRepresentableException.__proto__ = Exception$$1;
	  NotRepresentableException.prototype = Object.create( Exception$$1 && Exception$$1.prototype );
	  NotRepresentableException.prototype.constructor = NotRepresentableException;
	  NotRepresentableException.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  NotRepresentableException.prototype.getClass = function getClass () {
	    return NotRepresentableException
	  };

	  return NotRepresentableException;
	}(Exception));

	var System = function System () {};

	System.arraycopy = function arraycopy (src, srcPos, dest, destPos, len) {
	  var c = 0;
	  for (var i = srcPos; i < srcPos + len; i++) {
	    dest[destPos + c] = src[i];
	    c++;
	  }
	};

	System.getProperty = function getProperty (name) {
	  return {
	    'line.separator': '\n'
	  }[name]
	};

	var HCoordinate = function HCoordinate () {
	  this.x = null;
	  this.y = null;
	  this.w = null;
	  if (arguments.length === 0) {
	    this.x = 0.0;
	    this.y = 0.0;
	    this.w = 1.0;
	  } else if (arguments.length === 1) {
	    var p = arguments[0];
	    this.x = p.x;
	    this.y = p.y;
	    this.w = 1.0;
	  } else if (arguments.length === 2) {
	    if (typeof arguments[0] === 'number' && typeof arguments[1] === 'number') {
	      var _x = arguments[0];
	      var _y = arguments[1];
	      this.x = _x;
	      this.y = _y;
	      this.w = 1.0;
	    } else if (arguments[0] instanceof HCoordinate && arguments[1] instanceof HCoordinate) {
	      var p1 = arguments[0];
	      var p2 = arguments[1];
	      this.x = p1.y * p2.w - p2.y * p1.w;
	      this.y = p2.x * p1.w - p1.x * p2.w;
	      this.w = p1.x * p2.y - p2.x * p1.y;
	    } else if (arguments[0] instanceof Coordinate && arguments[1] instanceof Coordinate) {
	      var p1$1 = arguments[0];
	      var p2$1 = arguments[1];
	      this.x = p1$1.y - p2$1.y;
	      this.y = p2$1.x - p1$1.x;
	      this.w = p1$1.x * p2$1.y - p2$1.x * p1$1.y;
	    }
	  } else if (arguments.length === 3) {
	    var _x$1 = arguments[0];
	    var _y$1 = arguments[1];
	    var _w = arguments[2];
	    this.x = _x$1;
	    this.y = _y$1;
	    this.w = _w;
	  } else if (arguments.length === 4) {
	    var p1$2 = arguments[0];
	    var p2$2 = arguments[1];
	    var q1 = arguments[2];
	    var q2 = arguments[3];
	    var px = p1$2.y - p2$2.y;
	    var py = p2$2.x - p1$2.x;
	    var pw = p1$2.x * p2$2.y - p2$2.x * p1$2.y;
	    var qx = q1.y - q2.y;
	    var qy = q2.x - q1.x;
	    var qw = q1.x * q2.y - q2.x * q1.y;
	    this.x = py * qw - qy * pw;
	    this.y = qx * pw - px * qw;
	    this.w = px * qy - qx * py;
	  }
	};
	HCoordinate.prototype.getY = function getY () {
	  var a = this.y / this.w;
	  if (Double.isNaN(a) || Double.isInfinite(a)) {
	    throw new NotRepresentableException()
	  }
	  return a
	};
	HCoordinate.prototype.getX = function getX () {
	  var a = this.x / this.w;
	  if (Double.isNaN(a) || Double.isInfinite(a)) {
	    throw new NotRepresentableException()
	  }
	  return a
	};
	HCoordinate.prototype.getCoordinate = function getCoordinate () {
	  var p = new Coordinate();
	  p.x = this.getX();
	  p.y = this.getY();
	  return p
	};
	HCoordinate.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	HCoordinate.prototype.getClass = function getClass () {
	  return HCoordinate
	};
	HCoordinate.intersection = function intersection (p1, p2, q1, q2) {
	  var px = p1.y - p2.y;
	  var py = p2.x - p1.x;
	  var pw = p1.x * p2.y - p2.x * p1.y;
	  var qx = q1.y - q2.y;
	  var qy = q2.x - q1.x;
	  var qw = q1.x * q2.y - q2.x * q1.y;
	  var x = py * qw - qy * pw;
	  var y = qx * pw - px * qw;
	  var w = px * qy - qx * py;
	  var xInt = x / w;
	  var yInt = y / w;
	  if (Double.isNaN(xInt) || (Double.isInfinite(xInt) || Double.isNaN(yInt)) || Double.isInfinite(yInt)) {
	    throw new NotRepresentableException()
	  }
	  return new Coordinate(xInt, yInt)
	};

	var Envelope = function Envelope () {
	  this._minx = null;
	  this._maxx = null;
	  this._miny = null;
	  this._maxy = null;
	  if (arguments.length === 0) {
	    this.init();
	  } else if (arguments.length === 1) {
	    if (arguments[0] instanceof Coordinate) {
	      var p = arguments[0];
	      this.init(p.x, p.x, p.y, p.y);
	    } else if (arguments[0] instanceof Envelope) {
	      var env = arguments[0];
	      this.init(env);
	    }
	  } else if (arguments.length === 2) {
	    var p1 = arguments[0];
	    var p2 = arguments[1];
	    this.init(p1.x, p2.x, p1.y, p2.y);
	  } else if (arguments.length === 4) {
	    var x1 = arguments[0];
	    var x2 = arguments[1];
	    var y1 = arguments[2];
	    var y2 = arguments[3];
	    this.init(x1, x2, y1, y2);
	  }
	};

	var staticAccessors$9 = { serialVersionUID: { configurable: true } };
	Envelope.prototype.getArea = function getArea () {
	  return this.getWidth() * this.getHeight()
	};
	Envelope.prototype.equals = function equals (other) {
	  if (!(other instanceof Envelope)) {
	    return false
	  }
	  var otherEnvelope = other;
	  if (this.isNull()) {
	    return otherEnvelope.isNull()
	  }
	  return this._maxx === otherEnvelope.getMaxX() && this._maxy === otherEnvelope.getMaxY() && this._minx === otherEnvelope.getMinX() && this._miny === otherEnvelope.getMinY()
	};
	Envelope.prototype.intersection = function intersection (env) {
	  if (this.isNull() || env.isNull() || !this.intersects(env)) { return new Envelope() }
	  var intMinX = this._minx > env._minx ? this._minx : env._minx;
	  var intMinY = this._miny > env._miny ? this._miny : env._miny;
	  var intMaxX = this._maxx < env._maxx ? this._maxx : env._maxx;
	  var intMaxY = this._maxy < env._maxy ? this._maxy : env._maxy;
	  return new Envelope(intMinX, intMaxX, intMinY, intMaxY)
	};
	Envelope.prototype.isNull = function isNull () {
	  return this._maxx < this._minx
	};
	Envelope.prototype.getMaxX = function getMaxX () {
	  return this._maxx
	};
	Envelope.prototype.covers = function covers () {
	  if (arguments.length === 1) {
	    if (arguments[0] instanceof Coordinate) {
	      var p = arguments[0];
	      return this.covers(p.x, p.y)
	    } else if (arguments[0] instanceof Envelope) {
	      var other = arguments[0];
	      if (this.isNull() || other.isNull()) {
	        return false
	      }
	      return other.getMinX() >= this._minx && other.getMaxX() <= this._maxx && other.getMinY() >= this._miny && other.getMaxY() <= this._maxy
	    }
	  } else if (arguments.length === 2) {
	    var x = arguments[0];
	    var y = arguments[1];
	    if (this.isNull()) { return false }
	    return x >= this._minx && x <= this._maxx && y >= this._miny && y <= this._maxy
	  }
	};
	Envelope.prototype.intersects = function intersects () {
	  if (arguments.length === 1) {
	    if (arguments[0] instanceof Envelope) {
	      var other = arguments[0];
	      if (this.isNull() || other.isNull()) {
	        return false
	      }
	      return !(other._minx > this._maxx || other._maxx < this._minx || other._miny > this._maxy || other._maxy < this._miny)
	    } else if (arguments[0] instanceof Coordinate) {
	      var p = arguments[0];
	      return this.intersects(p.x, p.y)
	    }
	  } else if (arguments.length === 2) {
	    var x = arguments[0];
	    var y = arguments[1];
	    if (this.isNull()) { return false }
	    return !(x > this._maxx || x < this._minx || y > this._maxy || y < this._miny)
	  }
	};
	Envelope.prototype.getMinY = function getMinY () {
	  return this._miny
	};
	Envelope.prototype.getMinX = function getMinX () {
	  return this._minx
	};
	Envelope.prototype.expandToInclude = function expandToInclude () {
	  if (arguments.length === 1) {
	    if (arguments[0] instanceof Coordinate) {
	      var p = arguments[0];
	      this.expandToInclude(p.x, p.y);
	    } else if (arguments[0] instanceof Envelope) {
	      var other = arguments[0];
	      if (other.isNull()) {
	        return null
	      }
	      if (this.isNull()) {
	        this._minx = other.getMinX();
	        this._maxx = other.getMaxX();
	        this._miny = other.getMinY();
	        this._maxy = other.getMaxY();
	      } else {
	        if (other._minx < this._minx) {
	          this._minx = other._minx;
	        }
	        if (other._maxx > this._maxx) {
	          this._maxx = other._maxx;
	        }
	        if (other._miny < this._miny) {
	          this._miny = other._miny;
	        }
	        if (other._maxy > this._maxy) {
	          this._maxy = other._maxy;
	        }
	      }
	    }
	  } else if (arguments.length === 2) {
	    var x = arguments[0];
	    var y = arguments[1];
	    if (this.isNull()) {
	      this._minx = x;
	      this._maxx = x;
	      this._miny = y;
	      this._maxy = y;
	    } else {
	      if (x < this._minx) {
	        this._minx = x;
	      }
	      if (x > this._maxx) {
	        this._maxx = x;
	      }
	      if (y < this._miny) {
	        this._miny = y;
	      }
	      if (y > this._maxy) {
	        this._maxy = y;
	      }
	    }
	  }
	};
	Envelope.prototype.minExtent = function minExtent () {
	  if (this.isNull()) { return 0.0 }
	  var w = this.getWidth();
	  var h = this.getHeight();
	  if (w < h) { return w }
	  return h
	};
	Envelope.prototype.getWidth = function getWidth () {
	  if (this.isNull()) {
	    return 0
	  }
	  return this._maxx - this._minx
	};
	Envelope.prototype.compareTo = function compareTo (o) {
	  var env = o;
	  if (this.isNull()) {
	    if (env.isNull()) { return 0 }
	    return -1
	  } else {
	    if (env.isNull()) { return 1 }
	  }
	  if (this._minx < env._minx) { return -1 }
	  if (this._minx > env._minx) { return 1 }
	  if (this._miny < env._miny) { return -1 }
	  if (this._miny > env._miny) { return 1 }
	  if (this._maxx < env._maxx) { return -1 }
	  if (this._maxx > env._maxx) { return 1 }
	  if (this._maxy < env._maxy) { return -1 }
	  if (this._maxy > env._maxy) { return 1 }
	  return 0
	};
	Envelope.prototype.translate = function translate (transX, transY) {
	  if (this.isNull()) {
	    return null
	  }
	  this.init(this.getMinX() + transX, this.getMaxX() + transX, this.getMinY() + transY, this.getMaxY() + transY);
	};
	Envelope.prototype.toString = function toString () {
	  return 'Env[' + this._minx + ' : ' + this._maxx + ', ' + this._miny + ' : ' + this._maxy + ']'
	};
	Envelope.prototype.setToNull = function setToNull () {
	  this._minx = 0;
	  this._maxx = -1;
	  this._miny = 0;
	  this._maxy = -1;
	};
	Envelope.prototype.getHeight = function getHeight () {
	  if (this.isNull()) {
	    return 0
	  }
	  return this._maxy - this._miny
	};
	Envelope.prototype.maxExtent = function maxExtent () {
	  if (this.isNull()) { return 0.0 }
	  var w = this.getWidth();
	  var h = this.getHeight();
	  if (w > h) { return w }
	  return h
	};
	Envelope.prototype.expandBy = function expandBy () {
	  if (arguments.length === 1) {
	    var distance = arguments[0];
	    this.expandBy(distance, distance);
	  } else if (arguments.length === 2) {
	    var deltaX = arguments[0];
	    var deltaY = arguments[1];
	    if (this.isNull()) { return null }
	    this._minx -= deltaX;
	    this._maxx += deltaX;
	    this._miny -= deltaY;
	    this._maxy += deltaY;
	    if (this._minx > this._maxx || this._miny > this._maxy) { this.setToNull(); }
	  }
	};
	Envelope.prototype.contains = function contains () {
	  if (arguments.length === 1) {
	    if (arguments[0] instanceof Envelope) {
	      var other = arguments[0];
	      return this.covers(other)
	    } else if (arguments[0] instanceof Coordinate) {
	      var p = arguments[0];
	      return this.covers(p)
	    }
	  } else if (arguments.length === 2) {
	    var x = arguments[0];
	    var y = arguments[1];
	    return this.covers(x, y)
	  }
	};
	Envelope.prototype.centre = function centre () {
	  if (this.isNull()) { return null }
	  return new Coordinate((this.getMinX() + this.getMaxX()) / 2.0, (this.getMinY() + this.getMaxY()) / 2.0)
	};
	Envelope.prototype.init = function init () {
	  if (arguments.length === 0) {
	    this.setToNull();
	  } else if (arguments.length === 1) {
	    if (arguments[0] instanceof Coordinate) {
	      var p = arguments[0];
	      this.init(p.x, p.x, p.y, p.y);
	    } else if (arguments[0] instanceof Envelope) {
	      var env = arguments[0];
	      this._minx = env._minx;
	      this._maxx = env._maxx;
	      this._miny = env._miny;
	      this._maxy = env._maxy;
	    }
	  } else if (arguments.length === 2) {
	    var p1 = arguments[0];
	    var p2 = arguments[1];
	    this.init(p1.x, p2.x, p1.y, p2.y);
	  } else if (arguments.length === 4) {
	    var x1 = arguments[0];
	    var x2 = arguments[1];
	    var y1 = arguments[2];
	    var y2 = arguments[3];
	    if (x1 < x2) {
	      this._minx = x1;
	      this._maxx = x2;
	    } else {
	      this._minx = x2;
	      this._maxx = x1;
	    }
	    if (y1 < y2) {
	      this._miny = y1;
	      this._maxy = y2;
	    } else {
	      this._miny = y2;
	      this._maxy = y1;
	    }
	  }
	};
	Envelope.prototype.getMaxY = function getMaxY () {
	  return this._maxy
	};
	Envelope.prototype.distance = function distance (env) {
	  if (this.intersects(env)) { return 0 }
	  var dx = 0.0;
	  if (this._maxx < env._minx) { dx = env._minx - this._maxx; } else if (this._minx > env._maxx) { dx = this._minx - env._maxx; }
	  var dy = 0.0;
	  if (this._maxy < env._miny) { dy = env._miny - this._maxy; } else if (this._miny > env._maxy) { dy = this._miny - env._maxy; }
	  if (dx === 0.0) { return dy }
	  if (dy === 0.0) { return dx }
	  return Math.sqrt(dx * dx + dy * dy)
	};
	Envelope.prototype.hashCode = function hashCode () {
	  var result = 17;
	  result = 37 * result + Coordinate.hashCode(this._minx);
	  result = 37 * result + Coordinate.hashCode(this._maxx);
	  result = 37 * result + Coordinate.hashCode(this._miny);
	  result = 37 * result + Coordinate.hashCode(this._maxy);
	  return result
	};
	Envelope.prototype.interfaces_ = function interfaces_ () {
	  return [Comparable, Serializable]
	};
	Envelope.prototype.getClass = function getClass () {
	  return Envelope
	};
	Envelope.intersects = function intersects () {
	  if (arguments.length === 3) {
	    var p1 = arguments[0];
	    var p2 = arguments[1];
	    var q = arguments[2];
	    if (q.x >= (p1.x < p2.x ? p1.x : p2.x) && q.x <= (p1.x > p2.x ? p1.x : p2.x) && (q.y >= (p1.y < p2.y ? p1.y : p2.y) && q.y <= (p1.y > p2.y ? p1.y : p2.y))) {
	      return true
	    }
	    return false
	  } else if (arguments.length === 4) {
	    var p1$1 = arguments[0];
	    var p2$1 = arguments[1];
	    var q1 = arguments[2];
	    var q2 = arguments[3];
	    var minq = Math.min(q1.x, q2.x);
	    var maxq = Math.max(q1.x, q2.x);
	    var minp = Math.min(p1$1.x, p2$1.x);
	    var maxp = Math.max(p1$1.x, p2$1.x);
	    if (minp > maxq) { return false }
	    if (maxp < minq) { return false }
	    minq = Math.min(q1.y, q2.y);
	    maxq = Math.max(q1.y, q2.y);
	    minp = Math.min(p1$1.y, p2$1.y);
	    maxp = Math.max(p1$1.y, p2$1.y);
	    if (minp > maxq) { return false }
	    if (maxp < minq) { return false }
	    return true
	  }
	};
	staticAccessors$9.serialVersionUID.get = function () { return 5873921885273102420 };

	Object.defineProperties( Envelope, staticAccessors$9 );

	var regExes = {
	  'typeStr': /^\s*(\w+)\s*\(\s*(.*)\s*\)\s*$/,
	  'emptyTypeStr': /^\s*(\w+)\s*EMPTY\s*$/,
	  'spaces': /\s+/,
	  'parenComma': /\)\s*,\s*\(/,
	  'doubleParenComma': /\)\s*\)\s*,\s*\(\s*\(/, // can't use {2} here
	  'trimParens': /^\s*\(?(.*?)\)?\s*$/
	};

	/**
	 * Class for reading and writing Well-Known Text.
	 *
	 * NOTE: Adapted from OpenLayers 2.11 implementation.
	 */

	/** Create a new parser for WKT
	 *
	 * @param {GeometryFactory} geometryFactory
	 * @return An instance of WKTParser.
	 * @constructor
	 * @private
	 */
	var WKTParser = function WKTParser (geometryFactory) {
	  this.geometryFactory = geometryFactory || new GeometryFactory();
	};
	/**
	 * Deserialize a WKT string and return a geometry. Supports WKT for POINT,
	 * MULTIPOINT, LINESTRING, LINEARRING, MULTILINESTRING, POLYGON, MULTIPOLYGON,
	 * and GEOMETRYCOLLECTION.
	 *
	 * @param {String} wkt A WKT string.
	 * @return {Geometry} A geometry instance.
	 * @private
	 */
	WKTParser.prototype.read = function read (wkt) {
	  var geometry, type, str;
	  wkt = wkt.replace(/[\n\r]/g, ' ');
	  var matches = regExes.typeStr.exec(wkt);
	  if (wkt.search('EMPTY') !== -1) {
	    matches = regExes.emptyTypeStr.exec(wkt);
	    matches[2] = undefined;
	  }
	  if (matches) {
	    type = matches[1].toLowerCase();
	    str = matches[2];
	    if (parse$1[type]) {
	      geometry = parse$1[type].apply(this, [str]);
	    }
	  }

	  if (geometry === undefined) { throw new Error('Could not parse WKT ' + wkt) }

	  return geometry
	};

	/**
	 * Serialize a geometry into a WKT string.
	 *
	 * @param {Geometry} geometry A feature or array of features.
	 * @return {String} The WKT string representation of the input geometries.
	 * @private
	 */
	WKTParser.prototype.write = function write (geometry) {
	  return this.extractGeometry(geometry)
	};

	/**
	 * Entry point to construct the WKT for a single Geometry object.
	 *
	 * @param {Geometry} geometry
	 * @return {String} A WKT string of representing the geometry.
	 * @private
	 */
	WKTParser.prototype.extractGeometry = function extractGeometry (geometry) {
	  var type = geometry.getGeometryType().toLowerCase();
	  if (!extract$1[type]) {
	    return null
	  }
	  var wktType = type.toUpperCase();
	  var data;
	  if (geometry.isEmpty()) {
	    data = wktType + ' EMPTY';
	  } else {
	    data = wktType + '(' + extract$1[type].apply(this, [geometry]) + ')';
	  }
	  return data
	};

	/**
	 * Object with properties corresponding to the geometry types. Property values
	 * are functions that do the actual data extraction.
	 * @private
	 */
	var extract$1 = {
	  coordinate: function coordinate (coordinate$1) {
	    return coordinate$1.x + ' ' + coordinate$1.y
	  },

	  /**
	   * Return a space delimited string of point coordinates.
	   *
	   * @param {Point}
	   *          point
	   * @return {String} A string of coordinates representing the point.
	   */
	  point: function point (point$1) {
	    return extract$1.coordinate.call(this, point$1._coordinates._coordinates[0])
	  },

	  /**
	   * Return a comma delimited string of point coordinates from a multipoint.
	   *
	   * @param {MultiPoint}
	   *          multipoint
	   * @return {String} A string of point coordinate strings representing the
	   *         multipoint.
	   */
	  multipoint: function multipoint (multipoint$1) {
	    var this$1 = this;

	    var array = [];
	    for (var i = 0, len = multipoint$1._geometries.length; i < len; ++i) {
	      array.push('(' + extract$1.point.apply(this$1, [multipoint$1._geometries[i]]) + ')');
	    }
	    return array.join(',')
	  },

	  /**
	   * Return a comma delimited string of point coordinates from a line.
	   *
	   * @param {LineString} linestring
	   * @return {String} A string of point coordinate strings representing the linestring.
	   */
	  linestring: function linestring (linestring$1) {
	    var this$1 = this;

	    var array = [];
	    for (var i = 0, len = linestring$1._points._coordinates.length; i < len; ++i) {
	      array.push(extract$1.coordinate.apply(this$1, [linestring$1._points._coordinates[i]]));
	    }
	    return array.join(',')
	  },

	  linearring: function linearring (linearring$1) {
	    var this$1 = this;

	    var array = [];
	    for (var i = 0, len = linearring$1._points._coordinates.length; i < len; ++i) {
	      array.push(extract$1.coordinate.apply(this$1, [linearring$1._points._coordinates[i]]));
	    }
	    return array.join(',')
	  },

	  /**
	   * Return a comma delimited string of linestring strings from a
	   * multilinestring.
	   *
	   * @param {MultiLineString} multilinestring
	   * @return {String} A string of of linestring strings representing the multilinestring.
	   */
	  multilinestring: function multilinestring (multilinestring$1) {
	    var this$1 = this;

	    var array = [];
	    for (var i = 0, len = multilinestring$1._geometries.length; i < len; ++i) {
	      array.push('(' +
	        extract$1.linestring.apply(this$1, [multilinestring$1._geometries[i]]) +
	        ')');
	    }
	    return array.join(',')
	  },

	  /**
	   * Return a comma delimited string of linear ring arrays from a polygon.
	   *
	   * @param {Polygon} polygon
	   * @return {String} An array of linear ring arrays representing the polygon.
	   */
	  polygon: function polygon (polygon$1) {
	    var this$1 = this;

	    var array = [];
	    array.push('(' + extract$1.linestring.apply(this, [polygon$1._shell]) + ')');
	    for (var i = 0, len = polygon$1._holes.length; i < len; ++i) {
	      array.push('(' + extract$1.linestring.apply(this$1, [polygon$1._holes[i]]) + ')');
	    }
	    return array.join(',')
	  },

	  /**
	   * Return an array of polygon arrays from a multipolygon.
	   *
	   * @param {MultiPolygon} multipolygon
	   * @return {String} An array of polygon arrays representing the multipolygon.
	   */
	  multipolygon: function multipolygon (multipolygon$1) {
	    var this$1 = this;

	    var array = [];
	    for (var i = 0, len = multipolygon$1._geometries.length; i < len; ++i) {
	      array.push('(' + extract$1.polygon.apply(this$1, [multipolygon$1._geometries[i]]) + ')');
	    }
	    return array.join(',')
	  },

	  /**
	   * Return the WKT portion between 'GEOMETRYCOLLECTION(' and ')' for an
	   * geometrycollection.
	   *
	   * @param {GeometryCollection} collection
	   * @return {String} internal WKT representation of the collection.
	   */
	  geometrycollection: function geometrycollection (collection) {
	    var this$1 = this;

	    var array = [];
	    for (var i = 0, len = collection._geometries.length; i < len; ++i) {
	      array.push(this$1.extractGeometry(collection._geometries[i]));
	    }
	    return array.join(',')
	  }
	};

	/**
	 * Object with properties corresponding to the geometry types. Property values
	 * are functions that do the actual parsing.
	 * @private
	 */
	var parse$1 = {
	  /**
	   * Return point geometry given a point WKT fragment.
	   *
	   * @param {String} str A WKT fragment representing the point.
	   * @return {Point} A point geometry.
	   * @private
	   */
	  point: function point (str) {
	    if (str === undefined) {
	      return this.geometryFactory.createPoint()
	    }

	    var coords = str.trim().split(regExes.spaces);
	    return this.geometryFactory.createPoint(new Coordinate(Number.parseFloat(coords[0]),
	      Number.parseFloat(coords[1])))
	  },

	  /**
	   * Return a multipoint geometry given a multipoint WKT fragment.
	   *
	   * @param {String} str A WKT fragment representing the multipoint.
	   * @return {Point} A multipoint feature.
	   * @private
	   */
	  multipoint: function multipoint (str) {
	    var this$1 = this;

	    if (str === undefined) {
	      return this.geometryFactory.createMultiPoint()
	    }

	    var point;
	    var points = str.trim().split(',');
	    var components = [];
	    for (var i = 0, len = points.length; i < len; ++i) {
	      point = points[i].replace(regExes.trimParens, '$1');
	      components.push(parse$1.point.apply(this$1, [point]));
	    }
	    return this.geometryFactory.createMultiPoint(components)
	  },

	  /**
	   * Return a linestring geometry given a linestring WKT fragment.
	   *
	   * @param {String} str A WKT fragment representing the linestring.
	   * @return {LineString} A linestring geometry.
	   * @private
	   */
	  linestring: function linestring (str) {
	    if (str === undefined) {
	      return this.geometryFactory.createLineString()
	    }

	    var points = str.trim().split(',');
	    var components = [];
	    var coords;
	    for (var i = 0, len = points.length; i < len; ++i) {
	      coords = points[i].trim().split(regExes.spaces);
	      components.push(new Coordinate(Number.parseFloat(coords[0]), Number.parseFloat(coords[1])));
	    }
	    return this.geometryFactory.createLineString(components)
	  },

	  /**
	   * Return a linearring geometry given a linearring WKT fragment.
	   *
	   * @param {String} str A WKT fragment representing the linearring.
	   * @return {LinearRing} A linearring geometry.
	   * @private
	   */
	  linearring: function linearring (str) {
	    if (str === undefined) {
	      return this.geometryFactory.createLinearRing()
	    }

	    var points = str.trim().split(',');
	    var components = [];
	    var coords;
	    for (var i = 0, len = points.length; i < len; ++i) {
	      coords = points[i].trim().split(regExes.spaces);
	      components.push(new Coordinate(Number.parseFloat(coords[0]), Number.parseFloat(coords[1])));
	    }
	    return this.geometryFactory.createLinearRing(components)
	  },

	  /**
	   * Return a multilinestring geometry given a multilinestring WKT fragment.
	   *
	   * @param {String} str A WKT fragment representing the multilinestring.
	   * @return {MultiLineString} A multilinestring geometry.
	   * @private
	   */
	  multilinestring: function multilinestring (str) {
	    var this$1 = this;

	    if (str === undefined) {
	      return this.geometryFactory.createMultiLineString()
	    }

	    var line;
	    var lines = str.trim().split(regExes.parenComma);
	    var components = [];
	    for (var i = 0, len = lines.length; i < len; ++i) {
	      line = lines[i].replace(regExes.trimParens, '$1');
	      components.push(parse$1.linestring.apply(this$1, [line]));
	    }
	    return this.geometryFactory.createMultiLineString(components)
	  },

	  /**
	   * Return a polygon geometry given a polygon WKT fragment.
	   *
	   * @param {String} str A WKT fragment representing the polygon.
	   * @return {Polygon} A polygon geometry.
	   * @private
	   */
	  polygon: function polygon (str) {
	    var this$1 = this;

	    if (str === undefined) {
	      return this.geometryFactory.createPolygon()
	    }

	    var ring, linestring, linearring;
	    var rings = str.trim().split(regExes.parenComma);
	    var shell;
	    var holes = [];
	    for (var i = 0, len = rings.length; i < len; ++i) {
	      ring = rings[i].replace(regExes.trimParens, '$1');
	      linestring = parse$1.linestring.apply(this$1, [ring]);
	      linearring = this$1.geometryFactory.createLinearRing(linestring._points);
	      if (i === 0) {
	        shell = linearring;
	      } else {
	        holes.push(linearring);
	      }
	    }
	    return this.geometryFactory.createPolygon(shell, holes)
	  },

	  /**
	   * Return a multipolygon geometry given a multipolygon WKT fragment.
	   *
	   * @param {String} str A WKT fragment representing the multipolygon.
	   * @return {MultiPolygon} A multipolygon geometry.
	   * @private
	   */
	  multipolygon: function multipolygon (str) {
	    var this$1 = this;

	    if (str === undefined) {
	      return this.geometryFactory.createMultiPolygon()
	    }

	    var polygon;
	    var polygons = str.trim().split(regExes.doubleParenComma);
	    var components = [];
	    for (var i = 0, len = polygons.length; i < len; ++i) {
	      polygon = polygons[i].replace(regExes.trimParens, '$1');
	      components.push(parse$1.polygon.apply(this$1, [polygon]));
	    }
	    return this.geometryFactory.createMultiPolygon(components)
	  },

	  /**
	   * Return a geometrycollection given a geometrycollection WKT fragment.
	   *
	   * @param {String} str A WKT fragment representing the geometrycollection.
	   * @return {GeometryCollection}
	   * @private
	   */
	  geometrycollection: function geometrycollection (str) {
	    var this$1 = this;

	    if (str === undefined) {
	      return this.geometryFactory.createGeometryCollection()
	    }

	    // separate components of the collection with |
	    str = str.replace(/,\s*([A-Za-z])/g, '|$1');
	    var wktArray = str.trim().split('|');
	    var components = [];
	    for (var i = 0, len = wktArray.length; i < len; ++i) {
	      components.push(this$1.read(wktArray[i]));
	    }
	    return this.geometryFactory.createGeometryCollection(components)
	  }
	};

	/**
	 * Writes the Well-Known Text representation of a {@link Geometry}. The
	 * Well-Known Text format is defined in the <A
	 * HREF="http://www.opengis.org/techno/specs.htm"> OGC Simple Features
	 * Specification for SQL</A>.
	 * <p>
	 * The <code>WKTWriter</code> outputs coordinates rounded to the precision
	 * model. Only the maximum number of decimal places necessary to represent the
	 * ordinates to the required precision will be output.
	 * <p>
	 * The SFS WKT spec does not define a special tag for {@link LinearRing}s.
	 * Under the spec, rings are output as <code>LINESTRING</code>s.
	 */

	/**
	 * @param {GeometryFactory} geometryFactory
	 * @constructor
	 */
	var WKTWriter = function WKTWriter (geometryFactory) {
	  this.parser = new WKTParser(geometryFactory);
	};

	/**
	 * Converts a <code>Geometry</code> to its Well-known Text representation.
	 *
	 * @param {Geometry} geometry a <code>Geometry</code> to process.
	 * @return {string} a <Geometry Tagged Text> string (see the OpenGIS Simple
	 *       Features Specification).
	 * @memberof WKTWriter
	 */
	WKTWriter.prototype.write = function write (geometry) {
	  return this.parser.write(geometry)
	};
	/**
	 * Generates the WKT for a <tt>LINESTRING</tt> specified by two
	 * {@link Coordinate}s.
	 *
	 * @param p0 the first coordinate.
	 * @param p1 the second coordinate.
	 *
	 * @return the WKT.
	 * @private
	 */
	WKTWriter.toLineString = function toLineString (p0, p1) {
	  if (arguments.length !== 2) {
	    throw new Error('Not implemented')
	  }
	  return 'LINESTRING ( ' + p0.x + ' ' + p0.y + ', ' + p1.x + ' ' + p1.y + ' )'
	};

	var RuntimeException = (function (Error) {
	  function RuntimeException (message) {
	    Error.call(this, message);
	    this.name = 'RuntimeException';
	    this.message = message;
	    this.stack = (new Error()).stack;
	  }

	  if ( Error ) RuntimeException.__proto__ = Error;
	  RuntimeException.prototype = Object.create( Error && Error.prototype );
	  RuntimeException.prototype.constructor = RuntimeException;

	  return RuntimeException;
	}(Error));

	var AssertionFailedException = (function (RuntimeException$$1) {
	  function AssertionFailedException () {
	    RuntimeException$$1.call(this);
	    if (arguments.length === 0) {
	      RuntimeException$$1.call(this);
	    } else if (arguments.length === 1) {
	      var message = arguments[0];
	      RuntimeException$$1.call(this, message);
	    }
	  }

	  if ( RuntimeException$$1 ) AssertionFailedException.__proto__ = RuntimeException$$1;
	  AssertionFailedException.prototype = Object.create( RuntimeException$$1 && RuntimeException$$1.prototype );
	  AssertionFailedException.prototype.constructor = AssertionFailedException;
	  AssertionFailedException.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  AssertionFailedException.prototype.getClass = function getClass () {
	    return AssertionFailedException
	  };

	  return AssertionFailedException;
	}(RuntimeException));

	var Assert = function Assert () {};

	Assert.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Assert.prototype.getClass = function getClass () {
	  return Assert
	};
	Assert.shouldNeverReachHere = function shouldNeverReachHere () {
	  if (arguments.length === 0) {
	    Assert.shouldNeverReachHere(null);
	  } else if (arguments.length === 1) {
	    var message = arguments[0];
	    throw new AssertionFailedException('Should never reach here' + (message !== null ? ': ' + message : ''))
	  }
	};
	Assert.isTrue = function isTrue () {
	  var assertion;
	  var message;
	  if (arguments.length === 1) {
	    assertion = arguments[0];
	    Assert.isTrue(assertion, null);
	  } else if (arguments.length === 2) {
	    assertion = arguments[0];
	    message = arguments[1];
	    if (!assertion) {
	      if (message === null) {
	        throw new AssertionFailedException()
	      } else {
	        throw new AssertionFailedException(message)
	      }
	    }
	  }
	};
	Assert.equals = function equals () {
	  var expectedValue;
	  var actualValue;
	  var message;
	  if (arguments.length === 2) {
	    expectedValue = arguments[0];
	    actualValue = arguments[1];
	    Assert.equals(expectedValue, actualValue, null);
	  } else if (arguments.length === 3) {
	    expectedValue = arguments[0];
	    actualValue = arguments[1];
	    message = arguments[2];
	    if (!actualValue.equals(expectedValue)) {
	      throw new AssertionFailedException('Expected ' + expectedValue + ' but encountered ' + actualValue + (message !== null ? ': ' + message : ''))
	    }
	  }
	};

	var LineIntersector = function LineIntersector () {
	  this._result = null;
	  this._inputLines = Array(2).fill().map(function () { return Array(2); });
	  this._intPt = new Array(2).fill(null);
	  this._intLineIndex = null;
	  this._isProper = null;
	  this._pa = null;
	  this._pb = null;
	  this._precisionModel = null;
	  this._intPt[0] = new Coordinate();
	  this._intPt[1] = new Coordinate();
	  this._pa = this._intPt[0];
	  this._pb = this._intPt[1];
	  this._result = 0;
	};

	var staticAccessors$10 = { DONT_INTERSECT: { configurable: true },DO_INTERSECT: { configurable: true },COLLINEAR: { configurable: true },NO_INTERSECTION: { configurable: true },POINT_INTERSECTION: { configurable: true },COLLINEAR_INTERSECTION: { configurable: true } };
	LineIntersector.prototype.getIndexAlongSegment = function getIndexAlongSegment (segmentIndex, intIndex) {
	  this.computeIntLineIndex();
	  return this._intLineIndex[segmentIndex][intIndex]
	};
	LineIntersector.prototype.getTopologySummary = function getTopologySummary () {
	  var catBuf = new StringBuffer();
	  if (this.isEndPoint()) { catBuf.append(' endpoint'); }
	  if (this._isProper) { catBuf.append(' proper'); }
	  if (this.isCollinear()) { catBuf.append(' collinear'); }
	  return catBuf.toString()
	};
	LineIntersector.prototype.computeIntersection = function computeIntersection (p1, p2, p3, p4) {
	  this._inputLines[0][0] = p1;
	  this._inputLines[0][1] = p2;
	  this._inputLines[1][0] = p3;
	  this._inputLines[1][1] = p4;
	  this._result = this.computeIntersect(p1, p2, p3, p4);
	};
	LineIntersector.prototype.getIntersectionNum = function getIntersectionNum () {
	  return this._result
	};
	LineIntersector.prototype.computeIntLineIndex = function computeIntLineIndex () {
	  if (arguments.length === 0) {
	    if (this._intLineIndex === null) {
	      this._intLineIndex = Array(2).fill().map(function () { return Array(2); });
	      this.computeIntLineIndex(0);
	      this.computeIntLineIndex(1);
	    }
	  } else if (arguments.length === 1) {
	    var segmentIndex = arguments[0];
	    var dist0 = this.getEdgeDistance(segmentIndex, 0);
	    var dist1 = this.getEdgeDistance(segmentIndex, 1);
	    if (dist0 > dist1) {
	      this._intLineIndex[segmentIndex][0] = 0;
	      this._intLineIndex[segmentIndex][1] = 1;
	    } else {
	      this._intLineIndex[segmentIndex][0] = 1;
	      this._intLineIndex[segmentIndex][1] = 0;
	    }
	  }
	};
	LineIntersector.prototype.isProper = function isProper () {
	  return this.hasIntersection() && this._isProper
	};
	LineIntersector.prototype.setPrecisionModel = function setPrecisionModel (precisionModel) {
	  this._precisionModel = precisionModel;
	};
	LineIntersector.prototype.isInteriorIntersection = function isInteriorIntersection () {
	    var this$1 = this;

	  if (arguments.length === 0) {
	    if (this.isInteriorIntersection(0)) { return true }
	    if (this.isInteriorIntersection(1)) { return true }
	    return false
	  } else if (arguments.length === 1) {
	    var inputLineIndex = arguments[0];
	    for (var i = 0; i < this._result; i++) {
	      if (!(this$1._intPt[i].equals2D(this$1._inputLines[inputLineIndex][0]) || this$1._intPt[i].equals2D(this$1._inputLines[inputLineIndex][1]))) {
	        return true
	      }
	    }
	    return false
	  }
	};
	LineIntersector.prototype.getIntersection = function getIntersection (intIndex) {
	  return this._intPt[intIndex]
	};
	LineIntersector.prototype.isEndPoint = function isEndPoint () {
	  return this.hasIntersection() && !this._isProper
	};
	LineIntersector.prototype.hasIntersection = function hasIntersection () {
	  return this._result !== LineIntersector.NO_INTERSECTION
	};
	LineIntersector.prototype.getEdgeDistance = function getEdgeDistance (segmentIndex, intIndex) {
	  var dist = LineIntersector.computeEdgeDistance(this._intPt[intIndex], this._inputLines[segmentIndex][0], this._inputLines[segmentIndex][1]);
	  return dist
	};
	LineIntersector.prototype.isCollinear = function isCollinear () {
	  return this._result === LineIntersector.COLLINEAR_INTERSECTION
	};
	LineIntersector.prototype.toString = function toString () {
	  return WKTWriter.toLineString(this._inputLines[0][0], this._inputLines[0][1]) + ' - ' + WKTWriter.toLineString(this._inputLines[1][0], this._inputLines[1][1]) + this.getTopologySummary()
	};
	LineIntersector.prototype.getEndpoint = function getEndpoint (segmentIndex, ptIndex) {
	  return this._inputLines[segmentIndex][ptIndex]
	};
	LineIntersector.prototype.isIntersection = function isIntersection (pt) {
	    var this$1 = this;

	  for (var i = 0; i < this._result; i++) {
	    if (this$1._intPt[i].equals2D(pt)) {
	      return true
	    }
	  }
	  return false
	};
	LineIntersector.prototype.getIntersectionAlongSegment = function getIntersectionAlongSegment (segmentIndex, intIndex) {
	  this.computeIntLineIndex();
	  return this._intPt[this._intLineIndex[segmentIndex][intIndex]]
	};
	LineIntersector.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	LineIntersector.prototype.getClass = function getClass () {
	  return LineIntersector
	};
	LineIntersector.computeEdgeDistance = function computeEdgeDistance (p, p0, p1) {
	  var dx = Math.abs(p1.x - p0.x);
	  var dy = Math.abs(p1.y - p0.y);
	  var dist = -1.0;
	  if (p.equals(p0)) {
	    dist = 0.0;
	  } else if (p.equals(p1)) {
	    if (dx > dy) { dist = dx; } else { dist = dy; }
	  } else {
	    var pdx = Math.abs(p.x - p0.x);
	    var pdy = Math.abs(p.y - p0.y);
	    if (dx > dy) { dist = pdx; } else { dist = pdy; }
	    if (dist === 0.0 && !p.equals(p0)) {
	      dist = Math.max(pdx, pdy);
	    }
	  }
	  Assert.isTrue(!(dist === 0.0 && !p.equals(p0)), 'Bad distance calculation');
	  return dist
	};
	LineIntersector.nonRobustComputeEdgeDistance = function nonRobustComputeEdgeDistance (p, p1, p2) {
	  var dx = p.x - p1.x;
	  var dy = p.y - p1.y;
	  var dist = Math.sqrt(dx * dx + dy * dy);
	  Assert.isTrue(!(dist === 0.0 && !p.equals(p1)), 'Invalid distance calculation');
	  return dist
	};
	staticAccessors$10.DONT_INTERSECT.get = function () { return 0 };
	staticAccessors$10.DO_INTERSECT.get = function () { return 1 };
	staticAccessors$10.COLLINEAR.get = function () { return 2 };
	staticAccessors$10.NO_INTERSECTION.get = function () { return 0 };
	staticAccessors$10.POINT_INTERSECTION.get = function () { return 1 };
	staticAccessors$10.COLLINEAR_INTERSECTION.get = function () { return 2 };

	Object.defineProperties( LineIntersector, staticAccessors$10 );

	var RobustLineIntersector = (function (LineIntersector$$1) {
	  function RobustLineIntersector () {
	    LineIntersector$$1.apply(this, arguments);
	  }

	  if ( LineIntersector$$1 ) RobustLineIntersector.__proto__ = LineIntersector$$1;
	  RobustLineIntersector.prototype = Object.create( LineIntersector$$1 && LineIntersector$$1.prototype );
	  RobustLineIntersector.prototype.constructor = RobustLineIntersector;

	  RobustLineIntersector.prototype.isInSegmentEnvelopes = function isInSegmentEnvelopes (intPt) {
	    var env0 = new Envelope(this._inputLines[0][0], this._inputLines[0][1]);
	    var env1 = new Envelope(this._inputLines[1][0], this._inputLines[1][1]);
	    return env0.contains(intPt) && env1.contains(intPt)
	  };
	  RobustLineIntersector.prototype.computeIntersection = function computeIntersection () {
	    if (arguments.length === 3) {
	      var p = arguments[0];
	      var p1 = arguments[1];
	      var p2 = arguments[2];
	      this._isProper = false;
	      if (Envelope.intersects(p1, p2, p)) {
	        if (CGAlgorithms.orientationIndex(p1, p2, p) === 0 && CGAlgorithms.orientationIndex(p2, p1, p) === 0) {
	          this._isProper = true;
	          if (p.equals(p1) || p.equals(p2)) {
	            this._isProper = false;
	          }
	          this._result = LineIntersector$$1.POINT_INTERSECTION;
	          return null
	        }
	      }
	      this._result = LineIntersector$$1.NO_INTERSECTION;
	    } else { return LineIntersector$$1.prototype.computeIntersection.apply(this, arguments) }
	  };
	  RobustLineIntersector.prototype.normalizeToMinimum = function normalizeToMinimum (n1, n2, n3, n4, normPt) {
	    normPt.x = this.smallestInAbsValue(n1.x, n2.x, n3.x, n4.x);
	    normPt.y = this.smallestInAbsValue(n1.y, n2.y, n3.y, n4.y);
	    n1.x -= normPt.x;
	    n1.y -= normPt.y;
	    n2.x -= normPt.x;
	    n2.y -= normPt.y;
	    n3.x -= normPt.x;
	    n3.y -= normPt.y;
	    n4.x -= normPt.x;
	    n4.y -= normPt.y;
	  };
	  RobustLineIntersector.prototype.safeHCoordinateIntersection = function safeHCoordinateIntersection (p1, p2, q1, q2) {
	    var intPt = null;
	    try {
	      intPt = HCoordinate.intersection(p1, p2, q1, q2);
	    } catch (e) {
	      if (e instanceof NotRepresentableException) {
	        intPt = RobustLineIntersector.nearestEndpoint(p1, p2, q1, q2);
	      } else { throw e }
	    } finally {}
	    return intPt
	  };
	  RobustLineIntersector.prototype.intersection = function intersection (p1, p2, q1, q2) {
	    var intPt = this.intersectionWithNormalization(p1, p2, q1, q2);
	    if (!this.isInSegmentEnvelopes(intPt)) {
	      intPt = new Coordinate(RobustLineIntersector.nearestEndpoint(p1, p2, q1, q2));
	    }
	    if (this._precisionModel !== null) {
	      this._precisionModel.makePrecise(intPt);
	    }
	    return intPt
	  };
	  RobustLineIntersector.prototype.smallestInAbsValue = function smallestInAbsValue (x1, x2, x3, x4) {
	    var x = x1;
	    var xabs = Math.abs(x);
	    if (Math.abs(x2) < xabs) {
	      x = x2;
	      xabs = Math.abs(x2);
	    }
	    if (Math.abs(x3) < xabs) {
	      x = x3;
	      xabs = Math.abs(x3);
	    }
	    if (Math.abs(x4) < xabs) {
	      x = x4;
	    }
	    return x
	  };
	  RobustLineIntersector.prototype.checkDD = function checkDD (p1, p2, q1, q2, intPt) {
	    var intPtDD = CGAlgorithmsDD.intersection(p1, p2, q1, q2);
	    var isIn = this.isInSegmentEnvelopes(intPtDD);
	    System.out.println('DD in env = ' + isIn + '  --------------------- ' + intPtDD);
	    if (intPt.distance(intPtDD) > 0.0001) {
	      System.out.println('Distance = ' + intPt.distance(intPtDD));
	    }
	  };
	  RobustLineIntersector.prototype.intersectionWithNormalization = function intersectionWithNormalization (p1, p2, q1, q2) {
	    var n1 = new Coordinate(p1);
	    var n2 = new Coordinate(p2);
	    var n3 = new Coordinate(q1);
	    var n4 = new Coordinate(q2);
	    var normPt = new Coordinate();
	    this.normalizeToEnvCentre(n1, n2, n3, n4, normPt);
	    var intPt = this.safeHCoordinateIntersection(n1, n2, n3, n4);
	    intPt.x += normPt.x;
	    intPt.y += normPt.y;
	    return intPt
	  };
	  RobustLineIntersector.prototype.computeCollinearIntersection = function computeCollinearIntersection (p1, p2, q1, q2) {
	    var p1q1p2 = Envelope.intersects(p1, p2, q1);
	    var p1q2p2 = Envelope.intersects(p1, p2, q2);
	    var q1p1q2 = Envelope.intersects(q1, q2, p1);
	    var q1p2q2 = Envelope.intersects(q1, q2, p2);
	    if (p1q1p2 && p1q2p2) {
	      this._intPt[0] = q1;
	      this._intPt[1] = q2;
	      return LineIntersector$$1.COLLINEAR_INTERSECTION
	    }
	    if (q1p1q2 && q1p2q2) {
	      this._intPt[0] = p1;
	      this._intPt[1] = p2;
	      return LineIntersector$$1.COLLINEAR_INTERSECTION
	    }
	    if (p1q1p2 && q1p1q2) {
	      this._intPt[0] = q1;
	      this._intPt[1] = p1;
	      return q1.equals(p1) && !p1q2p2 && !q1p2q2 ? LineIntersector$$1.POINT_INTERSECTION : LineIntersector$$1.COLLINEAR_INTERSECTION
	    }
	    if (p1q1p2 && q1p2q2) {
	      this._intPt[0] = q1;
	      this._intPt[1] = p2;
	      return q1.equals(p2) && !p1q2p2 && !q1p1q2 ? LineIntersector$$1.POINT_INTERSECTION : LineIntersector$$1.COLLINEAR_INTERSECTION
	    }
	    if (p1q2p2 && q1p1q2) {
	      this._intPt[0] = q2;
	      this._intPt[1] = p1;
	      return q2.equals(p1) && !p1q1p2 && !q1p2q2 ? LineIntersector$$1.POINT_INTERSECTION : LineIntersector$$1.COLLINEAR_INTERSECTION
	    }
	    if (p1q2p2 && q1p2q2) {
	      this._intPt[0] = q2;
	      this._intPt[1] = p2;
	      return q2.equals(p2) && !p1q1p2 && !q1p1q2 ? LineIntersector$$1.POINT_INTERSECTION : LineIntersector$$1.COLLINEAR_INTERSECTION
	    }
	    return LineIntersector$$1.NO_INTERSECTION
	  };
	  RobustLineIntersector.prototype.normalizeToEnvCentre = function normalizeToEnvCentre (n00, n01, n10, n11, normPt) {
	    var minX0 = n00.x < n01.x ? n00.x : n01.x;
	    var minY0 = n00.y < n01.y ? n00.y : n01.y;
	    var maxX0 = n00.x > n01.x ? n00.x : n01.x;
	    var maxY0 = n00.y > n01.y ? n00.y : n01.y;
	    var minX1 = n10.x < n11.x ? n10.x : n11.x;
	    var minY1 = n10.y < n11.y ? n10.y : n11.y;
	    var maxX1 = n10.x > n11.x ? n10.x : n11.x;
	    var maxY1 = n10.y > n11.y ? n10.y : n11.y;
	    var intMinX = minX0 > minX1 ? minX0 : minX1;
	    var intMaxX = maxX0 < maxX1 ? maxX0 : maxX1;
	    var intMinY = minY0 > minY1 ? minY0 : minY1;
	    var intMaxY = maxY0 < maxY1 ? maxY0 : maxY1;
	    var intMidX = (intMinX + intMaxX) / 2.0;
	    var intMidY = (intMinY + intMaxY) / 2.0;
	    normPt.x = intMidX;
	    normPt.y = intMidY;
	    n00.x -= normPt.x;
	    n00.y -= normPt.y;
	    n01.x -= normPt.x;
	    n01.y -= normPt.y;
	    n10.x -= normPt.x;
	    n10.y -= normPt.y;
	    n11.x -= normPt.x;
	    n11.y -= normPt.y;
	  };
	  RobustLineIntersector.prototype.computeIntersect = function computeIntersect (p1, p2, q1, q2) {
	    this._isProper = false;
	    if (!Envelope.intersects(p1, p2, q1, q2)) { return LineIntersector$$1.NO_INTERSECTION }
	    var Pq1 = CGAlgorithms.orientationIndex(p1, p2, q1);
	    var Pq2 = CGAlgorithms.orientationIndex(p1, p2, q2);
	    if ((Pq1 > 0 && Pq2 > 0) || (Pq1 < 0 && Pq2 < 0)) {
	      return LineIntersector$$1.NO_INTERSECTION
	    }
	    var Qp1 = CGAlgorithms.orientationIndex(q1, q2, p1);
	    var Qp2 = CGAlgorithms.orientationIndex(q1, q2, p2);
	    if ((Qp1 > 0 && Qp2 > 0) || (Qp1 < 0 && Qp2 < 0)) {
	      return LineIntersector$$1.NO_INTERSECTION
	    }
	    var collinear = Pq1 === 0 && Pq2 === 0 && Qp1 === 0 && Qp2 === 0;
	    if (collinear) {
	      return this.computeCollinearIntersection(p1, p2, q1, q2)
	    }
	    if (Pq1 === 0 || Pq2 === 0 || Qp1 === 0 || Qp2 === 0) {
	      this._isProper = false;
	      if (p1.equals2D(q1) || p1.equals2D(q2)) {
	        this._intPt[0] = p1;
	      } else if (p2.equals2D(q1) || p2.equals2D(q2)) {
	        this._intPt[0] = p2;
	      } else if (Pq1 === 0) {
	        this._intPt[0] = new Coordinate(q1);
	      } else if (Pq2 === 0) {
	        this._intPt[0] = new Coordinate(q2);
	      } else if (Qp1 === 0) {
	        this._intPt[0] = new Coordinate(p1);
	      } else if (Qp2 === 0) {
	        this._intPt[0] = new Coordinate(p2);
	      }
	    } else {
	      this._isProper = true;
	      this._intPt[0] = this.intersection(p1, p2, q1, q2);
	    }
	    return LineIntersector$$1.POINT_INTERSECTION
	  };
	  RobustLineIntersector.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  RobustLineIntersector.prototype.getClass = function getClass () {
	    return RobustLineIntersector
	  };
	  RobustLineIntersector.nearestEndpoint = function nearestEndpoint (p1, p2, q1, q2) {
	    var nearestPt = p1;
	    var minDist = CGAlgorithms.distancePointLine(p1, q1, q2);
	    var dist = CGAlgorithms.distancePointLine(p2, q1, q2);
	    if (dist < minDist) {
	      minDist = dist;
	      nearestPt = p2;
	    }
	    dist = CGAlgorithms.distancePointLine(q1, p1, p2);
	    if (dist < minDist) {
	      minDist = dist;
	      nearestPt = q1;
	    }
	    dist = CGAlgorithms.distancePointLine(q2, p1, p2);
	    if (dist < minDist) {
	      minDist = dist;
	      nearestPt = q2;
	    }
	    return nearestPt
	  };

	  return RobustLineIntersector;
	}(LineIntersector));

	var RobustDeterminant = function RobustDeterminant () {};

	RobustDeterminant.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	RobustDeterminant.prototype.getClass = function getClass () {
	  return RobustDeterminant
	};
	RobustDeterminant.orientationIndex = function orientationIndex (p1, p2, q) {
	  var dx1 = p2.x - p1.x;
	  var dy1 = p2.y - p1.y;
	  var dx2 = q.x - p2.x;
	  var dy2 = q.y - p2.y;
	  return RobustDeterminant.signOfDet2x2(dx1, dy1, dx2, dy2)
	};
	RobustDeterminant.signOfDet2x2 = function signOfDet2x2 (x1, y1, x2, y2) {
	  var sign = null;
	  var swap = null;
	  var k = null;
	  sign = 1;
	  if (x1 === 0.0 || y2 === 0.0) {
	    if (y1 === 0.0 || x2 === 0.0) {
	      return 0
	    } else if (y1 > 0) {
	      if (x2 > 0) {
	        return -sign
	      } else {
	        return sign
	      }
	    } else {
	      if (x2 > 0) {
	        return sign
	      } else {
	        return -sign
	      }
	    }
	  }
	  if (y1 === 0.0 || x2 === 0.0) {
	    if (y2 > 0) {
	      if (x1 > 0) {
	        return sign
	      } else {
	        return -sign
	      }
	    } else {
	      if (x1 > 0) {
	        return -sign
	      } else {
	        return sign
	      }
	    }
	  }
	  if (y1 > 0.0) {
	    if (y2 > 0.0) {
	      if (y1 <= y2) ; else {
	        sign = -sign;
	        swap = x1;
	        x1 = x2;
	        x2 = swap;
	        swap = y1;
	        y1 = y2;
	        y2 = swap;
	      }
	    } else {
	      if (y1 <= -y2) {
	        sign = -sign;
	        x2 = -x2;
	        y2 = -y2;
	      } else {
	        swap = x1;
	        x1 = -x2;
	        x2 = swap;
	        swap = y1;
	        y1 = -y2;
	        y2 = swap;
	      }
	    }
	  } else {
	    if (y2 > 0.0) {
	      if (-y1 <= y2) {
	        sign = -sign;
	        x1 = -x1;
	        y1 = -y1;
	      } else {
	        swap = -x1;
	        x1 = x2;
	        x2 = swap;
	        swap = -y1;
	        y1 = y2;
	        y2 = swap;
	      }
	    } else {
	      if (y1 >= y2) {
	        x1 = -x1;
	        y1 = -y1;
	        x2 = -x2;
	        y2 = -y2;
	      } else {
	        sign = -sign;
	        swap = -x1;
	        x1 = -x2;
	        x2 = swap;
	        swap = -y1;
	        y1 = -y2;
	        y2 = swap;
	      }
	    }
	  }
	  if (x1 > 0.0) {
	    if (x2 > 0.0) {
	      if (x1 <= x2) ; else {
	        return sign
	      }
	    } else {
	      return sign
	    }
	  } else {
	    if (x2 > 0.0) {
	      return -sign
	    } else {
	      if (x1 >= x2) {
	        sign = -sign;
	        x1 = -x1;
	        x2 = -x2;
	      } else {
	        return -sign
	      }
	    }
	  }
	  while (true) {
	    k = Math.floor(x2 / x1);
	    x2 = x2 - k * x1;
	    y2 = y2 - k * y1;
	    if (y2 < 0.0) {
	      return -sign
	    }
	    if (y2 > y1) {
	      return sign
	    }
	    if (x1 > x2 + x2) {
	      if (y1 < y2 + y2) {
	        return sign
	      }
	    } else {
	      if (y1 > y2 + y2) {
	        return -sign
	      } else {
	        x2 = x1 - x2;
	        y2 = y1 - y2;
	        sign = -sign;
	      }
	    }
	    if (y2 === 0.0) {
	      if (x2 === 0.0) {
	        return 0
	      } else {
	        return -sign
	      }
	    }
	    if (x2 === 0.0) {
	      return sign
	    }
	    k = Math.floor(x1 / x2);
	    x1 = x1 - k * x2;
	    y1 = y1 - k * y2;
	    if (y1 < 0.0) {
	      return sign
	    }
	    if (y1 > y2) {
	      return -sign
	    }
	    if (x2 > x1 + x1) {
	      if (y2 < y1 + y1) {
	        return -sign
	      }
	    } else {
	      if (y2 > y1 + y1) {
	        return sign
	      } else {
	        x1 = x2 - x1;
	        y1 = y2 - y1;
	        sign = -sign;
	      }
	    }
	    if (y1 === 0.0) {
	      if (x1 === 0.0) {
	        return 0
	      } else {
	        return sign
	      }
	    }
	    if (x1 === 0.0) {
	      return -sign
	    }
	  }
	};

	var RayCrossingCounter = function RayCrossingCounter () {
	  this._p = null;
	  this._crossingCount = 0;
	  this._isPointOnSegment = false;
	  var p = arguments[0];
	  this._p = p;
	};
	RayCrossingCounter.prototype.countSegment = function countSegment (p1, p2) {
	  if (p1.x < this._p.x && p2.x < this._p.x) { return null }
	  if (this._p.x === p2.x && this._p.y === p2.y) {
	    this._isPointOnSegment = true;
	    return null
	  }
	  if (p1.y === this._p.y && p2.y === this._p.y) {
	    var minx = p1.x;
	    var maxx = p2.x;
	    if (minx > maxx) {
	      minx = p2.x;
	      maxx = p1.x;
	    }
	    if (this._p.x >= minx && this._p.x <= maxx) {
	      this._isPointOnSegment = true;
	    }
	    return null
	  }
	  if ((p1.y > this._p.y && p2.y <= this._p.y) || (p2.y > this._p.y && p1.y <= this._p.y)) {
	    var x1 = p1.x - this._p.x;
	    var y1 = p1.y - this._p.y;
	    var x2 = p2.x - this._p.x;
	    var y2 = p2.y - this._p.y;
	    var xIntSign = RobustDeterminant.signOfDet2x2(x1, y1, x2, y2);
	    if (xIntSign === 0.0) {
	      this._isPointOnSegment = true;
	      return null
	    }
	    if (y2 < y1) { xIntSign = -xIntSign; }
	    if (xIntSign > 0.0) {
	      this._crossingCount++;
	    }
	  }
	};
	RayCrossingCounter.prototype.isPointInPolygon = function isPointInPolygon () {
	  return this.getLocation() !== Location.EXTERIOR
	};
	RayCrossingCounter.prototype.getLocation = function getLocation () {
	  if (this._isPointOnSegment) { return Location.BOUNDARY }
	  if (this._crossingCount % 2 === 1) {
	    return Location.INTERIOR
	  }
	  return Location.EXTERIOR
	};
	RayCrossingCounter.prototype.isOnSegment = function isOnSegment () {
	  return this._isPointOnSegment
	};
	RayCrossingCounter.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	RayCrossingCounter.prototype.getClass = function getClass () {
	  return RayCrossingCounter
	};
	RayCrossingCounter.locatePointInRing = function locatePointInRing () {
	  if (arguments[0] instanceof Coordinate && hasInterface(arguments[1], CoordinateSequence)) {
	    var p = arguments[0];
	    var ring = arguments[1];
	    var counter = new RayCrossingCounter(p);
	    var p1 = new Coordinate();
	    var p2 = new Coordinate();
	    for (var i = 1; i < ring.size(); i++) {
	      ring.getCoordinate(i, p1);
	      ring.getCoordinate(i - 1, p2);
	      counter.countSegment(p1, p2);
	      if (counter.isOnSegment()) { return counter.getLocation() }
	    }
	    return counter.getLocation()
	  } else if (arguments[0] instanceof Coordinate && arguments[1] instanceof Array) {
	    var p$1 = arguments[0];
	    var ring$1 = arguments[1];
	    var counter$1 = new RayCrossingCounter(p$1);
	    for (var i$1 = 1; i$1 < ring$1.length; i$1++) {
	      var p1$1 = ring$1[i$1];
	      var p2$1 = ring$1[i$1 - 1];
	      counter$1.countSegment(p1$1, p2$1);
	      if (counter$1.isOnSegment()) { return counter$1.getLocation() }
	    }
	    return counter$1.getLocation()
	  }
	};

	var CGAlgorithms = function CGAlgorithms () {};

	var staticAccessors$3 = { CLOCKWISE: { configurable: true },RIGHT: { configurable: true },COUNTERCLOCKWISE: { configurable: true },LEFT: { configurable: true },COLLINEAR: { configurable: true },STRAIGHT: { configurable: true } };

	CGAlgorithms.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	CGAlgorithms.prototype.getClass = function getClass () {
	  return CGAlgorithms
	};
	CGAlgorithms.orientationIndex = function orientationIndex (p1, p2, q) {
	  return CGAlgorithmsDD.orientationIndex(p1, p2, q)
	};
	CGAlgorithms.signedArea = function signedArea () {
	  if (arguments[0] instanceof Array) {
	    var ring = arguments[0];
	    if (ring.length < 3) { return 0.0 }
	    var sum = 0.0;
	    var x0 = ring[0].x;
	    for (var i = 1; i < ring.length - 1; i++) {
	      var x = ring[i].x - x0;
	      var y1 = ring[i + 1].y;
	      var y2 = ring[i - 1].y;
	      sum += x * (y2 - y1);
	    }
	    return sum / 2.0
	  } else if (hasInterface(arguments[0], CoordinateSequence)) {
	    var ring$1 = arguments[0];
	    var n = ring$1.size();
	    if (n < 3) { return 0.0 }
	    var p0 = new Coordinate();
	    var p1 = new Coordinate();
	    var p2 = new Coordinate();
	    ring$1.getCoordinate(0, p1);
	    ring$1.getCoordinate(1, p2);
	    var x0$1 = p1.x;
	    p2.x -= x0$1;
	    var sum$1 = 0.0;
	    for (var i$1 = 1; i$1 < n - 1; i$1++) {
	      p0.y = p1.y;
	      p1.x = p2.x;
	      p1.y = p2.y;
	      ring$1.getCoordinate(i$1 + 1, p2);
	      p2.x -= x0$1;
	      sum$1 += p1.x * (p0.y - p2.y);
	    }
	    return sum$1 / 2.0
	  }
	};
	CGAlgorithms.distanceLineLine = function distanceLineLine (A, B, C, D) {
	  if (A.equals(B)) { return CGAlgorithms.distancePointLine(A, C, D) }
	  if (C.equals(D)) { return CGAlgorithms.distancePointLine(D, A, B) }
	  var noIntersection = false;
	  if (!Envelope.intersects(A, B, C, D)) {
	    noIntersection = true;
	  } else {
	    var denom = (B.x - A.x) * (D.y - C.y) - (B.y - A.y) * (D.x - C.x);
	    if (denom === 0) {
	      noIntersection = true;
	    } else {
	      var rNumb = (A.y - C.y) * (D.x - C.x) - (A.x - C.x) * (D.y - C.y);
	      var sNum = (A.y - C.y) * (B.x - A.x) - (A.x - C.x) * (B.y - A.y);
	      var s = sNum / denom;
	      var r = rNumb / denom;
	      if (r < 0 || r > 1 || s < 0 || s > 1) {
	        noIntersection = true;
	      }
	    }
	  }
	  if (noIntersection) {
	    return MathUtil.min(CGAlgorithms.distancePointLine(A, C, D), CGAlgorithms.distancePointLine(B, C, D), CGAlgorithms.distancePointLine(C, A, B), CGAlgorithms.distancePointLine(D, A, B))
	  }
	  return 0.0
	};
	CGAlgorithms.isPointInRing = function isPointInRing (p, ring) {
	  return CGAlgorithms.locatePointInRing(p, ring) !== Location.EXTERIOR
	};
	CGAlgorithms.computeLength = function computeLength (pts) {
	  var n = pts.size();
	  if (n <= 1) { return 0.0 }
	  var len = 0.0;
	  var p = new Coordinate();
	  pts.getCoordinate(0, p);
	  var x0 = p.x;
	  var y0 = p.y;
	  for (var i = 1; i < n; i++) {
	    pts.getCoordinate(i, p);
	    var x1 = p.x;
	    var y1 = p.y;
	    var dx = x1 - x0;
	    var dy = y1 - y0;
	    len += Math.sqrt(dx * dx + dy * dy);
	    x0 = x1;
	    y0 = y1;
	  }
	  return len
	};
	CGAlgorithms.isCCW = function isCCW (ring) {
	  var nPts = ring.length - 1;
	  if (nPts < 3) { throw new IllegalArgumentException('Ring has fewer than 4 points, so orientation cannot be determined') }
	  var hiPt = ring[0];
	  var hiIndex = 0;
	  for (var i = 1; i <= nPts; i++) {
	    var p = ring[i];
	    if (p.y > hiPt.y) {
	      hiPt = p;
	      hiIndex = i;
	    }
	  }
	  var iPrev = hiIndex;
	  do {
	    iPrev = iPrev - 1;
	    if (iPrev < 0) { iPrev = nPts; }
	  } while (ring[iPrev].equals2D(hiPt) && iPrev !== hiIndex)
	  var iNext = hiIndex;
	  do {
	    iNext = (iNext + 1) % nPts;
	  } while (ring[iNext].equals2D(hiPt) && iNext !== hiIndex)
	  var prev = ring[iPrev];
	  var next = ring[iNext];
	  if (prev.equals2D(hiPt) || next.equals2D(hiPt) || prev.equals2D(next)) { return false }
	  var disc = CGAlgorithms.computeOrientation(prev, hiPt, next);
	  var isCCW = false;
	  if (disc === 0) {
	    isCCW = prev.x > next.x;
	  } else {
	    isCCW = disc > 0;
	  }
	  return isCCW
	};
	CGAlgorithms.locatePointInRing = function locatePointInRing (p, ring) {
	  return RayCrossingCounter.locatePointInRing(p, ring)
	};
	CGAlgorithms.distancePointLinePerpendicular = function distancePointLinePerpendicular (p, A, B) {
	  var len2 = (B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y);
	  var s = ((A.y - p.y) * (B.x - A.x) - (A.x - p.x) * (B.y - A.y)) / len2;
	  return Math.abs(s) * Math.sqrt(len2)
	};
	CGAlgorithms.computeOrientation = function computeOrientation (p1, p2, q) {
	  return CGAlgorithms.orientationIndex(p1, p2, q)
	};
	CGAlgorithms.distancePointLine = function distancePointLine () {
	  if (arguments.length === 2) {
	    var p = arguments[0];
	    var line = arguments[1];
	    if (line.length === 0) { throw new IllegalArgumentException('Line array must contain at least one vertex') }
	    var minDistance = p.distance(line[0]);
	    for (var i = 0; i < line.length - 1; i++) {
	      var dist = CGAlgorithms.distancePointLine(p, line[i], line[i + 1]);
	      if (dist < minDistance) {
	        minDistance = dist;
	      }
	    }
	    return minDistance
	  } else if (arguments.length === 3) {
	    var p$1 = arguments[0];
	    var A = arguments[1];
	    var B = arguments[2];
	    if (A.x === B.x && A.y === B.y) { return p$1.distance(A) }
	    var len2 = (B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y);
	    var r = ((p$1.x - A.x) * (B.x - A.x) + (p$1.y - A.y) * (B.y - A.y)) / len2;
	    if (r <= 0.0) { return p$1.distance(A) }
	    if (r >= 1.0) { return p$1.distance(B) }
	    var s = ((A.y - p$1.y) * (B.x - A.x) - (A.x - p$1.x) * (B.y - A.y)) / len2;
	    return Math.abs(s) * Math.sqrt(len2)
	  }
	};
	CGAlgorithms.isOnLine = function isOnLine (p, pt) {
	  var lineIntersector = new RobustLineIntersector();
	  for (var i = 1; i < pt.length; i++) {
	    var p0 = pt[i - 1];
	    var p1 = pt[i];
	    lineIntersector.computeIntersection(p, p0, p1);
	    if (lineIntersector.hasIntersection()) {
	      return true
	    }
	  }
	  return false
	};
	staticAccessors$3.CLOCKWISE.get = function () { return -1 };
	staticAccessors$3.RIGHT.get = function () { return CGAlgorithms.CLOCKWISE };
	staticAccessors$3.COUNTERCLOCKWISE.get = function () { return 1 };
	staticAccessors$3.LEFT.get = function () { return CGAlgorithms.COUNTERCLOCKWISE };
	staticAccessors$3.COLLINEAR.get = function () { return 0 };
	staticAccessors$3.STRAIGHT.get = function () { return CGAlgorithms.COLLINEAR };

	Object.defineProperties( CGAlgorithms, staticAccessors$3 );

	var GeometryComponentFilter = function GeometryComponentFilter () {};

	GeometryComponentFilter.prototype.filter = function filter (geom) {};
	GeometryComponentFilter.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	GeometryComponentFilter.prototype.getClass = function getClass () {
	  return GeometryComponentFilter
	};

	var Geometry = function Geometry () {
	  var factory = arguments[0];

	  this._envelope = null;
	  this._factory = null;
	  this._SRID = null;
	  this._userData = null;
	  this._factory = factory;
	  this._SRID = factory.getSRID();
	};

	var staticAccessors$11 = { serialVersionUID: { configurable: true },SORTINDEX_POINT: { configurable: true },SORTINDEX_MULTIPOINT: { configurable: true },SORTINDEX_LINESTRING: { configurable: true },SORTINDEX_LINEARRING: { configurable: true },SORTINDEX_MULTILINESTRING: { configurable: true },SORTINDEX_POLYGON: { configurable: true },SORTINDEX_MULTIPOLYGON: { configurable: true },SORTINDEX_GEOMETRYCOLLECTION: { configurable: true },geometryChangedFilter: { configurable: true } };
	Geometry.prototype.isGeometryCollection = function isGeometryCollection () {
	  return this.getSortIndex() === Geometry.SORTINDEX_GEOMETRYCOLLECTION
	};
	Geometry.prototype.getFactory = function getFactory () {
	  return this._factory
	};
	Geometry.prototype.getGeometryN = function getGeometryN (n) {
	  return this
	};
	Geometry.prototype.getArea = function getArea () {
	  return 0.0
	};
	Geometry.prototype.isRectangle = function isRectangle () {
	  return false
	};
	Geometry.prototype.equals = function equals () {
	  if (arguments[0] instanceof Geometry) {
	    var g$1 = arguments[0];
	    if (g$1 === null) { return false }
	    return this.equalsTopo(g$1)
	  } else if (arguments[0] instanceof Object) {
	    var o = arguments[0];
	    if (!(o instanceof Geometry)) { return false }
	    var g = o;
	    return this.equalsExact(g)
	  }
	};
	Geometry.prototype.equalsExact = function equalsExact (other) {
	  return this === other || this.equalsExact(other, 0)
	};
	Geometry.prototype.geometryChanged = function geometryChanged () {
	  this.apply(Geometry.geometryChangedFilter);
	};
	Geometry.prototype.geometryChangedAction = function geometryChangedAction () {
	  this._envelope = null;
	};
	Geometry.prototype.equalsNorm = function equalsNorm (g) {
	  if (g === null) { return false }
	  return this.norm().equalsExact(g.norm())
	};
	Geometry.prototype.getLength = function getLength () {
	  return 0.0
	};
	Geometry.prototype.getNumGeometries = function getNumGeometries () {
	  return 1
	};
	Geometry.prototype.compareTo = function compareTo () {
	  if (arguments.length === 1) {
	    var o = arguments[0];
	    var other = o;
	    if (this.getSortIndex() !== other.getSortIndex()) {
	      return this.getSortIndex() - other.getSortIndex()
	    }
	    if (this.isEmpty() && other.isEmpty()) {
	      return 0
	    }
	    if (this.isEmpty()) {
	      return -1
	    }
	    if (other.isEmpty()) {
	      return 1
	    }
	    return this.compareToSameClass(o)
	  } else if (arguments.length === 2) {
	    var other$1 = arguments[0];
	    var comp = arguments[1];
	    if (this.getSortIndex() !== other$1.getSortIndex()) {
	      return this.getSortIndex() - other$1.getSortIndex()
	    }
	    if (this.isEmpty() && other$1.isEmpty()) {
	      return 0
	    }
	    if (this.isEmpty()) {
	      return -1
	    }
	    if (other$1.isEmpty()) {
	      return 1
	    }
	    return this.compareToSameClass(other$1, comp)
	  }
	};
	Geometry.prototype.getUserData = function getUserData () {
	  return this._userData
	};
	Geometry.prototype.getSRID = function getSRID () {
	  return this._SRID
	};
	Geometry.prototype.getEnvelope = function getEnvelope () {
	  return this.getFactory().toGeometry(this.getEnvelopeInternal())
	};
	Geometry.prototype.checkNotGeometryCollection = function checkNotGeometryCollection (g) {
	  if (g.getSortIndex() === Geometry.SORTINDEX_GEOMETRYCOLLECTION) {
	    throw new IllegalArgumentException('This method does not support GeometryCollection arguments')
	  }
	};
	Geometry.prototype.equal = function equal (a, b, tolerance) {
	  if (tolerance === 0) {
	    return a.equals(b)
	  }
	  return a.distance(b) <= tolerance
	};
	Geometry.prototype.norm = function norm () {
	  var copy = this.copy();
	  copy.normalize();
	  return copy
	};
	Geometry.prototype.getPrecisionModel = function getPrecisionModel () {
	  return this._factory.getPrecisionModel()
	};
	Geometry.prototype.getEnvelopeInternal = function getEnvelopeInternal () {
	  if (this._envelope === null) {
	    this._envelope = this.computeEnvelopeInternal();
	  }
	  return new Envelope(this._envelope)
	};
	Geometry.prototype.setSRID = function setSRID (SRID) {
	  this._SRID = SRID;
	};
	Geometry.prototype.setUserData = function setUserData (userData) {
	  this._userData = userData;
	};
	Geometry.prototype.compare = function compare (a, b) {
	  var i = a.iterator();
	  var j = b.iterator();
	  while (i.hasNext() && j.hasNext()) {
	    var aElement = i.next();
	    var bElement = j.next();
	    var comparison = aElement.compareTo(bElement);
	    if (comparison !== 0) {
	      return comparison
	    }
	  }
	  if (i.hasNext()) {
	    return 1
	  }
	  if (j.hasNext()) {
	    return -1
	  }
	  return 0
	};
	Geometry.prototype.hashCode = function hashCode () {
	  return this.getEnvelopeInternal().hashCode()
	};
	Geometry.prototype.isGeometryCollectionOrDerived = function isGeometryCollectionOrDerived () {
	  if (this.getSortIndex() === Geometry.SORTINDEX_GEOMETRYCOLLECTION || this.getSortIndex() === Geometry.SORTINDEX_MULTIPOINT || this.getSortIndex() === Geometry.SORTINDEX_MULTILINESTRING || this.getSortIndex() === Geometry.SORTINDEX_MULTIPOLYGON) {
	    return true
	  }
	  return false
	};
	Geometry.prototype.interfaces_ = function interfaces_ () {
	  return [Clonable, Comparable, Serializable]
	};
	Geometry.prototype.getClass = function getClass () {
	  return Geometry
	};
	Geometry.hasNonEmptyElements = function hasNonEmptyElements (geometries) {
	  for (var i = 0; i < geometries.length; i++) {
	    if (!geometries[i].isEmpty()) {
	      return true
	    }
	  }
	  return false
	};
	Geometry.hasNullElements = function hasNullElements (array) {
	  for (var i = 0; i < array.length; i++) {
	    if (array[i] === null) {
	      return true
	    }
	  }
	  return false
	};
	staticAccessors$11.serialVersionUID.get = function () { return 8763622679187376702 };
	staticAccessors$11.SORTINDEX_POINT.get = function () { return 0 };
	staticAccessors$11.SORTINDEX_MULTIPOINT.get = function () { return 1 };
	staticAccessors$11.SORTINDEX_LINESTRING.get = function () { return 2 };
	staticAccessors$11.SORTINDEX_LINEARRING.get = function () { return 3 };
	staticAccessors$11.SORTINDEX_MULTILINESTRING.get = function () { return 4 };
	staticAccessors$11.SORTINDEX_POLYGON.get = function () { return 5 };
	staticAccessors$11.SORTINDEX_MULTIPOLYGON.get = function () { return 6 };
	staticAccessors$11.SORTINDEX_GEOMETRYCOLLECTION.get = function () { return 7 };
	staticAccessors$11.geometryChangedFilter.get = function () { return geometryChangedFilter };

	Object.defineProperties( Geometry, staticAccessors$11 );

	var geometryChangedFilter = function geometryChangedFilter () {};

	geometryChangedFilter.interfaces_ = function interfaces_ () {
	  return [GeometryComponentFilter]
	};
	geometryChangedFilter.filter = function filter (geom) {
	  geom.geometryChangedAction();
	};

	var CoordinateFilter = function CoordinateFilter () {};

	CoordinateFilter.prototype.filter = function filter (coord) {};
	CoordinateFilter.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	CoordinateFilter.prototype.getClass = function getClass () {
	  return CoordinateFilter
	};

	var BoundaryNodeRule = function BoundaryNodeRule () {};

	var staticAccessors$12 = { Mod2BoundaryNodeRule: { configurable: true },EndPointBoundaryNodeRule: { configurable: true },MultiValentEndPointBoundaryNodeRule: { configurable: true },MonoValentEndPointBoundaryNodeRule: { configurable: true },MOD2_BOUNDARY_RULE: { configurable: true },ENDPOINT_BOUNDARY_RULE: { configurable: true },MULTIVALENT_ENDPOINT_BOUNDARY_RULE: { configurable: true },MONOVALENT_ENDPOINT_BOUNDARY_RULE: { configurable: true },OGC_SFS_BOUNDARY_RULE: { configurable: true } };

	BoundaryNodeRule.prototype.isInBoundary = function isInBoundary (boundaryCount) {};
	BoundaryNodeRule.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	BoundaryNodeRule.prototype.getClass = function getClass () {
	  return BoundaryNodeRule
	};
	staticAccessors$12.Mod2BoundaryNodeRule.get = function () { return Mod2BoundaryNodeRule };
	staticAccessors$12.EndPointBoundaryNodeRule.get = function () { return EndPointBoundaryNodeRule };
	staticAccessors$12.MultiValentEndPointBoundaryNodeRule.get = function () { return MultiValentEndPointBoundaryNodeRule };
	staticAccessors$12.MonoValentEndPointBoundaryNodeRule.get = function () { return MonoValentEndPointBoundaryNodeRule };
	staticAccessors$12.MOD2_BOUNDARY_RULE.get = function () { return new Mod2BoundaryNodeRule() };
	staticAccessors$12.ENDPOINT_BOUNDARY_RULE.get = function () { return new EndPointBoundaryNodeRule() };
	staticAccessors$12.MULTIVALENT_ENDPOINT_BOUNDARY_RULE.get = function () { return new MultiValentEndPointBoundaryNodeRule() };
	staticAccessors$12.MONOVALENT_ENDPOINT_BOUNDARY_RULE.get = function () { return new MonoValentEndPointBoundaryNodeRule() };
	staticAccessors$12.OGC_SFS_BOUNDARY_RULE.get = function () { return BoundaryNodeRule.MOD2_BOUNDARY_RULE };

	Object.defineProperties( BoundaryNodeRule, staticAccessors$12 );

	var Mod2BoundaryNodeRule = function Mod2BoundaryNodeRule () {};

	Mod2BoundaryNodeRule.prototype.isInBoundary = function isInBoundary (boundaryCount) {
	  return boundaryCount % 2 === 1
	};
	Mod2BoundaryNodeRule.prototype.interfaces_ = function interfaces_ () {
	  return [BoundaryNodeRule]
	};
	Mod2BoundaryNodeRule.prototype.getClass = function getClass () {
	  return Mod2BoundaryNodeRule
	};

	var EndPointBoundaryNodeRule = function EndPointBoundaryNodeRule () {};

	EndPointBoundaryNodeRule.prototype.isInBoundary = function isInBoundary (boundaryCount) {
	  return boundaryCount > 0
	};
	EndPointBoundaryNodeRule.prototype.interfaces_ = function interfaces_ () {
	  return [BoundaryNodeRule]
	};
	EndPointBoundaryNodeRule.prototype.getClass = function getClass () {
	  return EndPointBoundaryNodeRule
	};

	var MultiValentEndPointBoundaryNodeRule = function MultiValentEndPointBoundaryNodeRule () {};

	MultiValentEndPointBoundaryNodeRule.prototype.isInBoundary = function isInBoundary (boundaryCount) {
	  return boundaryCount > 1
	};
	MultiValentEndPointBoundaryNodeRule.prototype.interfaces_ = function interfaces_ () {
	  return [BoundaryNodeRule]
	};
	MultiValentEndPointBoundaryNodeRule.prototype.getClass = function getClass () {
	  return MultiValentEndPointBoundaryNodeRule
	};

	var MonoValentEndPointBoundaryNodeRule = function MonoValentEndPointBoundaryNodeRule () {};

	MonoValentEndPointBoundaryNodeRule.prototype.isInBoundary = function isInBoundary (boundaryCount) {
	  return boundaryCount === 1
	};
	MonoValentEndPointBoundaryNodeRule.prototype.interfaces_ = function interfaces_ () {
	  return [BoundaryNodeRule]
	};
	MonoValentEndPointBoundaryNodeRule.prototype.getClass = function getClass () {
	  return MonoValentEndPointBoundaryNodeRule
	};

	// import Iterator from './Iterator'

	/**
	 * @see http://download.oracle.com/javase/6/docs/api/java/util/Collection.html
	 *
	 * @constructor
	 * @private
	 */
	var Collection = function Collection () {};

	Collection.prototype.add = function add () {};

	/**
	 * Appends all of the elements in the specified collection to the end of this
	 * list, in the order that they are returned by the specified collection's
	 * iterator (optional operation).
	 * @param {javascript.util.Collection} c
	 * @return {boolean}
	 */
	Collection.prototype.addAll = function addAll () {};

	/**
	 * Returns true if this collection contains no elements.
	 * @return {boolean}
	 */
	Collection.prototype.isEmpty = function isEmpty () {};

	/**
	 * Returns an iterator over the elements in this collection.
	 * @return {javascript.util.Iterator}
	 */
	Collection.prototype.iterator = function iterator () {};

	/**
	 * Returns an iterator over the elements in this collection.
	 * @return {number}
	 */
	Collection.prototype.size = function size () {};

	/**
	 * Returns an array containing all of the elements in this collection.
	 * @return {Array}
	 */
	Collection.prototype.toArray = function toArray () {};

	/**
	 * Removes a single instance of the specified element from this collection if it
	 * is present. (optional)
	 * @param {Object} e
	 * @return {boolean}
	 */
	Collection.prototype.remove = function remove () {};

	/**
	 * @param {string=} message Optional message
	 * @extends {Error}
	 * @constructor
	 * @private
	 */
	function IndexOutOfBoundsException (message) {
	  this.message = message || '';
	}
	IndexOutOfBoundsException.prototype = new Error();

	/**
	 * @type {string}
	 */
	IndexOutOfBoundsException.prototype.name = 'IndexOutOfBoundsException';

	/**
	 * @see http://download.oracle.com/javase/6/docs/api/java/util/Iterator.html
	 * @constructor
	 * @private
	 */
	var Iterator = function Iterator () {};

	Iterator.prototype.hasNext = function hasNext () {};

	/**
	 * Returns the next element in the iteration.
	 * @return {Object}
	 */
	Iterator.prototype.next = function next () {};

	/**
	 * Removes from the underlying collection the last element returned by the
	 * iterator (optional operation).
	 */
	Iterator.prototype.remove = function remove () {};

	/**
	 * @see http://download.oracle.com/javase/6/docs/api/java/util/List.html
	 *
	 * @extends {javascript.util.Collection}
	 * @constructor
	 * @private
	 */
	var List = (function (Collection$$1) {
	  function List () {
	    Collection$$1.apply(this, arguments);
	  }

	  if ( Collection$$1 ) List.__proto__ = Collection$$1;
	  List.prototype = Object.create( Collection$$1 && Collection$$1.prototype );
	  List.prototype.constructor = List;

	  List.prototype.get = function get () { };

	  /**
	   * Replaces the element at the specified position in this list with the
	   * specified element (optional operation).
	   * @param {number} index
	   * @param {Object} e
	   * @return {Object}
	   */
	  List.prototype.set = function set () { };

	  /**
	   * Returns true if this collection contains no elements.
	   * @return {boolean}
	   */
	  List.prototype.isEmpty = function isEmpty () { };

	  return List;
	}(Collection));

	/**
	 * @param {string=} message Optional message
	 * @extends {Error}
	 * @constructor
	 * @private
	 */
	function NoSuchElementException (message) {
	  this.message = message || '';
	}
	NoSuchElementException.prototype = new Error();

	/**
	 * @type {string}
	 */
	NoSuchElementException.prototype.name = 'NoSuchElementException';

	// import OperationNotSupported from './OperationNotSupported'

	/**
	 * @see http://download.oracle.com/javase/6/docs/api/java/util/ArrayList.html
	 *
	 * @extends List
	 * @private
	 */
	var ArrayList = (function (List$$1) {
	  function ArrayList () {
	    List$$1.call(this);
	    this.array_ = [];

	    if (arguments[0] instanceof Collection) {
	      this.addAll(arguments[0]);
	    }
	  }

	  if ( List$$1 ) ArrayList.__proto__ = List$$1;
	  ArrayList.prototype = Object.create( List$$1 && List$$1.prototype );
	  ArrayList.prototype.constructor = ArrayList;

	  ArrayList.prototype.ensureCapacity = function ensureCapacity () {};
	  ArrayList.prototype.interfaces_ = function interfaces_ () { return [List$$1, Collection] };

	  /**
	   * @override
	   */
	  ArrayList.prototype.add = function add (e) {
	    if (arguments.length === 1) {
	      this.array_.push(e);
	    } else {
	      this.array_.splice(arguments[0], arguments[1]);
	    }
	    return true
	  };

	  ArrayList.prototype.clear = function clear () {
	    this.array_ = [];
	  };

	  /**
	   * @override
	   */
	  ArrayList.prototype.addAll = function addAll (c) {
	    var this$1 = this;

	    for (var i = c.iterator(); i.hasNext();) {
	      this$1.add(i.next());
	    }
	    return true
	  };

	  /**
	   * @override
	   */
	  ArrayList.prototype.set = function set (index, element) {
	    var oldElement = this.array_[index];
	    this.array_[index] = element;
	    return oldElement
	  };

	  /**
	   * @override
	   */
	  ArrayList.prototype.iterator = function iterator () {
	    return new Iterator_(this)
	  };

	  /**
	   * @override
	   */
	  ArrayList.prototype.get = function get (index) {
	    if (index < 0 || index >= this.size()) {
	      throw new IndexOutOfBoundsException()
	    }

	    return this.array_[index]
	  };

	  /**
	   * @override
	   */
	  ArrayList.prototype.isEmpty = function isEmpty () {
	    return this.array_.length === 0
	  };

	  /**
	   * @override
	   */
	  ArrayList.prototype.size = function size () {
	    return this.array_.length
	  };

	  /**
	   * @override
	   */
	  ArrayList.prototype.toArray = function toArray () {
	    var this$1 = this;

	    var array = [];

	    for (var i = 0, len = this.array_.length; i < len; i++) {
	      array.push(this$1.array_[i]);
	    }

	    return array
	  };

	  /**
	   * @override
	   */
	  ArrayList.prototype.remove = function remove (o) {
	    var this$1 = this;

	    var found = false;

	    for (var i = 0, len = this.array_.length; i < len; i++) {
	      if (this$1.array_[i] === o) {
	        this$1.array_.splice(i, 1);
	        found = true;
	        break
	      }
	    }

	    return found
	  };

	  return ArrayList;
	}(List));

	/**
	 * @extends {Iterator}
	 * @param {ArrayList} arrayList
	 * @constructor
	 * @private
	 */
	var Iterator_ = (function (Iterator$$1) {
	  function Iterator_ (arrayList) {
	    Iterator$$1.call(this);
	    /**
	     * @type {ArrayList}
	     * @private
	    */
	    this.arrayList_ = arrayList;
	    /**
	     * @type {number}
	     * @private
	    */
	    this.position_ = 0;
	  }

	  if ( Iterator$$1 ) Iterator_.__proto__ = Iterator$$1;
	  Iterator_.prototype = Object.create( Iterator$$1 && Iterator$$1.prototype );
	  Iterator_.prototype.constructor = Iterator_;

	  /**
	   * @override
	   */
	  Iterator_.prototype.next = function next () {
	    if (this.position_ === this.arrayList_.size()) {
	      throw new NoSuchElementException()
	    }
	    return this.arrayList_.get(this.position_++)
	  };

	  /**
	   * @override
	   */
	  Iterator_.prototype.hasNext = function hasNext () {
	    if (this.position_ < this.arrayList_.size()) {
	      return true
	    } else {
	      return false
	    }
	  };

	  /**
	   * TODO: should be in ListIterator
	   * @override
	   */
	  Iterator_.prototype.set = function set (element) {
	    return this.arrayList_.set(this.position_ - 1, element)
	  };

	  /**
	   * @override
	   */
	  Iterator_.prototype.remove = function remove () {
	    this.arrayList_.remove(this.arrayList_.get(this.position_));
	  };

	  return Iterator_;
	}(Iterator));

	var CoordinateList = (function (ArrayList$$1) {
	  function CoordinateList () {
	    ArrayList$$1.call(this);
	    if (arguments.length === 0) ; else if (arguments.length === 1) {
	      var coord = arguments[0];
	      this.ensureCapacity(coord.length);
	      this.add(coord, true);
	    } else if (arguments.length === 2) {
	      var coord$1 = arguments[0];
	      var allowRepeated = arguments[1];
	      this.ensureCapacity(coord$1.length);
	      this.add(coord$1, allowRepeated);
	    }
	  }

	  if ( ArrayList$$1 ) CoordinateList.__proto__ = ArrayList$$1;
	  CoordinateList.prototype = Object.create( ArrayList$$1 && ArrayList$$1.prototype );
	  CoordinateList.prototype.constructor = CoordinateList;

	  var staticAccessors = { coordArrayType: { configurable: true } };
	  staticAccessors.coordArrayType.get = function () { return new Array(0).fill(null) };
	  CoordinateList.prototype.getCoordinate = function getCoordinate (i) {
	    return this.get(i)
	  };
	  CoordinateList.prototype.addAll = function addAll () {
	    var this$1 = this;

	    if (arguments.length === 2) {
	      var coll = arguments[0];
	      var allowRepeated = arguments[1];
	      var isChanged = false;
	      for (var i = coll.iterator(); i.hasNext();) {
	        this$1.add(i.next(), allowRepeated);
	        isChanged = true;
	      }
	      return isChanged
	    } else { return ArrayList$$1.prototype.addAll.apply(this, arguments) }
	  };
	  CoordinateList.prototype.clone = function clone () {
	    var this$1 = this;

	    var clone = ArrayList$$1.prototype.clone.call(this);
	    for (var i = 0; i < this.size(); i++) {
	      clone.add(i, this$1.get(i).copy());
	    }
	    return clone
	  };
	  CoordinateList.prototype.toCoordinateArray = function toCoordinateArray () {
	    return this.toArray(CoordinateList.coordArrayType)
	  };
	  CoordinateList.prototype.add = function add () {
	    var this$1 = this;

	    if (arguments.length === 1) {
	      var coord = arguments[0];
	      ArrayList$$1.prototype.add.call(this, coord);
	    } else if (arguments.length === 2) {
	      if (arguments[0] instanceof Array && typeof arguments[1] === 'boolean') {
	        var coord$1 = arguments[0];
	        var allowRepeated = arguments[1];
	        this.add(coord$1, allowRepeated, true);
	        return true
	      } else if (arguments[0] instanceof Coordinate && typeof arguments[1] === 'boolean') {
	        var coord$2 = arguments[0];
	        var allowRepeated$1 = arguments[1];
	        if (!allowRepeated$1) {
	          if (this.size() >= 1) {
	            var last = this.get(this.size() - 1);
	            if (last.equals2D(coord$2)) { return null }
	          }
	        }
	        ArrayList$$1.prototype.add.call(this, coord$2);
	      } else if (arguments[0] instanceof Object && typeof arguments[1] === 'boolean') {
	        var obj = arguments[0];
	        var allowRepeated$2 = arguments[1];
	        this.add(obj, allowRepeated$2);
	        return true
	      }
	    } else if (arguments.length === 3) {
	      if (typeof arguments[2] === 'boolean' && (arguments[0] instanceof Array && typeof arguments[1] === 'boolean')) {
	        var coord$3 = arguments[0];
	        var allowRepeated$3 = arguments[1];
	        var direction = arguments[2];
	        if (direction) {
	          for (var i$1 = 0; i$1 < coord$3.length; i$1++) {
	            this$1.add(coord$3[i$1], allowRepeated$3);
	          }
	        } else {
	          for (var i$2 = coord$3.length - 1; i$2 >= 0; i$2--) {
	            this$1.add(coord$3[i$2], allowRepeated$3);
	          }
	        }
	        return true
	      } else if (typeof arguments[2] === 'boolean' && (Number.isInteger(arguments[0]) && arguments[1] instanceof Coordinate)) {
	        var i$3 = arguments[0];
	        var coord$4 = arguments[1];
	        var allowRepeated$4 = arguments[2];
	        if (!allowRepeated$4) {
	          var size = this.size();
	          if (size > 0) {
	            if (i$3 > 0) {
	              var prev = this.get(i$3 - 1);
	              if (prev.equals2D(coord$4)) { return null }
	            }
	            if (i$3 < size) {
	              var next = this.get(i$3);
	              if (next.equals2D(coord$4)) { return null }
	            }
	          }
	        }
	        ArrayList$$1.prototype.add.call(this, i$3, coord$4);
	      }
	    } else if (arguments.length === 4) {
	      var coord$5 = arguments[0];
	      var allowRepeated$5 = arguments[1];
	      var start = arguments[2];
	      var end = arguments[3];
	      var inc = 1;
	      if (start > end) { inc = -1; }
	      for (var i = start; i !== end; i += inc) {
	        this$1.add(coord$5[i], allowRepeated$5);
	      }
	      return true
	    }
	  };
	  CoordinateList.prototype.closeRing = function closeRing () {
	    if (this.size() > 0) { this.add(new Coordinate(this.get(0)), false); }
	  };
	  CoordinateList.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  CoordinateList.prototype.getClass = function getClass () {
	    return CoordinateList
	  };

	  Object.defineProperties( CoordinateList, staticAccessors );

	  return CoordinateList;
	}(ArrayList));

	var CoordinateArrays = function CoordinateArrays () {};

	var staticAccessors$13 = { ForwardComparator: { configurable: true },BidirectionalComparator: { configurable: true },coordArrayType: { configurable: true } };

	staticAccessors$13.ForwardComparator.get = function () { return ForwardComparator };
	staticAccessors$13.BidirectionalComparator.get = function () { return BidirectionalComparator };
	staticAccessors$13.coordArrayType.get = function () { return new Array(0).fill(null) };

	CoordinateArrays.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	CoordinateArrays.prototype.getClass = function getClass () {
	  return CoordinateArrays
	};
	CoordinateArrays.isRing = function isRing (pts) {
	  if (pts.length < 4) { return false }
	  if (!pts[0].equals2D(pts[pts.length - 1])) { return false }
	  return true
	};
	CoordinateArrays.ptNotInList = function ptNotInList (testPts, pts) {
	  for (var i = 0; i < testPts.length; i++) {
	    var testPt = testPts[i];
	    if (CoordinateArrays.indexOf(testPt, pts) < 0) { return testPt }
	  }
	  return null
	};
	CoordinateArrays.scroll = function scroll (coordinates, firstCoordinate) {
	  var i = CoordinateArrays.indexOf(firstCoordinate, coordinates);
	  if (i < 0) { return null }
	  var newCoordinates = new Array(coordinates.length).fill(null);
	  System.arraycopy(coordinates, i, newCoordinates, 0, coordinates.length - i);
	  System.arraycopy(coordinates, 0, newCoordinates, coordinates.length - i, i);
	  System.arraycopy(newCoordinates, 0, coordinates, 0, coordinates.length);
	};
	CoordinateArrays.equals = function equals () {
	  if (arguments.length === 2) {
	    var coord1 = arguments[0];
	    var coord2 = arguments[1];
	    if (coord1 === coord2) { return true }
	    if (coord1 === null || coord2 === null) { return false }
	    if (coord1.length !== coord2.length) { return false }
	    for (var i = 0; i < coord1.length; i++) {
	      if (!coord1[i].equals(coord2[i])) { return false }
	    }
	    return true
	  } else if (arguments.length === 3) {
	    var coord1$1 = arguments[0];
	    var coord2$1 = arguments[1];
	    var coordinateComparator = arguments[2];
	    if (coord1$1 === coord2$1) { return true }
	    if (coord1$1 === null || coord2$1 === null) { return false }
	    if (coord1$1.length !== coord2$1.length) { return false }
	    for (var i$1 = 0; i$1 < coord1$1.length; i$1++) {
	      if (coordinateComparator.compare(coord1$1[i$1], coord2$1[i$1]) !== 0) { return false }
	    }
	    return true
	  }
	};
	CoordinateArrays.intersection = function intersection (coordinates, env) {
	  var coordList = new CoordinateList();
	  for (var i = 0; i < coordinates.length; i++) {
	    if (env.intersects(coordinates[i])) { coordList.add(coordinates[i], true); }
	  }
	  return coordList.toCoordinateArray()
	};
	CoordinateArrays.hasRepeatedPoints = function hasRepeatedPoints (coord) {
	  for (var i = 1; i < coord.length; i++) {
	    if (coord[i - 1].equals(coord[i])) {
	      return true
	    }
	  }
	  return false
	};
	CoordinateArrays.removeRepeatedPoints = function removeRepeatedPoints (coord) {
	  if (!CoordinateArrays.hasRepeatedPoints(coord)) { return coord }
	  var coordList = new CoordinateList(coord, false);
	  return coordList.toCoordinateArray()
	};
	CoordinateArrays.reverse = function reverse (coord) {
	  var last = coord.length - 1;
	  var mid = Math.trunc(last / 2);
	  for (var i = 0; i <= mid; i++) {
	    var tmp = coord[i];
	    coord[i] = coord[last - i];
	    coord[last - i] = tmp;
	  }
	};
	CoordinateArrays.removeNull = function removeNull (coord) {
	  var nonNull = 0;
	  for (var i = 0; i < coord.length; i++) {
	    if (coord[i] !== null) { nonNull++; }
	  }
	  var newCoord = new Array(nonNull).fill(null);
	  if (nonNull === 0) { return newCoord }
	  var j = 0;
	  for (var i$1 = 0; i$1 < coord.length; i$1++) {
	    if (coord[i$1] !== null) { newCoord[j++] = coord[i$1]; }
	  }
	  return newCoord
	};
	CoordinateArrays.copyDeep = function copyDeep () {
	  if (arguments.length === 1) {
	    var coordinates = arguments[0];
	    var copy = new Array(coordinates.length).fill(null);
	    for (var i = 0; i < coordinates.length; i++) {
	      copy[i] = new Coordinate(coordinates[i]);
	    }
	    return copy
	  } else if (arguments.length === 5) {
	    var src = arguments[0];
	    var srcStart = arguments[1];
	    var dest = arguments[2];
	    var destStart = arguments[3];
	    var length = arguments[4];
	    for (var i$1 = 0; i$1 < length; i$1++) {
	      dest[destStart + i$1] = new Coordinate(src[srcStart + i$1]);
	    }
	  }
	};
	CoordinateArrays.isEqualReversed = function isEqualReversed (pts1, pts2) {
	  for (var i = 0; i < pts1.length; i++) {
	    var p1 = pts1[i];
	    var p2 = pts2[pts1.length - i - 1];
	    if (p1.compareTo(p2) !== 0) { return false }
	  }
	  return true
	};
	CoordinateArrays.envelope = function envelope (coordinates) {
	  var env = new Envelope();
	  for (var i = 0; i < coordinates.length; i++) {
	    env.expandToInclude(coordinates[i]);
	  }
	  return env
	};
	CoordinateArrays.toCoordinateArray = function toCoordinateArray (coordList) {
	  return coordList.toArray(CoordinateArrays.coordArrayType)
	};
	CoordinateArrays.atLeastNCoordinatesOrNothing = function atLeastNCoordinatesOrNothing (n, c) {
	  return c.length >= n ? c : []
	};
	CoordinateArrays.indexOf = function indexOf (coordinate, coordinates) {
	  for (var i = 0; i < coordinates.length; i++) {
	    if (coordinate.equals(coordinates[i])) {
	      return i
	    }
	  }
	  return -1
	};
	CoordinateArrays.increasingDirection = function increasingDirection (pts) {
	  for (var i = 0; i < Math.trunc(pts.length / 2); i++) {
	    var j = pts.length - 1 - i;
	    var comp = pts[i].compareTo(pts[j]);
	    if (comp !== 0) { return comp }
	  }
	  return 1
	};
	CoordinateArrays.compare = function compare (pts1, pts2) {
	  var i = 0;
	  while (i < pts1.length && i < pts2.length) {
	    var compare = pts1[i].compareTo(pts2[i]);
	    if (compare !== 0) { return compare }
	    i++;
	  }
	  if (i < pts2.length) { return -1 }
	  if (i < pts1.length) { return 1 }
	  return 0
	};
	CoordinateArrays.minCoordinate = function minCoordinate (coordinates) {
	  var minCoord = null;
	  for (var i = 0; i < coordinates.length; i++) {
	    if (minCoord === null || minCoord.compareTo(coordinates[i]) > 0) {
	      minCoord = coordinates[i];
	    }
	  }
	  return minCoord
	};
	CoordinateArrays.extract = function extract (pts, start, end) {
	  start = MathUtil.clamp(start, 0, pts.length);
	  end = MathUtil.clamp(end, -1, pts.length);
	  var npts = end - start + 1;
	  if (end < 0) { npts = 0; }
	  if (start >= pts.length) { npts = 0; }
	  if (end < start) { npts = 0; }
	  var extractPts = new Array(npts).fill(null);
	  if (npts === 0) { return extractPts }
	  var iPts = 0;
	  for (var i = start; i <= end; i++) {
	    extractPts[iPts++] = pts[i];
	  }
	  return extractPts
	};

	Object.defineProperties( CoordinateArrays, staticAccessors$13 );

	var ForwardComparator = function ForwardComparator () {};

	ForwardComparator.prototype.compare = function compare (o1, o2) {
	  var pts1 = o1;
	  var pts2 = o2;
	  return CoordinateArrays.compare(pts1, pts2)
	};
	ForwardComparator.prototype.interfaces_ = function interfaces_ () {
	  return [Comparator]
	};
	ForwardComparator.prototype.getClass = function getClass () {
	  return ForwardComparator
	};

	var BidirectionalComparator = function BidirectionalComparator () {};

	BidirectionalComparator.prototype.compare = function compare (o1, o2) {
	  var pts1 = o1;
	  var pts2 = o2;
	  if (pts1.length < pts2.length) { return -1 }
	  if (pts1.length > pts2.length) { return 1 }
	  if (pts1.length === 0) { return 0 }
	  var forwardComp = CoordinateArrays.compare(pts1, pts2);
	  var isEqualRev = CoordinateArrays.isEqualReversed(pts1, pts2);
	  if (isEqualRev) { return 0 }
	  return forwardComp
	};
	BidirectionalComparator.prototype.OLDcompare = function OLDcompare (o1, o2) {
	  var pts1 = o1;
	  var pts2 = o2;
	  if (pts1.length < pts2.length) { return -1 }
	  if (pts1.length > pts2.length) { return 1 }
	  if (pts1.length === 0) { return 0 }
	  var dir1 = CoordinateArrays.increasingDirection(pts1);
	  var dir2 = CoordinateArrays.increasingDirection(pts2);
	  var i1 = dir1 > 0 ? 0 : pts1.length - 1;
	  var i2 = dir2 > 0 ? 0 : pts1.length - 1;
	  for (var i = 0; i < pts1.length; i++) {
	    var comparePt = pts1[i1].compareTo(pts2[i2]);
	    if (comparePt !== 0) { return comparePt }
	    i1 += dir1;
	    i2 += dir2;
	  }
	  return 0
	};
	BidirectionalComparator.prototype.interfaces_ = function interfaces_ () {
	  return [Comparator]
	};
	BidirectionalComparator.prototype.getClass = function getClass () {
	  return BidirectionalComparator
	};

	/**
	 * @see http://download.oracle.com/javase/6/docs/api/java/util/Map.html
	 *
	 * @constructor
	 * @private
	 */
	var Map$1 = function Map () {};

	Map$1.prototype.get = function get () {};
	/**
	 * Associates the specified value with the specified key in this map (optional
	 * operation).
	 * @param {Object} key
	 * @param {Object} value
	 * @return {Object}
	 */
	Map$1.prototype.put = function put () {};

	/**
	 * Returns the number of key-value mappings in this map.
	 * @return {number}
	 */
	Map$1.prototype.size = function size () {};

	/**
	 * Returns a Collection view of the values contained in this map.
	 * @return {javascript.util.Collection}
	 */
	Map$1.prototype.values = function values () {};

	/**
	 * Returns a {@link Set} view of the mappings contained in this map.
	 * The set is backed by the map, so changes to the map are
	 * reflected in the set, and vice-versa.If the map is modified
	 * while an iteration over the set is in progress (except through
	 * the iterator's own <tt>remove</tt> operation, or through the
	 * <tt>setValue</tt> operation on a map entry returned by the
	 * iterator) the results of the iteration are undefined.The set
	 * supports element removal, which removes the corresponding
	 * mapping from the map, via the <tt>Iterator.remove</tt>,
	 * <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and
	 * <tt>clear</tt> operations.It does not support the
	 * <tt>add</tt> or <tt>addAll</tt> operations.
	 *
	 * @return {Set} a set view of the mappings contained in this map
	 */
	Map$1.prototype.entrySet = function entrySet () {};

	/**
	 * @see http://download.oracle.com/javase/6/docs/api/java/util/SortedMap.html
	 *
	 * @extends {Map}
	 * @constructor
	 * @private
	 */
	var SortedMap = (function (Map) {
		function SortedMap () {
			Map.apply(this, arguments);
		}if ( Map ) SortedMap.__proto__ = Map;
		SortedMap.prototype = Object.create( Map && Map.prototype );
		SortedMap.prototype.constructor = SortedMap;

		

		return SortedMap;
	}(Map$1));

	/**
	 * @param {string=} message Optional message
	 * @extends {Error}
	 * @constructor
	 * @private
	 */
	function OperationNotSupported (message) {
	  this.message = message || '';
	}
	OperationNotSupported.prototype = new Error();

	/**
	 * @type {string}
	 */
	OperationNotSupported.prototype.name = 'OperationNotSupported';

	/**
	 * @see http://download.oracle.com/javase/6/docs/api/java/util/Set.html
	 *
	 * @extends {Collection}
	 * @constructor
	 * @private
	 */
	function Set() {}
	Set.prototype = new Collection();


	/**
	 * Returns true if this set contains the specified element. More formally,
	 * returns true if and only if this set contains an element e such that (o==null ?
	 * e==null : o.equals(e)).
	 * @param {Object} e
	 * @return {boolean}
	 */
	Set.prototype.contains = function() {};

	/**
	 * @see http://docs.oracle.com/javase/6/docs/api/java/util/HashSet.html
	 *
	 * @extends {javascript.util.Set}
	 * @constructor
	 * @private
	 */
	var HashSet = (function (Set$$1) {
	  function HashSet () {
	    Set$$1.call(this);
	    this.array_ = [];

	    if (arguments[0] instanceof Collection) {
	      this.addAll(arguments[0]);
	    }
	  }

	  if ( Set$$1 ) HashSet.__proto__ = Set$$1;
	  HashSet.prototype = Object.create( Set$$1 && Set$$1.prototype );
	  HashSet.prototype.constructor = HashSet;

	  /**
	   * @override
	   */
	  HashSet.prototype.contains = function contains (o) {
	    var this$1 = this;

	    for (var i = 0, len = this.array_.length; i < len; i++) {
	      var e = this$1.array_[i];
	      if (e === o) {
	        return true
	      }
	    }
	    return false
	  };

	  /**
	   * @override
	   */
	  HashSet.prototype.add = function add (o) {
	    if (this.contains(o)) {
	      return false
	    }

	    this.array_.push(o);

	    return true
	  };

	  /**
	   * @override
	   */
	  HashSet.prototype.addAll = function addAll (c) {
	    var this$1 = this;

	    for (var i = c.iterator(); i.hasNext();) {
	      this$1.add(i.next());
	    }
	    return true
	  };

	  /**
	   * @override
	   */
	  HashSet.prototype.remove = function remove (o) {
	    // throw new javascript.util.OperationNotSupported()
	    throw new Error()
	  };

	  /**
	   * @override
	   */
	  HashSet.prototype.size = function size () {
	    return this.array_.length
	  };

	  /**
	   * @override
	   */
	  HashSet.prototype.isEmpty = function isEmpty () {
	    return this.array_.length === 0
	  };

	  /**
	   * @override
	   */
	  HashSet.prototype.toArray = function toArray () {
	    var this$1 = this;

	    var array = [];

	    for (var i = 0, len = this.array_.length; i < len; i++) {
	      array.push(this$1.array_[i]);
	    }

	    return array
	  };

	  /**
	   * @override
	   */
	  HashSet.prototype.iterator = function iterator () {
	    return new Iterator_$1(this)
	  };

	  return HashSet;
	}(Set));

	/**
	   * @extends {Iterator}
	   * @param {HashSet} hashSet
	   * @constructor
	   * @private
	   */
	var Iterator_$1 = (function (Iterator$$1) {
	  function Iterator_ (hashSet) {
	    Iterator$$1.call(this);
	    /**
	     * @type {HashSet}
	     * @private
	     */
	    this.hashSet_ = hashSet;
	    /**
	     * @type {number}
	     * @private
	     */
	    this.position_ = 0;
	  }

	  if ( Iterator$$1 ) Iterator_.__proto__ = Iterator$$1;
	  Iterator_.prototype = Object.create( Iterator$$1 && Iterator$$1.prototype );
	  Iterator_.prototype.constructor = Iterator_;

	  /**
	   * @override
	   */
	  Iterator_.prototype.next = function next () {
	    if (this.position_ === this.hashSet_.size()) {
	      throw new NoSuchElementException()
	    }
	    return this.hashSet_.array_[this.position_++]
	  };

	  /**
	   * @override
	   */
	  Iterator_.prototype.hasNext = function hasNext () {
	    if (this.position_ < this.hashSet_.size()) {
	      return true
	    } else {
	      return false
	    }
	  };

	  /**
	   * @override
	   */
	  Iterator_.prototype.remove = function remove () {
	    throw new OperationNotSupported()
	  };

	  return Iterator_;
	}(Iterator));

	var BLACK = 0;
	var RED = 1;
	function colorOf (p) { return (p === null ? BLACK : p.color) }
	function parentOf (p) { return (p === null ? null : p.parent) }
	function setColor (p, c) { if (p !== null) { p.color = c; } }
	function leftOf (p) { return (p === null ? null : p.left) }
	function rightOf (p) { return (p === null ? null : p.right) }

	/**
	 * @see http://download.oracle.com/javase/6/docs/api/java/util/TreeMap.html
	 *
	 * @extends {SortedMap}
	 * @constructor
	 * @private
	 */
	function TreeMap () {
	  /**
	   * @type {Object}
	   * @private
	   */
	  this.root_ = null;
	  /**
	   * @type {number}
	   * @private
	  */
	  this.size_ = 0;
	}
	TreeMap.prototype = new SortedMap();

	/**
	 * @override
	 */
	TreeMap.prototype.get = function (key) {
	  var p = this.root_;
	  while (p !== null) {
	    var cmp = key['compareTo'](p.key);
	    if (cmp < 0) { p = p.left; }
	    else if (cmp > 0) { p = p.right; }
	    else { return p.value }
	  }
	  return null
	};

	/**
	 * @override
	 */
	TreeMap.prototype.put = function (key, value) {
	  if (this.root_ === null) {
	    this.root_ = {
	      key: key,
	      value: value,
	      left: null,
	      right: null,
	      parent: null,
	      color: BLACK,
	      getValue: function getValue () { return this.value },
	      getKey: function getKey () { return this.key }
	    };
	    this.size_ = 1;
	    return null
	  }
	  var t = this.root_;
	  var parent;
	  var cmp;
	  do {
	    parent = t;
	    cmp = key['compareTo'](t.key);
	    if (cmp < 0) {
	      t = t.left;
	    } else if (cmp > 0) {
	      t = t.right;
	    } else {
	      var oldValue = t.value;
	      t.value = value;
	      return oldValue
	    }
	  } while (t !== null)
	  var e = {
	    key: key,
	    left: null,
	    right: null,
	    value: value,
	    parent: parent,
	    color: BLACK,
	    getValue: function getValue () { return this.value },
	    getKey: function getKey () { return this.key }
	  };
	  if (cmp < 0) {
	    parent.left = e;
	  } else {
	    parent.right = e;
	  }
	  this.fixAfterInsertion(e);
	  this.size_++;
	  return null
	};

	/**
	 * @param {Object} x
	 */
	TreeMap.prototype.fixAfterInsertion = function (x) {
	  var this$1 = this;

	  x.color = RED;
	  while (x != null && x !== this.root_ && x.parent.color === RED) {
	    if (parentOf(x) === leftOf(parentOf(parentOf(x)))) {
	      var y = rightOf(parentOf(parentOf(x)));
	      if (colorOf(y) === RED) {
	        setColor(parentOf(x), BLACK);
	        setColor(y, BLACK);
	        setColor(parentOf(parentOf(x)), RED);
	        x = parentOf(parentOf(x));
	      } else {
	        if (x === rightOf(parentOf(x))) {
	          x = parentOf(x);
	          this$1.rotateLeft(x);
	        }
	        setColor(parentOf(x), BLACK);
	        setColor(parentOf(parentOf(x)), RED);
	        this$1.rotateRight(parentOf(parentOf(x)));
	      }
	    } else {
	      var y$1 = leftOf(parentOf(parentOf(x)));
	      if (colorOf(y$1) === RED) {
	        setColor(parentOf(x), BLACK);
	        setColor(y$1, BLACK);
	        setColor(parentOf(parentOf(x)), RED);
	        x = parentOf(parentOf(x));
	      } else {
	        if (x === leftOf(parentOf(x))) {
	          x = parentOf(x);
	          this$1.rotateRight(x);
	        }
	        setColor(parentOf(x), BLACK);
	        setColor(parentOf(parentOf(x)), RED);
	        this$1.rotateLeft(parentOf(parentOf(x)));
	      }
	    }
	  }
	  this.root_.color = BLACK;
	};

	/**
	 * @override
	 */
	TreeMap.prototype.values = function () {
	  var arrayList = new ArrayList();
	  var p = this.getFirstEntry();
	  if (p !== null) {
	    arrayList.add(p.value);
	    while ((p = TreeMap.successor(p)) !== null) {
	      arrayList.add(p.value);
	    }
	  }
	  return arrayList
	};

	/**
	 * @override
	 */
	TreeMap.prototype.entrySet = function () {
	  var hashSet = new HashSet();
	  var p = this.getFirstEntry();
	  if (p !== null) {
	    hashSet.add(p);
	    while ((p = TreeMap.successor(p)) !== null) {
	      hashSet.add(p);
	    }
	  }
	  return hashSet
	};

	/**
	 * @param {Object} p
	 */
	TreeMap.prototype.rotateLeft = function (p) {
	  if (p != null) {
	    var r = p.right;
	    p.right = r.left;
	    if (r.left != null) { r.left.parent = p; }
	    r.parent = p.parent;
	    if (p.parent === null) { this.root_ = r; } else if (p.parent.left === p) { p.parent.left = r; } else { p.parent.right = r; }
	    r.left = p;
	    p.parent = r;
	  }
	};

	/**
	 * @param {Object} p
	 */
	TreeMap.prototype.rotateRight = function (p) {
	  if (p != null) {
	    var l = p.left;
	    p.left = l.right;
	    if (l.right != null) { l.right.parent = p; }
	    l.parent = p.parent;
	    if (p.parent === null) { this.root_ = l; } else if (p.parent.right === p) { p.parent.right = l; } else { p.parent.left = l; }
	    l.right = p;
	    p.parent = l;
	  }
	};

	/**
	 * @return {Object}
	 */
	TreeMap.prototype.getFirstEntry = function () {
	  var p = this.root_;
	  if (p != null) {
	    while (p.left != null) {
	      p = p.left;
	    }
	  }
	  return p
	};

	/**
	 * @param {Object} t
	 * @return {Object}
	 * @private
	 */
	TreeMap.successor = function (t) {
	  if (t === null) { return null } else if (t.right !== null) {
	    var p = t.right;
	    while (p.left !== null) {
	      p = p.left;
	    }
	    return p
	  } else {
	    var p$1 = t.parent;
	    var ch = t;
	    while (p$1 !== null && ch === p$1.right) {
	      ch = p$1;
	      p$1 = p$1.parent;
	    }
	    return p$1
	  }
	};

	/**
	 * @override
	 */
	TreeMap.prototype.size = function () {
	  return this.size_
	};

	var Lineal = function Lineal () {};

	Lineal.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Lineal.prototype.getClass = function getClass () {
	  return Lineal
	};

	/**
	 * @see http://download.oracle.com/javase/6/docs/api/java/util/SortedSet.html
	 *
	 * @extends {Set}
	 * @constructor
	 * @private
	 */
	function SortedSet () {}
	SortedSet.prototype = new Set();

	// import Iterator from './Iterator'
	/**
	 * @see http://download.oracle.com/javase/6/docs/api/java/util/TreeSet.html
	 *
	 * @extends {SortedSet}
	 * @constructor
	 * @private
	 */
	function TreeSet () {
	  /**
	   * @type {Array}
	   * @private
	  */
	  this.array_ = [];

	  if (arguments[0] instanceof Collection) {
	    this.addAll(arguments[0]);
	  }
	}
	TreeSet.prototype = new SortedSet();

	/**
	 * @override
	 */
	TreeSet.prototype.contains = function (o) {
	  var this$1 = this;

	  for (var i = 0, len = this.array_.length; i < len; i++) {
	    var e = this$1.array_[i];
	    if (e['compareTo'](o) === 0) {
	      return true
	    }
	  }
	  return false
	};

	/**
	 * @override
	 */
	TreeSet.prototype.add = function (o) {
	  var this$1 = this;

	  if (this.contains(o)) {
	    return false
	  }

	  for (var i = 0, len = this.array_.length; i < len; i++) {
	    var e = this$1.array_[i];
	    if (e['compareTo'](o) === 1) {
	      this$1.array_.splice(i, 0, o);
	      return true
	    }
	  }

	  this.array_.push(o);

	  return true
	};

	/**
	 * @override
	 */
	TreeSet.prototype.addAll = function (c) {
	  var this$1 = this;

	  for (var i = c.iterator(); i.hasNext();) {
	    this$1.add(i.next());
	  }
	  return true
	};

	/**
	 * @override
	 */
	TreeSet.prototype.remove = function (e) {
	  throw new OperationNotSupported()
	};

	/**
	 * @override
	 */
	TreeSet.prototype.size = function () {
	  return this.array_.length
	};

	/**
	 * @override
	 */
	TreeSet.prototype.isEmpty = function () {
	  return this.array_.length === 0
	};

	/**
	 * @override
	 */
	TreeSet.prototype.toArray = function () {
	  var this$1 = this;

	  var array = [];

	  for (var i = 0, len = this.array_.length; i < len; i++) {
	    array.push(this$1.array_[i]);
	  }

	  return array
	};

	/**
	 * @override
	 */
	TreeSet.prototype.iterator = function () {
	  return new Iterator_$2(this)
	};

	/**
	 * @extends {javascript.util.Iterator}
	 * @param {javascript.util.TreeSet} treeSet
	 * @constructor
	 * @private
	 */
	var Iterator_$2 = function (treeSet) {
	  /**
	   * @type {javascript.util.TreeSet}
	   * @private
	   */
	  this.treeSet_ = treeSet;
	  /**
	   * @type {number}
	   * @private
	   */
	  this.position_ = 0;
	};

	/**
	 * @override
	 */
	Iterator_$2.prototype.next = function () {
	  if (this.position_ === this.treeSet_.size()) {
	    throw new NoSuchElementException()
	  }
	  return this.treeSet_.array_[this.position_++]
	};

	/**
	 * @override
	 */
	Iterator_$2.prototype.hasNext = function () {
	  if (this.position_ < this.treeSet_.size()) {
	    return true
	  } else {
	    return false
	  }
	};

	/**
	 * @override
	 */
	Iterator_$2.prototype.remove = function () {
	  throw new OperationNotSupported()
	};

	/**
	 * @see http://download.oracle.com/javase/6/docs/api/java/util/Arrays.html
	 *
	 * @constructor
	 * @private
	 */
	var Arrays = function Arrays () {};

	Arrays.sort = function sort () {
	  var a = arguments[0];
	  var i;
	  var t;
	  var comparator;
	  var compare;
	  if (arguments.length === 1) {
	    compare = function (a, b) {
	      return a.compareTo(b)
	    };
	    a.sort(compare);
	  } else if (arguments.length === 2) {
	    comparator = arguments[1];
	    compare = function (a, b) {
	      return comparator['compare'](a, b)
	    };
	    a.sort(compare);
	  } else if (arguments.length === 3) {
	    t = a.slice(arguments[1], arguments[2]);
	    t.sort();
	    var r = a.slice(0, arguments[1]).concat(t, a.slice(arguments[2], a.length));
	    a.splice(0, a.length);
	    for (i = 0; i < r.length; i++) {
	      a.push(r[i]);
	    }
	  } else if (arguments.length === 4) {
	    t = a.slice(arguments[1], arguments[2]);
	    comparator = arguments[3];
	    compare = function (a, b) {
	      return comparator['compare'](a, b)
	    };
	    t.sort(compare);
	    r = a.slice(0, arguments[1]).concat(t, a.slice(arguments[2], a.length));
	    a.splice(0, a.length);
	    for (i = 0; i < r.length; i++) {
	      a.push(r[i]);
	    }
	  }
	};
	/**
	 * @param {Array} array
	 * @return {ArrayList}
	 */
	Arrays.asList = function asList (array) {
	  var arrayList = new ArrayList();
	  for (var i = 0, len = array.length; i < len; i++) {
	    arrayList.add(array[i]);
	  }
	  return arrayList
	};

	var Dimension = function Dimension () {};

	var staticAccessors$14 = { P: { configurable: true },L: { configurable: true },A: { configurable: true },FALSE: { configurable: true },TRUE: { configurable: true },DONTCARE: { configurable: true },SYM_FALSE: { configurable: true },SYM_TRUE: { configurable: true },SYM_DONTCARE: { configurable: true },SYM_P: { configurable: true },SYM_L: { configurable: true },SYM_A: { configurable: true } };

	staticAccessors$14.P.get = function () { return 0 };
	staticAccessors$14.L.get = function () { return 1 };
	staticAccessors$14.A.get = function () { return 2 };
	staticAccessors$14.FALSE.get = function () { return -1 };
	staticAccessors$14.TRUE.get = function () { return -2 };
	staticAccessors$14.DONTCARE.get = function () { return -3 };
	staticAccessors$14.SYM_FALSE.get = function () { return 'F' };
	staticAccessors$14.SYM_TRUE.get = function () { return 'T' };
	staticAccessors$14.SYM_DONTCARE.get = function () { return '*' };
	staticAccessors$14.SYM_P.get = function () { return '0' };
	staticAccessors$14.SYM_L.get = function () { return '1' };
	staticAccessors$14.SYM_A.get = function () { return '2' };

	Dimension.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Dimension.prototype.getClass = function getClass () {
	  return Dimension
	};
	Dimension.toDimensionSymbol = function toDimensionSymbol (dimensionValue) {
	  switch (dimensionValue) {
	    case Dimension.FALSE:
	      return Dimension.SYM_FALSE
	    case Dimension.TRUE:
	      return Dimension.SYM_TRUE
	    case Dimension.DONTCARE:
	      return Dimension.SYM_DONTCARE
	    case Dimension.P:
	      return Dimension.SYM_P
	    case Dimension.L:
	      return Dimension.SYM_L
	    case Dimension.A:
	      return Dimension.SYM_A
	  }
	  throw new IllegalArgumentException('Unknown dimension value: ' + dimensionValue)
	};
	Dimension.toDimensionValue = function toDimensionValue (dimensionSymbol) {
	  switch (Character.toUpperCase(dimensionSymbol)) {
	    case Dimension.SYM_FALSE:
	      return Dimension.FALSE
	    case Dimension.SYM_TRUE:
	      return Dimension.TRUE
	    case Dimension.SYM_DONTCARE:
	      return Dimension.DONTCARE
	    case Dimension.SYM_P:
	      return Dimension.P
	    case Dimension.SYM_L:
	      return Dimension.L
	    case Dimension.SYM_A:
	      return Dimension.A
	  }
	  throw new IllegalArgumentException('Unknown dimension symbol: ' + dimensionSymbol)
	};

	Object.defineProperties( Dimension, staticAccessors$14 );

	var GeometryFilter = function GeometryFilter () {};

	GeometryFilter.prototype.filter = function filter (geom) {};
	GeometryFilter.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	GeometryFilter.prototype.getClass = function getClass () {
	  return GeometryFilter
	};

	var CoordinateSequenceFilter = function CoordinateSequenceFilter () {};

	CoordinateSequenceFilter.prototype.filter = function filter (seq, i) {};
	CoordinateSequenceFilter.prototype.isDone = function isDone () {};
	CoordinateSequenceFilter.prototype.isGeometryChanged = function isGeometryChanged () {};
	CoordinateSequenceFilter.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	CoordinateSequenceFilter.prototype.getClass = function getClass () {
	  return CoordinateSequenceFilter
	};

	var GeometryCollection = (function (Geometry$$1) {
	  function GeometryCollection (geometries, factory) {
	    Geometry$$1.call(this, factory);
	    this._geometries = geometries || [];

	    if (Geometry$$1.hasNullElements(this._geometries)) {
	      throw new IllegalArgumentException('geometries must not contain null elements')
	    }
	  }

	  if ( Geometry$$1 ) GeometryCollection.__proto__ = Geometry$$1;
	  GeometryCollection.prototype = Object.create( Geometry$$1 && Geometry$$1.prototype );
	  GeometryCollection.prototype.constructor = GeometryCollection;

	  var staticAccessors = { serialVersionUID: { configurable: true } };
	  GeometryCollection.prototype.computeEnvelopeInternal = function computeEnvelopeInternal () {
	    var this$1 = this;

	    var envelope = new Envelope();
	    for (var i = 0; i < this._geometries.length; i++) {
	      envelope.expandToInclude(this$1._geometries[i].getEnvelopeInternal());
	    }
	    return envelope
	  };
	  GeometryCollection.prototype.getGeometryN = function getGeometryN (n) {
	    return this._geometries[n]
	  };
	  GeometryCollection.prototype.getSortIndex = function getSortIndex () {
	    return Geometry$$1.SORTINDEX_GEOMETRYCOLLECTION
	  };
	  GeometryCollection.prototype.getCoordinates = function getCoordinates () {
	    var this$1 = this;

	    var coordinates = new Array(this.getNumPoints()).fill(null);
	    var k = -1;
	    for (var i = 0; i < this._geometries.length; i++) {
	      var childCoordinates = this$1._geometries[i].getCoordinates();
	      for (var j = 0; j < childCoordinates.length; j++) {
	        k++;
	        coordinates[k] = childCoordinates[j];
	      }
	    }
	    return coordinates
	  };
	  GeometryCollection.prototype.getArea = function getArea () {
	    var this$1 = this;

	    var area = 0.0;
	    for (var i = 0; i < this._geometries.length; i++) {
	      area += this$1._geometries[i].getArea();
	    }
	    return area
	  };
	  GeometryCollection.prototype.equalsExact = function equalsExact () {
	    var this$1 = this;

	    if (arguments.length === 2) {
	      var other = arguments[0];
	      var tolerance = arguments[1];
	      if (!this.isEquivalentClass(other)) {
	        return false
	      }
	      var otherCollection = other;
	      if (this._geometries.length !== otherCollection._geometries.length) {
	        return false
	      }
	      for (var i = 0; i < this._geometries.length; i++) {
	        if (!this$1._geometries[i].equalsExact(otherCollection._geometries[i], tolerance)) {
	          return false
	        }
	      }
	      return true
	    } else { return Geometry$$1.prototype.equalsExact.apply(this, arguments) }
	  };
	  GeometryCollection.prototype.normalize = function normalize () {
	    var this$1 = this;

	    for (var i = 0; i < this._geometries.length; i++) {
	      this$1._geometries[i].normalize();
	    }
	    Arrays.sort(this._geometries);
	  };
	  GeometryCollection.prototype.getCoordinate = function getCoordinate () {
	    if (this.isEmpty()) { return null }
	    return this._geometries[0].getCoordinate()
	  };
	  GeometryCollection.prototype.getBoundaryDimension = function getBoundaryDimension () {
	    var this$1 = this;

	    var dimension = Dimension.FALSE;
	    for (var i = 0; i < this._geometries.length; i++) {
	      dimension = Math.max(dimension, this$1._geometries[i].getBoundaryDimension());
	    }
	    return dimension
	  };
	  GeometryCollection.prototype.getDimension = function getDimension () {
	    var this$1 = this;

	    var dimension = Dimension.FALSE;
	    for (var i = 0; i < this._geometries.length; i++) {
	      dimension = Math.max(dimension, this$1._geometries[i].getDimension());
	    }
	    return dimension
	  };
	  GeometryCollection.prototype.getLength = function getLength () {
	    var this$1 = this;

	    var sum = 0.0;
	    for (var i = 0; i < this._geometries.length; i++) {
	      sum += this$1._geometries[i].getLength();
	    }
	    return sum
	  };
	  GeometryCollection.prototype.getNumPoints = function getNumPoints () {
	    var this$1 = this;

	    var numPoints = 0;
	    for (var i = 0; i < this._geometries.length; i++) {
	      numPoints += this$1._geometries[i].getNumPoints();
	    }
	    return numPoints
	  };
	  GeometryCollection.prototype.getNumGeometries = function getNumGeometries () {
	    return this._geometries.length
	  };
	  GeometryCollection.prototype.reverse = function reverse () {
	    var this$1 = this;

	    var n = this._geometries.length;
	    var revGeoms = new Array(n).fill(null);
	    for (var i = 0; i < this._geometries.length; i++) {
	      revGeoms[i] = this$1._geometries[i].reverse();
	    }
	    return this.getFactory().createGeometryCollection(revGeoms)
	  };
	  GeometryCollection.prototype.compareToSameClass = function compareToSameClass () {
	    var this$1 = this;

	    if (arguments.length === 1) {
	      var o = arguments[0];
	      var theseElements = new TreeSet(Arrays.asList(this._geometries));
	      var otherElements = new TreeSet(Arrays.asList(o._geometries));
	      return this.compare(theseElements, otherElements)
	    } else if (arguments.length === 2) {
	      var o$1 = arguments[0];
	      var comp = arguments[1];
	      var gc = o$1;
	      var n1 = this.getNumGeometries();
	      var n2 = gc.getNumGeometries();
	      var i = 0;
	      while (i < n1 && i < n2) {
	        var thisGeom = this$1.getGeometryN(i);
	        var otherGeom = gc.getGeometryN(i);
	        var holeComp = thisGeom.compareToSameClass(otherGeom, comp);
	        if (holeComp !== 0) { return holeComp }
	        i++;
	      }
	      if (i < n1) { return 1 }
	      if (i < n2) { return -1 }
	      return 0
	    }
	  };
	  GeometryCollection.prototype.apply = function apply () {
	    var this$1 = this;

	    if (hasInterface(arguments[0], CoordinateFilter)) {
	      var filter = arguments[0];
	      for (var i = 0; i < this._geometries.length; i++) {
	        this$1._geometries[i].apply(filter);
	      }
	    } else if (hasInterface(arguments[0], CoordinateSequenceFilter)) {
	      var filter$1 = arguments[0];
	      if (this._geometries.length === 0) { return null }
	      for (var i$1 = 0; i$1 < this._geometries.length; i$1++) {
	        this$1._geometries[i$1].apply(filter$1);
	        if (filter$1.isDone()) {
	          break
	        }
	      }
	      if (filter$1.isGeometryChanged()) { this.geometryChanged(); }
	    } else if (hasInterface(arguments[0], GeometryFilter)) {
	      var filter$2 = arguments[0];
	      filter$2.filter(this);
	      for (var i$2 = 0; i$2 < this._geometries.length; i$2++) {
	        this$1._geometries[i$2].apply(filter$2);
	      }
	    } else if (hasInterface(arguments[0], GeometryComponentFilter)) {
	      var filter$3 = arguments[0];
	      filter$3.filter(this);
	      for (var i$3 = 0; i$3 < this._geometries.length; i$3++) {
	        this$1._geometries[i$3].apply(filter$3);
	      }
	    }
	  };
	  GeometryCollection.prototype.getBoundary = function getBoundary () {
	    this.checkNotGeometryCollection(this);
	    Assert.shouldNeverReachHere();
	    return null
	  };
	  GeometryCollection.prototype.clone = function clone () {
	    var this$1 = this;

	    var gc = Geometry$$1.prototype.clone.call(this);
	    gc._geometries = new Array(this._geometries.length).fill(null);
	    for (var i = 0; i < this._geometries.length; i++) {
	      gc._geometries[i] = this$1._geometries[i].clone();
	    }
	    return gc
	  };
	  GeometryCollection.prototype.getGeometryType = function getGeometryType () {
	    return 'GeometryCollection'
	  };
	  GeometryCollection.prototype.copy = function copy () {
	    var this$1 = this;

	    var geometries = new Array(this._geometries.length).fill(null);
	    for (var i = 0; i < geometries.length; i++) {
	      geometries[i] = this$1._geometries[i].copy();
	    }
	    return new GeometryCollection(geometries, this._factory)
	  };
	  GeometryCollection.prototype.isEmpty = function isEmpty () {
	    var this$1 = this;

	    for (var i = 0; i < this._geometries.length; i++) {
	      if (!this$1._geometries[i].isEmpty()) {
	        return false
	      }
	    }
	    return true
	  };
	  GeometryCollection.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  GeometryCollection.prototype.getClass = function getClass () {
	    return GeometryCollection
	  };
	  staticAccessors.serialVersionUID.get = function () { return -5694727726395021467 };

	  Object.defineProperties( GeometryCollection, staticAccessors );

	  return GeometryCollection;
	}(Geometry));

	var MultiLineString = (function (GeometryCollection$$1) {
	  function MultiLineString () {
	    GeometryCollection$$1.apply(this, arguments);
	  }

	  if ( GeometryCollection$$1 ) MultiLineString.__proto__ = GeometryCollection$$1;
	  MultiLineString.prototype = Object.create( GeometryCollection$$1 && GeometryCollection$$1.prototype );
	  MultiLineString.prototype.constructor = MultiLineString;

	  var staticAccessors = { serialVersionUID: { configurable: true } };

	  MultiLineString.prototype.getSortIndex = function getSortIndex () {
	    return Geometry.SORTINDEX_MULTILINESTRING
	  };
	  MultiLineString.prototype.equalsExact = function equalsExact () {
	    if (arguments.length === 2) {
	      var other = arguments[0];
	      var tolerance = arguments[1];
	      if (!this.isEquivalentClass(other)) {
	        return false
	      }
	      return GeometryCollection$$1.prototype.equalsExact.call(this, other, tolerance)
	    } else { return GeometryCollection$$1.prototype.equalsExact.apply(this, arguments) }
	  };
	  MultiLineString.prototype.getBoundaryDimension = function getBoundaryDimension () {
	    if (this.isClosed()) {
	      return Dimension.FALSE
	    }
	    return 0
	  };
	  MultiLineString.prototype.isClosed = function isClosed () {
	    var this$1 = this;

	    if (this.isEmpty()) {
	      return false
	    }
	    for (var i = 0; i < this._geometries.length; i++) {
	      if (!this$1._geometries[i].isClosed()) {
	        return false
	      }
	    }
	    return true
	  };
	  MultiLineString.prototype.getDimension = function getDimension () {
	    return 1
	  };
	  MultiLineString.prototype.reverse = function reverse () {
	    var this$1 = this;

	    var nLines = this._geometries.length;
	    var revLines = new Array(nLines).fill(null);
	    for (var i = 0; i < this._geometries.length; i++) {
	      revLines[nLines - 1 - i] = this$1._geometries[i].reverse();
	    }
	    return this.getFactory().createMultiLineString(revLines)
	  };
	  MultiLineString.prototype.getBoundary = function getBoundary () {
	    return new BoundaryOp(this).getBoundary()
	  };
	  MultiLineString.prototype.getGeometryType = function getGeometryType () {
	    return 'MultiLineString'
	  };
	  MultiLineString.prototype.copy = function copy () {
	    var this$1 = this;

	    var lineStrings = new Array(this._geometries.length).fill(null);
	    for (var i = 0; i < lineStrings.length; i++) {
	      lineStrings[i] = this$1._geometries[i].copy();
	    }
	    return new MultiLineString(lineStrings, this._factory)
	  };
	  MultiLineString.prototype.interfaces_ = function interfaces_ () {
	    return [Lineal]
	  };
	  MultiLineString.prototype.getClass = function getClass () {
	    return MultiLineString
	  };
	  staticAccessors.serialVersionUID.get = function () { return 8166665132445433741 };

	  Object.defineProperties( MultiLineString, staticAccessors );

	  return MultiLineString;
	}(GeometryCollection));

	var BoundaryOp = function BoundaryOp () {
	  this._geom = null;
	  this._geomFact = null;
	  this._bnRule = null;
	  this._endpointMap = null;
	  if (arguments.length === 1) {
	    var geom = arguments[0];
	    var bnRule = BoundaryNodeRule.MOD2_BOUNDARY_RULE;
	    this._geom = geom;
	    this._geomFact = geom.getFactory();
	    this._bnRule = bnRule;
	  } else if (arguments.length === 2) {
	    var geom$1 = arguments[0];
	    var bnRule$1 = arguments[1];
	    this._geom = geom$1;
	    this._geomFact = geom$1.getFactory();
	    this._bnRule = bnRule$1;
	  }
	};
	BoundaryOp.prototype.boundaryMultiLineString = function boundaryMultiLineString (mLine) {
	  if (this._geom.isEmpty()) {
	    return this.getEmptyMultiPoint()
	  }
	  var bdyPts = this.computeBoundaryCoordinates(mLine);
	  if (bdyPts.length === 1) {
	    return this._geomFact.createPoint(bdyPts[0])
	  }
	  return this._geomFact.createMultiPointFromCoords(bdyPts)
	};
	BoundaryOp.prototype.getBoundary = function getBoundary () {
	  if (this._geom instanceof LineString) { return this.boundaryLineString(this._geom) }
	  if (this._geom instanceof MultiLineString) { return this.boundaryMultiLineString(this._geom) }
	  return this._geom.getBoundary()
	};
	BoundaryOp.prototype.boundaryLineString = function boundaryLineString (line) {
	  if (this._geom.isEmpty()) {
	    return this.getEmptyMultiPoint()
	  }
	  if (line.isClosed()) {
	    var closedEndpointOnBoundary = this._bnRule.isInBoundary(2);
	    if (closedEndpointOnBoundary) {
	      return line.getStartPoint()
	    } else {
	      return this._geomFact.createMultiPoint()
	    }
	  }
	  return this._geomFact.createMultiPoint([line.getStartPoint(), line.getEndPoint()])
	};
	BoundaryOp.prototype.getEmptyMultiPoint = function getEmptyMultiPoint () {
	  return this._geomFact.createMultiPoint()
	};
	BoundaryOp.prototype.computeBoundaryCoordinates = function computeBoundaryCoordinates (mLine) {
	    var this$1 = this;

	  var bdyPts = new ArrayList();
	  this._endpointMap = new TreeMap();
	  for (var i = 0; i < mLine.getNumGeometries(); i++) {
	    var line = mLine.getGeometryN(i);
	    if (line.getNumPoints() === 0) { continue }
	    this$1.addEndpoint(line.getCoordinateN(0));
	    this$1.addEndpoint(line.getCoordinateN(line.getNumPoints() - 1));
	  }
	  for (var it = this._endpointMap.entrySet().iterator(); it.hasNext();) {
	    var entry = it.next();
	    var counter = entry.getValue();
	    var valence = counter.count;
	    if (this$1._bnRule.isInBoundary(valence)) {
	      bdyPts.add(entry.getKey());
	    }
	  }
	  return CoordinateArrays.toCoordinateArray(bdyPts)
	};
	BoundaryOp.prototype.addEndpoint = function addEndpoint (pt) {
	  var counter = this._endpointMap.get(pt);
	  if (counter === null) {
	    counter = new Counter();
	    this._endpointMap.put(pt, counter);
	  }
	  counter.count++;
	};
	BoundaryOp.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	BoundaryOp.prototype.getClass = function getClass () {
	  return BoundaryOp
	};
	BoundaryOp.getBoundary = function getBoundary () {
	  if (arguments.length === 1) {
	    var g = arguments[0];
	    var bop = new BoundaryOp(g);
	    return bop.getBoundary()
	  } else if (arguments.length === 2) {
	    var g$1 = arguments[0];
	    var bnRule = arguments[1];
	    var bop$1 = new BoundaryOp(g$1, bnRule);
	    return bop$1.getBoundary()
	  }
	};

	var Counter = function Counter () {
	  this.count = null;
	};
	Counter.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Counter.prototype.getClass = function getClass () {
	  return Counter
	};

	// boundary

	function PrintStream () {}

	function StringReader () {}

	var DecimalFormat = function DecimalFormat () {};

	function ByteArrayOutputStream () {}

	function IOException () {}

	function LineNumberReader () {}

	var StringUtil = function StringUtil () {};

	var staticAccessors$15 = { NEWLINE: { configurable: true },SIMPLE_ORDINATE_FORMAT: { configurable: true } };

	StringUtil.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	StringUtil.prototype.getClass = function getClass () {
	  return StringUtil
	};
	StringUtil.chars = function chars (c, n) {
	  var ch = new Array(n).fill(null);
	  for (var i = 0; i < n; i++) {
	    ch[i] = c;
	  }
	  return String(ch)
	};
	StringUtil.getStackTrace = function getStackTrace () {
	  if (arguments.length === 1) {
	    var t = arguments[0];
	    var os = new ByteArrayOutputStream();
	    var ps = new PrintStream(os);
	    t.printStackTrace(ps);
	    return os.toString()
	  } else if (arguments.length === 2) {
	    var t$1 = arguments[0];
	    var depth = arguments[1];
	    var stackTrace = '';
	    var stringReader = new StringReader(StringUtil.getStackTrace(t$1));
	    var lineNumberReader = new LineNumberReader(stringReader);
	    for (var i = 0; i < depth; i++) {
	      try {
	        stackTrace += lineNumberReader.readLine() + StringUtil.NEWLINE;
	      } catch (e) {
	        if (e instanceof IOException) {
	          Assert.shouldNeverReachHere();
	        } else { throw e }
	      } finally {}
	    }
	    return stackTrace
	  }
	};
	StringUtil.split = function split (s, separator) {
	  var separatorlen = separator.length;
	  var tokenList = new ArrayList();
	  var tmpString = '' + s;
	  var pos = tmpString.indexOf(separator);
	  while (pos >= 0) {
	    var token = tmpString.substring(0, pos);
	    tokenList.add(token);
	    tmpString = tmpString.substring(pos + separatorlen);
	    pos = tmpString.indexOf(separator);
	  }
	  if (tmpString.length > 0) { tokenList.add(tmpString); }
	  var res = new Array(tokenList.size()).fill(null);
	  for (var i = 0; i < res.length; i++) {
	    res[i] = tokenList.get(i);
	  }
	  return res
	};
	StringUtil.toString = function toString () {
	  if (arguments.length === 1) {
	    var d = arguments[0];
	    return StringUtil.SIMPLE_ORDINATE_FORMAT.format(d)
	  }
	};
	StringUtil.spaces = function spaces (n) {
	  return StringUtil.chars(' ', n)
	};
	staticAccessors$15.NEWLINE.get = function () { return System.getProperty('line.separator') };
	staticAccessors$15.SIMPLE_ORDINATE_FORMAT.get = function () { return new DecimalFormat('0.#') };

	Object.defineProperties( StringUtil, staticAccessors$15 );

	var CoordinateSequences = function CoordinateSequences () {};

	CoordinateSequences.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	CoordinateSequences.prototype.getClass = function getClass () {
	  return CoordinateSequences
	};
	CoordinateSequences.copyCoord = function copyCoord (src, srcPos, dest, destPos) {
	  var minDim = Math.min(src.getDimension(), dest.getDimension());
	  for (var dim = 0; dim < minDim; dim++) {
	    dest.setOrdinate(destPos, dim, src.getOrdinate(srcPos, dim));
	  }
	};
	CoordinateSequences.isRing = function isRing (seq) {
	  var n = seq.size();
	  if (n === 0) { return true }
	  if (n <= 3) { return false }
	  return seq.getOrdinate(0, CoordinateSequence.X) === seq.getOrdinate(n - 1, CoordinateSequence.X) && seq.getOrdinate(0, CoordinateSequence.Y) === seq.getOrdinate(n - 1, CoordinateSequence.Y)
	};
	CoordinateSequences.isEqual = function isEqual (cs1, cs2) {
	  var cs1Size = cs1.size();
	  var cs2Size = cs2.size();
	  if (cs1Size !== cs2Size) { return false }
	  var dim = Math.min(cs1.getDimension(), cs2.getDimension());
	  for (var i = 0; i < cs1Size; i++) {
	    for (var d = 0; d < dim; d++) {
	      var v1 = cs1.getOrdinate(i, d);
	      var v2 = cs2.getOrdinate(i, d);
	      if (cs1.getOrdinate(i, d) === cs2.getOrdinate(i, d)) { continue }
	      if (Double.isNaN(v1) && Double.isNaN(v2)) { continue }
	      return false
	    }
	  }
	  return true
	};
	CoordinateSequences.extend = function extend (fact, seq, size) {
	  var newseq = fact.create(size, seq.getDimension());
	  var n = seq.size();
	  CoordinateSequences.copy(seq, 0, newseq, 0, n);
	  if (n > 0) {
	    for (var i = n; i < size; i++) { CoordinateSequences.copy(seq, n - 1, newseq, i, 1); }
	  }
	  return newseq
	};
	CoordinateSequences.reverse = function reverse (seq) {
	  var last = seq.size() - 1;
	  var mid = Math.trunc(last / 2);
	  for (var i = 0; i <= mid; i++) {
	    CoordinateSequences.swap(seq, i, last - i);
	  }
	};
	CoordinateSequences.swap = function swap (seq, i, j) {
	  if (i === j) { return null }
	  for (var dim = 0; dim < seq.getDimension(); dim++) {
	    var tmp = seq.getOrdinate(i, dim);
	    seq.setOrdinate(i, dim, seq.getOrdinate(j, dim));
	    seq.setOrdinate(j, dim, tmp);
	  }
	};
	CoordinateSequences.copy = function copy (src, srcPos, dest, destPos, length) {
	  for (var i = 0; i < length; i++) {
	    CoordinateSequences.copyCoord(src, srcPos + i, dest, destPos + i);
	  }
	};
	CoordinateSequences.toString = function toString () {
	  if (arguments.length === 1) {
	    var cs = arguments[0];
	    var size = cs.size();
	    if (size === 0) { return '()' }
	    var dim = cs.getDimension();
	    var buf = new StringBuffer();
	    buf.append('(');
	    for (var i = 0; i < size; i++) {
	      if (i > 0) { buf.append(' '); }
	      for (var d = 0; d < dim; d++) {
	        if (d > 0) { buf.append(','); }
	        buf.append(StringUtil.toString(cs.getOrdinate(i, d)));
	      }
	    }
	    buf.append(')');
	    return buf.toString()
	  }
	};
	CoordinateSequences.ensureValidRing = function ensureValidRing (fact, seq) {
	  var n = seq.size();
	  if (n === 0) { return seq }
	  if (n <= 3) { return CoordinateSequences.createClosedRing(fact, seq, 4) }
	  var isClosed = seq.getOrdinate(0, CoordinateSequence.X) === seq.getOrdinate(n - 1, CoordinateSequence.X) && seq.getOrdinate(0, CoordinateSequence.Y) === seq.getOrdinate(n - 1, CoordinateSequence.Y);
	  if (isClosed) { return seq }
	  return CoordinateSequences.createClosedRing(fact, seq, n + 1)
	};
	CoordinateSequences.createClosedRing = function createClosedRing (fact, seq, size) {
	  var newseq = fact.create(size, seq.getDimension());
	  var n = seq.size();
	  CoordinateSequences.copy(seq, 0, newseq, 0, n);
	  for (var i = n; i < size; i++) { CoordinateSequences.copy(seq, 0, newseq, i, 1); }
	  return newseq
	};

	var LineString = (function (Geometry$$1) {
	  function LineString (points, factory) {
	    Geometry$$1.call(this, factory);
	    this._points = null;
	    this.init(points);
	  }

	  if ( Geometry$$1 ) LineString.__proto__ = Geometry$$1;
	  LineString.prototype = Object.create( Geometry$$1 && Geometry$$1.prototype );
	  LineString.prototype.constructor = LineString;

	  var staticAccessors = { serialVersionUID: { configurable: true } };
	  LineString.prototype.computeEnvelopeInternal = function computeEnvelopeInternal () {
	    if (this.isEmpty()) {
	      return new Envelope()
	    }
	    return this._points.expandEnvelope(new Envelope())
	  };
	  LineString.prototype.isRing = function isRing () {
	    return this.isClosed() && this.isSimple()
	  };
	  LineString.prototype.getSortIndex = function getSortIndex () {
	    return Geometry$$1.SORTINDEX_LINESTRING
	  };
	  LineString.prototype.getCoordinates = function getCoordinates () {
	    return this._points.toCoordinateArray()
	  };
	  LineString.prototype.equalsExact = function equalsExact () {
	    var this$1 = this;

	    if (arguments.length === 2) {
	      var other = arguments[0];
	      var tolerance = arguments[1];
	      if (!this.isEquivalentClass(other)) {
	        return false
	      }
	      var otherLineString = other;
	      if (this._points.size() !== otherLineString._points.size()) {
	        return false
	      }
	      for (var i = 0; i < this._points.size(); i++) {
	        if (!this$1.equal(this$1._points.getCoordinate(i), otherLineString._points.getCoordinate(i), tolerance)) {
	          return false
	        }
	      }
	      return true
	    } else { return Geometry$$1.prototype.equalsExact.apply(this, arguments) }
	  };
	  LineString.prototype.normalize = function normalize () {
	    var this$1 = this;

	    for (var i = 0; i < Math.trunc(this._points.size() / 2); i++) {
	      var j = this$1._points.size() - 1 - i;
	      if (!this$1._points.getCoordinate(i).equals(this$1._points.getCoordinate(j))) {
	        if (this$1._points.getCoordinate(i).compareTo(this$1._points.getCoordinate(j)) > 0) {
	          CoordinateSequences.reverse(this$1._points);
	        }
	        return null
	      }
	    }
	  };
	  LineString.prototype.getCoordinate = function getCoordinate () {
	    if (this.isEmpty()) { return null }
	    return this._points.getCoordinate(0)
	  };
	  LineString.prototype.getBoundaryDimension = function getBoundaryDimension () {
	    if (this.isClosed()) {
	      return Dimension.FALSE
	    }
	    return 0
	  };
	  LineString.prototype.isClosed = function isClosed () {
	    if (this.isEmpty()) {
	      return false
	    }
	    return this.getCoordinateN(0).equals2D(this.getCoordinateN(this.getNumPoints() - 1))
	  };
	  LineString.prototype.getEndPoint = function getEndPoint () {
	    if (this.isEmpty()) {
	      return null
	    }
	    return this.getPointN(this.getNumPoints() - 1)
	  };
	  LineString.prototype.getDimension = function getDimension () {
	    return 1
	  };
	  LineString.prototype.getLength = function getLength () {
	    return CGAlgorithms.computeLength(this._points)
	  };
	  LineString.prototype.getNumPoints = function getNumPoints () {
	    return this._points.size()
	  };
	  LineString.prototype.reverse = function reverse () {
	    var seq = this._points.copy();
	    CoordinateSequences.reverse(seq);
	    var revLine = this.getFactory().createLineString(seq);
	    return revLine
	  };
	  LineString.prototype.compareToSameClass = function compareToSameClass () {
	    var this$1 = this;

	    if (arguments.length === 1) {
	      var o = arguments[0];
	      var line = o;
	      var i = 0;
	      var j = 0;
	      while (i < this._points.size() && j < line._points.size()) {
	        var comparison = this$1._points.getCoordinate(i).compareTo(line._points.getCoordinate(j));
	        if (comparison !== 0) {
	          return comparison
	        }
	        i++;
	        j++;
	      }
	      if (i < this._points.size()) {
	        return 1
	      }
	      if (j < line._points.size()) {
	        return -1
	      }
	      return 0
	    } else if (arguments.length === 2) {
	      var o$1 = arguments[0];
	      var comp = arguments[1];
	      var line$1 = o$1;
	      return comp.compare(this._points, line$1._points)
	    }
	  };
	  LineString.prototype.apply = function apply () {
	    var this$1 = this;

	    if (hasInterface(arguments[0], CoordinateFilter)) {
	      var filter = arguments[0];
	      for (var i = 0; i < this._points.size(); i++) {
	        filter.filter(this$1._points.getCoordinate(i));
	      }
	    } else if (hasInterface(arguments[0], CoordinateSequenceFilter)) {
	      var filter$1 = arguments[0];
	      if (this._points.size() === 0) { return null }
	      for (var i$1 = 0; i$1 < this._points.size(); i$1++) {
	        filter$1.filter(this$1._points, i$1);
	        if (filter$1.isDone()) { break }
	      }
	      if (filter$1.isGeometryChanged()) { this.geometryChanged(); }
	    } else if (hasInterface(arguments[0], GeometryFilter)) {
	      var filter$2 = arguments[0];
	      filter$2.filter(this);
	    } else if (hasInterface(arguments[0], GeometryComponentFilter)) {
	      var filter$3 = arguments[0];
	      filter$3.filter(this);
	    }
	  };
	  LineString.prototype.getBoundary = function getBoundary () {
	    return new BoundaryOp(this).getBoundary()
	  };
	  LineString.prototype.isEquivalentClass = function isEquivalentClass (other) {
	    return other instanceof LineString
	  };
	  LineString.prototype.clone = function clone () {
	    var ls = Geometry$$1.prototype.clone.call(this);
	    ls._points = this._points.clone();
	    return ls
	  };
	  LineString.prototype.getCoordinateN = function getCoordinateN (n) {
	    return this._points.getCoordinate(n)
	  };
	  LineString.prototype.getGeometryType = function getGeometryType () {
	    return 'LineString'
	  };
	  LineString.prototype.copy = function copy () {
	    return new LineString(this._points.copy(), this._factory)
	  };
	  LineString.prototype.getCoordinateSequence = function getCoordinateSequence () {
	    return this._points
	  };
	  LineString.prototype.isEmpty = function isEmpty () {
	    return this._points.size() === 0
	  };
	  LineString.prototype.init = function init (points) {
	    if (points === null) {
	      points = this.getFactory().getCoordinateSequenceFactory().create([]);
	    }
	    if (points.size() === 1) {
	      throw new IllegalArgumentException('Invalid number of points in LineString (found ' + points.size() + ' - must be 0 or >= 2)')
	    }
	    this._points = points;
	  };
	  LineString.prototype.isCoordinate = function isCoordinate (pt) {
	    var this$1 = this;

	    for (var i = 0; i < this._points.size(); i++) {
	      if (this$1._points.getCoordinate(i).equals(pt)) {
	        return true
	      }
	    }
	    return false
	  };
	  LineString.prototype.getStartPoint = function getStartPoint () {
	    if (this.isEmpty()) {
	      return null
	    }
	    return this.getPointN(0)
	  };
	  LineString.prototype.getPointN = function getPointN (n) {
	    return this.getFactory().createPoint(this._points.getCoordinate(n))
	  };
	  LineString.prototype.interfaces_ = function interfaces_ () {
	    return [Lineal]
	  };
	  LineString.prototype.getClass = function getClass () {
	    return LineString
	  };
	  staticAccessors.serialVersionUID.get = function () { return 3110669828065365560 };

	  Object.defineProperties( LineString, staticAccessors );

	  return LineString;
	}(Geometry));

	var Puntal = function Puntal () {};

	Puntal.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Puntal.prototype.getClass = function getClass () {
	  return Puntal
	};

	var Point = (function (Geometry$$1) {
	  function Point (coordinates, factory) {
	    Geometry$$1.call(this, factory);
	    this._coordinates = coordinates || null;
	    this.init(this._coordinates);
	  }

	  if ( Geometry$$1 ) Point.__proto__ = Geometry$$1;
	  Point.prototype = Object.create( Geometry$$1 && Geometry$$1.prototype );
	  Point.prototype.constructor = Point;

	  var staticAccessors = { serialVersionUID: { configurable: true } };
	  Point.prototype.computeEnvelopeInternal = function computeEnvelopeInternal () {
	    if (this.isEmpty()) {
	      return new Envelope()
	    }
	    var env = new Envelope();
	    env.expandToInclude(this._coordinates.getX(0), this._coordinates.getY(0));
	    return env
	  };
	  Point.prototype.getSortIndex = function getSortIndex () {
	    return Geometry$$1.SORTINDEX_POINT
	  };
	  Point.prototype.getCoordinates = function getCoordinates () {
	    return this.isEmpty() ? [] : [this.getCoordinate()]
	  };
	  Point.prototype.equalsExact = function equalsExact () {
	    if (arguments.length === 2) {
	      var other = arguments[0];
	      var tolerance = arguments[1];
	      if (!this.isEquivalentClass(other)) {
	        return false
	      }
	      if (this.isEmpty() && other.isEmpty()) {
	        return true
	      }
	      if (this.isEmpty() !== other.isEmpty()) {
	        return false
	      }
	      return this.equal(other.getCoordinate(), this.getCoordinate(), tolerance)
	    } else { return Geometry$$1.prototype.equalsExact.apply(this, arguments) }
	  };
	  Point.prototype.normalize = function normalize () {};
	  Point.prototype.getCoordinate = function getCoordinate () {
	    return this._coordinates.size() !== 0 ? this._coordinates.getCoordinate(0) : null
	  };
	  Point.prototype.getBoundaryDimension = function getBoundaryDimension () {
	    return Dimension.FALSE
	  };
	  Point.prototype.getDimension = function getDimension () {
	    return 0
	  };
	  Point.prototype.getNumPoints = function getNumPoints () {
	    return this.isEmpty() ? 0 : 1
	  };
	  Point.prototype.reverse = function reverse () {
	    return this.copy()
	  };
	  Point.prototype.getX = function getX () {
	    if (this.getCoordinate() === null) {
	      throw new Error('getX called on empty Point')
	    }
	    return this.getCoordinate().x
	  };
	  Point.prototype.compareToSameClass = function compareToSameClass () {
	    if (arguments.length === 1) {
	      var other = arguments[0];
	      var point$1 = other;
	      return this.getCoordinate().compareTo(point$1.getCoordinate())
	    } else if (arguments.length === 2) {
	      var other$1 = arguments[0];
	      var comp = arguments[1];
	      var point = other$1;
	      return comp.compare(this._coordinates, point._coordinates)
	    }
	  };
	  Point.prototype.apply = function apply () {
	    if (hasInterface(arguments[0], CoordinateFilter)) {
	      var filter = arguments[0];
	      if (this.isEmpty()) {
	        return null
	      }
	      filter.filter(this.getCoordinate());
	    } else if (hasInterface(arguments[0], CoordinateSequenceFilter)) {
	      var filter$1 = arguments[0];
	      if (this.isEmpty()) { return null }
	      filter$1.filter(this._coordinates, 0);
	      if (filter$1.isGeometryChanged()) { this.geometryChanged(); }
	    } else if (hasInterface(arguments[0], GeometryFilter)) {
	      var filter$2 = arguments[0];
	      filter$2.filter(this);
	    } else if (hasInterface(arguments[0], GeometryComponentFilter)) {
	      var filter$3 = arguments[0];
	      filter$3.filter(this);
	    }
	  };
	  Point.prototype.getBoundary = function getBoundary () {
	    return this.getFactory().createGeometryCollection(null)
	  };
	  Point.prototype.clone = function clone () {
	    var p = Geometry$$1.prototype.clone.call(this);
	    p._coordinates = this._coordinates.clone();
	    return p
	  };
	  Point.prototype.getGeometryType = function getGeometryType () {
	    return 'Point'
	  };
	  Point.prototype.copy = function copy () {
	    return new Point(this._coordinates.copy(), this._factory)
	  };
	  Point.prototype.getCoordinateSequence = function getCoordinateSequence () {
	    return this._coordinates
	  };
	  Point.prototype.getY = function getY () {
	    if (this.getCoordinate() === null) {
	      throw new Error('getY called on empty Point')
	    }
	    return this.getCoordinate().y
	  };
	  Point.prototype.isEmpty = function isEmpty () {
	    return this._coordinates.size() === 0
	  };
	  Point.prototype.init = function init (coordinates) {
	    if (coordinates === null) {
	      coordinates = this.getFactory().getCoordinateSequenceFactory().create([]);
	    }
	    Assert.isTrue(coordinates.size() <= 1);
	    this._coordinates = coordinates;
	  };
	  Point.prototype.isSimple = function isSimple () {
	    return true
	  };
	  Point.prototype.interfaces_ = function interfaces_ () {
	    return [Puntal]
	  };
	  Point.prototype.getClass = function getClass () {
	    return Point
	  };
	  staticAccessors.serialVersionUID.get = function () { return 4902022702746614570 };

	  Object.defineProperties( Point, staticAccessors );

	  return Point;
	}(Geometry));

	var Polygonal = function Polygonal () {};

	Polygonal.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Polygonal.prototype.getClass = function getClass () {
	  return Polygonal
	};

	var Polygon = (function (Geometry$$1) {
	  function Polygon (shell, holes, factory) {
	    Geometry$$1.call(this, factory);
	    this._shell = null;
	    this._holes = null;
	    if (shell === null) {
	      shell = this.getFactory().createLinearRing();
	    }
	    if (holes === null) {
	      holes = [];
	    }
	    if (Geometry$$1.hasNullElements(holes)) {
	      throw new IllegalArgumentException('holes must not contain null elements')
	    }
	    if (shell.isEmpty() && Geometry$$1.hasNonEmptyElements(holes)) {
	      throw new IllegalArgumentException('shell is empty but holes are not')
	    }
	    this._shell = shell;
	    this._holes = holes;
	  }

	  if ( Geometry$$1 ) Polygon.__proto__ = Geometry$$1;
	  Polygon.prototype = Object.create( Geometry$$1 && Geometry$$1.prototype );
	  Polygon.prototype.constructor = Polygon;

	  var staticAccessors = { serialVersionUID: { configurable: true } };
	  Polygon.prototype.computeEnvelopeInternal = function computeEnvelopeInternal () {
	    return this._shell.getEnvelopeInternal()
	  };
	  Polygon.prototype.getSortIndex = function getSortIndex () {
	    return Geometry$$1.SORTINDEX_POLYGON
	  };
	  Polygon.prototype.getCoordinates = function getCoordinates () {
	    var this$1 = this;

	    if (this.isEmpty()) {
	      return []
	    }
	    var coordinates = new Array(this.getNumPoints()).fill(null);
	    var k = -1;
	    var shellCoordinates = this._shell.getCoordinates();
	    for (var x = 0; x < shellCoordinates.length; x++) {
	      k++;
	      coordinates[k] = shellCoordinates[x];
	    }
	    for (var i = 0; i < this._holes.length; i++) {
	      var childCoordinates = this$1._holes[i].getCoordinates();
	      for (var j = 0; j < childCoordinates.length; j++) {
	        k++;
	        coordinates[k] = childCoordinates[j];
	      }
	    }
	    return coordinates
	  };
	  Polygon.prototype.getArea = function getArea () {
	    var this$1 = this;

	    var area = 0.0;
	    area += Math.abs(CGAlgorithms.signedArea(this._shell.getCoordinateSequence()));
	    for (var i = 0; i < this._holes.length; i++) {
	      area -= Math.abs(CGAlgorithms.signedArea(this$1._holes[i].getCoordinateSequence()));
	    }
	    return area
	  };
	  Polygon.prototype.isRectangle = function isRectangle () {
	    if (this.getNumInteriorRing() !== 0) { return false }
	    if (this._shell === null) { return false }
	    if (this._shell.getNumPoints() !== 5) { return false }
	    var seq = this._shell.getCoordinateSequence();
	    var env = this.getEnvelopeInternal();
	    for (var i = 0; i < 5; i++) {
	      var x = seq.getX(i);
	      if (!(x === env.getMinX() || x === env.getMaxX())) { return false }
	      var y = seq.getY(i);
	      if (!(y === env.getMinY() || y === env.getMaxY())) { return false }
	    }
	    var prevX = seq.getX(0);
	    var prevY = seq.getY(0);
	    for (var i$1 = 1; i$1 <= 4; i$1++) {
	      var x$1 = seq.getX(i$1);
	      var y$1 = seq.getY(i$1);
	      var xChanged = x$1 !== prevX;
	      var yChanged = y$1 !== prevY;
	      if (xChanged === yChanged) { return false }
	      prevX = x$1;
	      prevY = y$1;
	    }
	    return true
	  };
	  Polygon.prototype.equalsExact = function equalsExact () {
	    var this$1 = this;

	    if (arguments.length === 2) {
	      var other = arguments[0];
	      var tolerance = arguments[1];
	      if (!this.isEquivalentClass(other)) {
	        return false
	      }
	      var otherPolygon = other;
	      var thisShell = this._shell;
	      var otherPolygonShell = otherPolygon._shell;
	      if (!thisShell.equalsExact(otherPolygonShell, tolerance)) {
	        return false
	      }
	      if (this._holes.length !== otherPolygon._holes.length) {
	        return false
	      }
	      for (var i = 0; i < this._holes.length; i++) {
	        if (!this$1._holes[i].equalsExact(otherPolygon._holes[i], tolerance)) {
	          return false
	        }
	      }
	      return true
	    } else { return Geometry$$1.prototype.equalsExact.apply(this, arguments) }
	  };
	  Polygon.prototype.normalize = function normalize () {
	    var this$1 = this;

	    if (arguments.length === 0) {
	      this.normalize(this._shell, true);
	      for (var i = 0; i < this._holes.length; i++) {
	        this$1.normalize(this$1._holes[i], false);
	      }
	      Arrays.sort(this._holes);
	    } else if (arguments.length === 2) {
	      var ring = arguments[0];
	      var clockwise = arguments[1];
	      if (ring.isEmpty()) {
	        return null
	      }
	      var uniqueCoordinates = new Array(ring.getCoordinates().length - 1).fill(null);
	      System.arraycopy(ring.getCoordinates(), 0, uniqueCoordinates, 0, uniqueCoordinates.length);
	      var minCoordinate = CoordinateArrays.minCoordinate(ring.getCoordinates());
	      CoordinateArrays.scroll(uniqueCoordinates, minCoordinate);
	      System.arraycopy(uniqueCoordinates, 0, ring.getCoordinates(), 0, uniqueCoordinates.length);
	      ring.getCoordinates()[uniqueCoordinates.length] = uniqueCoordinates[0];
	      if (CGAlgorithms.isCCW(ring.getCoordinates()) === clockwise) {
	        CoordinateArrays.reverse(ring.getCoordinates());
	      }
	    }
	  };
	  Polygon.prototype.getCoordinate = function getCoordinate () {
	    return this._shell.getCoordinate()
	  };
	  Polygon.prototype.getNumInteriorRing = function getNumInteriorRing () {
	    return this._holes.length
	  };
	  Polygon.prototype.getBoundaryDimension = function getBoundaryDimension () {
	    return 1
	  };
	  Polygon.prototype.getDimension = function getDimension () {
	    return 2
	  };
	  Polygon.prototype.getLength = function getLength () {
	    var this$1 = this;

	    var len = 0.0;
	    len += this._shell.getLength();
	    for (var i = 0; i < this._holes.length; i++) {
	      len += this$1._holes[i].getLength();
	    }
	    return len
	  };
	  Polygon.prototype.getNumPoints = function getNumPoints () {
	    var this$1 = this;

	    var numPoints = this._shell.getNumPoints();
	    for (var i = 0; i < this._holes.length; i++) {
	      numPoints += this$1._holes[i].getNumPoints();
	    }
	    return numPoints
	  };
	  Polygon.prototype.reverse = function reverse () {
	    var this$1 = this;

	    var poly = this.copy();
	    poly._shell = this._shell.copy().reverse();
	    poly._holes = new Array(this._holes.length).fill(null);
	    for (var i = 0; i < this._holes.length; i++) {
	      poly._holes[i] = this$1._holes[i].copy().reverse();
	    }
	    return poly
	  };
	  Polygon.prototype.convexHull = function convexHull () {
	    return this.getExteriorRing().convexHull()
	  };
	  Polygon.prototype.compareToSameClass = function compareToSameClass () {
	    var this$1 = this;

	    if (arguments.length === 1) {
	      var o = arguments[0];
	      var thisShell = this._shell;
	      var otherShell = o._shell;
	      return thisShell.compareToSameClass(otherShell)
	    } else if (arguments.length === 2) {
	      var o$1 = arguments[0];
	      var comp = arguments[1];
	      var poly = o$1;
	      var thisShell$1 = this._shell;
	      var otherShell$1 = poly._shell;
	      var shellComp = thisShell$1.compareToSameClass(otherShell$1, comp);
	      if (shellComp !== 0) { return shellComp }
	      var nHole1 = this.getNumInteriorRing();
	      var nHole2 = poly.getNumInteriorRing();
	      var i = 0;
	      while (i < nHole1 && i < nHole2) {
	        var thisHole = this$1.getInteriorRingN(i);
	        var otherHole = poly.getInteriorRingN(i);
	        var holeComp = thisHole.compareToSameClass(otherHole, comp);
	        if (holeComp !== 0) { return holeComp }
	        i++;
	      }
	      if (i < nHole1) { return 1 }
	      if (i < nHole2) { return -1 }
	      return 0
	    }
	  };
	  Polygon.prototype.apply = function apply (filter) {
	    var this$1 = this;

	    if (hasInterface(filter, CoordinateFilter)) {
	      this._shell.apply(filter);
	      for (var i$1 = 0; i$1 < this._holes.length; i$1++) {
	        this$1._holes[i$1].apply(filter);
	      }
	    } else if (hasInterface(filter, CoordinateSequenceFilter)) {
	      this._shell.apply(filter);
	      if (!filter.isDone()) {
	        for (var i$2 = 0; i$2 < this._holes.length; i$2++) {
	          this$1._holes[i$2].apply(filter);
	          if (filter.isDone()) { break }
	        }
	      }
	      if (filter.isGeometryChanged()) { this.geometryChanged(); }
	    } else if (hasInterface(filter, GeometryFilter)) {
	      filter.filter(this);
	    } else if (hasInterface(filter, GeometryComponentFilter)) {
	      filter.filter(this);
	      this._shell.apply(filter);
	      for (var i = 0; i < this._holes.length; i++) {
	        this$1._holes[i].apply(filter);
	      }
	    }
	  };
	  Polygon.prototype.getBoundary = function getBoundary () {
	    var this$1 = this;

	    if (this.isEmpty()) {
	      return this.getFactory().createMultiLineString()
	    }
	    var rings = new Array(this._holes.length + 1).fill(null);
	    rings[0] = this._shell;
	    for (var i = 0; i < this._holes.length; i++) {
	      rings[i + 1] = this$1._holes[i];
	    }
	    if (rings.length <= 1) { return this.getFactory().createLinearRing(rings[0].getCoordinateSequence()) }
	    return this.getFactory().createMultiLineString(rings)
	  };
	  Polygon.prototype.clone = function clone () {
	    var this$1 = this;

	    var poly = Geometry$$1.prototype.clone.call(this);
	    poly._shell = this._shell.clone();
	    poly._holes = new Array(this._holes.length).fill(null);
	    for (var i = 0; i < this._holes.length; i++) {
	      poly._holes[i] = this$1._holes[i].clone();
	    }
	    return poly
	  };
	  Polygon.prototype.getGeometryType = function getGeometryType () {
	    return 'Polygon'
	  };
	  Polygon.prototype.copy = function copy () {
	    var this$1 = this;

	    var shell = this._shell.copy();
	    var holes = new Array(this._holes.length).fill(null);
	    for (var i = 0; i < holes.length; i++) {
	      holes[i] = this$1._holes[i].copy();
	    }
	    return new Polygon(shell, holes, this._factory)
	  };
	  Polygon.prototype.getExteriorRing = function getExteriorRing () {
	    return this._shell
	  };
	  Polygon.prototype.isEmpty = function isEmpty () {
	    return this._shell.isEmpty()
	  };
	  Polygon.prototype.getInteriorRingN = function getInteriorRingN (n) {
	    return this._holes[n]
	  };
	  Polygon.prototype.interfaces_ = function interfaces_ () {
	    return [Polygonal]
	  };
	  Polygon.prototype.getClass = function getClass () {
	    return Polygon
	  };
	  staticAccessors.serialVersionUID.get = function () { return -3494792200821764533 };

	  Object.defineProperties( Polygon, staticAccessors );

	  return Polygon;
	}(Geometry));

	var MultiPoint = (function (GeometryCollection$$1) {
	  function MultiPoint () {
	    GeometryCollection$$1.apply(this, arguments);
	  }

	  if ( GeometryCollection$$1 ) MultiPoint.__proto__ = GeometryCollection$$1;
	  MultiPoint.prototype = Object.create( GeometryCollection$$1 && GeometryCollection$$1.prototype );
	  MultiPoint.prototype.constructor = MultiPoint;

	  var staticAccessors = { serialVersionUID: { configurable: true } };

	  MultiPoint.prototype.getSortIndex = function getSortIndex () {
	    return Geometry.SORTINDEX_MULTIPOINT
	  };
	  MultiPoint.prototype.isValid = function isValid () {
	    return true
	  };
	  MultiPoint.prototype.equalsExact = function equalsExact () {
	    if (arguments.length === 2) {
	      var other = arguments[0];
	      var tolerance = arguments[1];
	      if (!this.isEquivalentClass(other)) {
	        return false
	      }
	      return GeometryCollection$$1.prototype.equalsExact.call(this, other, tolerance)
	    } else { return GeometryCollection$$1.prototype.equalsExact.apply(this, arguments) }
	  };
	  MultiPoint.prototype.getCoordinate = function getCoordinate () {
	    if (arguments.length === 1) {
	      var n = arguments[0];
	      return this._geometries[n].getCoordinate()
	    } else { return GeometryCollection$$1.prototype.getCoordinate.apply(this, arguments) }
	  };
	  MultiPoint.prototype.getBoundaryDimension = function getBoundaryDimension () {
	    return Dimension.FALSE
	  };
	  MultiPoint.prototype.getDimension = function getDimension () {
	    return 0
	  };
	  MultiPoint.prototype.getBoundary = function getBoundary () {
	    return this.getFactory().createGeometryCollection(null)
	  };
	  MultiPoint.prototype.getGeometryType = function getGeometryType () {
	    return 'MultiPoint'
	  };
	  MultiPoint.prototype.copy = function copy () {
	    var this$1 = this;

	    var points = new Array(this._geometries.length).fill(null);
	    for (var i = 0; i < points.length; i++) {
	      points[i] = this$1._geometries[i].copy();
	    }
	    return new MultiPoint(points, this._factory)
	  };
	  MultiPoint.prototype.interfaces_ = function interfaces_ () {
	    return [Puntal]
	  };
	  MultiPoint.prototype.getClass = function getClass () {
	    return MultiPoint
	  };
	  staticAccessors.serialVersionUID.get = function () { return -8048474874175355449 };

	  Object.defineProperties( MultiPoint, staticAccessors );

	  return MultiPoint;
	}(GeometryCollection));

	var LinearRing = (function (LineString$$1) {
	  function LinearRing (points, factory) {
	    if (points instanceof Coordinate && factory instanceof GeometryFactory) {
	      points = factory.getCoordinateSequenceFactory().create(points);
	    }
	    LineString$$1.call(this, points, factory);
	    this.validateConstruction();
	  }

	  if ( LineString$$1 ) LinearRing.__proto__ = LineString$$1;
	  LinearRing.prototype = Object.create( LineString$$1 && LineString$$1.prototype );
	  LinearRing.prototype.constructor = LinearRing;

	  var staticAccessors = { MINIMUM_VALID_SIZE: { configurable: true },serialVersionUID: { configurable: true } };
	  LinearRing.prototype.getSortIndex = function getSortIndex () {
	    return Geometry.SORTINDEX_LINEARRING
	  };
	  LinearRing.prototype.getBoundaryDimension = function getBoundaryDimension () {
	    return Dimension.FALSE
	  };
	  LinearRing.prototype.isClosed = function isClosed () {
	    if (this.isEmpty()) {
	      return true
	    }
	    return LineString$$1.prototype.isClosed.call(this)
	  };
	  LinearRing.prototype.reverse = function reverse () {
	    var seq = this._points.copy();
	    CoordinateSequences.reverse(seq);
	    var rev = this.getFactory().createLinearRing(seq);
	    return rev
	  };
	  LinearRing.prototype.validateConstruction = function validateConstruction () {
	    if (!this.isEmpty() && !LineString$$1.prototype.isClosed.call(this)) {
	      throw new IllegalArgumentException('Points of LinearRing do not form a closed linestring')
	    }
	    if (this.getCoordinateSequence().size() >= 1 && this.getCoordinateSequence().size() < LinearRing.MINIMUM_VALID_SIZE) {
	      throw new IllegalArgumentException('Invalid number of points in LinearRing (found ' + this.getCoordinateSequence().size() + ' - must be 0 or >= 4)')
	    }
	  };
	  LinearRing.prototype.getGeometryType = function getGeometryType () {
	    return 'LinearRing'
	  };
	  LinearRing.prototype.copy = function copy () {
	    return new LinearRing(this._points.copy(), this._factory)
	  };
	  LinearRing.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  LinearRing.prototype.getClass = function getClass () {
	    return LinearRing
	  };
	  staticAccessors.MINIMUM_VALID_SIZE.get = function () { return 4 };
	  staticAccessors.serialVersionUID.get = function () { return -4261142084085851829 };

	  Object.defineProperties( LinearRing, staticAccessors );

	  return LinearRing;
	}(LineString));

	var MultiPolygon = (function (GeometryCollection$$1) {
	  function MultiPolygon () {
	    GeometryCollection$$1.apply(this, arguments);
	  }

	  if ( GeometryCollection$$1 ) MultiPolygon.__proto__ = GeometryCollection$$1;
	  MultiPolygon.prototype = Object.create( GeometryCollection$$1 && GeometryCollection$$1.prototype );
	  MultiPolygon.prototype.constructor = MultiPolygon;

	  var staticAccessors = { serialVersionUID: { configurable: true } };

	  MultiPolygon.prototype.getSortIndex = function getSortIndex () {
	    return Geometry.SORTINDEX_MULTIPOLYGON
	  };
	  MultiPolygon.prototype.equalsExact = function equalsExact () {
	    if (arguments.length === 2) {
	      var other = arguments[0];
	      var tolerance = arguments[1];
	      if (!this.isEquivalentClass(other)) {
	        return false
	      }
	      return GeometryCollection$$1.prototype.equalsExact.call(this, other, tolerance)
	    } else { return GeometryCollection$$1.prototype.equalsExact.apply(this, arguments) }
	  };
	  MultiPolygon.prototype.getBoundaryDimension = function getBoundaryDimension () {
	    return 1
	  };
	  MultiPolygon.prototype.getDimension = function getDimension () {
	    return 2
	  };
	  MultiPolygon.prototype.reverse = function reverse () {
	    var this$1 = this;

	    var n = this._geometries.length;
	    var revGeoms = new Array(n).fill(null);
	    for (var i = 0; i < this._geometries.length; i++) {
	      revGeoms[i] = this$1._geometries[i].reverse();
	    }
	    return this.getFactory().createMultiPolygon(revGeoms)
	  };
	  MultiPolygon.prototype.getBoundary = function getBoundary () {
	    var this$1 = this;

	    if (this.isEmpty()) {
	      return this.getFactory().createMultiLineString()
	    }
	    var allRings = new ArrayList();
	    for (var i = 0; i < this._geometries.length; i++) {
	      var polygon = this$1._geometries[i];
	      var rings = polygon.getBoundary();
	      for (var j = 0; j < rings.getNumGeometries(); j++) {
	        allRings.add(rings.getGeometryN(j));
	      }
	    }
	    var allRingsArray = new Array(allRings.size()).fill(null);
	    return this.getFactory().createMultiLineString(allRings.toArray(allRingsArray))
	  };
	  MultiPolygon.prototype.getGeometryType = function getGeometryType () {
	    return 'MultiPolygon'
	  };
	  MultiPolygon.prototype.copy = function copy () {
	    var this$1 = this;

	    var polygons = new Array(this._geometries.length).fill(null);
	    for (var i = 0; i < polygons.length; i++) {
	      polygons[i] = this$1._geometries[i].copy();
	    }
	    return new MultiPolygon(polygons, this._factory)
	  };
	  MultiPolygon.prototype.interfaces_ = function interfaces_ () {
	    return [Polygonal]
	  };
	  MultiPolygon.prototype.getClass = function getClass () {
	    return MultiPolygon
	  };
	  staticAccessors.serialVersionUID.get = function () { return -551033529766975875 };

	  Object.defineProperties( MultiPolygon, staticAccessors );

	  return MultiPolygon;
	}(GeometryCollection));

	var GeometryEditor = function GeometryEditor (factory) {
	  this._factory = factory || null;
	  this._isUserDataCopied = false;
	};

	var staticAccessors$16 = { NoOpGeometryOperation: { configurable: true },CoordinateOperation: { configurable: true },CoordinateSequenceOperation: { configurable: true } };
	GeometryEditor.prototype.setCopyUserData = function setCopyUserData (isUserDataCopied) {
	  this._isUserDataCopied = isUserDataCopied;
	};
	GeometryEditor.prototype.edit = function edit (geometry, operation) {
	  if (geometry === null) { return null }
	  var result = this.editInternal(geometry, operation);
	  if (this._isUserDataCopied) {
	    result.setUserData(geometry.getUserData());
	  }
	  return result
	};
	GeometryEditor.prototype.editInternal = function editInternal (geometry, operation) {
	  if (this._factory === null) { this._factory = geometry.getFactory(); }
	  if (geometry instanceof GeometryCollection) {
	    return this.editGeometryCollection(geometry, operation)
	  }
	  if (geometry instanceof Polygon) {
	    return this.editPolygon(geometry, operation)
	  }
	  if (geometry instanceof Point) {
	    return operation.edit(geometry, this._factory)
	  }
	  if (geometry instanceof LineString) {
	    return operation.edit(geometry, this._factory)
	  }
	  Assert.shouldNeverReachHere('Unsupported Geometry class: ' + geometry.getClass().getName());
	  return null
	};
	GeometryEditor.prototype.editGeometryCollection = function editGeometryCollection (collection, operation) {
	    var this$1 = this;

	  var collectionForType = operation.edit(collection, this._factory);
	  var geometries = new ArrayList();
	  for (var i = 0; i < collectionForType.getNumGeometries(); i++) {
	    var geometry = this$1.edit(collectionForType.getGeometryN(i), operation);
	    if (geometry === null || geometry.isEmpty()) {
	      continue
	    }
	    geometries.add(geometry);
	  }
	  if (collectionForType.getClass() === MultiPoint) {
	    return this._factory.createMultiPoint(geometries.toArray([]))
	  }
	  if (collectionForType.getClass() === MultiLineString) {
	    return this._factory.createMultiLineString(geometries.toArray([]))
	  }
	  if (collectionForType.getClass() === MultiPolygon) {
	    return this._factory.createMultiPolygon(geometries.toArray([]))
	  }
	  return this._factory.createGeometryCollection(geometries.toArray([]))
	};
	GeometryEditor.prototype.editPolygon = function editPolygon (polygon, operation) {
	    var this$1 = this;

	  var newPolygon = operation.edit(polygon, this._factory);
	  if (newPolygon === null) { newPolygon = this._factory.createPolygon(null); }
	  if (newPolygon.isEmpty()) {
	    return newPolygon
	  }
	  var shell = this.edit(newPolygon.getExteriorRing(), operation);
	  if (shell === null || shell.isEmpty()) {
	    return this._factory.createPolygon()
	  }
	  var holes = new ArrayList();
	  for (var i = 0; i < newPolygon.getNumInteriorRing(); i++) {
	    var hole = this$1.edit(newPolygon.getInteriorRingN(i), operation);
	    if (hole === null || hole.isEmpty()) {
	      continue
	    }
	    holes.add(hole);
	  }
	  return this._factory.createPolygon(shell, holes.toArray([]))
	};
	GeometryEditor.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	GeometryEditor.prototype.getClass = function getClass () {
	  return GeometryEditor
	};
	GeometryEditor.GeometryEditorOperation = function GeometryEditorOperation () {};
	staticAccessors$16.NoOpGeometryOperation.get = function () { return NoOpGeometryOperation };
	staticAccessors$16.CoordinateOperation.get = function () { return CoordinateOperation };
	staticAccessors$16.CoordinateSequenceOperation.get = function () { return CoordinateSequenceOperation };

	Object.defineProperties( GeometryEditor, staticAccessors$16 );

	var NoOpGeometryOperation = function NoOpGeometryOperation () {};

	NoOpGeometryOperation.prototype.edit = function edit (geometry, factory) {
	  return geometry
	};
	NoOpGeometryOperation.prototype.interfaces_ = function interfaces_ () {
	  return [GeometryEditor.GeometryEditorOperation]
	};
	NoOpGeometryOperation.prototype.getClass = function getClass () {
	  return NoOpGeometryOperation
	};

	var CoordinateOperation = function CoordinateOperation () {};

	CoordinateOperation.prototype.edit = function edit (geometry, factory) {
	  var coords = this.editCoordinates(geometry.getCoordinates(), geometry);
	  if (coords === null) { return geometry }
	  if (geometry instanceof LinearRing) {
	    return factory.createLinearRing(coords)
	  }
	  if (geometry instanceof LineString) {
	    return factory.createLineString(coords)
	  }
	  if (geometry instanceof Point) {
	    if (coords.length > 0) {
	      return factory.createPoint(coords[0])
	    } else {
	      return factory.createPoint()
	    }
	  }
	  return geometry
	};
	CoordinateOperation.prototype.interfaces_ = function interfaces_ () {
	  return [GeometryEditor.GeometryEditorOperation]
	};
	CoordinateOperation.prototype.getClass = function getClass () {
	  return CoordinateOperation
	};

	var CoordinateSequenceOperation = function CoordinateSequenceOperation () {};

	CoordinateSequenceOperation.prototype.edit = function edit (geometry, factory) {
	  if (geometry instanceof LinearRing) {
	    return factory.createLinearRing(this.edit(geometry.getCoordinateSequence(), geometry))
	  }
	  if (geometry instanceof LineString) {
	    return factory.createLineString(this.edit(geometry.getCoordinateSequence(), geometry))
	  }
	  if (geometry instanceof Point) {
	    return factory.createPoint(this.edit(geometry.getCoordinateSequence(), geometry))
	  }
	  return geometry
	};
	CoordinateSequenceOperation.prototype.interfaces_ = function interfaces_ () {
	  return [GeometryEditor.GeometryEditorOperation]
	};
	CoordinateSequenceOperation.prototype.getClass = function getClass () {
	  return CoordinateSequenceOperation
	};

	var CoordinateArraySequence = function CoordinateArraySequence () {
	  var this$1 = this;

	  this._dimension = 3;
	  this._coordinates = null;
	  if (arguments.length === 1) {
	    if (arguments[0] instanceof Array) {
	      this._coordinates = arguments[0];
	      this._dimension = 3;
	    } else if (Number.isInteger(arguments[0])) {
	      var size = arguments[0];
	      this._coordinates = new Array(size).fill(null);
	      for (var i = 0; i < size; i++) {
	        this$1._coordinates[i] = new Coordinate();
	      }
	    } else if (hasInterface(arguments[0], CoordinateSequence)) {
	      var coordSeq = arguments[0];
	      if (coordSeq === null) {
	        this._coordinates = new Array(0).fill(null);
	        return null
	      }
	      this._dimension = coordSeq.getDimension();
	      this._coordinates = new Array(coordSeq.size()).fill(null);
	      for (var i$1 = 0; i$1 < this._coordinates.length; i$1++) {
	        this$1._coordinates[i$1] = coordSeq.getCoordinateCopy(i$1);
	      }
	    }
	  } else if (arguments.length === 2) {
	    if (arguments[0] instanceof Array && Number.isInteger(arguments[1])) {
	      var coordinates = arguments[0];
	      var dimension = arguments[1];
	      this._coordinates = coordinates;
	      this._dimension = dimension;
	      if (coordinates === null) { this._coordinates = new Array(0).fill(null); }
	    } else if (Number.isInteger(arguments[0]) && Number.isInteger(arguments[1])) {
	      var size$1 = arguments[0];
	      var dimension$1 = arguments[1];
	      this._coordinates = new Array(size$1).fill(null);
	      this._dimension = dimension$1;
	      for (var i$2 = 0; i$2 < size$1; i$2++) {
	        this$1._coordinates[i$2] = new Coordinate();
	      }
	    }
	  }
	};

	var staticAccessors$18 = { serialVersionUID: { configurable: true } };
	CoordinateArraySequence.prototype.setOrdinate = function setOrdinate (index, ordinateIndex, value) {
	  switch (ordinateIndex) {
	    case CoordinateSequence.X:
	      this._coordinates[index].x = value;
	      break
	    case CoordinateSequence.Y:
	      this._coordinates[index].y = value;
	      break
	    case CoordinateSequence.Z:
	      this._coordinates[index].z = value;
	      break
	    default:
	      throw new IllegalArgumentException('invalid ordinateIndex')
	  }
	};
	CoordinateArraySequence.prototype.size = function size () {
	  return this._coordinates.length
	};
	CoordinateArraySequence.prototype.getOrdinate = function getOrdinate (index, ordinateIndex) {
	  switch (ordinateIndex) {
	    case CoordinateSequence.X:
	      return this._coordinates[index].x
	    case CoordinateSequence.Y:
	      return this._coordinates[index].y
	    case CoordinateSequence.Z:
	      return this._coordinates[index].z
	  }
	  return Double.NaN
	};
	CoordinateArraySequence.prototype.getCoordinate = function getCoordinate () {
	  if (arguments.length === 1) {
	    var i = arguments[0];
	    return this._coordinates[i]
	  } else if (arguments.length === 2) {
	    var index = arguments[0];
	    var coord = arguments[1];
	    coord.x = this._coordinates[index].x;
	    coord.y = this._coordinates[index].y;
	    coord.z = this._coordinates[index].z;
	  }
	};
	CoordinateArraySequence.prototype.getCoordinateCopy = function getCoordinateCopy (i) {
	  return new Coordinate(this._coordinates[i])
	};
	CoordinateArraySequence.prototype.getDimension = function getDimension () {
	  return this._dimension
	};
	CoordinateArraySequence.prototype.getX = function getX (index) {
	  return this._coordinates[index].x
	};
	CoordinateArraySequence.prototype.clone = function clone () {
	    var this$1 = this;

	  var cloneCoordinates = new Array(this.size()).fill(null);
	  for (var i = 0; i < this._coordinates.length; i++) {
	    cloneCoordinates[i] = this$1._coordinates[i].clone();
	  }
	  return new CoordinateArraySequence(cloneCoordinates, this._dimension)
	};
	CoordinateArraySequence.prototype.expandEnvelope = function expandEnvelope (env) {
	    var this$1 = this;

	  for (var i = 0; i < this._coordinates.length; i++) {
	    env.expandToInclude(this$1._coordinates[i]);
	  }
	  return env
	};
	CoordinateArraySequence.prototype.copy = function copy () {
	    var this$1 = this;

	  var cloneCoordinates = new Array(this.size()).fill(null);
	  for (var i = 0; i < this._coordinates.length; i++) {
	    cloneCoordinates[i] = this$1._coordinates[i].copy();
	  }
	  return new CoordinateArraySequence(cloneCoordinates, this._dimension)
	};
	CoordinateArraySequence.prototype.toString = function toString () {
	    var this$1 = this;

	  if (this._coordinates.length > 0) {
	    var strBuf = new StringBuffer(17 * this._coordinates.length);
	    strBuf.append('(');
	    strBuf.append(this._coordinates[0]);
	    for (var i = 1; i < this._coordinates.length; i++) {
	      strBuf.append(', ');
	      strBuf.append(this$1._coordinates[i]);
	    }
	    strBuf.append(')');
	    return strBuf.toString()
	  } else {
	    return '()'
	  }
	};
	CoordinateArraySequence.prototype.getY = function getY (index) {
	  return this._coordinates[index].y
	};
	CoordinateArraySequence.prototype.toCoordinateArray = function toCoordinateArray () {
	  return this._coordinates
	};
	CoordinateArraySequence.prototype.interfaces_ = function interfaces_ () {
	  return [CoordinateSequence, Serializable]
	};
	CoordinateArraySequence.prototype.getClass = function getClass () {
	  return CoordinateArraySequence
	};
	staticAccessors$18.serialVersionUID.get = function () { return -915438501601840650 };

	Object.defineProperties( CoordinateArraySequence, staticAccessors$18 );

	var CoordinateArraySequenceFactory = function CoordinateArraySequenceFactory () {};

	var staticAccessors$17 = { serialVersionUID: { configurable: true },instanceObject: { configurable: true } };

	CoordinateArraySequenceFactory.prototype.readResolve = function readResolve () {
	  return CoordinateArraySequenceFactory.instance()
	};
	CoordinateArraySequenceFactory.prototype.create = function create () {
	  if (arguments.length === 1) {
	    if (arguments[0] instanceof Array) {
	      var coordinates = arguments[0];
	      return new CoordinateArraySequence(coordinates)
	    } else if (hasInterface(arguments[0], CoordinateSequence)) {
	      var coordSeq = arguments[0];
	      return new CoordinateArraySequence(coordSeq)
	    }
	  } else if (arguments.length === 2) {
	    var size = arguments[0];
	    var dimension = arguments[1];
	    if (dimension > 3) { dimension = 3; }
	    if (dimension < 2) { return new CoordinateArraySequence(size) }
	    return new CoordinateArraySequence(size, dimension)
	  }
	};
	CoordinateArraySequenceFactory.prototype.interfaces_ = function interfaces_ () {
	  return [CoordinateSequenceFactory, Serializable]
	};
	CoordinateArraySequenceFactory.prototype.getClass = function getClass () {
	  return CoordinateArraySequenceFactory
	};
	CoordinateArraySequenceFactory.instance = function instance () {
	  return CoordinateArraySequenceFactory.instanceObject
	};

	staticAccessors$17.serialVersionUID.get = function () { return -4099577099607551657 };
	staticAccessors$17.instanceObject.get = function () { return new CoordinateArraySequenceFactory() };

	Object.defineProperties( CoordinateArraySequenceFactory, staticAccessors$17 );

	/**
	 * @see http://download.oracle.com/javase/6/docs/api/java/util/HashMap.html
	 *
	 * @extends {javascript.util.Map}
	 * @constructor
	 * @private
	 */
	var HashMap = (function (MapInterface) {
	  function HashMap () {
	    MapInterface.call(this);
	    this.map_ = new Map();
	  }

	  if ( MapInterface ) HashMap.__proto__ = MapInterface;
	  HashMap.prototype = Object.create( MapInterface && MapInterface.prototype );
	  HashMap.prototype.constructor = HashMap;
	  /**
	   * @override
	   */
	  HashMap.prototype.get = function get (key) {
	    return this.map_.get(key) || null
	  };

	  /**
	   * @override
	   */
	  HashMap.prototype.put = function put (key, value) {
	    this.map_.set(key, value);
	    return value
	  };

	  /**
	   * @override
	   */
	  HashMap.prototype.values = function values () {
	    var arrayList = new ArrayList();
	    var it = this.map_.values();
	    var o = it.next();
	    while (!o.done) {
	      arrayList.add(o.value);
	      o = it.next();
	    }
	    return arrayList
	  };

	  /**
	   * @override
	   */
	  HashMap.prototype.entrySet = function entrySet () {
	    var hashSet = new HashSet();
	    this.map_.entries().forEach(function (entry) { return hashSet.add(entry); });
	    return hashSet
	  };

	  /**
	   * @override
	   */
	  HashMap.prototype.size = function size () {
	    return this.map_.size()
	  };

	  return HashMap;
	}(Map$1));

	var PrecisionModel = function PrecisionModel () {
	  this._modelType = null;
	  this._scale = null;
	  if (arguments.length === 0) {
	    this._modelType = PrecisionModel.FLOATING;
	  } else if (arguments.length === 1) {
	    if (arguments[0] instanceof Type) {
	      var modelType = arguments[0];
	      this._modelType = modelType;
	      if (modelType === PrecisionModel.FIXED) {
	        this.setScale(1.0);
	      }
	    } else if (typeof arguments[0] === 'number') {
	      var scale = arguments[0];
	      this._modelType = PrecisionModel.FIXED;
	      this.setScale(scale);
	    } else if (arguments[0] instanceof PrecisionModel) {
	      var pm = arguments[0];
	      this._modelType = pm._modelType;
	      this._scale = pm._scale;
	    }
	  }
	};

	var staticAccessors$19 = { serialVersionUID: { configurable: true },maximumPreciseValue: { configurable: true } };
	PrecisionModel.prototype.equals = function equals (other) {
	  if (!(other instanceof PrecisionModel)) {
	    return false
	  }
	  var otherPrecisionModel = other;
	  return this._modelType === otherPrecisionModel._modelType && this._scale === otherPrecisionModel._scale
	};
	PrecisionModel.prototype.compareTo = function compareTo (o) {
	  var other = o;
	  var sigDigits = this.getMaximumSignificantDigits();
	  var otherSigDigits = other.getMaximumSignificantDigits();
	  return new Integer(sigDigits).compareTo(new Integer(otherSigDigits))
	};
	PrecisionModel.prototype.getScale = function getScale () {
	  return this._scale
	};
	PrecisionModel.prototype.isFloating = function isFloating () {
	  return this._modelType === PrecisionModel.FLOATING || this._modelType === PrecisionModel.FLOATING_SINGLE
	};
	PrecisionModel.prototype.getType = function getType () {
	  return this._modelType
	};
	PrecisionModel.prototype.toString = function toString () {
	  var description = 'UNKNOWN';
	  if (this._modelType === PrecisionModel.FLOATING) {
	    description = 'Floating';
	  } else if (this._modelType === PrecisionModel.FLOATING_SINGLE) {
	    description = 'Floating-Single';
	  } else if (this._modelType === PrecisionModel.FIXED) {
	    description = 'Fixed (Scale=' + this.getScale() + ')';
	  }
	  return description
	};
	PrecisionModel.prototype.makePrecise = function makePrecise () {
	  if (typeof arguments[0] === 'number') {
	    var val = arguments[0];
	    if (Double.isNaN(val)) { return val }
	    if (this._modelType === PrecisionModel.FLOATING_SINGLE) {
	      var floatSingleVal = val;
	      return floatSingleVal
	    }
	    if (this._modelType === PrecisionModel.FIXED) {
	      return Math.round(val * this._scale) / this._scale
	    }
	    return val
	  } else if (arguments[0] instanceof Coordinate) {
	    var coord = arguments[0];
	    if (this._modelType === PrecisionModel.FLOATING) { return null }
	    coord.x = this.makePrecise(coord.x);
	    coord.y = this.makePrecise(coord.y);
	  }
	};
	PrecisionModel.prototype.getMaximumSignificantDigits = function getMaximumSignificantDigits () {
	  var maxSigDigits = 16;
	  if (this._modelType === PrecisionModel.FLOATING) {
	    maxSigDigits = 16;
	  } else if (this._modelType === PrecisionModel.FLOATING_SINGLE) {
	    maxSigDigits = 6;
	  } else if (this._modelType === PrecisionModel.FIXED) {
	    maxSigDigits = 1 + Math.trunc(Math.ceil(Math.log(this.getScale()) / Math.log(10)));
	  }
	  return maxSigDigits
	};
	PrecisionModel.prototype.setScale = function setScale (scale) {
	  this._scale = Math.abs(scale);
	};
	PrecisionModel.prototype.interfaces_ = function interfaces_ () {
	  return [Serializable, Comparable]
	};
	PrecisionModel.prototype.getClass = function getClass () {
	  return PrecisionModel
	};
	PrecisionModel.mostPrecise = function mostPrecise (pm1, pm2) {
	  if (pm1.compareTo(pm2) >= 0) { return pm1 }
	  return pm2
	};
	staticAccessors$19.serialVersionUID.get = function () { return 7777263578777803835 };
	staticAccessors$19.maximumPreciseValue.get = function () { return 9007199254740992.0 };

	Object.defineProperties( PrecisionModel, staticAccessors$19 );

	var Type = function Type (name) {
	  this._name = name || null;
	  Type.nameToTypeMap.put(name, this);
	};

	var staticAccessors$1$1 = { serialVersionUID: { configurable: true },nameToTypeMap: { configurable: true } };
	Type.prototype.readResolve = function readResolve () {
	  return Type.nameToTypeMap.get(this._name)
	};
	Type.prototype.toString = function toString () {
	  return this._name
	};
	Type.prototype.interfaces_ = function interfaces_ () {
	  return [Serializable]
	};
	Type.prototype.getClass = function getClass () {
	  return Type
	};
	staticAccessors$1$1.serialVersionUID.get = function () { return -5528602631731589822 };
	staticAccessors$1$1.nameToTypeMap.get = function () { return new HashMap() };

	Object.defineProperties( Type, staticAccessors$1$1 );

	PrecisionModel.Type = Type;
	PrecisionModel.FIXED = new Type('FIXED');
	PrecisionModel.FLOATING = new Type('FLOATING');
	PrecisionModel.FLOATING_SINGLE = new Type('FLOATING SINGLE');

	var GeometryFactory = function GeometryFactory () {
	  this._precisionModel = new PrecisionModel();
	  this._SRID = 0;
	  this._coordinateSequenceFactory = GeometryFactory.getDefaultCoordinateSequenceFactory();

	  if (arguments.length === 0) ; else if (arguments.length === 1) {
	    if (hasInterface(arguments[0], CoordinateSequenceFactory)) {
	      this._coordinateSequenceFactory = arguments[0];
	    } else if (arguments[0] instanceof PrecisionModel) {
	      this._precisionModel = arguments[0];
	    }
	  } else if (arguments.length === 2) {
	    this._precisionModel = arguments[0];
	    this._SRID = arguments[1];
	  } else if (arguments.length === 3) {
	    this._precisionModel = arguments[0];
	    this._SRID = arguments[1];
	    this._coordinateSequenceFactory = arguments[2];
	  }
	};

	var staticAccessors$2 = { serialVersionUID: { configurable: true } };
	GeometryFactory.prototype.toGeometry = function toGeometry (envelope) {
	  if (envelope.isNull()) {
	    return this.createPoint(null)
	  }
	  if (envelope.getMinX() === envelope.getMaxX() && envelope.getMinY() === envelope.getMaxY()) {
	    return this.createPoint(new Coordinate(envelope.getMinX(), envelope.getMinY()))
	  }
	  if (envelope.getMinX() === envelope.getMaxX() || envelope.getMinY() === envelope.getMaxY()) {
	    return this.createLineString([new Coordinate(envelope.getMinX(), envelope.getMinY()), new Coordinate(envelope.getMaxX(), envelope.getMaxY())])
	  }
	  return this.createPolygon(this.createLinearRing([new Coordinate(envelope.getMinX(), envelope.getMinY()), new Coordinate(envelope.getMinX(), envelope.getMaxY()), new Coordinate(envelope.getMaxX(), envelope.getMaxY()), new Coordinate(envelope.getMaxX(), envelope.getMinY()), new Coordinate(envelope.getMinX(), envelope.getMinY())]), null)
	};
	GeometryFactory.prototype.createLineString = function createLineString (coordinates) {
	  if (!coordinates) { return new LineString(this.getCoordinateSequenceFactory().create([]), this) }
	  else if (coordinates instanceof Array) { return new LineString(this.getCoordinateSequenceFactory().create(coordinates), this) }
	  else if (hasInterface(coordinates, CoordinateSequence)) { return new LineString(coordinates, this) }
	};
	GeometryFactory.prototype.createMultiLineString = function createMultiLineString () {
	  if (arguments.length === 0) {
	    return new MultiLineString(null, this)
	  } else if (arguments.length === 1) {
	    var lineStrings = arguments[0];
	    return new MultiLineString(lineStrings, this)
	  }
	};
	GeometryFactory.prototype.buildGeometry = function buildGeometry (geomList) {
	  var geomClass = null;
	  var isHeterogeneous = false;
	  var hasGeometryCollection = false;
	  for (var i = geomList.iterator(); i.hasNext();) {
	    var geom = i.next();
	    var partClass = geom.getClass();
	    if (geomClass === null) {
	      geomClass = partClass;
	    }
	    if (partClass !== geomClass) {
	      isHeterogeneous = true;
	    }
	    if (geom.isGeometryCollectionOrDerived()) { hasGeometryCollection = true; }
	  }
	  if (geomClass === null) {
	    return this.createGeometryCollection()
	  }
	  if (isHeterogeneous || hasGeometryCollection) {
	    return this.createGeometryCollection(GeometryFactory.toGeometryArray(geomList))
	  }
	  var geom0 = geomList.iterator().next();
	  var isCollection = geomList.size() > 1;
	  if (isCollection) {
	    if (geom0 instanceof Polygon) {
	      return this.createMultiPolygon(GeometryFactory.toPolygonArray(geomList))
	    } else if (geom0 instanceof LineString) {
	      return this.createMultiLineString(GeometryFactory.toLineStringArray(geomList))
	    } else if (geom0 instanceof Point) {
	      return this.createMultiPoint(GeometryFactory.toPointArray(geomList))
	    }
	    Assert.shouldNeverReachHere('Unhandled class: ' + geom0.getClass().getName());
	  }
	  return geom0
	};
	GeometryFactory.prototype.createMultiPointFromCoords = function createMultiPointFromCoords (coordinates) {
	  return this.createMultiPoint(coordinates !== null ? this.getCoordinateSequenceFactory().create(coordinates) : null)
	};
	GeometryFactory.prototype.createPoint = function createPoint () {
	  if (arguments.length === 0) {
	    return this.createPoint(this.getCoordinateSequenceFactory().create([]))
	  } else if (arguments.length === 1) {
	    if (arguments[0] instanceof Coordinate) {
	      var coordinate = arguments[0];
	      return this.createPoint(coordinate !== null ? this.getCoordinateSequenceFactory().create([coordinate]) : null)
	    } else if (hasInterface(arguments[0], CoordinateSequence)) {
	      var coordinates = arguments[0];
	      return new Point(coordinates, this)
	    }
	  }
	};
	GeometryFactory.prototype.getCoordinateSequenceFactory = function getCoordinateSequenceFactory () {
	  return this._coordinateSequenceFactory
	};
	GeometryFactory.prototype.createPolygon = function createPolygon () {
	  if (arguments.length === 0) {
	    return new Polygon(null, null, this)
	  } else if (arguments.length === 1) {
	    if (hasInterface(arguments[0], CoordinateSequence)) {
	      var coordinates = arguments[0];
	      return this.createPolygon(this.createLinearRing(coordinates))
	    } else if (arguments[0] instanceof Array) {
	      var coordinates$1 = arguments[0];
	      return this.createPolygon(this.createLinearRing(coordinates$1))
	    } else if (arguments[0] instanceof LinearRing) {
	      var shell = arguments[0];
	      return this.createPolygon(shell, null)
	    }
	  } else if (arguments.length === 2) {
	    var shell$1 = arguments[0];
	    var holes = arguments[1];
	    return new Polygon(shell$1, holes, this)
	  }
	};
	GeometryFactory.prototype.getSRID = function getSRID () {
	  return this._SRID
	};
	GeometryFactory.prototype.createGeometryCollection = function createGeometryCollection () {
	  if (arguments.length === 0) {
	    return new GeometryCollection(null, this)
	  } else if (arguments.length === 1) {
	    var geometries = arguments[0];
	    return new GeometryCollection(geometries, this)
	  }
	};
	GeometryFactory.prototype.createGeometry = function createGeometry (g) {
	  var editor = new GeometryEditor(this);
	  return editor.edit(g, {
	    edit: function () {
	      if (arguments.length === 2) {
	        var coordSeq = arguments[0];
	        // const geometry = arguments[1]
	        return this._coordinateSequenceFactory.create(coordSeq)
	      }
	    }
	  })
	};
	GeometryFactory.prototype.getPrecisionModel = function getPrecisionModel () {
	  return this._precisionModel
	};
	GeometryFactory.prototype.createLinearRing = function createLinearRing () {
	  if (arguments.length === 0) {
	    return this.createLinearRing(this.getCoordinateSequenceFactory().create([]))
	  } else if (arguments.length === 1) {
	    if (arguments[0] instanceof Array) {
	      var coordinates = arguments[0];
	      return this.createLinearRing(coordinates !== null ? this.getCoordinateSequenceFactory().create(coordinates) : null)
	    } else if (hasInterface(arguments[0], CoordinateSequence)) {
	      var coordinates$1 = arguments[0];
	      return new LinearRing(coordinates$1, this)
	    }
	  }
	};
	GeometryFactory.prototype.createMultiPolygon = function createMultiPolygon () {
	  if (arguments.length === 0) {
	    return new MultiPolygon(null, this)
	  } else if (arguments.length === 1) {
	    var polygons = arguments[0];
	    return new MultiPolygon(polygons, this)
	  }
	};
	GeometryFactory.prototype.createMultiPoint = function createMultiPoint () {
	    var this$1 = this;

	  if (arguments.length === 0) {
	    return new MultiPoint(null, this)
	  } else if (arguments.length === 1) {
	    if (arguments[0] instanceof Array) {
	      var point = arguments[0];
	      return new MultiPoint(point, this)
	    } else if (arguments[0] instanceof Array) {
	      var coordinates = arguments[0];
	      return this.createMultiPoint(coordinates !== null ? this.getCoordinateSequenceFactory().create(coordinates) : null)
	    } else if (hasInterface(arguments[0], CoordinateSequence)) {
	      var coordinates$1 = arguments[0];
	      if (coordinates$1 === null) {
	        return this.createMultiPoint(new Array(0).fill(null))
	      }
	      var points = new Array(coordinates$1.size()).fill(null);
	      for (var i = 0; i < coordinates$1.size(); i++) {
	        var ptSeq = this$1.getCoordinateSequenceFactory().create(1, coordinates$1.getDimension());
	        CoordinateSequences.copy(coordinates$1, i, ptSeq, 0, 1);
	        points[i] = this$1.createPoint(ptSeq);
	      }
	      return this.createMultiPoint(points)
	    }
	  }
	};
	GeometryFactory.prototype.interfaces_ = function interfaces_ () {
	  return [Serializable]
	};
	GeometryFactory.prototype.getClass = function getClass () {
	  return GeometryFactory
	};
	GeometryFactory.toMultiPolygonArray = function toMultiPolygonArray (multiPolygons) {
	  var multiPolygonArray = new Array(multiPolygons.size()).fill(null);
	  return multiPolygons.toArray(multiPolygonArray)
	};
	GeometryFactory.toGeometryArray = function toGeometryArray (geometries) {
	  if (geometries === null) { return null }
	  var geometryArray = new Array(geometries.size()).fill(null);
	  return geometries.toArray(geometryArray)
	};
	GeometryFactory.getDefaultCoordinateSequenceFactory = function getDefaultCoordinateSequenceFactory () {
	  return CoordinateArraySequenceFactory.instance()
	};
	GeometryFactory.toMultiLineStringArray = function toMultiLineStringArray (multiLineStrings) {
	  var multiLineStringArray = new Array(multiLineStrings.size()).fill(null);
	  return multiLineStrings.toArray(multiLineStringArray)
	};
	GeometryFactory.toLineStringArray = function toLineStringArray (lineStrings) {
	  var lineStringArray = new Array(lineStrings.size()).fill(null);
	  return lineStrings.toArray(lineStringArray)
	};
	GeometryFactory.toMultiPointArray = function toMultiPointArray (multiPoints) {
	  var multiPointArray = new Array(multiPoints.size()).fill(null);
	  return multiPoints.toArray(multiPointArray)
	};
	GeometryFactory.toLinearRingArray = function toLinearRingArray (linearRings) {
	  var linearRingArray = new Array(linearRings.size()).fill(null);
	  return linearRings.toArray(linearRingArray)
	};
	GeometryFactory.toPointArray = function toPointArray (points) {
	  var pointArray = new Array(points.size()).fill(null);
	  return points.toArray(pointArray)
	};
	GeometryFactory.toPolygonArray = function toPolygonArray (polygons) {
	  var polygonArray = new Array(polygons.size()).fill(null);
	  return polygons.toArray(polygonArray)
	};
	GeometryFactory.createPointFromInternalCoord = function createPointFromInternalCoord (coord, exemplar) {
	  exemplar.getPrecisionModel().makePrecise(coord);
	  return exemplar.getFactory().createPoint(coord)
	};
	staticAccessors$2.serialVersionUID.get = function () { return -6820524753094095635 };

	Object.defineProperties( GeometryFactory, staticAccessors$2 );

	var geometryTypes = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon'];

	/**
	 * Class for reading and writing Well-Known Text.Create a new parser for GeoJSON
	 * NOTE: Adapted from OpenLayers 2.11 implementation.
	 */

	/**
	 * Create a new parser for GeoJSON
	 *
	 * @param {GeometryFactory} geometryFactory
	 * @return An instance of GeoJsonParser.
	 * @constructor
	 * @private
	 */
	var GeoJSONParser = function GeoJSONParser (geometryFactory) {
	  this.geometryFactory = geometryFactory || new GeometryFactory();
	};
	/**
	 * Deserialize a GeoJSON object and return the Geometry or Feature(Collection) with JSTS Geometries
	 *
	 * @param {}
	 *        A GeoJSON object.
	 * @return {} A Geometry instance or object representing a Feature(Collection) with Geometry instances.
	 * @private
	 */
	GeoJSONParser.prototype.read = function read (json) {
	  var obj;
	  if (typeof json === 'string') {
	    obj = JSON.parse(json);
	  } else {
	    obj = json;
	  }

	  var type = obj.type;

	  if (!parse[type]) {
	    throw new Error('Unknown GeoJSON type: ' + obj.type)
	  }

	  if (geometryTypes.indexOf(type) !== -1) {
	    return parse[type].apply(this, [obj.coordinates])
	  } else if (type === 'GeometryCollection') {
	    return parse[type].apply(this, [obj.geometries])
	  }

	  // feature or feature collection
	  return parse[type].apply(this, [obj])
	};

	/**
	 * Serialize a Geometry object into GeoJSON
	 *
	 * @param {Geometry}
	 *        geometry A Geometry or array of Geometries.
	 * @return {Object} A GeoJSON object represting the input Geometry/Geometries.
	 * @private
	 */
	GeoJSONParser.prototype.write = function write (geometry) {
	  var type = geometry.getGeometryType();

	  if (!extract[type]) {
	    throw new Error('Geometry is not supported')
	  }

	  return extract[type].apply(this, [geometry])
	};

	var parse = {
	  /**
	   * Parse a GeoJSON Feature object
	   *
	   * @param {Object}
	   *          obj Object to parse.
	   *
	   * @return {Object} Feature with geometry/bbox converted to JSTS Geometries.
	   */
	  Feature: function (obj) {
	    var feature = {};

	    // copy features
	    for (var key in obj) {
	      feature[key] = obj[key];
	    }

	    // parse geometry
	    if (obj.geometry) {
	      var type = obj.geometry.type;
	      if (!parse[type]) {
	        throw new Error('Unknown GeoJSON type: ' + obj.type)
	      }
	      feature.geometry = this.read(obj.geometry);
	    }

	    // bbox
	    if (obj.bbox) {
	      feature.bbox = parse.bbox.apply(this, [obj.bbox]);
	    }

	    return feature
	  },

	  /**
	   * Parse a GeoJSON FeatureCollection object
	   *
	   * @param {Object}
	   *          obj Object to parse.
	   *
	   * @return {Object} FeatureCollection with geometry/bbox converted to JSTS Geometries.
	   */
	  FeatureCollection: function (obj) {
	    var this$1 = this;

	    var featureCollection = {};

	    if (obj.features) {
	      featureCollection.features = [];

	      for (var i = 0; i < obj.features.length; ++i) {
	        featureCollection.features.push(this$1.read(obj.features[i]));
	      }
	    }

	    if (obj.bbox) {
	      featureCollection.bbox = this.parse.bbox.apply(this, [obj.bbox]);
	    }

	    return featureCollection
	  },

	  /**
	   * Convert the ordinates in an array to an array of Coordinates
	   *
	   * @param {Array}
	   *          array Array with {Number}s.
	   *
	   * @return {Array} Array with Coordinates.
	   */
	  coordinates: function (array) {
	    var coordinates = [];
	    for (var i = 0; i < array.length; ++i) {
	      var sub = array[i];
	      coordinates.push(new Coordinate(sub[0], sub[1]));
	    }
	    return coordinates
	  },

	  /**
	   * Convert the bbox to a LinearRing
	   *
	   * @param {Array}
	   *          array Array with [xMin, yMin, xMax, yMax].
	   *
	   * @return {Array} Array with Coordinates.
	   */
	  bbox: function (array) {
	    return this.geometryFactory.createLinearRing([
	      new Coordinate(array[0], array[1]),
	      new Coordinate(array[2], array[1]),
	      new Coordinate(array[2], array[3]),
	      new Coordinate(array[0], array[3]),
	      new Coordinate(array[0], array[1])
	    ])
	  },

	  /**
	   * Convert an Array with ordinates to a Point
	   *
	   * @param {Array}
	   *          array Array with ordinates.
	   *
	   * @return {Point} Point.
	   */
	  Point: function (array) {
	    var coordinate = new Coordinate(array[0], array[1]);
	    return this.geometryFactory.createPoint(coordinate)
	  },

	  /**
	   * Convert an Array with coordinates to a MultiPoint
	   *
	   * @param {Array}
	   *          array Array with coordinates.
	   *
	   * @return {MultiPoint} MultiPoint.
	   */
	  MultiPoint: function (array) {
	    var this$1 = this;

	    var points = [];
	    for (var i = 0; i < array.length; ++i) {
	      points.push(parse.Point.apply(this$1, [array[i]]));
	    }
	    return this.geometryFactory.createMultiPoint(points)
	  },

	  /**
	   * Convert an Array with coordinates to a LineString
	   *
	   * @param {Array}
	   *          array Array with coordinates.
	   *
	   * @return {LineString} LineString.
	   */
	  LineString: function (array) {
	    var coordinates = parse.coordinates.apply(this, [array]);
	    return this.geometryFactory.createLineString(coordinates)
	  },

	  /**
	   * Convert an Array with coordinates to a MultiLineString
	   *
	   * @param {Array}
	   *          array Array with coordinates.
	   *
	   * @return {MultiLineString} MultiLineString.
	   */
	  MultiLineString: function (array) {
	    var this$1 = this;

	    var lineStrings = [];
	    for (var i = 0; i < array.length; ++i) {
	      lineStrings.push(parse.LineString.apply(this$1, [array[i]]));
	    }
	    return this.geometryFactory.createMultiLineString(lineStrings)
	  },

	  /**
	   * Convert an Array to a Polygon
	   *
	   * @param {Array}
	   *          array Array with shell and holes.
	   *
	   * @return {Polygon} Polygon.
	   */
	  Polygon: function (array) {
	    var this$1 = this;

	    var shellCoordinates = parse.coordinates.apply(this, [array[0]]);
	    var shell = this.geometryFactory.createLinearRing(shellCoordinates);
	    var holes = [];
	    for (var i = 1; i < array.length; ++i) {
	      var hole = array[i];
	      var coordinates = parse.coordinates.apply(this$1, [hole]);
	      var linearRing = this$1.geometryFactory.createLinearRing(coordinates);
	      holes.push(linearRing);
	    }
	    return this.geometryFactory.createPolygon(shell, holes)
	  },

	  /**
	   * Convert an Array to a MultiPolygon
	   *
	   * @param {Array}
	   *          array Array of arrays with shell and rings.
	   *
	   * @return {MultiPolygon} MultiPolygon.
	   */
	  MultiPolygon: function (array) {
	    var this$1 = this;

	    var polygons = [];
	    for (var i = 0; i < array.length; ++i) {
	      var polygon = array[i];
	      polygons.push(parse.Polygon.apply(this$1, [polygon]));
	    }
	    return this.geometryFactory.createMultiPolygon(polygons)
	  },

	  /**
	   * Convert an Array to a GeometryCollection
	   *
	   * @param {Array}
	   *          array Array of GeoJSON geometries.
	   *
	   * @return {GeometryCollection} GeometryCollection.
	   */
	  GeometryCollection: function (array) {
	    var this$1 = this;

	    var geometries = [];
	    for (var i = 0; i < array.length; ++i) {
	      var geometry = array[i];
	      geometries.push(this$1.read(geometry));
	    }
	    return this.geometryFactory.createGeometryCollection(geometries)
	  }
	};

	var extract = {
	  /**
	   * Convert a Coordinate to an Array
	   *
	   * @param {Coordinate}
	   *          coordinate Coordinate to convert.
	   *
	   * @return {Array} Array of ordinates.
	   */
	  coordinate: function (coordinate) {
	    return [coordinate.x, coordinate.y]
	  },

	  /**
	   * Convert a Point to a GeoJSON object
	   *
	   * @param {Point}
	   *          point Point to convert.
	   *
	   * @return {Array} Array of 2 ordinates (paired to a coordinate).
	   */
	  Point: function (point) {
	    var array = extract.coordinate.apply(this, [point.getCoordinate()]);
	    return {
	      type: 'Point',
	      coordinates: array
	    }
	  },

	  /**
	   * Convert a MultiPoint to a GeoJSON object
	   *
	   * @param {MultiPoint}
	   *          multipoint MultiPoint to convert.
	   *
	   * @return {Array} Array of coordinates.
	   */
	  MultiPoint: function (multipoint) {
	    var this$1 = this;

	    var array = [];
	    for (var i = 0; i < multipoint._geometries.length; ++i) {
	      var point = multipoint._geometries[i];
	      var geoJson = extract.Point.apply(this$1, [point]);
	      array.push(geoJson.coordinates);
	    }
	    return {
	      type: 'MultiPoint',
	      coordinates: array
	    }
	  },

	  /**
	   * Convert a LineString to a GeoJSON object
	   *
	   * @param {LineString}
	   *          linestring LineString to convert.
	   *
	   * @return {Array} Array of coordinates.
	   */
	  LineString: function (linestring) {
	    var this$1 = this;

	    var array = [];
	    var coordinates = linestring.getCoordinates();
	    for (var i = 0; i < coordinates.length; ++i) {
	      var coordinate = coordinates[i];
	      array.push(extract.coordinate.apply(this$1, [coordinate]));
	    }
	    return {
	      type: 'LineString',
	      coordinates: array
	    }
	  },

	  /**
	   * Convert a MultiLineString to a GeoJSON object
	   *
	   * @param {MultiLineString}
	   *          multilinestring MultiLineString to convert.
	   *
	   * @return {Array} Array of Array of coordinates.
	   */
	  MultiLineString: function (multilinestring) {
	    var this$1 = this;

	    var array = [];
	    for (var i = 0; i < multilinestring._geometries.length; ++i) {
	      var linestring = multilinestring._geometries[i];
	      var geoJson = extract.LineString.apply(this$1, [linestring]);
	      array.push(geoJson.coordinates);
	    }
	    return {
	      type: 'MultiLineString',
	      coordinates: array
	    }
	  },

	  /**
	   * Convert a Polygon to a GeoJSON object
	   *
	   * @param {Polygon}
	   *          polygon Polygon to convert.
	   *
	   * @return {Array} Array with shell, holes.
	   */
	  Polygon: function (polygon) {
	    var this$1 = this;

	    var array = [];
	    var shellGeoJson = extract.LineString.apply(this, [polygon._shell]);
	    array.push(shellGeoJson.coordinates);
	    for (var i = 0; i < polygon._holes.length; ++i) {
	      var hole = polygon._holes[i];
	      var holeGeoJson = extract.LineString.apply(this$1, [hole]);
	      array.push(holeGeoJson.coordinates);
	    }
	    return {
	      type: 'Polygon',
	      coordinates: array
	    }
	  },

	  /**
	   * Convert a MultiPolygon to a GeoJSON object
	   *
	   * @param {MultiPolygon}
	   *          multipolygon MultiPolygon to convert.
	   *
	   * @return {Array} Array of polygons.
	   */
	  MultiPolygon: function (multipolygon) {
	    var this$1 = this;

	    var array = [];
	    for (var i = 0; i < multipolygon._geometries.length; ++i) {
	      var polygon = multipolygon._geometries[i];
	      var geoJson = extract.Polygon.apply(this$1, [polygon]);
	      array.push(geoJson.coordinates);
	    }
	    return {
	      type: 'MultiPolygon',
	      coordinates: array
	    }
	  },

	  /**
	   * Convert a GeometryCollection to a GeoJSON object
	   *
	   * @param {GeometryCollection}
	   *          collection GeometryCollection to convert.
	   *
	   * @return {Array} Array of geometries.
	   */
	  GeometryCollection: function (collection) {
	    var this$1 = this;

	    var array = [];
	    for (var i = 0; i < collection._geometries.length; ++i) {
	      var geometry = collection._geometries[i];
	      var type = geometry.getGeometryType();
	      array.push(extract[type].apply(this$1, [geometry]));
	    }
	    return {
	      type: 'GeometryCollection',
	      geometries: array
	    }
	  }
	};

	/**
	 * Converts a geometry in GeoJSON to a {@link Geometry}.
	 */

	/**
	 * A <code>GeoJSONReader</code> is parameterized by a <code>GeometryFactory</code>,
	 * to allow it to create <code>Geometry</code> objects of the appropriate
	 * implementation. In particular, the <code>GeometryFactory</code> determines
	 * the <code>PrecisionModel</code> and <code>SRID</code> that is used.
	 *
	 * @param {GeometryFactory} geometryFactory
	 * @constructor
	 */
	var GeoJSONReader = function GeoJSONReader (geometryFactory) {
	  this.geometryFactory = geometryFactory || new GeometryFactory();
	  this.precisionModel = this.geometryFactory.getPrecisionModel();
	  this.parser = new GeoJSONParser(this.geometryFactory);
	};
	/**
	 * Reads a GeoJSON representation of a {@link Geometry}
	 *
	 * Will also parse GeoJSON Features/FeatureCollections as custom objects.
	 *
	 * @param {Object|String} geoJson a GeoJSON Object or String.
	 * @return {Geometry|Object} a <code>Geometry or Feature/FeatureCollection representation.</code>
	 * @memberof GeoJSONReader
	 */
	GeoJSONReader.prototype.read = function read (geoJson) {
	  var geometry = this.parser.read(geoJson);

	  if (this.precisionModel.getType() === PrecisionModel.FIXED) {
	    this.reducePrecision(geometry);
	  }

	  return geometry
	};

	// NOTE: this is a hack
	GeoJSONReader.prototype.reducePrecision = function reducePrecision (geometry) {
	    var this$1 = this;

	  var i, len;

	  if (geometry.coordinate) {
	    this.precisionModel.makePrecise(geometry.coordinate);
	  } else if (geometry.points) {
	    for (i = 0, len = geometry.points.length; i < len; i++) {
	      this$1.precisionModel.makePrecise(geometry.points[i]);
	    }
	  } else if (geometry.geometries) {
	    for (i = 0, len = geometry.geometries.length; i < len; i++) {
	      this$1.reducePrecision(geometry.geometries[i]);
	    }
	  }
	};

	/**
	 * @module GeoJSONWriter
	 */

	/**
	 * Writes the GeoJSON representation of a {@link Geometry}. The
	 * The GeoJSON format is defined <A
	 * HREF="http://geojson.org/geojson-spec.html">here</A>.
	 */

	/**
	 * The <code>GeoJSONWriter</code> outputs coordinates rounded to the precision
	 * model. Only the maximum number of decimal places necessary to represent the
	 * ordinates to the required precision will be output.
	 *
	 * @param {GeometryFactory} geometryFactory
	 * @constructor
	 */
	var GeoJSONWriter = function GeoJSONWriter () {
	  this.parser = new GeoJSONParser(this.geometryFactory);
	};
	/**
	 * Converts a <code>Geometry</code> to its GeoJSON representation.
	 *
	 * @param {Geometry}
	 *        geometry a <code>Geometry</code> to process.
	 * @return {Object} The GeoJSON representation of the Geometry.
	 * @memberof GeoJSONWriter
	 */
	GeoJSONWriter.prototype.write = function write (geometry) {
	  return this.parser.write(geometry)
	};

	/* eslint-disable no-undef */

	// io

	var Position = function Position () {};

	var staticAccessors$20 = { ON: { configurable: true },LEFT: { configurable: true },RIGHT: { configurable: true } };

	Position.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Position.prototype.getClass = function getClass () {
	  return Position
	};
	Position.opposite = function opposite (position) {
	  if (position === Position.LEFT) { return Position.RIGHT }
	  if (position === Position.RIGHT) { return Position.LEFT }
	  return position
	};
	staticAccessors$20.ON.get = function () { return 0 };
	staticAccessors$20.LEFT.get = function () { return 1 };
	staticAccessors$20.RIGHT.get = function () { return 2 };

	Object.defineProperties( Position, staticAccessors$20 );

	/**
	 * @param {string=} message Optional message
	 * @extends {Error}
	 * @constructor
	 * @private
	 */
	function EmptyStackException (message) {
	  this.message = message || '';
	}
	EmptyStackException.prototype = new Error();

	/**
	 * @type {string}
	 */
	EmptyStackException.prototype.name = 'EmptyStackException';

	/**
	 * @see http://download.oracle.com/javase/6/docs/api/java/util/Stack.html
	 *
	 * @extends {List}
	 * @constructor
	 * @private
	 */
	function Stack () {
	  /**
	   * @type {Array}
	   * @private
	   */
	  this.array_ = [];
	}
	Stack.prototype = new List();

	/**
	 * @override
	 */
	Stack.prototype.add = function (e) {
	  this.array_.push(e);
	  return true
	};

	/**
	 * @override
	 */
	Stack.prototype.get = function (index) {
	  if (index < 0 || index >= this.size()) {
	    throw new Error()
	  }

	  return this.array_[index]
	};

	/**
	 * Pushes an item onto the top of this stack.
	 * @param {Object} e
	 * @return {Object}
	 */
	Stack.prototype.push = function (e) {
	  this.array_.push(e);
	  return e
	};

	/**
	 * Pushes an item onto the top of this stack.
	 * @param {Object} e
	 * @return {Object}
	 */
	Stack.prototype.pop = function (e) {
	  if (this.array_.length === 0) {
	    throw new EmptyStackException()
	  }

	  return this.array_.pop()
	};

	/**
	 * Looks at the object at the top of this stack without removing it from the
	 * stack.
	 * @return {Object}
	 */
	Stack.prototype.peek = function () {
	  if (this.array_.length === 0) {
	    throw new EmptyStackException()
	  }

	  return this.array_[this.array_.length - 1]
	};

	/**
	 * Tests if this stack is empty.
	 * @return {boolean} true if and only if this stack contains no items; false
	 *         otherwise.
	 */
	Stack.prototype.empty = function () {
	  if (this.array_.length === 0) {
	    return true
	  } else {
	    return false
	  }
	};

	/**
	 * @return {boolean}
	 */
	Stack.prototype.isEmpty = function () {
	  return this.empty()
	};

	/**
	 * Returns the 1-based position where an object is on this stack. If the object
	 * o occurs as an item in this stack, this method returns the distance from the
	 * top of the stack of the occurrence nearest the top of the stack; the topmost
	 * item on the stack is considered to be at distance 1. The equals method is
	 * used to compare o to the items in this stack.
	 *
	 * NOTE: does not currently actually use equals. (=== is used)
	 *
	 * @param {Object} o
	 * @return {number} the 1-based position from the top of the stack where the
	 *         object is located; the return value -1 indicates that the object is
	 *         not on the stack.
	 */
	Stack.prototype.search = function (o) {
	  return this.array_.indexOf(o)
	};

	/**
	 * @return {number}
	 * @export
	 */
	Stack.prototype.size = function () {
	  return this.array_.length
	};

	/**
	 * @return {Array}
	 */
	Stack.prototype.toArray = function () {
	  var this$1 = this;

	  var array = [];

	  for (var i = 0, len = this.array_.length; i < len; i++) {
	    array.push(this$1.array_[i]);
	  }

	  return array
	};

	var RightmostEdgeFinder = function RightmostEdgeFinder () {
	  this._minIndex = -1;
	  this._minCoord = null;
	  this._minDe = null;
	  this._orientedDe = null;
	};
	RightmostEdgeFinder.prototype.getCoordinate = function getCoordinate () {
	  return this._minCoord
	};
	RightmostEdgeFinder.prototype.getRightmostSide = function getRightmostSide (de, index) {
	  var side = this.getRightmostSideOfSegment(de, index);
	  if (side < 0) { side = this.getRightmostSideOfSegment(de, index - 1); }
	  if (side < 0) {
	    this._minCoord = null;
	    this.checkForRightmostCoordinate(de);
	  }
	  return side
	};
	RightmostEdgeFinder.prototype.findRightmostEdgeAtVertex = function findRightmostEdgeAtVertex () {
	  var pts = this._minDe.getEdge().getCoordinates();
	  Assert.isTrue(this._minIndex > 0 && this._minIndex < pts.length, 'rightmost point expected to be interior vertex of edge');
	  var pPrev = pts[this._minIndex - 1];
	  var pNext = pts[this._minIndex + 1];
	  var orientation = CGAlgorithms.computeOrientation(this._minCoord, pNext, pPrev);
	  var usePrev = false;
	  if (pPrev.y < this._minCoord.y && pNext.y < this._minCoord.y && orientation === CGAlgorithms.COUNTERCLOCKWISE) {
	    usePrev = true;
	  } else if (pPrev.y > this._minCoord.y && pNext.y > this._minCoord.y && orientation === CGAlgorithms.CLOCKWISE) {
	    usePrev = true;
	  }
	  if (usePrev) {
	    this._minIndex = this._minIndex - 1;
	  }
	};
	RightmostEdgeFinder.prototype.getRightmostSideOfSegment = function getRightmostSideOfSegment (de, i) {
	  var e = de.getEdge();
	  var coord = e.getCoordinates();
	  if (i < 0 || i + 1 >= coord.length) { return -1 }
	  if (coord[i].y === coord[i + 1].y) { return -1 }
	  var pos = Position.LEFT;
	  if (coord[i].y < coord[i + 1].y) { pos = Position.RIGHT; }
	  return pos
	};
	RightmostEdgeFinder.prototype.getEdge = function getEdge () {
	  return this._orientedDe
	};
	RightmostEdgeFinder.prototype.checkForRightmostCoordinate = function checkForRightmostCoordinate (de) {
	    var this$1 = this;

	  var coord = de.getEdge().getCoordinates();
	  for (var i = 0; i < coord.length - 1; i++) {
	    if (this$1._minCoord === null || coord[i].x > this$1._minCoord.x) {
	      this$1._minDe = de;
	      this$1._minIndex = i;
	      this$1._minCoord = coord[i];
	    }
	  }
	};
	RightmostEdgeFinder.prototype.findRightmostEdgeAtNode = function findRightmostEdgeAtNode () {
	  var node = this._minDe.getNode();
	  var star = node.getEdges();
	  this._minDe = star.getRightmostEdge();
	  if (!this._minDe.isForward()) {
	    this._minDe = this._minDe.getSym();
	    this._minIndex = this._minDe.getEdge().getCoordinates().length - 1;
	  }
	};
	RightmostEdgeFinder.prototype.findEdge = function findEdge (dirEdgeList) {
	    var this$1 = this;

	  for (var i = dirEdgeList.iterator(); i.hasNext();) {
	    var de = i.next();
	    if (!de.isForward()) { continue }
	    this$1.checkForRightmostCoordinate(de);
	  }
	  Assert.isTrue(this._minIndex !== 0 || this._minCoord.equals(this._minDe.getCoordinate()), 'inconsistency in rightmost processing');
	  if (this._minIndex === 0) {
	    this.findRightmostEdgeAtNode();
	  } else {
	    this.findRightmostEdgeAtVertex();
	  }
	  this._orientedDe = this._minDe;
	  var rightmostSide = this.getRightmostSide(this._minDe, this._minIndex);
	  if (rightmostSide === Position.LEFT) {
	    this._orientedDe = this._minDe.getSym();
	  }
	};
	RightmostEdgeFinder.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	RightmostEdgeFinder.prototype.getClass = function getClass () {
	  return RightmostEdgeFinder
	};

	var TopologyException = (function (RuntimeException$$1) {
	  function TopologyException (msg, pt) {
	    RuntimeException$$1.call(this, TopologyException.msgWithCoord(msg, pt));
	    this.pt = pt ? new Coordinate(pt) : null;
	    this.name = 'TopologyException';
	  }

	  if ( RuntimeException$$1 ) TopologyException.__proto__ = RuntimeException$$1;
	  TopologyException.prototype = Object.create( RuntimeException$$1 && RuntimeException$$1.prototype );
	  TopologyException.prototype.constructor = TopologyException;
	  TopologyException.prototype.getCoordinate = function getCoordinate () {
	    return this.pt
	  };
	  TopologyException.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  TopologyException.prototype.getClass = function getClass () {
	    return TopologyException
	  };
	  TopologyException.msgWithCoord = function msgWithCoord (msg, pt) {
	    if (!pt) { return msg + ' [ ' + pt + ' ]' }
	    return msg
	  };

	  return TopologyException;
	}(RuntimeException));

	var LinkedList = function LinkedList () {
	  this.array_ = [];
	};
	LinkedList.prototype.addLast = function addLast (e) {
	  this.array_.push(e);
	};
	LinkedList.prototype.removeFirst = function removeFirst () {
	  return this.array_.shift()
	};
	LinkedList.prototype.isEmpty = function isEmpty () {
	  return this.array_.length === 0
	};

	var BufferSubgraph = function BufferSubgraph () {
	  this._finder = null;
	  this._dirEdgeList = new ArrayList();
	  this._nodes = new ArrayList();
	  this._rightMostCoord = null;
	  this._env = null;
	  this._finder = new RightmostEdgeFinder();
	};
	BufferSubgraph.prototype.clearVisitedEdges = function clearVisitedEdges () {
	  for (var it = this._dirEdgeList.iterator(); it.hasNext();) {
	    var de = it.next();
	    de.setVisited(false);
	  }
	};
	BufferSubgraph.prototype.getRightmostCoordinate = function getRightmostCoordinate () {
	  return this._rightMostCoord
	};
	BufferSubgraph.prototype.computeNodeDepth = function computeNodeDepth (n) {
	    var this$1 = this;

	  var startEdge = null;
	  for (var i = n.getEdges().iterator(); i.hasNext();) {
	    var de = i.next();
	    if (de.isVisited() || de.getSym().isVisited()) {
	      startEdge = de;
	      break
	    }
	  }
	  if (startEdge === null) { throw new TopologyException('unable to find edge to compute depths at ' + n.getCoordinate()) }
	  n.getEdges().computeDepths(startEdge);
	  for (var i$1 = n.getEdges().iterator(); i$1.hasNext();) {
	    var de$1 = i$1.next();
	    de$1.setVisited(true);
	    this$1.copySymDepths(de$1);
	  }
	};
	BufferSubgraph.prototype.computeDepth = function computeDepth (outsideDepth) {
	  this.clearVisitedEdges();
	  var de = this._finder.getEdge();
	  // const n = de.getNode()
	  // const label = de.getLabel()
	  de.setEdgeDepths(Position.RIGHT, outsideDepth);
	  this.copySymDepths(de);
	  this.computeDepths(de);
	};
	BufferSubgraph.prototype.create = function create (node) {
	  this.addReachable(node);
	  this._finder.findEdge(this._dirEdgeList);
	  this._rightMostCoord = this._finder.getCoordinate();
	};
	BufferSubgraph.prototype.findResultEdges = function findResultEdges () {
	  for (var it = this._dirEdgeList.iterator(); it.hasNext();) {
	    var de = it.next();
	    if (de.getDepth(Position.RIGHT) >= 1 && de.getDepth(Position.LEFT) <= 0 && !de.isInteriorAreaEdge()) {
	      de.setInResult(true);
	    }
	  }
	};
	BufferSubgraph.prototype.computeDepths = function computeDepths (startEdge) {
	    var this$1 = this;

	  var nodesVisited = new HashSet();
	  var nodeQueue = new LinkedList();
	  var startNode = startEdge.getNode();
	  nodeQueue.addLast(startNode);
	  nodesVisited.add(startNode);
	  startEdge.setVisited(true);
	  while (!nodeQueue.isEmpty()) {
	    var n = nodeQueue.removeFirst();
	    nodesVisited.add(n);
	    this$1.computeNodeDepth(n);
	    for (var i = n.getEdges().iterator(); i.hasNext();) {
	      var de = i.next();
	      var sym = de.getSym();
	      if (sym.isVisited()) { continue }
	      var adjNode = sym.getNode();
	      if (!nodesVisited.contains(adjNode)) {
	        nodeQueue.addLast(adjNode);
	        nodesVisited.add(adjNode);
	      }
	    }
	  }
	};
	BufferSubgraph.prototype.compareTo = function compareTo (o) {
	  var graph = o;
	  if (this._rightMostCoord.x < graph._rightMostCoord.x) {
	    return -1
	  }
	  if (this._rightMostCoord.x > graph._rightMostCoord.x) {
	    return 1
	  }
	  return 0
	};
	BufferSubgraph.prototype.getEnvelope = function getEnvelope () {
	  if (this._env === null) {
	    var edgeEnv = new Envelope();
	    for (var it = this._dirEdgeList.iterator(); it.hasNext();) {
	      var dirEdge = it.next();
	      var pts = dirEdge.getEdge().getCoordinates();
	      for (var i = 0; i < pts.length - 1; i++) {
	        edgeEnv.expandToInclude(pts[i]);
	      }
	    }
	    this._env = edgeEnv;
	  }
	  return this._env
	};
	BufferSubgraph.prototype.addReachable = function addReachable (startNode) {
	    var this$1 = this;

	  var nodeStack = new Stack();
	  nodeStack.add(startNode);
	  while (!nodeStack.empty()) {
	    var node = nodeStack.pop();
	    this$1.add(node, nodeStack);
	  }
	};
	BufferSubgraph.prototype.copySymDepths = function copySymDepths (de) {
	  var sym = de.getSym();
	  sym.setDepth(Position.LEFT, de.getDepth(Position.RIGHT));
	  sym.setDepth(Position.RIGHT, de.getDepth(Position.LEFT));
	};
	BufferSubgraph.prototype.add = function add (node, nodeStack) {
	    var this$1 = this;

	  node.setVisited(true);
	  this._nodes.add(node);
	  for (var i = node.getEdges().iterator(); i.hasNext();) {
	    var de = i.next();
	    this$1._dirEdgeList.add(de);
	    var sym = de.getSym();
	    var symNode = sym.getNode();
	    if (!symNode.isVisited()) { nodeStack.push(symNode); }
	  }
	};
	BufferSubgraph.prototype.getNodes = function getNodes () {
	  return this._nodes
	};
	BufferSubgraph.prototype.getDirectedEdges = function getDirectedEdges () {
	  return this._dirEdgeList
	};
	BufferSubgraph.prototype.interfaces_ = function interfaces_ () {
	  return [Comparable]
	};
	BufferSubgraph.prototype.getClass = function getClass () {
	  return BufferSubgraph
	};

	var TopologyLocation = function TopologyLocation () {
	  var this$1 = this;

	  this.location = null;
	  if (arguments.length === 1) {
	    if (arguments[0] instanceof Array) {
	      var location = arguments[0];
	      this.init(location.length);
	    } else if (Number.isInteger(arguments[0])) {
	      var on = arguments[0];
	      this.init(1);
	      this.location[Position.ON] = on;
	    } else if (arguments[0] instanceof TopologyLocation) {
	      var gl = arguments[0];
	      this.init(gl.location.length);
	      if (gl !== null) {
	        for (var i = 0; i < this.location.length; i++) {
	          this$1.location[i] = gl.location[i];
	        }
	      }
	    }
	  } else if (arguments.length === 3) {
	    var on$1 = arguments[0];
	    var left = arguments[1];
	    var right = arguments[2];
	    this.init(3);
	    this.location[Position.ON] = on$1;
	    this.location[Position.LEFT] = left;
	    this.location[Position.RIGHT] = right;
	  }
	};
	TopologyLocation.prototype.setAllLocations = function setAllLocations (locValue) {
	    var this$1 = this;

	  for (var i = 0; i < this.location.length; i++) {
	    this$1.location[i] = locValue;
	  }
	};
	TopologyLocation.prototype.isNull = function isNull () {
	    var this$1 = this;

	  for (var i = 0; i < this.location.length; i++) {
	    if (this$1.location[i] !== Location.NONE) { return false }
	  }
	  return true
	};
	TopologyLocation.prototype.setAllLocationsIfNull = function setAllLocationsIfNull (locValue) {
	    var this$1 = this;

	  for (var i = 0; i < this.location.length; i++) {
	    if (this$1.location[i] === Location.NONE) { this$1.location[i] = locValue; }
	  }
	};
	TopologyLocation.prototype.isLine = function isLine () {
	  return this.location.length === 1
	};
	TopologyLocation.prototype.merge = function merge (gl) {
	    var this$1 = this;

	  if (gl.location.length > this.location.length) {
	    var newLoc = new Array(3).fill(null);
	    newLoc[Position.ON] = this.location[Position.ON];
	    newLoc[Position.LEFT] = Location.NONE;
	    newLoc[Position.RIGHT] = Location.NONE;
	    this.location = newLoc;
	  }
	  for (var i = 0; i < this.location.length; i++) {
	    if (this$1.location[i] === Location.NONE && i < gl.location.length) { this$1.location[i] = gl.location[i]; }
	  }
	};
	TopologyLocation.prototype.getLocations = function getLocations () {
	  return this.location
	};
	TopologyLocation.prototype.flip = function flip () {
	  if (this.location.length <= 1) { return null }
	  var temp = this.location[Position.LEFT];
	  this.location[Position.LEFT] = this.location[Position.RIGHT];
	  this.location[Position.RIGHT] = temp;
	};
	TopologyLocation.prototype.toString = function toString () {
	  var buf = new StringBuffer();
	  if (this.location.length > 1) { buf.append(Location.toLocationSymbol(this.location[Position.LEFT])); }
	  buf.append(Location.toLocationSymbol(this.location[Position.ON]));
	  if (this.location.length > 1) { buf.append(Location.toLocationSymbol(this.location[Position.RIGHT])); }
	  return buf.toString()
	};
	TopologyLocation.prototype.setLocations = function setLocations (on, left, right) {
	  this.location[Position.ON] = on;
	  this.location[Position.LEFT] = left;
	  this.location[Position.RIGHT] = right;
	};
	TopologyLocation.prototype.get = function get (posIndex) {
	  if (posIndex < this.location.length) { return this.location[posIndex] }
	  return Location.NONE
	};
	TopologyLocation.prototype.isArea = function isArea () {
	  return this.location.length > 1
	};
	TopologyLocation.prototype.isAnyNull = function isAnyNull () {
	    var this$1 = this;

	  for (var i = 0; i < this.location.length; i++) {
	    if (this$1.location[i] === Location.NONE) { return true }
	  }
	  return false
	};
	TopologyLocation.prototype.setLocation = function setLocation () {
	  if (arguments.length === 1) {
	    var locValue = arguments[0];
	    this.setLocation(Position.ON, locValue);
	  } else if (arguments.length === 2) {
	    var locIndex = arguments[0];
	    var locValue$1 = arguments[1];
	    this.location[locIndex] = locValue$1;
	  }
	};
	TopologyLocation.prototype.init = function init (size) {
	  this.location = new Array(size).fill(null);
	  this.setAllLocations(Location.NONE);
	};
	TopologyLocation.prototype.isEqualOnSide = function isEqualOnSide (le, locIndex) {
	  return this.location[locIndex] === le.location[locIndex]
	};
	TopologyLocation.prototype.allPositionsEqual = function allPositionsEqual (loc) {
	    var this$1 = this;

	  for (var i = 0; i < this.location.length; i++) {
	    if (this$1.location[i] !== loc) { return false }
	  }
	  return true
	};
	TopologyLocation.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	TopologyLocation.prototype.getClass = function getClass () {
	  return TopologyLocation
	};

	var Label = function Label () {
	  this.elt = new Array(2).fill(null);
	  if (arguments.length === 1) {
	    if (Number.isInteger(arguments[0])) {
	      var onLoc = arguments[0];
	      this.elt[0] = new TopologyLocation(onLoc);
	      this.elt[1] = new TopologyLocation(onLoc);
	    } else if (arguments[0] instanceof Label) {
	      var lbl = arguments[0];
	      this.elt[0] = new TopologyLocation(lbl.elt[0]);
	      this.elt[1] = new TopologyLocation(lbl.elt[1]);
	    }
	  } else if (arguments.length === 2) {
	    var geomIndex = arguments[0];
	    var onLoc$1 = arguments[1];
	    this.elt[0] = new TopologyLocation(Location.NONE);
	    this.elt[1] = new TopologyLocation(Location.NONE);
	    this.elt[geomIndex].setLocation(onLoc$1);
	  } else if (arguments.length === 3) {
	    var onLoc$2 = arguments[0];
	    var leftLoc = arguments[1];
	    var rightLoc = arguments[2];
	    this.elt[0] = new TopologyLocation(onLoc$2, leftLoc, rightLoc);
	    this.elt[1] = new TopologyLocation(onLoc$2, leftLoc, rightLoc);
	  } else if (arguments.length === 4) {
	    var geomIndex$1 = arguments[0];
	    var onLoc$3 = arguments[1];
	    var leftLoc$1 = arguments[2];
	    var rightLoc$1 = arguments[3];
	    this.elt[0] = new TopologyLocation(Location.NONE, Location.NONE, Location.NONE);
	    this.elt[1] = new TopologyLocation(Location.NONE, Location.NONE, Location.NONE);
	    this.elt[geomIndex$1].setLocations(onLoc$3, leftLoc$1, rightLoc$1);
	  }
	};
	Label.prototype.getGeometryCount = function getGeometryCount () {
	  var count = 0;
	  if (!this.elt[0].isNull()) { count++; }
	  if (!this.elt[1].isNull()) { count++; }
	  return count
	};
	Label.prototype.setAllLocations = function setAllLocations (geomIndex, location) {
	  this.elt[geomIndex].setAllLocations(location);
	};
	Label.prototype.isNull = function isNull (geomIndex) {
	  return this.elt[geomIndex].isNull()
	};
	Label.prototype.setAllLocationsIfNull = function setAllLocationsIfNull () {
	  if (arguments.length === 1) {
	    var location = arguments[0];
	    this.setAllLocationsIfNull(0, location);
	    this.setAllLocationsIfNull(1, location);
	  } else if (arguments.length === 2) {
	    var geomIndex = arguments[0];
	    var location$1 = arguments[1];
	    this.elt[geomIndex].setAllLocationsIfNull(location$1);
	  }
	};
	Label.prototype.isLine = function isLine (geomIndex) {
	  return this.elt[geomIndex].isLine()
	};
	Label.prototype.merge = function merge (lbl) {
	    var this$1 = this;

	  for (var i = 0; i < 2; i++) {
	    if (this$1.elt[i] === null && lbl.elt[i] !== null) {
	      this$1.elt[i] = new TopologyLocation(lbl.elt[i]);
	    } else {
	      this$1.elt[i].merge(lbl.elt[i]);
	    }
	  }
	};
	Label.prototype.flip = function flip () {
	  this.elt[0].flip();
	  this.elt[1].flip();
	};
	Label.prototype.getLocation = function getLocation () {
	  if (arguments.length === 1) {
	    var geomIndex = arguments[0];
	    return this.elt[geomIndex].get(Position.ON)
	  } else if (arguments.length === 2) {
	    var geomIndex$1 = arguments[0];
	    var posIndex = arguments[1];
	    return this.elt[geomIndex$1].get(posIndex)
	  }
	};
	Label.prototype.toString = function toString () {
	  var buf = new StringBuffer();
	  if (this.elt[0] !== null) {
	    buf.append('A:');
	    buf.append(this.elt[0].toString());
	  }
	  if (this.elt[1] !== null) {
	    buf.append(' B:');
	    buf.append(this.elt[1].toString());
	  }
	  return buf.toString()
	};
	Label.prototype.isArea = function isArea () {
	  if (arguments.length === 0) {
	    return this.elt[0].isArea() || this.elt[1].isArea()
	  } else if (arguments.length === 1) {
	    var geomIndex = arguments[0];
	    return this.elt[geomIndex].isArea()
	  }
	};
	Label.prototype.isAnyNull = function isAnyNull (geomIndex) {
	  return this.elt[geomIndex].isAnyNull()
	};
	Label.prototype.setLocation = function setLocation () {
	  if (arguments.length === 2) {
	    var geomIndex = arguments[0];
	    var location = arguments[1];
	    this.elt[geomIndex].setLocation(Position.ON, location);
	  } else if (arguments.length === 3) {
	    var geomIndex$1 = arguments[0];
	    var posIndex = arguments[1];
	    var location$1 = arguments[2];
	    this.elt[geomIndex$1].setLocation(posIndex, location$1);
	  }
	};
	Label.prototype.isEqualOnSide = function isEqualOnSide (lbl, side) {
	  return this.elt[0].isEqualOnSide(lbl.elt[0], side) && this.elt[1].isEqualOnSide(lbl.elt[1], side)
	};
	Label.prototype.allPositionsEqual = function allPositionsEqual (geomIndex, loc) {
	  return this.elt[geomIndex].allPositionsEqual(loc)
	};
	Label.prototype.toLine = function toLine (geomIndex) {
	  if (this.elt[geomIndex].isArea()) { this.elt[geomIndex] = new TopologyLocation(this.elt[geomIndex].location[0]); }
	};
	Label.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Label.prototype.getClass = function getClass () {
	  return Label
	};
	Label.toLineLabel = function toLineLabel (label) {
	  var lineLabel = new Label(Location.NONE);
	  for (var i = 0; i < 2; i++) {
	    lineLabel.setLocation(i, label.getLocation(i));
	  }
	  return lineLabel
	};

	var EdgeRing = function EdgeRing () {
	  this._startDe = null;
	  this._maxNodeDegree = -1;
	  this._edges = new ArrayList();
	  this._pts = new ArrayList();
	  this._label = new Label(Location.NONE);
	  this._ring = null;
	  this._isHole = null;
	  this._shell = null;
	  this._holes = new ArrayList();
	  this._geometryFactory = null;
	  var start = arguments[0];
	  var geometryFactory = arguments[1];
	  this._geometryFactory = geometryFactory;
	  this.computePoints(start);
	  this.computeRing();
	};
	EdgeRing.prototype.computeRing = function computeRing () {
	    var this$1 = this;

	  if (this._ring !== null) { return null }
	  var coord = new Array(this._pts.size()).fill(null);
	  for (var i = 0; i < this._pts.size(); i++) {
	    coord[i] = this$1._pts.get(i);
	  }
	  this._ring = this._geometryFactory.createLinearRing(coord);
	  this._isHole = CGAlgorithms.isCCW(this._ring.getCoordinates());
	};
	EdgeRing.prototype.isIsolated = function isIsolated () {
	  return this._label.getGeometryCount() === 1
	};
	EdgeRing.prototype.computePoints = function computePoints (start) {
	    var this$1 = this;

	  this._startDe = start;
	  var de = start;
	  var isFirstEdge = true;
	  do {
	    if (de === null) { throw new TopologyException('Found null DirectedEdge') }
	    if (de.getEdgeRing() === this$1) { throw new TopologyException('Directed Edge visited twice during ring-building at ' + de.getCoordinate()) }
	    this$1._edges.add(de);
	    var label = de.getLabel();
	    Assert.isTrue(label.isArea());
	    this$1.mergeLabel(label);
	    this$1.addPoints(de.getEdge(), de.isForward(), isFirstEdge);
	    isFirstEdge = false;
	    this$1.setEdgeRing(de, this$1);
	    de = this$1.getNext(de);
	  } while (de !== this._startDe)
	};
	EdgeRing.prototype.getLinearRing = function getLinearRing () {
	  return this._ring
	};
	EdgeRing.prototype.getCoordinate = function getCoordinate (i) {
	  return this._pts.get(i)
	};
	EdgeRing.prototype.computeMaxNodeDegree = function computeMaxNodeDegree () {
	    var this$1 = this;

	  this._maxNodeDegree = 0;
	  var de = this._startDe;
	  do {
	    var node = de.getNode();
	    var degree = node.getEdges().getOutgoingDegree(this$1);
	    if (degree > this$1._maxNodeDegree) { this$1._maxNodeDegree = degree; }
	    de = this$1.getNext(de);
	  } while (de !== this._startDe)
	  this._maxNodeDegree *= 2;
	};
	EdgeRing.prototype.addPoints = function addPoints (edge, isForward, isFirstEdge) {
	    var this$1 = this;

	  var edgePts = edge.getCoordinates();
	  if (isForward) {
	    var startIndex = 1;
	    if (isFirstEdge) { startIndex = 0; }
	    for (var i = startIndex; i < edgePts.length; i++) {
	      this$1._pts.add(edgePts[i]);
	    }
	  } else {
	    var startIndex$1 = edgePts.length - 2;
	    if (isFirstEdge) { startIndex$1 = edgePts.length - 1; }
	    for (var i$1 = startIndex$1; i$1 >= 0; i$1--) {
	      this$1._pts.add(edgePts[i$1]);
	    }
	  }
	};
	EdgeRing.prototype.isHole = function isHole () {
	  return this._isHole
	};
	EdgeRing.prototype.setInResult = function setInResult () {
	  var de = this._startDe;
	  do {
	    de.getEdge().setInResult(true);
	    de = de.getNext();
	  } while (de !== this._startDe)
	};
	EdgeRing.prototype.containsPoint = function containsPoint (p) {
	  var shell = this.getLinearRing();
	  var env = shell.getEnvelopeInternal();
	  if (!env.contains(p)) { return false }
	  if (!CGAlgorithms.isPointInRing(p, shell.getCoordinates())) { return false }
	  for (var i = this._holes.iterator(); i.hasNext();) {
	    var hole = i.next();
	    if (hole.containsPoint(p)) { return false }
	  }
	  return true
	};
	EdgeRing.prototype.addHole = function addHole (ring) {
	  this._holes.add(ring);
	};
	EdgeRing.prototype.isShell = function isShell () {
	  return this._shell === null
	};
	EdgeRing.prototype.getLabel = function getLabel () {
	  return this._label
	};
	EdgeRing.prototype.getEdges = function getEdges () {
	  return this._edges
	};
	EdgeRing.prototype.getMaxNodeDegree = function getMaxNodeDegree () {
	  if (this._maxNodeDegree < 0) { this.computeMaxNodeDegree(); }
	  return this._maxNodeDegree
	};
	EdgeRing.prototype.getShell = function getShell () {
	  return this._shell
	};
	EdgeRing.prototype.mergeLabel = function mergeLabel () {
	  if (arguments.length === 1) {
	    var deLabel = arguments[0];
	    this.mergeLabel(deLabel, 0);
	    this.mergeLabel(deLabel, 1);
	  } else if (arguments.length === 2) {
	    var deLabel$1 = arguments[0];
	    var geomIndex = arguments[1];
	    var loc = deLabel$1.getLocation(geomIndex, Position.RIGHT);
	    if (loc === Location.NONE) { return null }
	    if (this._label.getLocation(geomIndex) === Location.NONE) {
	      this._label.setLocation(geomIndex, loc);
	      return null
	    }
	  }
	};
	EdgeRing.prototype.setShell = function setShell (shell) {
	  this._shell = shell;
	  if (shell !== null) { shell.addHole(this); }
	};
	EdgeRing.prototype.toPolygon = function toPolygon (geometryFactory) {
	    var this$1 = this;

	  var holeLR = new Array(this._holes.size()).fill(null);
	  for (var i = 0; i < this._holes.size(); i++) {
	    holeLR[i] = this$1._holes.get(i).getLinearRing();
	  }
	  var poly = geometryFactory.createPolygon(this.getLinearRing(), holeLR);
	  return poly
	};
	EdgeRing.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	EdgeRing.prototype.getClass = function getClass () {
	  return EdgeRing
	};

	var MinimalEdgeRing = (function (EdgeRing$$1) {
	  function MinimalEdgeRing () {
	    var start = arguments[0];
	    var geometryFactory = arguments[1];
	    EdgeRing$$1.call(this, start, geometryFactory);
	  }

	  if ( EdgeRing$$1 ) MinimalEdgeRing.__proto__ = EdgeRing$$1;
	  MinimalEdgeRing.prototype = Object.create( EdgeRing$$1 && EdgeRing$$1.prototype );
	  MinimalEdgeRing.prototype.constructor = MinimalEdgeRing;
	  MinimalEdgeRing.prototype.setEdgeRing = function setEdgeRing (de, er) {
	    de.setMinEdgeRing(er);
	  };
	  MinimalEdgeRing.prototype.getNext = function getNext (de) {
	    return de.getNextMin()
	  };
	  MinimalEdgeRing.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  MinimalEdgeRing.prototype.getClass = function getClass () {
	    return MinimalEdgeRing
	  };

	  return MinimalEdgeRing;
	}(EdgeRing));

	var MaximalEdgeRing = (function (EdgeRing$$1) {
	  function MaximalEdgeRing () {
	    var start = arguments[0];
	    var geometryFactory = arguments[1];
	    EdgeRing$$1.call(this, start, geometryFactory);
	  }

	  if ( EdgeRing$$1 ) MaximalEdgeRing.__proto__ = EdgeRing$$1;
	  MaximalEdgeRing.prototype = Object.create( EdgeRing$$1 && EdgeRing$$1.prototype );
	  MaximalEdgeRing.prototype.constructor = MaximalEdgeRing;
	  MaximalEdgeRing.prototype.buildMinimalRings = function buildMinimalRings () {
	    var this$1 = this;

	    var minEdgeRings = new ArrayList();
	    var de = this._startDe;
	    do {
	      if (de.getMinEdgeRing() === null) {
	        var minEr = new MinimalEdgeRing(de, this$1._geometryFactory);
	        minEdgeRings.add(minEr);
	      }
	      de = de.getNext();
	    } while (de !== this._startDe)
	    return minEdgeRings
	  };
	  MaximalEdgeRing.prototype.setEdgeRing = function setEdgeRing (de, er) {
	    de.setEdgeRing(er);
	  };
	  MaximalEdgeRing.prototype.linkDirectedEdgesForMinimalEdgeRings = function linkDirectedEdgesForMinimalEdgeRings () {
	    var this$1 = this;

	    var de = this._startDe;
	    do {
	      var node = de.getNode();
	      node.getEdges().linkMinimalDirectedEdges(this$1);
	      de = de.getNext();
	    } while (de !== this._startDe)
	  };
	  MaximalEdgeRing.prototype.getNext = function getNext (de) {
	    return de.getNext()
	  };
	  MaximalEdgeRing.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  MaximalEdgeRing.prototype.getClass = function getClass () {
	    return MaximalEdgeRing
	  };

	  return MaximalEdgeRing;
	}(EdgeRing));

	var GraphComponent = function GraphComponent () {
	  this._label = null;
	  this._isInResult = false;
	  this._isCovered = false;
	  this._isCoveredSet = false;
	  this._isVisited = false;
	  if (arguments.length === 0) ; else if (arguments.length === 1) {
	    var label = arguments[0];
	    this._label = label;
	  }
	};
	GraphComponent.prototype.setVisited = function setVisited (isVisited) {
	  this._isVisited = isVisited;
	};
	GraphComponent.prototype.setInResult = function setInResult (isInResult) {
	  this._isInResult = isInResult;
	};
	GraphComponent.prototype.isCovered = function isCovered () {
	  return this._isCovered
	};
	GraphComponent.prototype.isCoveredSet = function isCoveredSet () {
	  return this._isCoveredSet
	};
	GraphComponent.prototype.setLabel = function setLabel (label) {
	  this._label = label;
	};
	GraphComponent.prototype.getLabel = function getLabel () {
	  return this._label
	};
	GraphComponent.prototype.setCovered = function setCovered (isCovered) {
	  this._isCovered = isCovered;
	  this._isCoveredSet = true;
	};
	GraphComponent.prototype.updateIM = function updateIM (im) {
	  Assert.isTrue(this._label.getGeometryCount() >= 2, 'found partial label');
	  this.computeIM(im);
	};
	GraphComponent.prototype.isInResult = function isInResult () {
	  return this._isInResult
	};
	GraphComponent.prototype.isVisited = function isVisited () {
	  return this._isVisited
	};
	GraphComponent.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	GraphComponent.prototype.getClass = function getClass () {
	  return GraphComponent
	};

	var Node = (function (GraphComponent$$1) {
	  function Node () {
	    GraphComponent$$1.call(this);
	    this._coord = null;
	    this._edges = null;
	    var coord = arguments[0];
	    var edges = arguments[1];
	    this._coord = coord;
	    this._edges = edges;
	    this._label = new Label(0, Location.NONE);
	  }

	  if ( GraphComponent$$1 ) Node.__proto__ = GraphComponent$$1;
	  Node.prototype = Object.create( GraphComponent$$1 && GraphComponent$$1.prototype );
	  Node.prototype.constructor = Node;
	  Node.prototype.isIncidentEdgeInResult = function isIncidentEdgeInResult () {
	    for (var it = this.getEdges().getEdges().iterator(); it.hasNext();) {
	      var de = it.next();
	      if (de.getEdge().isInResult()) { return true }
	    }
	    return false
	  };
	  Node.prototype.isIsolated = function isIsolated () {
	    return this._label.getGeometryCount() === 1
	  };
	  Node.prototype.getCoordinate = function getCoordinate () {
	    return this._coord
	  };
	  Node.prototype.print = function print (out) {
	    out.println('node ' + this._coord + ' lbl: ' + this._label);
	  };
	  Node.prototype.computeIM = function computeIM (im) {};
	  Node.prototype.computeMergedLocation = function computeMergedLocation (label2, eltIndex) {
	    var loc = Location.NONE;
	    loc = this._label.getLocation(eltIndex);
	    if (!label2.isNull(eltIndex)) {
	      var nLoc = label2.getLocation(eltIndex);
	      if (loc !== Location.BOUNDARY) { loc = nLoc; }
	    }
	    return loc
	  };
	  Node.prototype.setLabel = function setLabel () {
	    if (arguments.length === 2) {
	      var argIndex = arguments[0];
	      var onLocation = arguments[1];
	      if (this._label === null) {
	        this._label = new Label(argIndex, onLocation);
	      } else { this._label.setLocation(argIndex, onLocation); }
	    } else { return GraphComponent$$1.prototype.setLabel.apply(this, arguments) }
	  };
	  Node.prototype.getEdges = function getEdges () {
	    return this._edges
	  };
	  Node.prototype.mergeLabel = function mergeLabel () {
	    var this$1 = this;

	    if (arguments[0] instanceof Node) {
	      var n = arguments[0];
	      this.mergeLabel(n._label);
	    } else if (arguments[0] instanceof Label) {
	      var label2 = arguments[0];
	      for (var i = 0; i < 2; i++) {
	        var loc = this$1.computeMergedLocation(label2, i);
	        var thisLoc = this$1._label.getLocation(i);
	        if (thisLoc === Location.NONE) { this$1._label.setLocation(i, loc); }
	      }
	    }
	  };
	  Node.prototype.add = function add (e) {
	    this._edges.insert(e);
	    e.setNode(this);
	  };
	  Node.prototype.setLabelBoundary = function setLabelBoundary (argIndex) {
	    if (this._label === null) { return null }
	    var loc = Location.NONE;
	    if (this._label !== null) { loc = this._label.getLocation(argIndex); }
	    var newLoc = null;
	    switch (loc) {
	      case Location.BOUNDARY:
	        newLoc = Location.INTERIOR;
	        break
	      case Location.INTERIOR:
	        newLoc = Location.BOUNDARY;
	        break
	      default:
	        newLoc = Location.BOUNDARY;
	        break
	    }
	    this._label.setLocation(argIndex, newLoc);
	  };
	  Node.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  Node.prototype.getClass = function getClass () {
	    return Node
	  };

	  return Node;
	}(GraphComponent));

	var NodeMap = function NodeMap () {
	  this.nodeMap = new TreeMap();
	  this.nodeFact = null;
	  var nodeFact = arguments[0];
	  this.nodeFact = nodeFact;
	};
	NodeMap.prototype.find = function find (coord) {
	  return this.nodeMap.get(coord)
	};
	NodeMap.prototype.addNode = function addNode () {
	  if (arguments[0] instanceof Coordinate) {
	    var coord = arguments[0];
	    var node = this.nodeMap.get(coord);
	    if (node === null) {
	      node = this.nodeFact.createNode(coord);
	      this.nodeMap.put(coord, node);
	    }
	    return node
	  } else if (arguments[0] instanceof Node) {
	    var n = arguments[0];
	    var node$1 = this.nodeMap.get(n.getCoordinate());
	    if (node$1 === null) {
	      this.nodeMap.put(n.getCoordinate(), n);
	      return n
	    }
	    node$1.mergeLabel(n);
	    return node$1
	  }
	};
	NodeMap.prototype.print = function print (out) {
	  for (var it = this.iterator(); it.hasNext();) {
	    var n = it.next();
	    n.print(out);
	  }
	};
	NodeMap.prototype.iterator = function iterator () {
	  return this.nodeMap.values().iterator()
	};
	NodeMap.prototype.values = function values () {
	  return this.nodeMap.values()
	};
	NodeMap.prototype.getBoundaryNodes = function getBoundaryNodes (geomIndex) {
	  var bdyNodes = new ArrayList();
	  for (var i = this.iterator(); i.hasNext();) {
	    var node = i.next();
	    if (node.getLabel().getLocation(geomIndex) === Location.BOUNDARY) { bdyNodes.add(node); }
	  }
	  return bdyNodes
	};
	NodeMap.prototype.add = function add (e) {
	  var p = e.getCoordinate();
	  var n = this.addNode(p);
	  n.add(e);
	};
	NodeMap.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	NodeMap.prototype.getClass = function getClass () {
	  return NodeMap
	};

	var Quadrant = function Quadrant () {};

	var staticAccessors$21 = { NE: { configurable: true },NW: { configurable: true },SW: { configurable: true },SE: { configurable: true } };

	Quadrant.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Quadrant.prototype.getClass = function getClass () {
	  return Quadrant
	};
	Quadrant.isNorthern = function isNorthern (quad) {
	  return quad === Quadrant.NE || quad === Quadrant.NW
	};
	Quadrant.isOpposite = function isOpposite (quad1, quad2) {
	  if (quad1 === quad2) { return false }
	  var diff = (quad1 - quad2 + 4) % 4;
	  if (diff === 2) { return true }
	  return false
	};
	Quadrant.commonHalfPlane = function commonHalfPlane (quad1, quad2) {
	  if (quad1 === quad2) { return quad1 }
	  var diff = (quad1 - quad2 + 4) % 4;
	  if (diff === 2) { return -1 }
	  var min = quad1 < quad2 ? quad1 : quad2;
	  var max = quad1 > quad2 ? quad1 : quad2;
	  if (min === 0 && max === 3) { return 3 }
	  return min
	};
	Quadrant.isInHalfPlane = function isInHalfPlane (quad, halfPlane) {
	  if (halfPlane === Quadrant.SE) {
	    return quad === Quadrant.SE || quad === Quadrant.SW
	  }
	  return quad === halfPlane || quad === halfPlane + 1
	};
	Quadrant.quadrant = function quadrant () {
	  if (typeof arguments[0] === 'number' && typeof arguments[1] === 'number') {
	    var dx = arguments[0];
	    var dy = arguments[1];
	    if (dx === 0.0 && dy === 0.0) { throw new IllegalArgumentException('Cannot compute the quadrant for point ( ' + dx + ', ' + dy + ' )') }
	    if (dx >= 0.0) {
	      if (dy >= 0.0) { return Quadrant.NE; } else { return Quadrant.SE }
	    } else {
	      if (dy >= 0.0) { return Quadrant.NW; } else { return Quadrant.SW }
	    }
	  } else if (arguments[0] instanceof Coordinate && arguments[1] instanceof Coordinate) {
	    var p0 = arguments[0];
	    var p1 = arguments[1];
	    if (p1.x === p0.x && p1.y === p0.y) { throw new IllegalArgumentException('Cannot compute the quadrant for two identical points ' + p0) }
	    if (p1.x >= p0.x) {
	      if (p1.y >= p0.y) { return Quadrant.NE; } else { return Quadrant.SE }
	    } else {
	      if (p1.y >= p0.y) { return Quadrant.NW; } else { return Quadrant.SW }
	    }
	  }
	};
	staticAccessors$21.NE.get = function () { return 0 };
	staticAccessors$21.NW.get = function () { return 1 };
	staticAccessors$21.SW.get = function () { return 2 };
	staticAccessors$21.SE.get = function () { return 3 };

	Object.defineProperties( Quadrant, staticAccessors$21 );

	var EdgeEnd = function EdgeEnd () {
	  this._edge = null;
	  this._label = null;
	  this._node = null;
	  this._p0 = null;
	  this._p1 = null;
	  this._dx = null;
	  this._dy = null;
	  this._quadrant = null;
	  if (arguments.length === 1) {
	    var edge = arguments[0];
	    this._edge = edge;
	  } else if (arguments.length === 3) {
	    var edge$1 = arguments[0];
	    var p0 = arguments[1];
	    var p1 = arguments[2];
	    var label = null;
	    this._edge = edge$1;
	    this.init(p0, p1);
	    this._label = label;
	  } else if (arguments.length === 4) {
	    var edge$2 = arguments[0];
	    var p0$1 = arguments[1];
	    var p1$1 = arguments[2];
	    var label$1 = arguments[3];
	    this._edge = edge$2;
	    this.init(p0$1, p1$1);
	    this._label = label$1;
	  }
	};
	EdgeEnd.prototype.compareDirection = function compareDirection (e) {
	  if (this._dx === e._dx && this._dy === e._dy) { return 0 }
	  if (this._quadrant > e._quadrant) { return 1 }
	  if (this._quadrant < e._quadrant) { return -1 }
	  return CGAlgorithms.computeOrientation(e._p0, e._p1, this._p1)
	};
	EdgeEnd.prototype.getDy = function getDy () {
	  return this._dy
	};
	EdgeEnd.prototype.getCoordinate = function getCoordinate () {
	  return this._p0
	};
	EdgeEnd.prototype.setNode = function setNode (node) {
	  this._node = node;
	};
	EdgeEnd.prototype.print = function print (out) {
	  var angle = Math.atan2(this._dy, this._dx);
	  var className = this.getClass().getName();
	  var lastDotPos = className.lastIndexOf('.');
	  var name = className.substring(lastDotPos + 1);
	  out.print('  ' + name + ': ' + this._p0 + ' - ' + this._p1 + ' ' + this._quadrant + ':' + angle + '   ' + this._label);
	};
	EdgeEnd.prototype.compareTo = function compareTo (obj) {
	  var e = obj;
	  return this.compareDirection(e)
	};
	EdgeEnd.prototype.getDirectedCoordinate = function getDirectedCoordinate () {
	  return this._p1
	};
	EdgeEnd.prototype.getDx = function getDx () {
	  return this._dx
	};
	EdgeEnd.prototype.getLabel = function getLabel () {
	  return this._label
	};
	EdgeEnd.prototype.getEdge = function getEdge () {
	  return this._edge
	};
	EdgeEnd.prototype.getQuadrant = function getQuadrant () {
	  return this._quadrant
	};
	EdgeEnd.prototype.getNode = function getNode () {
	  return this._node
	};
	EdgeEnd.prototype.toString = function toString () {
	  var angle = Math.atan2(this._dy, this._dx);
	  var className = this.getClass().getName();
	  var lastDotPos = className.lastIndexOf('.');
	  var name = className.substring(lastDotPos + 1);
	  return '  ' + name + ': ' + this._p0 + ' - ' + this._p1 + ' ' + this._quadrant + ':' + angle + '   ' + this._label
	};
	EdgeEnd.prototype.computeLabel = function computeLabel (boundaryNodeRule) {};
	EdgeEnd.prototype.init = function init (p0, p1) {
	  this._p0 = p0;
	  this._p1 = p1;
	  this._dx = p1.x - p0.x;
	  this._dy = p1.y - p0.y;
	  this._quadrant = Quadrant.quadrant(this._dx, this._dy);
	  Assert.isTrue(!(this._dx === 0 && this._dy === 0), 'EdgeEnd with identical endpoints found');
	};
	EdgeEnd.prototype.interfaces_ = function interfaces_ () {
	  return [Comparable]
	};
	EdgeEnd.prototype.getClass = function getClass () {
	  return EdgeEnd
	};

	var DirectedEdge = (function (EdgeEnd$$1) {
	  function DirectedEdge () {
	    var edge = arguments[0];
	    var isForward = arguments[1];
	    EdgeEnd$$1.call(this, edge);
	    this._isForward = null;
	    this._isInResult = false;
	    this._isVisited = false;
	    this._sym = null;
	    this._next = null;
	    this._nextMin = null;
	    this._edgeRing = null;
	    this._minEdgeRing = null;
	    this._depth = [0, -999, -999];
	    this._isForward = isForward;
	    if (isForward) {
	      this.init(edge.getCoordinate(0), edge.getCoordinate(1));
	    } else {
	      var n = edge.getNumPoints() - 1;
	      this.init(edge.getCoordinate(n), edge.getCoordinate(n - 1));
	    }
	    this.computeDirectedLabel();
	  }

	  if ( EdgeEnd$$1 ) DirectedEdge.__proto__ = EdgeEnd$$1;
	  DirectedEdge.prototype = Object.create( EdgeEnd$$1 && EdgeEnd$$1.prototype );
	  DirectedEdge.prototype.constructor = DirectedEdge;
	  DirectedEdge.prototype.getNextMin = function getNextMin () {
	    return this._nextMin
	  };
	  DirectedEdge.prototype.getDepth = function getDepth (position) {
	    return this._depth[position]
	  };
	  DirectedEdge.prototype.setVisited = function setVisited (isVisited) {
	    this._isVisited = isVisited;
	  };
	  DirectedEdge.prototype.computeDirectedLabel = function computeDirectedLabel () {
	    this._label = new Label(this._edge.getLabel());
	    if (!this._isForward) { this._label.flip(); }
	  };
	  DirectedEdge.prototype.getNext = function getNext () {
	    return this._next
	  };
	  DirectedEdge.prototype.setDepth = function setDepth (position, depthVal) {
	    if (this._depth[position] !== -999) {
	      if (this._depth[position] !== depthVal) { throw new TopologyException('assigned depths do not match', this.getCoordinate()) }
	    }
	    this._depth[position] = depthVal;
	  };
	  DirectedEdge.prototype.isInteriorAreaEdge = function isInteriorAreaEdge () {
	    var this$1 = this;

	    var isInteriorAreaEdge = true;
	    for (var i = 0; i < 2; i++) {
	      if (!(this$1._label.isArea(i) && this$1._label.getLocation(i, Position.LEFT) === Location.INTERIOR && this$1._label.getLocation(i, Position.RIGHT) === Location.INTERIOR)) {
	        isInteriorAreaEdge = false;
	      }
	    }
	    return isInteriorAreaEdge
	  };
	  DirectedEdge.prototype.setNextMin = function setNextMin (nextMin) {
	    this._nextMin = nextMin;
	  };
	  DirectedEdge.prototype.print = function print (out) {
	    EdgeEnd$$1.prototype.print.call(this, out);
	    out.print(' ' + this._depth[Position.LEFT] + '/' + this._depth[Position.RIGHT]);
	    out.print(' (' + this.getDepthDelta() + ')');
	    if (this._isInResult) { out.print(' inResult'); }
	  };
	  DirectedEdge.prototype.setMinEdgeRing = function setMinEdgeRing (minEdgeRing) {
	    this._minEdgeRing = minEdgeRing;
	  };
	  DirectedEdge.prototype.isLineEdge = function isLineEdge () {
	    var isLine = this._label.isLine(0) || this._label.isLine(1);
	    var isExteriorIfArea0 = !this._label.isArea(0) || this._label.allPositionsEqual(0, Location.EXTERIOR);
	    var isExteriorIfArea1 = !this._label.isArea(1) || this._label.allPositionsEqual(1, Location.EXTERIOR);
	    return isLine && isExteriorIfArea0 && isExteriorIfArea1
	  };
	  DirectedEdge.prototype.setEdgeRing = function setEdgeRing (edgeRing) {
	    this._edgeRing = edgeRing;
	  };
	  DirectedEdge.prototype.getMinEdgeRing = function getMinEdgeRing () {
	    return this._minEdgeRing
	  };
	  DirectedEdge.prototype.getDepthDelta = function getDepthDelta () {
	    var depthDelta = this._edge.getDepthDelta();
	    if (!this._isForward) { depthDelta = -depthDelta; }
	    return depthDelta
	  };
	  DirectedEdge.prototype.setInResult = function setInResult (isInResult) {
	    this._isInResult = isInResult;
	  };
	  DirectedEdge.prototype.getSym = function getSym () {
	    return this._sym
	  };
	  DirectedEdge.prototype.isForward = function isForward () {
	    return this._isForward
	  };
	  DirectedEdge.prototype.getEdge = function getEdge () {
	    return this._edge
	  };
	  DirectedEdge.prototype.printEdge = function printEdge (out) {
	    this.print(out);
	    out.print(' ');
	    if (this._isForward) { this._edge.print(out); } else { this._edge.printReverse(out); }
	  };
	  DirectedEdge.prototype.setSym = function setSym (de) {
	    this._sym = de;
	  };
	  DirectedEdge.prototype.setVisitedEdge = function setVisitedEdge (isVisited) {
	    this.setVisited(isVisited);
	    this._sym.setVisited(isVisited);
	  };
	  DirectedEdge.prototype.setEdgeDepths = function setEdgeDepths (position, depth) {
	    var depthDelta = this.getEdge().getDepthDelta();
	    if (!this._isForward) { depthDelta = -depthDelta; }
	    var directionFactor = 1;
	    if (position === Position.LEFT) { directionFactor = -1; }
	    var oppositePos = Position.opposite(position);
	    var delta = depthDelta * directionFactor;
	    var oppositeDepth = depth + delta;
	    this.setDepth(position, depth);
	    this.setDepth(oppositePos, oppositeDepth);
	  };
	  DirectedEdge.prototype.getEdgeRing = function getEdgeRing () {
	    return this._edgeRing
	  };
	  DirectedEdge.prototype.isInResult = function isInResult () {
	    return this._isInResult
	  };
	  DirectedEdge.prototype.setNext = function setNext (next) {
	    this._next = next;
	  };
	  DirectedEdge.prototype.isVisited = function isVisited () {
	    return this._isVisited
	  };
	  DirectedEdge.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  DirectedEdge.prototype.getClass = function getClass () {
	    return DirectedEdge
	  };
	  DirectedEdge.depthFactor = function depthFactor (currLocation, nextLocation) {
	    if (currLocation === Location.EXTERIOR && nextLocation === Location.INTERIOR) { return 1; } else if (currLocation === Location.INTERIOR && nextLocation === Location.EXTERIOR) { return -1 }
	    return 0
	  };

	  return DirectedEdge;
	}(EdgeEnd));

	var NodeFactory = function NodeFactory () {};

	NodeFactory.prototype.createNode = function createNode (coord) {
	  return new Node(coord, null)
	};
	NodeFactory.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	NodeFactory.prototype.getClass = function getClass () {
	  return NodeFactory
	};

	var PlanarGraph = function PlanarGraph () {
	  this._edges = new ArrayList();
	  this._nodes = null;
	  this._edgeEndList = new ArrayList();
	  if (arguments.length === 0) {
	    this._nodes = new NodeMap(new NodeFactory());
	  } else if (arguments.length === 1) {
	    var nodeFact = arguments[0];
	    this._nodes = new NodeMap(nodeFact);
	  }
	};
	PlanarGraph.prototype.printEdges = function printEdges (out) {
	    var this$1 = this;

	  out.println('Edges:');
	  for (var i = 0; i < this._edges.size(); i++) {
	    out.println('edge ' + i + ':');
	    var e = this$1._edges.get(i);
	    e.print(out);
	    e.eiList.print(out);
	  }
	};
	PlanarGraph.prototype.find = function find (coord) {
	  return this._nodes.find(coord)
	};
	PlanarGraph.prototype.addNode = function addNode () {
	  if (arguments[0] instanceof Node) {
	    var node = arguments[0];
	    return this._nodes.addNode(node)
	  } else if (arguments[0] instanceof Coordinate) {
	    var coord = arguments[0];
	    return this._nodes.addNode(coord)
	  }
	};
	PlanarGraph.prototype.getNodeIterator = function getNodeIterator () {
	  return this._nodes.iterator()
	};
	PlanarGraph.prototype.linkResultDirectedEdges = function linkResultDirectedEdges () {
	  for (var nodeit = this._nodes.iterator(); nodeit.hasNext();) {
	    var node = nodeit.next();
	    node.getEdges().linkResultDirectedEdges();
	  }
	};
	PlanarGraph.prototype.debugPrintln = function debugPrintln (o) {
	  System.out.println(o);
	};
	PlanarGraph.prototype.isBoundaryNode = function isBoundaryNode (geomIndex, coord) {
	  var node = this._nodes.find(coord);
	  if (node === null) { return false }
	  var label = node.getLabel();
	  if (label !== null && label.getLocation(geomIndex) === Location.BOUNDARY) { return true }
	  return false
	};
	PlanarGraph.prototype.linkAllDirectedEdges = function linkAllDirectedEdges () {
	  for (var nodeit = this._nodes.iterator(); nodeit.hasNext();) {
	    var node = nodeit.next();
	    node.getEdges().linkAllDirectedEdges();
	  }
	};
	PlanarGraph.prototype.matchInSameDirection = function matchInSameDirection (p0, p1, ep0, ep1) {
	  if (!p0.equals(ep0)) { return false }
	  if (CGAlgorithms.computeOrientation(p0, p1, ep1) === CGAlgorithms.COLLINEAR && Quadrant.quadrant(p0, p1) === Quadrant.quadrant(ep0, ep1)) { return true }
	  return false
	};
	PlanarGraph.prototype.getEdgeEnds = function getEdgeEnds () {
	  return this._edgeEndList
	};
	PlanarGraph.prototype.debugPrint = function debugPrint (o) {
	  System.out.print(o);
	};
	PlanarGraph.prototype.getEdgeIterator = function getEdgeIterator () {
	  return this._edges.iterator()
	};
	PlanarGraph.prototype.findEdgeInSameDirection = function findEdgeInSameDirection (p0, p1) {
	    var this$1 = this;

	  for (var i = 0; i < this._edges.size(); i++) {
	    var e = this$1._edges.get(i);
	    var eCoord = e.getCoordinates();
	    if (this$1.matchInSameDirection(p0, p1, eCoord[0], eCoord[1])) { return e }
	    if (this$1.matchInSameDirection(p0, p1, eCoord[eCoord.length - 1], eCoord[eCoord.length - 2])) { return e }
	  }
	  return null
	};
	PlanarGraph.prototype.insertEdge = function insertEdge (e) {
	  this._edges.add(e);
	};
	PlanarGraph.prototype.findEdgeEnd = function findEdgeEnd (e) {
	  for (var i = this.getEdgeEnds().iterator(); i.hasNext();) {
	    var ee = i.next();
	    if (ee.getEdge() === e) { return ee }
	  }
	  return null
	};
	PlanarGraph.prototype.addEdges = function addEdges (edgesToAdd) {
	    var this$1 = this;

	  for (var it = edgesToAdd.iterator(); it.hasNext();) {
	    var e = it.next();
	    this$1._edges.add(e);
	    var de1 = new DirectedEdge(e, true);
	    var de2 = new DirectedEdge(e, false);
	    de1.setSym(de2);
	    de2.setSym(de1);
	    this$1.add(de1);
	    this$1.add(de2);
	  }
	};
	PlanarGraph.prototype.add = function add (e) {
	  this._nodes.add(e);
	  this._edgeEndList.add(e);
	};
	PlanarGraph.prototype.getNodes = function getNodes () {
	  return this._nodes.values()
	};
	PlanarGraph.prototype.findEdge = function findEdge (p0, p1) {
	    var this$1 = this;

	  for (var i = 0; i < this._edges.size(); i++) {
	    var e = this$1._edges.get(i);
	    var eCoord = e.getCoordinates();
	    if (p0.equals(eCoord[0]) && p1.equals(eCoord[1])) { return e }
	  }
	  return null
	};
	PlanarGraph.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	PlanarGraph.prototype.getClass = function getClass () {
	  return PlanarGraph
	};
	PlanarGraph.linkResultDirectedEdges = function linkResultDirectedEdges (nodes) {
	  for (var nodeit = nodes.iterator(); nodeit.hasNext();) {
	    var node = nodeit.next();
	    node.getEdges().linkResultDirectedEdges();
	  }
	};

	var PolygonBuilder = function PolygonBuilder () {
	  this._geometryFactory = null;
	  this._shellList = new ArrayList();
	  var geometryFactory = arguments[0];
	  this._geometryFactory = geometryFactory;
	};
	PolygonBuilder.prototype.sortShellsAndHoles = function sortShellsAndHoles (edgeRings, shellList, freeHoleList) {
	  for (var it = edgeRings.iterator(); it.hasNext();) {
	    var er = it.next();
	    if (er.isHole()) {
	      freeHoleList.add(er);
	    } else {
	      shellList.add(er);
	    }
	  }
	};
	PolygonBuilder.prototype.computePolygons = function computePolygons (shellList) {
	    var this$1 = this;

	  var resultPolyList = new ArrayList();
	  for (var it = shellList.iterator(); it.hasNext();) {
	    var er = it.next();
	    var poly = er.toPolygon(this$1._geometryFactory);
	    resultPolyList.add(poly);
	  }
	  return resultPolyList
	};
	PolygonBuilder.prototype.placeFreeHoles = function placeFreeHoles (shellList, freeHoleList) {
	    var this$1 = this;

	  for (var it = freeHoleList.iterator(); it.hasNext();) {
	    var hole = it.next();
	    if (hole.getShell() === null) {
	      var shell = this$1.findEdgeRingContaining(hole, shellList);
	      if (shell === null) { throw new TopologyException('unable to assign hole to a shell', hole.getCoordinate(0)) }
	      hole.setShell(shell);
	    }
	  }
	};
	PolygonBuilder.prototype.buildMinimalEdgeRings = function buildMinimalEdgeRings (maxEdgeRings, shellList, freeHoleList) {
	    var this$1 = this;

	  var edgeRings = new ArrayList();
	  for (var it = maxEdgeRings.iterator(); it.hasNext();) {
	    var er = it.next();
	    if (er.getMaxNodeDegree() > 2) {
	      er.linkDirectedEdgesForMinimalEdgeRings();
	      var minEdgeRings = er.buildMinimalRings();
	      var shell = this$1.findShell(minEdgeRings);
	      if (shell !== null) {
	        this$1.placePolygonHoles(shell, minEdgeRings);
	        shellList.add(shell);
	      } else {
	        freeHoleList.addAll(minEdgeRings);
	      }
	    } else {
	      edgeRings.add(er);
	    }
	  }
	  return edgeRings
	};
	PolygonBuilder.prototype.containsPoint = function containsPoint (p) {
	  for (var it = this._shellList.iterator(); it.hasNext();) {
	    var er = it.next();
	    if (er.containsPoint(p)) { return true }
	  }
	  return false
	};
	PolygonBuilder.prototype.buildMaximalEdgeRings = function buildMaximalEdgeRings (dirEdges) {
	    var this$1 = this;

	  var maxEdgeRings = new ArrayList();
	  for (var it = dirEdges.iterator(); it.hasNext();) {
	    var de = it.next();
	    if (de.isInResult() && de.getLabel().isArea()) {
	      if (de.getEdgeRing() === null) {
	        var er = new MaximalEdgeRing(de, this$1._geometryFactory);
	        maxEdgeRings.add(er);
	        er.setInResult();
	      }
	    }
	  }
	  return maxEdgeRings
	};
	PolygonBuilder.prototype.placePolygonHoles = function placePolygonHoles (shell, minEdgeRings) {
	  for (var it = minEdgeRings.iterator(); it.hasNext();) {
	    var er = it.next();
	    if (er.isHole()) {
	      er.setShell(shell);
	    }
	  }
	};
	PolygonBuilder.prototype.getPolygons = function getPolygons () {
	  var resultPolyList = this.computePolygons(this._shellList);
	  return resultPolyList
	};
	PolygonBuilder.prototype.findEdgeRingContaining = function findEdgeRingContaining (testEr, shellList) {
	  var testRing = testEr.getLinearRing();
	  var testEnv = testRing.getEnvelopeInternal();
	  var testPt = testRing.getCoordinateN(0);
	  var minShell = null;
	  var minEnv = null;
	  for (var it = shellList.iterator(); it.hasNext();) {
	    var tryShell = it.next();
	    var tryRing = tryShell.getLinearRing();
	    var tryEnv = tryRing.getEnvelopeInternal();
	    if (minShell !== null) { minEnv = minShell.getLinearRing().getEnvelopeInternal(); }
	    var isContained = false;
	    if (tryEnv.contains(testEnv) && CGAlgorithms.isPointInRing(testPt, tryRing.getCoordinates())) { isContained = true; }
	    if (isContained) {
	      if (minShell === null || minEnv.contains(tryEnv)) {
	        minShell = tryShell;
	      }
	    }
	  }
	  return minShell
	};
	PolygonBuilder.prototype.findShell = function findShell (minEdgeRings) {
	  var shellCount = 0;
	  var shell = null;
	  for (var it = minEdgeRings.iterator(); it.hasNext();) {
	    var er = it.next();
	    if (!er.isHole()) {
	      shell = er;
	      shellCount++;
	    }
	  }
	  Assert.isTrue(shellCount <= 1, 'found two shells in MinimalEdgeRing list');
	  return shell
	};
	PolygonBuilder.prototype.add = function add () {
	  if (arguments.length === 1) {
	    var graph = arguments[0];
	    this.add(graph.getEdgeEnds(), graph.getNodes());
	  } else if (arguments.length === 2) {
	    var dirEdges = arguments[0];
	    var nodes = arguments[1];
	    PlanarGraph.linkResultDirectedEdges(nodes);
	    var maxEdgeRings = this.buildMaximalEdgeRings(dirEdges);
	    var freeHoleList = new ArrayList();
	    var edgeRings = this.buildMinimalEdgeRings(maxEdgeRings, this._shellList, freeHoleList);
	    this.sortShellsAndHoles(edgeRings, this._shellList, freeHoleList);
	    this.placeFreeHoles(this._shellList, freeHoleList);
	  }
	};
	PolygonBuilder.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	PolygonBuilder.prototype.getClass = function getClass () {
	  return PolygonBuilder
	};

	var Boundable = function Boundable () {};

	Boundable.prototype.getBounds = function getBounds () {};
	Boundable.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Boundable.prototype.getClass = function getClass () {
	  return Boundable
	};

	var ItemBoundable = function ItemBoundable () {
	  this._bounds = null;
	  this._item = null;
	  var bounds = arguments[0];
	  var item = arguments[1];
	  this._bounds = bounds;
	  this._item = item;
	};
	ItemBoundable.prototype.getItem = function getItem () {
	  return this._item
	};
	ItemBoundable.prototype.getBounds = function getBounds () {
	  return this._bounds
	};
	ItemBoundable.prototype.interfaces_ = function interfaces_ () {
	  return [Boundable, Serializable]
	};
	ItemBoundable.prototype.getClass = function getClass () {
	  return ItemBoundable
	};

	var PriorityQueue = function PriorityQueue () {
	  this._size = null;
	  this._items = null;
	  this._size = 0;
	  this._items = new ArrayList();
	  this._items.add(null);
	};
	PriorityQueue.prototype.poll = function poll () {
	  if (this.isEmpty()) { return null }
	  var minItem = this._items.get(1);
	  this._items.set(1, this._items.get(this._size));
	  this._size -= 1;
	  this.reorder(1);
	  return minItem
	};
	PriorityQueue.prototype.size = function size () {
	  return this._size
	};
	PriorityQueue.prototype.reorder = function reorder (hole) {
	    var this$1 = this;

	  var child = null;
	  var tmp = this._items.get(hole);
	  for (; hole * 2 <= this._size; hole = child) {
	    child = hole * 2;
	    if (child !== this$1._size && this$1._items.get(child + 1).compareTo(this$1._items.get(child)) < 0) { child++; }
	    if (this$1._items.get(child).compareTo(tmp) < 0) { this$1._items.set(hole, this$1._items.get(child)); } else { break }
	  }
	  this._items.set(hole, tmp);
	};
	PriorityQueue.prototype.clear = function clear () {
	  this._size = 0;
	  this._items.clear();
	};
	PriorityQueue.prototype.isEmpty = function isEmpty () {
	  return this._size === 0
	};
	PriorityQueue.prototype.add = function add (x) {
	    var this$1 = this;

	  this._items.add(null);
	  this._size += 1;
	  var hole = this._size;
	  this._items.set(0, x);
	  for (; x.compareTo(this._items.get(Math.trunc(hole / 2))) < 0; hole /= 2) {
	    this$1._items.set(hole, this$1._items.get(Math.trunc(hole / 2)));
	  }
	  this._items.set(hole, x);
	};
	PriorityQueue.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	PriorityQueue.prototype.getClass = function getClass () {
	  return PriorityQueue
	};

	var ItemVisitor = function ItemVisitor () {};

	ItemVisitor.prototype.visitItem = function visitItem (item) {};
	ItemVisitor.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	ItemVisitor.prototype.getClass = function getClass () {
	  return ItemVisitor
	};

	var SpatialIndex = function SpatialIndex () {};

	SpatialIndex.prototype.insert = function insert (itemEnv, item) {};
	SpatialIndex.prototype.remove = function remove (itemEnv, item) {};
	SpatialIndex.prototype.query = function query () {
	  // if (arguments.length === 1) {
	  // const searchEnv = arguments[0]
	  // } else if (arguments.length === 2) {
	  // const searchEnv = arguments[0]
	  // const visitor = arguments[1]
	  // }
	};
	SpatialIndex.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	SpatialIndex.prototype.getClass = function getClass () {
	  return SpatialIndex
	};

	var AbstractNode = function AbstractNode () {
	  this._childBoundables = new ArrayList();
	  this._bounds = null;
	  this._level = null;
	  if (arguments.length === 0) ; else if (arguments.length === 1) {
	    var level = arguments[0];
	    this._level = level;
	  }
	};

	var staticAccessors$22 = { serialVersionUID: { configurable: true } };
	AbstractNode.prototype.getLevel = function getLevel () {
	  return this._level
	};
	AbstractNode.prototype.size = function size () {
	  return this._childBoundables.size()
	};
	AbstractNode.prototype.getChildBoundables = function getChildBoundables () {
	  return this._childBoundables
	};
	AbstractNode.prototype.addChildBoundable = function addChildBoundable (childBoundable) {
	  Assert.isTrue(this._bounds === null);
	  this._childBoundables.add(childBoundable);
	};
	AbstractNode.prototype.isEmpty = function isEmpty () {
	  return this._childBoundables.isEmpty()
	};
	AbstractNode.prototype.getBounds = function getBounds () {
	  if (this._bounds === null) {
	    this._bounds = this.computeBounds();
	  }
	  return this._bounds
	};
	AbstractNode.prototype.interfaces_ = function interfaces_ () {
	  return [Boundable, Serializable]
	};
	AbstractNode.prototype.getClass = function getClass () {
	  return AbstractNode
	};
	staticAccessors$22.serialVersionUID.get = function () { return 6493722185909573708 };

	Object.defineProperties( AbstractNode, staticAccessors$22 );

	var Collections = function Collections () {};

	Collections.reverseOrder = function reverseOrder () {
	  return {
	    compare: function compare (a, b) {
	      return b.compareTo(a)
	    }
	  }
	};
	Collections.min = function min (l) {
	  Collections.sort(l);
	  return l.get(0)
	};
	Collections.sort = function sort (l, c) {
	  var a = l.toArray();
	  if (c) {
	    Arrays.sort(a, c);
	  } else {
	    Arrays.sort(a);
	  }
	  var i = l.iterator();
	  for (var pos = 0, alen = a.length; pos < alen; pos++) {
	    i.next();
	    i.set(a[pos]);
	  }
	};
	Collections.singletonList = function singletonList (o) {
	  var arrayList = new ArrayList();
	  arrayList.add(o);
	  return arrayList
	};

	var BoundablePair = function BoundablePair () {
	  this._boundable1 = null;
	  this._boundable2 = null;
	  this._distance = null;
	  this._itemDistance = null;
	  var boundable1 = arguments[0];
	  var boundable2 = arguments[1];
	  var itemDistance = arguments[2];
	  this._boundable1 = boundable1;
	  this._boundable2 = boundable2;
	  this._itemDistance = itemDistance;
	  this._distance = this.distance();
	};
	BoundablePair.prototype.expandToQueue = function expandToQueue (priQ, minDistance) {
	  var isComp1 = BoundablePair.isComposite(this._boundable1);
	  var isComp2 = BoundablePair.isComposite(this._boundable2);
	  if (isComp1 && isComp2) {
	    if (BoundablePair.area(this._boundable1) > BoundablePair.area(this._boundable2)) {
	      this.expand(this._boundable1, this._boundable2, priQ, minDistance);
	      return null
	    } else {
	      this.expand(this._boundable2, this._boundable1, priQ, minDistance);
	      return null
	    }
	  } else if (isComp1) {
	    this.expand(this._boundable1, this._boundable2, priQ, minDistance);
	    return null
	  } else if (isComp2) {
	    this.expand(this._boundable2, this._boundable1, priQ, minDistance);
	    return null
	  }
	  throw new IllegalArgumentException('neither boundable is composite')
	};
	BoundablePair.prototype.isLeaves = function isLeaves () {
	  return !(BoundablePair.isComposite(this._boundable1) || BoundablePair.isComposite(this._boundable2))
	};
	BoundablePair.prototype.compareTo = function compareTo (o) {
	  var nd = o;
	  if (this._distance < nd._distance) { return -1 }
	  if (this._distance > nd._distance) { return 1 }
	  return 0
	};
	BoundablePair.prototype.expand = function expand (bndComposite, bndOther, priQ, minDistance) {
	    var this$1 = this;

	  var children = bndComposite.getChildBoundables();
	  for (var i = children.iterator(); i.hasNext();) {
	    var child = i.next();
	    var bp = new BoundablePair(child, bndOther, this$1._itemDistance);
	    if (bp.getDistance() < minDistance) {
	      priQ.add(bp);
	    }
	  }
	};
	BoundablePair.prototype.getBoundable = function getBoundable (i) {
	  if (i === 0) { return this._boundable1 }
	  return this._boundable2
	};
	BoundablePair.prototype.getDistance = function getDistance () {
	  return this._distance
	};
	BoundablePair.prototype.distance = function distance () {
	  if (this.isLeaves()) {
	    return this._itemDistance.distance(this._boundable1, this._boundable2)
	  }
	  return this._boundable1.getBounds().distance(this._boundable2.getBounds())
	};
	BoundablePair.prototype.interfaces_ = function interfaces_ () {
	  return [Comparable]
	};
	BoundablePair.prototype.getClass = function getClass () {
	  return BoundablePair
	};
	BoundablePair.area = function area (b) {
	  return b.getBounds().getArea()
	};
	BoundablePair.isComposite = function isComposite (item) {
	  return item instanceof AbstractNode
	};

	var AbstractSTRtree = function AbstractSTRtree () {
	  this._root = null;
	  this._built = false;
	  this._itemBoundables = new ArrayList();
	  this._nodeCapacity = null;
	  if (arguments.length === 0) {
	    var nodeCapacity = AbstractSTRtree.DEFAULT_NODE_CAPACITY;
	    this._nodeCapacity = nodeCapacity;
	  } else if (arguments.length === 1) {
	    var nodeCapacity$1 = arguments[0];
	    Assert.isTrue(nodeCapacity$1 > 1, 'Node capacity must be greater than 1');
	    this._nodeCapacity = nodeCapacity$1;
	  }
	};

	var staticAccessors$23 = { IntersectsOp: { configurable: true },serialVersionUID: { configurable: true },DEFAULT_NODE_CAPACITY: { configurable: true } };
	AbstractSTRtree.prototype.getNodeCapacity = function getNodeCapacity () {
	  return this._nodeCapacity
	};
	AbstractSTRtree.prototype.lastNode = function lastNode (nodes) {
	  return nodes.get(nodes.size() - 1)
	};
	AbstractSTRtree.prototype.size = function size () {
	    var this$1 = this;

	  if (arguments.length === 0) {
	    if (this.isEmpty()) {
	      return 0
	    }
	    this.build();
	    return this.size(this._root)
	  } else if (arguments.length === 1) {
	    var node = arguments[0];
	    var size = 0;
	    for (var i = node.getChildBoundables().iterator(); i.hasNext();) {
	      var childBoundable = i.next();
	      if (childBoundable instanceof AbstractNode) {
	        size += this$1.size(childBoundable);
	      } else if (childBoundable instanceof ItemBoundable) {
	        size += 1;
	      }
	    }
	    return size
	  }
	};
	AbstractSTRtree.prototype.removeItem = function removeItem (node, item) {
	  var childToRemove = null;
	  for (var i = node.getChildBoundables().iterator(); i.hasNext();) {
	    var childBoundable = i.next();
	    if (childBoundable instanceof ItemBoundable) {
	      if (childBoundable.getItem() === item) { childToRemove = childBoundable; }
	    }
	  }
	  if (childToRemove !== null) {
	    node.getChildBoundables().remove(childToRemove);
	    return true
	  }
	  return false
	};
	AbstractSTRtree.prototype.itemsTree = function itemsTree () {
	    var this$1 = this;

	  if (arguments.length === 0) {
	    this.build();
	    var valuesTree = this.itemsTree(this._root);
	    if (valuesTree === null) { return new ArrayList() }
	    return valuesTree
	  } else if (arguments.length === 1) {
	    var node = arguments[0];
	    var valuesTreeForNode = new ArrayList();
	    for (var i = node.getChildBoundables().iterator(); i.hasNext();) {
	      var childBoundable = i.next();
	      if (childBoundable instanceof AbstractNode) {
	        var valuesTreeForChild = this$1.itemsTree(childBoundable);
	        if (valuesTreeForChild !== null) { valuesTreeForNode.add(valuesTreeForChild); }
	      } else if (childBoundable instanceof ItemBoundable) {
	        valuesTreeForNode.add(childBoundable.getItem());
	      } else {
	        Assert.shouldNeverReachHere();
	      }
	    }
	    if (valuesTreeForNode.size() <= 0) { return null }
	    return valuesTreeForNode
	  }
	};
	AbstractSTRtree.prototype.insert = function insert (bounds, item) {
	  Assert.isTrue(!this._built, 'Cannot insert items into an STR packed R-tree after it has been built.');
	  this._itemBoundables.add(new ItemBoundable(bounds, item));
	};
	AbstractSTRtree.prototype.boundablesAtLevel = function boundablesAtLevel () {
	    var this$1 = this;

	  if (arguments.length === 1) {
	    var level = arguments[0];
	    var boundables = new ArrayList();
	    this.boundablesAtLevel(level, this._root, boundables);
	    return boundables
	  } else if (arguments.length === 3) {
	    var level$1 = arguments[0];
	    var top = arguments[1];
	    var boundables$1 = arguments[2];
	    Assert.isTrue(level$1 > -2);
	    if (top.getLevel() === level$1) {
	      boundables$1.add(top);
	      return null
	    }
	    for (var i = top.getChildBoundables().iterator(); i.hasNext();) {
	      var boundable = i.next();
	      if (boundable instanceof AbstractNode) {
	        this$1.boundablesAtLevel(level$1, boundable, boundables$1);
	      } else {
	        Assert.isTrue(boundable instanceof ItemBoundable);
	        if (level$1 === -1) {
	          boundables$1.add(boundable);
	        }
	      }
	    }
	    return null
	  }
	};
	AbstractSTRtree.prototype.query = function query () {
	    var this$1 = this;

	  if (arguments.length === 1) {
	    var searchBounds = arguments[0];
	    this.build();
	    var matches = new ArrayList();
	    if (this.isEmpty()) {
	      return matches
	    }
	    if (this.getIntersectsOp().intersects(this._root.getBounds(), searchBounds)) {
	      this.query(searchBounds, this._root, matches);
	    }
	    return matches
	  } else if (arguments.length === 2) {
	    var searchBounds$1 = arguments[0];
	    var visitor = arguments[1];
	    this.build();
	    if (this.isEmpty()) {
	      return null
	    }
	    if (this.getIntersectsOp().intersects(this._root.getBounds(), searchBounds$1)) {
	      this.query(searchBounds$1, this._root, visitor);
	    }
	  } else if (arguments.length === 3) {
	    if (hasInterface(arguments[2], ItemVisitor) && (arguments[0] instanceof Object && arguments[1] instanceof AbstractNode)) {
	      var searchBounds$2 = arguments[0];
	      var node = arguments[1];
	      var visitor$1 = arguments[2];
	      var childBoundables = node.getChildBoundables();
	      for (var i = 0; i < childBoundables.size(); i++) {
	        var childBoundable = childBoundables.get(i);
	        if (!this$1.getIntersectsOp().intersects(childBoundable.getBounds(), searchBounds$2)) {
	          continue
	        }
	        if (childBoundable instanceof AbstractNode) {
	          this$1.query(searchBounds$2, childBoundable, visitor$1);
	        } else if (childBoundable instanceof ItemBoundable) {
	          visitor$1.visitItem(childBoundable.getItem());
	        } else {
	          Assert.shouldNeverReachHere();
	        }
	      }
	    } else if (hasInterface(arguments[2], List) && (arguments[0] instanceof Object && arguments[1] instanceof AbstractNode)) {
	      var searchBounds$3 = arguments[0];
	      var node$1 = arguments[1];
	      var matches$1 = arguments[2];
	      var childBoundables$1 = node$1.getChildBoundables();
	      for (var i$1 = 0; i$1 < childBoundables$1.size(); i$1++) {
	        var childBoundable$1 = childBoundables$1.get(i$1);
	        if (!this$1.getIntersectsOp().intersects(childBoundable$1.getBounds(), searchBounds$3)) {
	          continue
	        }
	        if (childBoundable$1 instanceof AbstractNode) {
	          this$1.query(searchBounds$3, childBoundable$1, matches$1);
	        } else if (childBoundable$1 instanceof ItemBoundable) {
	          matches$1.add(childBoundable$1.getItem());
	        } else {
	          Assert.shouldNeverReachHere();
	        }
	      }
	    }
	  }
	};
	AbstractSTRtree.prototype.build = function build () {
	  if (this._built) { return null }
	  this._root = this._itemBoundables.isEmpty() ? this.createNode(0) : this.createHigherLevels(this._itemBoundables, -1);
	  this._itemBoundables = null;
	  this._built = true;
	};
	AbstractSTRtree.prototype.getRoot = function getRoot () {
	  this.build();
	  return this._root
	};
	AbstractSTRtree.prototype.remove = function remove () {
	    var this$1 = this;

	  if (arguments.length === 2) {
	    var searchBounds = arguments[0];
	    var item = arguments[1];
	    this.build();
	    if (this.getIntersectsOp().intersects(this._root.getBounds(), searchBounds)) {
	      return this.remove(searchBounds, this._root, item)
	    }
	    return false
	  } else if (arguments.length === 3) {
	    var searchBounds$1 = arguments[0];
	    var node = arguments[1];
	    var item$1 = arguments[2];
	    var found = this.removeItem(node, item$1);
	    if (found) { return true }
	    var childToPrune = null;
	    for (var i = node.getChildBoundables().iterator(); i.hasNext();) {
	      var childBoundable = i.next();
	      if (!this$1.getIntersectsOp().intersects(childBoundable.getBounds(), searchBounds$1)) {
	        continue
	      }
	      if (childBoundable instanceof AbstractNode) {
	        found = this$1.remove(searchBounds$1, childBoundable, item$1);
	        if (found) {
	          childToPrune = childBoundable;
	          break
	        }
	      }
	    }
	    if (childToPrune !== null) {
	      if (childToPrune.getChildBoundables().isEmpty()) {
	        node.getChildBoundables().remove(childToPrune);
	      }
	    }
	    return found
	  }
	};
	AbstractSTRtree.prototype.createHigherLevels = function createHigherLevels (boundablesOfALevel, level) {
	  Assert.isTrue(!boundablesOfALevel.isEmpty());
	  var parentBoundables = this.createParentBoundables(boundablesOfALevel, level + 1);
	  if (parentBoundables.size() === 1) {
	    return parentBoundables.get(0)
	  }
	  return this.createHigherLevels(parentBoundables, level + 1)
	};
	AbstractSTRtree.prototype.depth = function depth () {
	    var this$1 = this;

	  if (arguments.length === 0) {
	    if (this.isEmpty()) {
	      return 0
	    }
	    this.build();
	    return this.depth(this._root)
	  } else if (arguments.length === 1) {
	    var node = arguments[0];
	    var maxChildDepth = 0;
	    for (var i = node.getChildBoundables().iterator(); i.hasNext();) {
	      var childBoundable = i.next();
	      if (childBoundable instanceof AbstractNode) {
	        var childDepth = this$1.depth(childBoundable);
	        if (childDepth > maxChildDepth) { maxChildDepth = childDepth; }
	      }
	    }
	    return maxChildDepth + 1
	  }
	};
	AbstractSTRtree.prototype.createParentBoundables = function createParentBoundables (childBoundables, newLevel) {
	    var this$1 = this;

	  Assert.isTrue(!childBoundables.isEmpty());
	  var parentBoundables = new ArrayList();
	  parentBoundables.add(this.createNode(newLevel));
	  var sortedChildBoundables = new ArrayList(childBoundables);
	  Collections.sort(sortedChildBoundables, this.getComparator());
	  for (var i = sortedChildBoundables.iterator(); i.hasNext();) {
	    var childBoundable = i.next();
	    if (this$1.lastNode(parentBoundables).getChildBoundables().size() === this$1.getNodeCapacity()) {
	      parentBoundables.add(this$1.createNode(newLevel));
	    }
	    this$1.lastNode(parentBoundables).addChildBoundable(childBoundable);
	  }
	  return parentBoundables
	};
	AbstractSTRtree.prototype.isEmpty = function isEmpty () {
	  if (!this._built) { return this._itemBoundables.isEmpty() }
	  return this._root.isEmpty()
	};
	AbstractSTRtree.prototype.interfaces_ = function interfaces_ () {
	  return [Serializable]
	};
	AbstractSTRtree.prototype.getClass = function getClass () {
	  return AbstractSTRtree
	};
	AbstractSTRtree.compareDoubles = function compareDoubles (a, b) {
	  return a > b ? 1 : a < b ? -1 : 0
	};
	staticAccessors$23.IntersectsOp.get = function () { return IntersectsOp };
	staticAccessors$23.serialVersionUID.get = function () { return -3886435814360241337 };
	staticAccessors$23.DEFAULT_NODE_CAPACITY.get = function () { return 10 };

	Object.defineProperties( AbstractSTRtree, staticAccessors$23 );

	var IntersectsOp = function IntersectsOp () {};

	var ItemDistance = function ItemDistance () {};

	ItemDistance.prototype.distance = function distance (item1, item2) {};
	ItemDistance.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	ItemDistance.prototype.getClass = function getClass () {
	  return ItemDistance
	};

	var STRtree = (function (AbstractSTRtree$$1) {
	  function STRtree (nodeCapacity) {
	    nodeCapacity = nodeCapacity || STRtree.DEFAULT_NODE_CAPACITY;
	    AbstractSTRtree$$1.call(this, nodeCapacity);
	  }

	  if ( AbstractSTRtree$$1 ) STRtree.__proto__ = AbstractSTRtree$$1;
	  STRtree.prototype = Object.create( AbstractSTRtree$$1 && AbstractSTRtree$$1.prototype );
	  STRtree.prototype.constructor = STRtree;

	  var staticAccessors = { STRtreeNode: { configurable: true },serialVersionUID: { configurable: true },xComparator: { configurable: true },yComparator: { configurable: true },intersectsOp: { configurable: true },DEFAULT_NODE_CAPACITY: { configurable: true } };
	  STRtree.prototype.createParentBoundablesFromVerticalSlices = function createParentBoundablesFromVerticalSlices (verticalSlices, newLevel) {
	    var this$1 = this;

	    Assert.isTrue(verticalSlices.length > 0);
	    var parentBoundables = new ArrayList();
	    for (var i = 0; i < verticalSlices.length; i++) {
	      parentBoundables.addAll(this$1.createParentBoundablesFromVerticalSlice(verticalSlices[i], newLevel));
	    }
	    return parentBoundables
	  };
	  STRtree.prototype.createNode = function createNode (level) {
	    return new STRtreeNode(level)
	  };
	  STRtree.prototype.size = function size () {
	    if (arguments.length === 0) {
	      return AbstractSTRtree$$1.prototype.size.call(this)
	    } else { return AbstractSTRtree$$1.prototype.size.apply(this, arguments) }
	  };
	  STRtree.prototype.insert = function insert () {
	    if (arguments.length === 2) {
	      var itemEnv = arguments[0];
	      var item = arguments[1];
	      if (itemEnv.isNull()) {
	        return null
	      }
	      AbstractSTRtree$$1.prototype.insert.call(this, itemEnv, item);
	    } else { return AbstractSTRtree$$1.prototype.insert.apply(this, arguments) }
	  };
	  STRtree.prototype.getIntersectsOp = function getIntersectsOp () {
	    return STRtree.intersectsOp
	  };
	  STRtree.prototype.verticalSlices = function verticalSlices (childBoundables, sliceCount) {
	    var sliceCapacity = Math.trunc(Math.ceil(childBoundables.size() / sliceCount));
	    var slices = new Array(sliceCount).fill(null);
	    var i = childBoundables.iterator();
	    for (var j = 0; j < sliceCount; j++) {
	      slices[j] = new ArrayList();
	      var boundablesAddedToSlice = 0;
	      while (i.hasNext() && boundablesAddedToSlice < sliceCapacity) {
	        var childBoundable = i.next();
	        slices[j].add(childBoundable);
	        boundablesAddedToSlice++;
	      }
	    }
	    return slices
	  };
	  STRtree.prototype.query = function query () {
	    if (arguments.length === 1) {
	      var searchEnv = arguments[0];
	      return AbstractSTRtree$$1.prototype.query.call(this, searchEnv)
	    } else if (arguments.length === 2) {
	      var searchEnv$1 = arguments[0];
	      var visitor = arguments[1];
	      AbstractSTRtree$$1.prototype.query.call(this, searchEnv$1, visitor);
	    } else if (arguments.length === 3) {
	      if (hasInterface(arguments[2], ItemVisitor) && (arguments[0] instanceof Object && arguments[1] instanceof AbstractNode)) {
	        var searchBounds = arguments[0];
	        var node = arguments[1];
	        var visitor$1 = arguments[2];
	        AbstractSTRtree$$1.prototype.query.call(this, searchBounds, node, visitor$1);
	      } else if (hasInterface(arguments[2], List) && (arguments[0] instanceof Object && arguments[1] instanceof AbstractNode)) {
	        var searchBounds$1 = arguments[0];
	        var node$1 = arguments[1];
	        var matches = arguments[2];
	        AbstractSTRtree$$1.prototype.query.call(this, searchBounds$1, node$1, matches);
	      }
	    }
	  };
	  STRtree.prototype.getComparator = function getComparator () {
	    return STRtree.yComparator
	  };
	  STRtree.prototype.createParentBoundablesFromVerticalSlice = function createParentBoundablesFromVerticalSlice (childBoundables, newLevel) {
	    return AbstractSTRtree$$1.prototype.createParentBoundables.call(this, childBoundables, newLevel)
	  };
	  STRtree.prototype.remove = function remove () {
	    if (arguments.length === 2) {
	      var itemEnv = arguments[0];
	      var item = arguments[1];
	      return AbstractSTRtree$$1.prototype.remove.call(this, itemEnv, item)
	    } else { return AbstractSTRtree$$1.prototype.remove.apply(this, arguments) }
	  };
	  STRtree.prototype.depth = function depth () {
	    if (arguments.length === 0) {
	      return AbstractSTRtree$$1.prototype.depth.call(this)
	    } else { return AbstractSTRtree$$1.prototype.depth.apply(this, arguments) }
	  };
	  STRtree.prototype.createParentBoundables = function createParentBoundables (childBoundables, newLevel) {
	    Assert.isTrue(!childBoundables.isEmpty());
	    var minLeafCount = Math.trunc(Math.ceil(childBoundables.size() / this.getNodeCapacity()));
	    var sortedChildBoundables = new ArrayList(childBoundables);
	    Collections.sort(sortedChildBoundables, STRtree.xComparator);
	    var verticalSlices = this.verticalSlices(sortedChildBoundables, Math.trunc(Math.ceil(Math.sqrt(minLeafCount))));
	    return this.createParentBoundablesFromVerticalSlices(verticalSlices, newLevel)
	  };
	  STRtree.prototype.nearestNeighbour = function nearestNeighbour () {
	    if (arguments.length === 1) {
	      if (hasInterface(arguments[0], ItemDistance)) {
	        var itemDist = arguments[0];
	        var bp = new BoundablePair(this.getRoot(), this.getRoot(), itemDist);
	        return this.nearestNeighbour(bp)
	      } else if (arguments[0] instanceof BoundablePair) {
	        var initBndPair = arguments[0];
	        return this.nearestNeighbour(initBndPair, Double.POSITIVE_INFINITY)
	      }
	    } else if (arguments.length === 2) {
	      if (arguments[0] instanceof STRtree && hasInterface(arguments[1], ItemDistance)) {
	        var tree = arguments[0];
	        var itemDist$1 = arguments[1];
	        var bp$1 = new BoundablePair(this.getRoot(), tree.getRoot(), itemDist$1);
	        return this.nearestNeighbour(bp$1)
	      } else if (arguments[0] instanceof BoundablePair && typeof arguments[1] === 'number') {
	        var initBndPair$1 = arguments[0];
	        var maxDistance = arguments[1];
	        var distanceLowerBound = maxDistance;
	        var minPair = null;
	        var priQ = new PriorityQueue();
	        priQ.add(initBndPair$1);
	        while (!priQ.isEmpty() && distanceLowerBound > 0.0) {
	          var bndPair = priQ.poll();
	          var currentDistance = bndPair.getDistance();
	          if (currentDistance >= distanceLowerBound) { break }
	          if (bndPair.isLeaves()) {
	            distanceLowerBound = currentDistance;
	            minPair = bndPair;
	          } else {
	            bndPair.expandToQueue(priQ, distanceLowerBound);
	          }
	        }
	        return [minPair.getBoundable(0).getItem(), minPair.getBoundable(1).getItem()]
	      }
	    } else if (arguments.length === 3) {
	      var env = arguments[0];
	      var item = arguments[1];
	      var itemDist$2 = arguments[2];
	      var bnd = new ItemBoundable(env, item);
	      var bp$2 = new BoundablePair(this.getRoot(), bnd, itemDist$2);
	      return this.nearestNeighbour(bp$2)[0]
	    }
	  };
	  STRtree.prototype.interfaces_ = function interfaces_ () {
	    return [SpatialIndex, Serializable]
	  };
	  STRtree.prototype.getClass = function getClass () {
	    return STRtree
	  };
	  STRtree.centreX = function centreX (e) {
	    return STRtree.avg(e.getMinX(), e.getMaxX())
	  };
	  STRtree.avg = function avg (a, b) {
	    return (a + b) / 2
	  };
	  STRtree.centreY = function centreY (e) {
	    return STRtree.avg(e.getMinY(), e.getMaxY())
	  };
	  staticAccessors.STRtreeNode.get = function () { return STRtreeNode };
	  staticAccessors.serialVersionUID.get = function () { return 259274702368956900 };
	  staticAccessors.xComparator.get = function () {
	    return {
	      interfaces_: function () {
	        return [Comparator]
	      },
	      compare: function (o1, o2) {
	        return AbstractSTRtree$$1.compareDoubles(STRtree.centreX(o1.getBounds()), STRtree.centreX(o2.getBounds()))
	      }
	    }
	  };
	  staticAccessors.yComparator.get = function () {
	    return {
	      interfaces_: function () {
	        return [Comparator]
	      },
	      compare: function (o1, o2) {
	        return AbstractSTRtree$$1.compareDoubles(STRtree.centreY(o1.getBounds()), STRtree.centreY(o2.getBounds()))
	      }
	    }
	  };
	  staticAccessors.intersectsOp.get = function () {
	    return {
	      interfaces_: function () {
	        return [AbstractSTRtree$$1.IntersectsOp]
	      },
	      intersects: function (aBounds, bBounds) {
	        return aBounds.intersects(bBounds)
	      }
	    }
	  };
	  staticAccessors.DEFAULT_NODE_CAPACITY.get = function () { return 10 };

	  Object.defineProperties( STRtree, staticAccessors );

	  return STRtree;
	}(AbstractSTRtree));

	var STRtreeNode = (function (AbstractNode$$1) {
	  function STRtreeNode () {
	    var level = arguments[0];
	    AbstractNode$$1.call(this, level);
	  }

	  if ( AbstractNode$$1 ) STRtreeNode.__proto__ = AbstractNode$$1;
	  STRtreeNode.prototype = Object.create( AbstractNode$$1 && AbstractNode$$1.prototype );
	  STRtreeNode.prototype.constructor = STRtreeNode;
	  STRtreeNode.prototype.computeBounds = function computeBounds () {
	    var bounds = null;
	    for (var i = this.getChildBoundables().iterator(); i.hasNext();) {
	      var childBoundable = i.next();
	      if (bounds === null) {
	        bounds = new Envelope(childBoundable.getBounds());
	      } else {
	        bounds.expandToInclude(childBoundable.getBounds());
	      }
	    }
	    return bounds
	  };
	  STRtreeNode.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  STRtreeNode.prototype.getClass = function getClass () {
	    return STRtreeNode
	  };

	  return STRtreeNode;
	}(AbstractNode));

	var SegmentPointComparator = function SegmentPointComparator () {};

	SegmentPointComparator.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	SegmentPointComparator.prototype.getClass = function getClass () {
	  return SegmentPointComparator
	};
	SegmentPointComparator.relativeSign = function relativeSign (x0, x1) {
	  if (x0 < x1) { return -1 }
	  if (x0 > x1) { return 1 }
	  return 0
	};
	SegmentPointComparator.compare = function compare (octant, p0, p1) {
	  if (p0.equals2D(p1)) { return 0 }
	  var xSign = SegmentPointComparator.relativeSign(p0.x, p1.x);
	  var ySign = SegmentPointComparator.relativeSign(p0.y, p1.y);
	  switch (octant) {
	    case 0:
	      return SegmentPointComparator.compareValue(xSign, ySign)
	    case 1:
	      return SegmentPointComparator.compareValue(ySign, xSign)
	    case 2:
	      return SegmentPointComparator.compareValue(ySign, -xSign)
	    case 3:
	      return SegmentPointComparator.compareValue(-xSign, ySign)
	    case 4:
	      return SegmentPointComparator.compareValue(-xSign, -ySign)
	    case 5:
	      return SegmentPointComparator.compareValue(-ySign, -xSign)
	    case 6:
	      return SegmentPointComparator.compareValue(-ySign, xSign)
	    case 7:
	      return SegmentPointComparator.compareValue(xSign, -ySign)
	  }
	  Assert.shouldNeverReachHere('invalid octant value');
	  return 0
	};
	SegmentPointComparator.compareValue = function compareValue (compareSign0, compareSign1) {
	  if (compareSign0 < 0) { return -1 }
	  if (compareSign0 > 0) { return 1 }
	  if (compareSign1 < 0) { return -1 }
	  if (compareSign1 > 0) { return 1 }
	  return 0
	};

	var SegmentNode = function SegmentNode () {
	  this._segString = null;
	  this.coord = null;
	  this.segmentIndex = null;
	  this._segmentOctant = null;
	  this._isInterior = null;
	  var segString = arguments[0];
	  var coord = arguments[1];
	  var segmentIndex = arguments[2];
	  var segmentOctant = arguments[3];
	  this._segString = segString;
	  this.coord = new Coordinate(coord);
	  this.segmentIndex = segmentIndex;
	  this._segmentOctant = segmentOctant;
	  this._isInterior = !coord.equals2D(segString.getCoordinate(segmentIndex));
	};
	SegmentNode.prototype.getCoordinate = function getCoordinate () {
	  return this.coord
	};
	SegmentNode.prototype.print = function print (out) {
	  out.print(this.coord);
	  out.print(' seg # = ' + this.segmentIndex);
	};
	SegmentNode.prototype.compareTo = function compareTo (obj) {
	  var other = obj;
	  if (this.segmentIndex < other.segmentIndex) { return -1 }
	  if (this.segmentIndex > other.segmentIndex) { return 1 }
	  if (this.coord.equals2D(other.coord)) { return 0 }
	  return SegmentPointComparator.compare(this._segmentOctant, this.coord, other.coord)
	};
	SegmentNode.prototype.isEndPoint = function isEndPoint (maxSegmentIndex) {
	  if (this.segmentIndex === 0 && !this._isInterior) { return true }
	  if (this.segmentIndex === maxSegmentIndex) { return true }
	  return false
	};
	SegmentNode.prototype.isInterior = function isInterior () {
	  return this._isInterior
	};
	SegmentNode.prototype.interfaces_ = function interfaces_ () {
	  return [Comparable]
	};
	SegmentNode.prototype.getClass = function getClass () {
	  return SegmentNode
	};

	// import Iterator from '../../../../java/util/Iterator'
	var SegmentNodeList = function SegmentNodeList () {
	  this._nodeMap = new TreeMap();
	  this._edge = null;
	  var edge = arguments[0];
	  this._edge = edge;
	};
	SegmentNodeList.prototype.getSplitCoordinates = function getSplitCoordinates () {
	    var this$1 = this;

	  var coordList = new CoordinateList();
	  this.addEndpoints();
	  var it = this.iterator();
	  var eiPrev = it.next();
	  while (it.hasNext()) {
	    var ei = it.next();
	    this$1.addEdgeCoordinates(eiPrev, ei, coordList);
	    eiPrev = ei;
	  }
	  return coordList.toCoordinateArray()
	};
	SegmentNodeList.prototype.addCollapsedNodes = function addCollapsedNodes () {
	    var this$1 = this;

	  var collapsedVertexIndexes = new ArrayList();
	  this.findCollapsesFromInsertedNodes(collapsedVertexIndexes);
	  this.findCollapsesFromExistingVertices(collapsedVertexIndexes);
	  for (var it = collapsedVertexIndexes.iterator(); it.hasNext();) {
	    var vertexIndex = it.next().intValue();
	    this$1.add(this$1._edge.getCoordinate(vertexIndex), vertexIndex);
	  }
	};
	SegmentNodeList.prototype.print = function print (out) {
	  out.println('Intersections:');
	  for (var it = this.iterator(); it.hasNext();) {
	    var ei = it.next();
	    ei.print(out);
	  }
	};
	SegmentNodeList.prototype.findCollapsesFromExistingVertices = function findCollapsesFromExistingVertices (collapsedVertexIndexes) {
	    var this$1 = this;

	  for (var i = 0; i < this._edge.size() - 2; i++) {
	    var p0 = this$1._edge.getCoordinate(i);
	    // const p1 = this._edge.getCoordinate(i + 1)
	    var p2 = this$1._edge.getCoordinate(i + 2);
	    if (p0.equals2D(p2)) {
	      collapsedVertexIndexes.add(new Integer(i + 1));
	    }
	  }
	};
	SegmentNodeList.prototype.addEdgeCoordinates = function addEdgeCoordinates (ei0, ei1, coordList) {
	    var this$1 = this;

	  // let npts = ei1.segmentIndex - ei0.segmentIndex + 2
	  var lastSegStartPt = this._edge.getCoordinate(ei1.segmentIndex);
	  var useIntPt1 = ei1.isInterior() || !ei1.coord.equals2D(lastSegStartPt);
	  // if (!useIntPt1) {
	  // npts--
	  // }
	  // const ipt = 0
	  coordList.add(new Coordinate(ei0.coord), false);
	  for (var i = ei0.segmentIndex + 1; i <= ei1.segmentIndex; i++) {
	    coordList.add(this$1._edge.getCoordinate(i));
	  }
	  if (useIntPt1) {
	    coordList.add(new Coordinate(ei1.coord));
	  }
	};
	SegmentNodeList.prototype.iterator = function iterator () {
	  return this._nodeMap.values().iterator()
	};
	SegmentNodeList.prototype.addSplitEdges = function addSplitEdges (edgeList) {
	    var this$1 = this;

	  this.addEndpoints();
	  this.addCollapsedNodes();
	  var it = this.iterator();
	  var eiPrev = it.next();
	  while (it.hasNext()) {
	    var ei = it.next();
	    var newEdge = this$1.createSplitEdge(eiPrev, ei);
	    edgeList.add(newEdge);
	    eiPrev = ei;
	  }
	};
	SegmentNodeList.prototype.findCollapseIndex = function findCollapseIndex (ei0, ei1, collapsedVertexIndex) {
	  if (!ei0.coord.equals2D(ei1.coord)) { return false }
	  var numVerticesBetween = ei1.segmentIndex - ei0.segmentIndex;
	  if (!ei1.isInterior()) {
	    numVerticesBetween--;
	  }
	  if (numVerticesBetween === 1) {
	    collapsedVertexIndex[0] = ei0.segmentIndex + 1;
	    return true
	  }
	  return false
	};
	SegmentNodeList.prototype.findCollapsesFromInsertedNodes = function findCollapsesFromInsertedNodes (collapsedVertexIndexes) {
	    var this$1 = this;

	  var collapsedVertexIndex = new Array(1).fill(null);
	  var it = this.iterator();
	  var eiPrev = it.next();
	  while (it.hasNext()) {
	    var ei = it.next();
	    var isCollapsed = this$1.findCollapseIndex(eiPrev, ei, collapsedVertexIndex);
	    if (isCollapsed) { collapsedVertexIndexes.add(new Integer(collapsedVertexIndex[0])); }
	    eiPrev = ei;
	  }
	};
	SegmentNodeList.prototype.getEdge = function getEdge () {
	  return this._edge
	};
	SegmentNodeList.prototype.addEndpoints = function addEndpoints () {
	  var maxSegIndex = this._edge.size() - 1;
	  this.add(this._edge.getCoordinate(0), 0);
	  this.add(this._edge.getCoordinate(maxSegIndex), maxSegIndex);
	};
	SegmentNodeList.prototype.createSplitEdge = function createSplitEdge (ei0, ei1) {
	    var this$1 = this;

	  var npts = ei1.segmentIndex - ei0.segmentIndex + 2;
	  var lastSegStartPt = this._edge.getCoordinate(ei1.segmentIndex);
	  var useIntPt1 = ei1.isInterior() || !ei1.coord.equals2D(lastSegStartPt);
	  if (!useIntPt1) {
	    npts--;
	  }
	  var pts = new Array(npts).fill(null);
	  var ipt = 0;
	  pts[ipt++] = new Coordinate(ei0.coord);
	  for (var i = ei0.segmentIndex + 1; i <= ei1.segmentIndex; i++) {
	    pts[ipt++] = this$1._edge.getCoordinate(i);
	  }
	  if (useIntPt1) { pts[ipt] = new Coordinate(ei1.coord); }
	  return new NodedSegmentString(pts, this._edge.getData())
	};
	SegmentNodeList.prototype.add = function add (intPt, segmentIndex) {
	  var eiNew = new SegmentNode(this._edge, intPt, segmentIndex, this._edge.getSegmentOctant(segmentIndex));
	  var ei = this._nodeMap.get(eiNew);
	  if (ei !== null) {
	    Assert.isTrue(ei.coord.equals2D(intPt), 'Found equal nodes with different coordinates');
	    return ei
	  }
	  this._nodeMap.put(eiNew, eiNew);
	  return eiNew
	};
	SegmentNodeList.prototype.checkSplitEdgesCorrectness = function checkSplitEdgesCorrectness (splitEdges) {
	  var edgePts = this._edge.getCoordinates();
	  var split0 = splitEdges.get(0);
	  var pt0 = split0.getCoordinate(0);
	  if (!pt0.equals2D(edgePts[0])) { throw new RuntimeException('bad split edge start point at ' + pt0) }
	  var splitn = splitEdges.get(splitEdges.size() - 1);
	  var splitnPts = splitn.getCoordinates();
	  var ptn = splitnPts[splitnPts.length - 1];
	  if (!ptn.equals2D(edgePts[edgePts.length - 1])) { throw new RuntimeException('bad split edge end point at ' + ptn) }
	};
	SegmentNodeList.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	SegmentNodeList.prototype.getClass = function getClass () {
	  return SegmentNodeList
	};



	// class NodeVertexIterator {
	//   constructor () {
	//     this._nodeList = null
	//     this._edge = null
	//     this._nodeIt = null
	//     this._currNode = null
	//     this._nextNode = null
	//     this._currSegIndex = 0
	//     let nodeList = arguments[0]
	//     this._nodeList = nodeList
	//     this._edge = nodeList.getEdge()
	//     this._nodeIt = nodeList.iterator()
	//     this.readNextNode()
	//   }
	//   next () {
	//     if (this._currNode === null) {
	//       this._currNode = this._nextNode
	//       this._currSegIndex = this._currNode.segmentIndex
	//       this.readNextNode()
	//       return this._currNode
	//     }
	//     if (this._nextNode === null) return null
	//     if (this._nextNode.segmentIndex === this._currNode.segmentIndex) {
	//       this._currNode = this._nextNode
	//       this._currSegIndex = this._currNode.segmentIndex
	//       this.readNextNode()
	//       return this._currNode
	//     }
	//     if (this._nextNode.segmentIndex > this._currNode.segmentIndex) {}
	//     return null
	//   }
	//   remove () {
	//     // throw new UnsupportedOperationException(this.getClass().getName())
	//   }
	//   hasNext () {
	//     if (this._nextNode === null) return false
	//     return true
	//   }
	//   readNextNode () {
	//     if (this._nodeIt.hasNext()) this._nextNode = this._nodeIt.next(); else this._nextNode = null
	//   }
	//   interfaces_ () {
	//     return [Iterator]
	//   }
	//   getClass () {
	//     return NodeVertexIterator
	//   }
	// }

	var Octant = function Octant () {};

	Octant.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Octant.prototype.getClass = function getClass () {
	  return Octant
	};
	Octant.octant = function octant () {
	  if (typeof arguments[0] === 'number' && typeof arguments[1] === 'number') {
	    var dx = arguments[0];
	    var dy = arguments[1];
	    if (dx === 0.0 && dy === 0.0) { throw new IllegalArgumentException('Cannot compute the octant for point ( ' + dx + ', ' + dy + ' )') }
	    var adx = Math.abs(dx);
	    var ady = Math.abs(dy);
	    if (dx >= 0) {
	      if (dy >= 0) {
	        if (adx >= ady) { return 0; } else { return 1 }
	      } else {
	        if (adx >= ady) { return 7; } else { return 6 }
	      }
	    } else {
	      if (dy >= 0) {
	        if (adx >= ady) { return 3; } else { return 2 }
	      } else {
	        if (adx >= ady) { return 4; } else { return 5 }
	      }
	    }
	  } else if (arguments[0] instanceof Coordinate && arguments[1] instanceof Coordinate) {
	    var p0 = arguments[0];
	    var p1 = arguments[1];
	    var dx$1 = p1.x - p0.x;
	    var dy$1 = p1.y - p0.y;
	    if (dx$1 === 0.0 && dy$1 === 0.0) { throw new IllegalArgumentException('Cannot compute the octant for two identical points ' + p0) }
	    return Octant.octant(dx$1, dy$1)
	  }
	};

	var SegmentString = function SegmentString () {};

	SegmentString.prototype.getCoordinates = function getCoordinates () {};
	SegmentString.prototype.size = function size () {};
	SegmentString.prototype.getCoordinate = function getCoordinate (i) {};
	SegmentString.prototype.isClosed = function isClosed () {};
	SegmentString.prototype.setData = function setData (data) {};
	SegmentString.prototype.getData = function getData () {};
	SegmentString.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	SegmentString.prototype.getClass = function getClass () {
	  return SegmentString
	};

	var NodableSegmentString = function NodableSegmentString () {};

	NodableSegmentString.prototype.addIntersection = function addIntersection (intPt, segmentIndex) {};
	NodableSegmentString.prototype.interfaces_ = function interfaces_ () {
	  return [SegmentString]
	};
	NodableSegmentString.prototype.getClass = function getClass () {
	  return NodableSegmentString
	};

	var NodedSegmentString = function NodedSegmentString () {
	  this._nodeList = new SegmentNodeList(this);
	  this._pts = null;
	  this._data = null;
	  var pts = arguments[0];
	  var data = arguments[1];
	  this._pts = pts;
	  this._data = data;
	};
	NodedSegmentString.prototype.getCoordinates = function getCoordinates () {
	  return this._pts
	};
	NodedSegmentString.prototype.size = function size () {
	  return this._pts.length
	};
	NodedSegmentString.prototype.getCoordinate = function getCoordinate (i) {
	  return this._pts[i]
	};
	NodedSegmentString.prototype.isClosed = function isClosed () {
	  return this._pts[0].equals(this._pts[this._pts.length - 1])
	};
	NodedSegmentString.prototype.getSegmentOctant = function getSegmentOctant (index) {
	  if (index === this._pts.length - 1) { return -1 }
	  return this.safeOctant(this.getCoordinate(index), this.getCoordinate(index + 1))
	};
	NodedSegmentString.prototype.setData = function setData (data) {
	  this._data = data;
	};
	NodedSegmentString.prototype.safeOctant = function safeOctant (p0, p1) {
	  if (p0.equals2D(p1)) { return 0 }
	  return Octant.octant(p0, p1)
	};
	NodedSegmentString.prototype.getData = function getData () {
	  return this._data
	};
	NodedSegmentString.prototype.addIntersection = function addIntersection () {
	  if (arguments.length === 2) {
	    var intPt$1 = arguments[0];
	    var segmentIndex = arguments[1];
	    this.addIntersectionNode(intPt$1, segmentIndex);
	  } else if (arguments.length === 4) {
	    var li = arguments[0];
	    var segmentIndex$1 = arguments[1];
	    // const geomIndex = arguments[2]
	    var intIndex = arguments[3];
	    var intPt = new Coordinate(li.getIntersection(intIndex));
	    this.addIntersection(intPt, segmentIndex$1);
	  }
	};
	NodedSegmentString.prototype.toString = function toString () {
	  return WKTWriter.toLineString(new CoordinateArraySequence(this._pts))
	};
	NodedSegmentString.prototype.getNodeList = function getNodeList () {
	  return this._nodeList
	};
	NodedSegmentString.prototype.addIntersectionNode = function addIntersectionNode (intPt, segmentIndex) {
	  var normalizedSegmentIndex = segmentIndex;
	  var nextSegIndex = normalizedSegmentIndex + 1;
	  if (nextSegIndex < this._pts.length) {
	    var nextPt = this._pts[nextSegIndex];
	    if (intPt.equals2D(nextPt)) {
	      normalizedSegmentIndex = nextSegIndex;
	    }
	  }
	  var ei = this._nodeList.add(intPt, normalizedSegmentIndex);
	  return ei
	};
	NodedSegmentString.prototype.addIntersections = function addIntersections (li, segmentIndex, geomIndex) {
	    var this$1 = this;

	  for (var i = 0; i < li.getIntersectionNum(); i++) {
	    this$1.addIntersection(li, segmentIndex, geomIndex, i);
	  }
	};
	NodedSegmentString.prototype.interfaces_ = function interfaces_ () {
	  return [NodableSegmentString]
	};
	NodedSegmentString.prototype.getClass = function getClass () {
	  return NodedSegmentString
	};
	NodedSegmentString.getNodedSubstrings = function getNodedSubstrings () {
	  if (arguments.length === 1) {
	    var segStrings = arguments[0];
	    var resultEdgelist = new ArrayList();
	    NodedSegmentString.getNodedSubstrings(segStrings, resultEdgelist);
	    return resultEdgelist
	  } else if (arguments.length === 2) {
	    var segStrings$1 = arguments[0];
	    var resultEdgelist$1 = arguments[1];
	    for (var i = segStrings$1.iterator(); i.hasNext();) {
	      var ss = i.next();
	      ss.getNodeList().addSplitEdges(resultEdgelist$1);
	    }
	  }
	};

	var LineSegment = function LineSegment () {
	  this.p0 = null;
	  this.p1 = null;
	  if (arguments.length === 0) {
	    this.p0 = new Coordinate();
	    this.p1 = new Coordinate();
	  } else if (arguments.length === 1) {
	    var ls = arguments[0];
	    this.p0 = new Coordinate(ls.p0);
	    this.p1 = new Coordinate(ls.p1);
	  } else if (arguments.length === 2) {
	    this.p0 = arguments[0];
	    this.p1 = arguments[1];
	  } else if (arguments.length === 4) {
	    var x0 = arguments[0];
	    var y0 = arguments[1];
	    var x1 = arguments[2];
	    var y1 = arguments[3];
	    this.p0 = new Coordinate(x0, y0);
	    this.p1 = new Coordinate(x1, y1);
	  }
	};

	var staticAccessors$24 = { serialVersionUID: { configurable: true } };
	LineSegment.prototype.minX = function minX () {
	  return Math.min(this.p0.x, this.p1.x)
	};
	LineSegment.prototype.orientationIndex = function orientationIndex () {
	  if (arguments[0] instanceof LineSegment) {
	    var seg = arguments[0];
	    var orient0 = CGAlgorithms.orientationIndex(this.p0, this.p1, seg.p0);
	    var orient1 = CGAlgorithms.orientationIndex(this.p0, this.p1, seg.p1);
	    if (orient0 >= 0 && orient1 >= 0) { return Math.max(orient0, orient1) }
	    if (orient0 <= 0 && orient1 <= 0) { return Math.max(orient0, orient1) }
	    return 0
	  } else if (arguments[0] instanceof Coordinate) {
	    var p = arguments[0];
	    return CGAlgorithms.orientationIndex(this.p0, this.p1, p)
	  }
	};
	LineSegment.prototype.toGeometry = function toGeometry (geomFactory) {
	  return geomFactory.createLineString([this.p0, this.p1])
	};
	LineSegment.prototype.isVertical = function isVertical () {
	  return this.p0.x === this.p1.x
	};
	LineSegment.prototype.equals = function equals (o) {
	  if (!(o instanceof LineSegment)) {
	    return false
	  }
	  var other = o;
	  return this.p0.equals(other.p0) && this.p1.equals(other.p1)
	};
	LineSegment.prototype.intersection = function intersection (line) {
	  var li = new RobustLineIntersector();
	  li.computeIntersection(this.p0, this.p1, line.p0, line.p1);
	  if (li.hasIntersection()) { return li.getIntersection(0) }
	  return null
	};
	LineSegment.prototype.project = function project () {
	  if (arguments[0] instanceof Coordinate) {
	    var p = arguments[0];
	    if (p.equals(this.p0) || p.equals(this.p1)) { return new Coordinate(p) }
	    var r = this.projectionFactor(p);
	    var coord = new Coordinate();
	    coord.x = this.p0.x + r * (this.p1.x - this.p0.x);
	    coord.y = this.p0.y + r * (this.p1.y - this.p0.y);
	    return coord
	  } else if (arguments[0] instanceof LineSegment) {
	    var seg = arguments[0];
	    var pf0 = this.projectionFactor(seg.p0);
	    var pf1 = this.projectionFactor(seg.p1);
	    if (pf0 >= 1.0 && pf1 >= 1.0) { return null }
	    if (pf0 <= 0.0 && pf1 <= 0.0) { return null }
	    var newp0 = this.project(seg.p0);
	    if (pf0 < 0.0) { newp0 = this.p0; }
	    if (pf0 > 1.0) { newp0 = this.p1; }
	    var newp1 = this.project(seg.p1);
	    if (pf1 < 0.0) { newp1 = this.p0; }
	    if (pf1 > 1.0) { newp1 = this.p1; }
	    return new LineSegment(newp0, newp1)
	  }
	};
	LineSegment.prototype.normalize = function normalize () {
	  if (this.p1.compareTo(this.p0) < 0) { this.reverse(); }
	};
	LineSegment.prototype.angle = function angle () {
	  return Math.atan2(this.p1.y - this.p0.y, this.p1.x - this.p0.x)
	};
	LineSegment.prototype.getCoordinate = function getCoordinate (i) {
	  if (i === 0) { return this.p0 }
	  return this.p1
	};
	LineSegment.prototype.distancePerpendicular = function distancePerpendicular (p) {
	  return CGAlgorithms.distancePointLinePerpendicular(p, this.p0, this.p1)
	};
	LineSegment.prototype.minY = function minY () {
	  return Math.min(this.p0.y, this.p1.y)
	};
	LineSegment.prototype.midPoint = function midPoint () {
	  return LineSegment.midPoint(this.p0, this.p1)
	};
	LineSegment.prototype.projectionFactor = function projectionFactor (p) {
	  if (p.equals(this.p0)) { return 0.0 }
	  if (p.equals(this.p1)) { return 1.0 }
	  var dx = this.p1.x - this.p0.x;
	  var dy = this.p1.y - this.p0.y;
	  var len = dx * dx + dy * dy;
	  if (len <= 0.0) { return Double.NaN }
	  var r = ((p.x - this.p0.x) * dx + (p.y - this.p0.y) * dy) / len;
	  return r
	};
	LineSegment.prototype.closestPoints = function closestPoints (line) {
	  var intPt = this.intersection(line);
	  if (intPt !== null) {
	    return [intPt, intPt]
	  }
	  var closestPt = new Array(2).fill(null);
	  var minDistance = Double.MAX_VALUE;
	  var dist = null;
	  var close00 = this.closestPoint(line.p0);
	  minDistance = close00.distance(line.p0);
	  closestPt[0] = close00;
	  closestPt[1] = line.p0;
	  var close01 = this.closestPoint(line.p1);
	  dist = close01.distance(line.p1);
	  if (dist < minDistance) {
	    minDistance = dist;
	    closestPt[0] = close01;
	    closestPt[1] = line.p1;
	  }
	  var close10 = line.closestPoint(this.p0);
	  dist = close10.distance(this.p0);
	  if (dist < minDistance) {
	    minDistance = dist;
	    closestPt[0] = this.p0;
	    closestPt[1] = close10;
	  }
	  var close11 = line.closestPoint(this.p1);
	  dist = close11.distance(this.p1);
	  if (dist < minDistance) {
	    minDistance = dist;
	    closestPt[0] = this.p1;
	    closestPt[1] = close11;
	  }
	  return closestPt
	};
	LineSegment.prototype.closestPoint = function closestPoint (p) {
	  var factor = this.projectionFactor(p);
	  if (factor > 0 && factor < 1) {
	    return this.project(p)
	  }
	  var dist0 = this.p0.distance(p);
	  var dist1 = this.p1.distance(p);
	  if (dist0 < dist1) { return this.p0 }
	  return this.p1
	};
	LineSegment.prototype.maxX = function maxX () {
	  return Math.max(this.p0.x, this.p1.x)
	};
	LineSegment.prototype.getLength = function getLength () {
	  return this.p0.distance(this.p1)
	};
	LineSegment.prototype.compareTo = function compareTo (o) {
	  var other = o;
	  var comp0 = this.p0.compareTo(other.p0);
	  if (comp0 !== 0) { return comp0 }
	  return this.p1.compareTo(other.p1)
	};
	LineSegment.prototype.reverse = function reverse () {
	  var temp = this.p0;
	  this.p0 = this.p1;
	  this.p1 = temp;
	};
	LineSegment.prototype.equalsTopo = function equalsTopo (other) {
	  return this.p0.equals(other.p0) &&
	        (this.p1.equals(other.p1) || this.p0.equals(other.p1)) &&
	         this.p1.equals(other.p0)
	};
	LineSegment.prototype.lineIntersection = function lineIntersection (line) {
	  try {
	    var intPt = HCoordinate.intersection(this.p0, this.p1, line.p0, line.p1);
	    return intPt
	  } catch (ex) {
	    if (ex instanceof NotRepresentableException) ; else { throw ex }
	  } finally {}
	  return null
	};
	LineSegment.prototype.maxY = function maxY () {
	  return Math.max(this.p0.y, this.p1.y)
	};
	LineSegment.prototype.pointAlongOffset = function pointAlongOffset (segmentLengthFraction, offsetDistance) {
	  var segx = this.p0.x + segmentLengthFraction * (this.p1.x - this.p0.x);
	  var segy = this.p0.y + segmentLengthFraction * (this.p1.y - this.p0.y);
	  var dx = this.p1.x - this.p0.x;
	  var dy = this.p1.y - this.p0.y;
	  var len = Math.sqrt(dx * dx + dy * dy);
	  var ux = 0.0;
	  var uy = 0.0;
	  if (offsetDistance !== 0.0) {
	    if (len <= 0.0) { throw new Error('Cannot compute offset from zero-length line segment') }
	    ux = offsetDistance * dx / len;
	    uy = offsetDistance * dy / len;
	  }
	  var offsetx = segx - uy;
	  var offsety = segy + ux;
	  var coord = new Coordinate(offsetx, offsety);
	  return coord
	};
	LineSegment.prototype.setCoordinates = function setCoordinates () {
	  if (arguments.length === 1) {
	    var ls = arguments[0];
	    this.setCoordinates(ls.p0, ls.p1);
	  } else if (arguments.length === 2) {
	    var p0 = arguments[0];
	    var p1 = arguments[1];
	    this.p0.x = p0.x;
	    this.p0.y = p0.y;
	    this.p1.x = p1.x;
	    this.p1.y = p1.y;
	  }
	};
	LineSegment.prototype.segmentFraction = function segmentFraction (inputPt) {
	  var segFrac = this.projectionFactor(inputPt);
	  if (segFrac < 0.0) { segFrac = 0.0; } else if (segFrac > 1.0 || Double.isNaN(segFrac)) { segFrac = 1.0; }
	  return segFrac
	};
	LineSegment.prototype.toString = function toString () {
	  return 'LINESTRING( ' + this.p0.x + ' ' + this.p0.y + ', ' + this.p1.x + ' ' + this.p1.y + ')'
	};
	LineSegment.prototype.isHorizontal = function isHorizontal () {
	  return this.p0.y === this.p1.y
	};
	LineSegment.prototype.distance = function distance () {
	  if (arguments[0] instanceof LineSegment) {
	    var ls = arguments[0];
	    return CGAlgorithms.distanceLineLine(this.p0, this.p1, ls.p0, ls.p1)
	  } else if (arguments[0] instanceof Coordinate) {
	    var p = arguments[0];
	    return CGAlgorithms.distancePointLine(p, this.p0, this.p1)
	  }
	};
	LineSegment.prototype.pointAlong = function pointAlong (segmentLengthFraction) {
	  var coord = new Coordinate();
	  coord.x = this.p0.x + segmentLengthFraction * (this.p1.x - this.p0.x);
	  coord.y = this.p0.y + segmentLengthFraction * (this.p1.y - this.p0.y);
	  return coord
	};
	LineSegment.prototype.hashCode = function hashCode () {
	  var bits0 = Double.doubleToLongBits(this.p0.x);
	  bits0 ^= Double.doubleToLongBits(this.p0.y) * 31;
	  var hash0 = Math.trunc(bits0) ^ Math.trunc(bits0 >> 32);
	  var bits1 = Double.doubleToLongBits(this.p1.x);
	  bits1 ^= Double.doubleToLongBits(this.p1.y) * 31;
	  var hash1 = Math.trunc(bits1) ^ Math.trunc(bits1 >> 32);
	  return hash0 ^ hash1
	};
	LineSegment.prototype.interfaces_ = function interfaces_ () {
	  return [Comparable, Serializable]
	};
	LineSegment.prototype.getClass = function getClass () {
	  return LineSegment
	};
	LineSegment.midPoint = function midPoint (p0, p1) {
	  return new Coordinate((p0.x + p1.x) / 2, (p0.y + p1.y) / 2)
	};
	staticAccessors$24.serialVersionUID.get = function () { return 3252005833466256227 };

	Object.defineProperties( LineSegment, staticAccessors$24 );

	var MonotoneChainOverlapAction = function MonotoneChainOverlapAction () {
	  this.tempEnv1 = new Envelope();
	  this.tempEnv2 = new Envelope();
	  this._overlapSeg1 = new LineSegment();
	  this._overlapSeg2 = new LineSegment();
	};
	MonotoneChainOverlapAction.prototype.overlap = function overlap () {
	  if (arguments.length === 2) ; else if (arguments.length === 4) {
	    var mc1 = arguments[0];
	    var start1 = arguments[1];
	    var mc2 = arguments[2];
	    var start2 = arguments[3];
	    mc1.getLineSegment(start1, this._overlapSeg1);
	    mc2.getLineSegment(start2, this._overlapSeg2);
	    this.overlap(this._overlapSeg1, this._overlapSeg2);
	  }
	};
	MonotoneChainOverlapAction.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	MonotoneChainOverlapAction.prototype.getClass = function getClass () {
	  return MonotoneChainOverlapAction
	};

	var MonotoneChain = function MonotoneChain () {
	  this._pts = null;
	  this._start = null;
	  this._end = null;
	  this._env = null;
	  this._context = null;
	  this._id = null;
	  var pts = arguments[0];
	  var start = arguments[1];
	  var end = arguments[2];
	  var context = arguments[3];
	  this._pts = pts;
	  this._start = start;
	  this._end = end;
	  this._context = context;
	};
	MonotoneChain.prototype.getLineSegment = function getLineSegment (index, ls) {
	  ls.p0 = this._pts[index];
	  ls.p1 = this._pts[index + 1];
	};
	MonotoneChain.prototype.computeSelect = function computeSelect (searchEnv, start0, end0, mcs) {
	  var p0 = this._pts[start0];
	  var p1 = this._pts[end0];
	  mcs.tempEnv1.init(p0, p1);
	  if (end0 - start0 === 1) {
	    mcs.select(this, start0);
	    return null
	  }
	  if (!searchEnv.intersects(mcs.tempEnv1)) { return null }
	  var mid = Math.trunc((start0 + end0) / 2);
	  if (start0 < mid) {
	    this.computeSelect(searchEnv, start0, mid, mcs);
	  }
	  if (mid < end0) {
	    this.computeSelect(searchEnv, mid, end0, mcs);
	  }
	};
	MonotoneChain.prototype.getCoordinates = function getCoordinates () {
	    var this$1 = this;

	  var coord = new Array(this._end - this._start + 1).fill(null);
	  var index = 0;
	  for (var i = this._start; i <= this._end; i++) {
	    coord[index++] = this$1._pts[i];
	  }
	  return coord
	};
	MonotoneChain.prototype.computeOverlaps = function computeOverlaps (mc, mco) {
	  this.computeOverlapsInternal(this._start, this._end, mc, mc._start, mc._end, mco);
	};
	MonotoneChain.prototype.setId = function setId (id) {
	  this._id = id;
	};
	MonotoneChain.prototype.select = function select (searchEnv, mcs) {
	  this.computeSelect(searchEnv, this._start, this._end, mcs);
	};
	MonotoneChain.prototype.getEnvelope = function getEnvelope () {
	  if (this._env === null) {
	    var p0 = this._pts[this._start];
	    var p1 = this._pts[this._end];
	    this._env = new Envelope(p0, p1);
	  }
	  return this._env
	};
	MonotoneChain.prototype.getEndIndex = function getEndIndex () {
	  return this._end
	};
	MonotoneChain.prototype.getStartIndex = function getStartIndex () {
	  return this._start
	};
	MonotoneChain.prototype.getContext = function getContext () {
	  return this._context
	};
	MonotoneChain.prototype.getId = function getId () {
	  return this._id
	};
	MonotoneChain.prototype.computeOverlapsInternal = function computeOverlapsInternal (start0, end0, mc, start1, end1, mco) {
	  var p00 = this._pts[start0];
	  var p01 = this._pts[end0];
	  var p10 = mc._pts[start1];
	  var p11 = mc._pts[end1];
	  if (end0 - start0 === 1 && end1 - start1 === 1) {
	    mco.overlap(this, start0, mc, start1);
	    return null
	  }
	  mco.tempEnv1.init(p00, p01);
	  mco.tempEnv2.init(p10, p11);
	  if (!mco.tempEnv1.intersects(mco.tempEnv2)) { return null }
	  var mid0 = Math.trunc((start0 + end0) / 2);
	  var mid1 = Math.trunc((start1 + end1) / 2);
	  if (start0 < mid0) {
	    if (start1 < mid1) { this.computeOverlapsInternal(start0, mid0, mc, start1, mid1, mco); }
	    if (mid1 < end1) { this.computeOverlapsInternal(start0, mid0, mc, mid1, end1, mco); }
	  }
	  if (mid0 < end0) {
	    if (start1 < mid1) { this.computeOverlapsInternal(mid0, end0, mc, start1, mid1, mco); }
	    if (mid1 < end1) { this.computeOverlapsInternal(mid0, end0, mc, mid1, end1, mco); }
	  }
	};
	MonotoneChain.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	MonotoneChain.prototype.getClass = function getClass () {
	  return MonotoneChain
	};

	var MonotoneChainBuilder = function MonotoneChainBuilder () {};

	MonotoneChainBuilder.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	MonotoneChainBuilder.prototype.getClass = function getClass () {
	  return MonotoneChainBuilder
	};
	MonotoneChainBuilder.getChainStartIndices = function getChainStartIndices (pts) {
	  var start = 0;
	  var startIndexList = new ArrayList();
	  startIndexList.add(new Integer(start));
	  do {
	    var last = MonotoneChainBuilder.findChainEnd(pts, start);
	    startIndexList.add(new Integer(last));
	    start = last;
	  } while (start < pts.length - 1)
	  var startIndex = MonotoneChainBuilder.toIntArray(startIndexList);
	  return startIndex
	};
	MonotoneChainBuilder.findChainEnd = function findChainEnd (pts, start) {
	  var safeStart = start;
	  while (safeStart < pts.length - 1 && pts[safeStart].equals2D(pts[safeStart + 1])) {
	    safeStart++;
	  }
	  if (safeStart >= pts.length - 1) {
	    return pts.length - 1
	  }
	  var chainQuad = Quadrant.quadrant(pts[safeStart], pts[safeStart + 1]);
	  var last = start + 1;
	  while (last < pts.length) {
	    if (!pts[last - 1].equals2D(pts[last])) {
	      var quad = Quadrant.quadrant(pts[last - 1], pts[last]);
	      if (quad !== chainQuad) { break }
	    }
	    last++;
	  }
	  return last - 1
	};
	MonotoneChainBuilder.getChains = function getChains () {
	  if (arguments.length === 1) {
	    var pts = arguments[0];
	    return MonotoneChainBuilder.getChains(pts, null)
	  } else if (arguments.length === 2) {
	    var pts$1 = arguments[0];
	    var context = arguments[1];
	    var mcList = new ArrayList();
	    var startIndex = MonotoneChainBuilder.getChainStartIndices(pts$1);
	    for (var i = 0; i < startIndex.length - 1; i++) {
	      var mc = new MonotoneChain(pts$1, startIndex[i], startIndex[i + 1], context);
	      mcList.add(mc);
	    }
	    return mcList
	  }
	};
	MonotoneChainBuilder.toIntArray = function toIntArray (list) {
	  var array = new Array(list.size()).fill(null);
	  for (var i = 0; i < array.length; i++) {
	    array[i] = list.get(i).intValue();
	  }
	  return array
	};

	var Noder = function Noder () {};

	Noder.prototype.computeNodes = function computeNodes (segStrings) {};
	Noder.prototype.getNodedSubstrings = function getNodedSubstrings () {};
	Noder.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Noder.prototype.getClass = function getClass () {
	  return Noder
	};

	var SinglePassNoder = function SinglePassNoder () {
	  this._segInt = null;
	  if (arguments.length === 0) ; else if (arguments.length === 1) {
	    var segInt = arguments[0];
	    this.setSegmentIntersector(segInt);
	  }
	};
	SinglePassNoder.prototype.setSegmentIntersector = function setSegmentIntersector (segInt) {
	  this._segInt = segInt;
	};
	SinglePassNoder.prototype.interfaces_ = function interfaces_ () {
	  return [Noder]
	};
	SinglePassNoder.prototype.getClass = function getClass () {
	  return SinglePassNoder
	};

	var MCIndexNoder = (function (SinglePassNoder$$1) {
	  function MCIndexNoder (si) {
	    if (si) { SinglePassNoder$$1.call(this, si); }
	    else { SinglePassNoder$$1.call(this); }
	    this._monoChains = new ArrayList();
	    this._index = new STRtree();
	    this._idCounter = 0;
	    this._nodedSegStrings = null;
	    this._nOverlaps = 0;
	  }

	  if ( SinglePassNoder$$1 ) MCIndexNoder.__proto__ = SinglePassNoder$$1;
	  MCIndexNoder.prototype = Object.create( SinglePassNoder$$1 && SinglePassNoder$$1.prototype );
	  MCIndexNoder.prototype.constructor = MCIndexNoder;

	  var staticAccessors = { SegmentOverlapAction: { configurable: true } };
	  MCIndexNoder.prototype.getMonotoneChains = function getMonotoneChains () {
	    return this._monoChains
	  };
	  MCIndexNoder.prototype.getNodedSubstrings = function getNodedSubstrings () {
	    return NodedSegmentString.getNodedSubstrings(this._nodedSegStrings)
	  };
	  MCIndexNoder.prototype.getIndex = function getIndex () {
	    return this._index
	  };
	  MCIndexNoder.prototype.add = function add (segStr) {
	    var this$1 = this;

	    var segChains = MonotoneChainBuilder.getChains(segStr.getCoordinates(), segStr);
	    for (var i = segChains.iterator(); i.hasNext();) {
	      var mc = i.next();
	      mc.setId(this$1._idCounter++);
	      this$1._index.insert(mc.getEnvelope(), mc);
	      this$1._monoChains.add(mc);
	    }
	  };
	  MCIndexNoder.prototype.computeNodes = function computeNodes (inputSegStrings) {
	    var this$1 = this;

	    this._nodedSegStrings = inputSegStrings;
	    for (var i = inputSegStrings.iterator(); i.hasNext();) {
	      this$1.add(i.next());
	    }
	    this.intersectChains();
	  };
	  MCIndexNoder.prototype.intersectChains = function intersectChains () {
	    var this$1 = this;

	    var overlapAction = new SegmentOverlapAction(this._segInt);
	    for (var i = this._monoChains.iterator(); i.hasNext();) {
	      var queryChain = i.next();
	      var overlapChains = this$1._index.query(queryChain.getEnvelope());
	      for (var j = overlapChains.iterator(); j.hasNext();) {
	        var testChain = j.next();
	        if (testChain.getId() > queryChain.getId()) {
	          queryChain.computeOverlaps(testChain, overlapAction);
	          this$1._nOverlaps++;
	        }
	        if (this$1._segInt.isDone()) { return null }
	      }
	    }
	  };
	  MCIndexNoder.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  MCIndexNoder.prototype.getClass = function getClass () {
	    return MCIndexNoder
	  };
	  staticAccessors.SegmentOverlapAction.get = function () { return SegmentOverlapAction };

	  Object.defineProperties( MCIndexNoder, staticAccessors );

	  return MCIndexNoder;
	}(SinglePassNoder));

	var SegmentOverlapAction = (function (MonotoneChainOverlapAction$$1) {
	  function SegmentOverlapAction () {
	    MonotoneChainOverlapAction$$1.call(this);
	    this._si = null;
	    var si = arguments[0];
	    this._si = si;
	  }

	  if ( MonotoneChainOverlapAction$$1 ) SegmentOverlapAction.__proto__ = MonotoneChainOverlapAction$$1;
	  SegmentOverlapAction.prototype = Object.create( MonotoneChainOverlapAction$$1 && MonotoneChainOverlapAction$$1.prototype );
	  SegmentOverlapAction.prototype.constructor = SegmentOverlapAction;
	  SegmentOverlapAction.prototype.overlap = function overlap () {
	    if (arguments.length === 4) {
	      var mc1 = arguments[0];
	      var start1 = arguments[1];
	      var mc2 = arguments[2];
	      var start2 = arguments[3];
	      var ss1 = mc1.getContext();
	      var ss2 = mc2.getContext();
	      this._si.processIntersections(ss1, start1, ss2, start2);
	    } else { return MonotoneChainOverlapAction$$1.prototype.overlap.apply(this, arguments) }
	  };
	  SegmentOverlapAction.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  SegmentOverlapAction.prototype.getClass = function getClass () {
	    return SegmentOverlapAction
	  };

	  return SegmentOverlapAction;
	}(MonotoneChainOverlapAction));

	var BufferParameters = function BufferParameters () {
	  this._quadrantSegments = BufferParameters.DEFAULT_QUADRANT_SEGMENTS;
	  this._endCapStyle = BufferParameters.CAP_ROUND;
	  this._joinStyle = BufferParameters.JOIN_ROUND;
	  this._mitreLimit = BufferParameters.DEFAULT_MITRE_LIMIT;
	  this._isSingleSided = false;
	  this._simplifyFactor = BufferParameters.DEFAULT_SIMPLIFY_FACTOR;

	  if (arguments.length === 0) ; else if (arguments.length === 1) {
	    var quadrantSegments = arguments[0];
	    this.setQuadrantSegments(quadrantSegments);
	  } else if (arguments.length === 2) {
	    var quadrantSegments$1 = arguments[0];
	    var endCapStyle = arguments[1];
	    this.setQuadrantSegments(quadrantSegments$1);
	    this.setEndCapStyle(endCapStyle);
	  } else if (arguments.length === 4) {
	    var quadrantSegments$2 = arguments[0];
	    var endCapStyle$1 = arguments[1];
	    var joinStyle = arguments[2];
	    var mitreLimit = arguments[3];
	    this.setQuadrantSegments(quadrantSegments$2);
	    this.setEndCapStyle(endCapStyle$1);
	    this.setJoinStyle(joinStyle);
	    this.setMitreLimit(mitreLimit);
	  }
	};

	var staticAccessors$25 = { CAP_ROUND: { configurable: true },CAP_FLAT: { configurable: true },CAP_SQUARE: { configurable: true },JOIN_ROUND: { configurable: true },JOIN_MITRE: { configurable: true },JOIN_BEVEL: { configurable: true },DEFAULT_QUADRANT_SEGMENTS: { configurable: true },DEFAULT_MITRE_LIMIT: { configurable: true },DEFAULT_SIMPLIFY_FACTOR: { configurable: true } };
	BufferParameters.prototype.getEndCapStyle = function getEndCapStyle () {
	  return this._endCapStyle
	};
	BufferParameters.prototype.isSingleSided = function isSingleSided () {
	  return this._isSingleSided
	};
	BufferParameters.prototype.setQuadrantSegments = function setQuadrantSegments (quadSegs) {
	  this._quadrantSegments = quadSegs;
	  if (this._quadrantSegments === 0) { this._joinStyle = BufferParameters.JOIN_BEVEL; }
	  if (this._quadrantSegments < 0) {
	    this._joinStyle = BufferParameters.JOIN_MITRE;
	    this._mitreLimit = Math.abs(this._quadrantSegments);
	  }
	  if (quadSegs <= 0) {
	    this._quadrantSegments = 1;
	  }
	  if (this._joinStyle !== BufferParameters.JOIN_ROUND) {
	    this._quadrantSegments = BufferParameters.DEFAULT_QUADRANT_SEGMENTS;
	  }
	};
	BufferParameters.prototype.getJoinStyle = function getJoinStyle () {
	  return this._joinStyle
	};
	BufferParameters.prototype.setJoinStyle = function setJoinStyle (joinStyle) {
	  this._joinStyle = joinStyle;
	};
	BufferParameters.prototype.setSimplifyFactor = function setSimplifyFactor (simplifyFactor) {
	  this._simplifyFactor = simplifyFactor < 0 ? 0 : simplifyFactor;
	};
	BufferParameters.prototype.getSimplifyFactor = function getSimplifyFactor () {
	  return this._simplifyFactor
	};
	BufferParameters.prototype.getQuadrantSegments = function getQuadrantSegments () {
	  return this._quadrantSegments
	};
	BufferParameters.prototype.setEndCapStyle = function setEndCapStyle (endCapStyle) {
	  this._endCapStyle = endCapStyle;
	};
	BufferParameters.prototype.getMitreLimit = function getMitreLimit () {
	  return this._mitreLimit
	};
	BufferParameters.prototype.setMitreLimit = function setMitreLimit (mitreLimit) {
	  this._mitreLimit = mitreLimit;
	};
	BufferParameters.prototype.setSingleSided = function setSingleSided (isSingleSided) {
	  this._isSingleSided = isSingleSided;
	};
	BufferParameters.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	BufferParameters.prototype.getClass = function getClass () {
	  return BufferParameters
	};
	BufferParameters.bufferDistanceError = function bufferDistanceError (quadSegs) {
	  var alpha = Math.PI / 2.0 / quadSegs;
	  return 1 - Math.cos(alpha / 2.0)
	};
	staticAccessors$25.CAP_ROUND.get = function () { return 1 };
	staticAccessors$25.CAP_FLAT.get = function () { return 2 };
	staticAccessors$25.CAP_SQUARE.get = function () { return 3 };
	staticAccessors$25.JOIN_ROUND.get = function () { return 1 };
	staticAccessors$25.JOIN_MITRE.get = function () { return 2 };
	staticAccessors$25.JOIN_BEVEL.get = function () { return 3 };
	staticAccessors$25.DEFAULT_QUADRANT_SEGMENTS.get = function () { return 8 };
	staticAccessors$25.DEFAULT_MITRE_LIMIT.get = function () { return 5.0 };
	staticAccessors$25.DEFAULT_SIMPLIFY_FACTOR.get = function () { return 0.01 };

	Object.defineProperties( BufferParameters, staticAccessors$25 );

	var BufferInputLineSimplifier = function BufferInputLineSimplifier (inputLine) {
	  this._distanceTol = null;
	  this._isDeleted = null;
	  this._angleOrientation = CGAlgorithms.COUNTERCLOCKWISE;
	  this._inputLine = inputLine || null;
	};

	var staticAccessors$26 = { INIT: { configurable: true },DELETE: { configurable: true },KEEP: { configurable: true },NUM_PTS_TO_CHECK: { configurable: true } };
	BufferInputLineSimplifier.prototype.isDeletable = function isDeletable (i0, i1, i2, distanceTol) {
	  var p0 = this._inputLine[i0];
	  var p1 = this._inputLine[i1];
	  var p2 = this._inputLine[i2];
	  if (!this.isConcave(p0, p1, p2)) { return false }
	  if (!this.isShallow(p0, p1, p2, distanceTol)) { return false }
	  return this.isShallowSampled(p0, p1, i0, i2, distanceTol)
	};
	BufferInputLineSimplifier.prototype.deleteShallowConcavities = function deleteShallowConcavities () {
	    var this$1 = this;

	  var index = 1;
	  // const maxIndex = this._inputLine.length - 1
	  var midIndex = this.findNextNonDeletedIndex(index);
	  var lastIndex = this.findNextNonDeletedIndex(midIndex);
	  var isChanged = false;
	  while (lastIndex < this._inputLine.length) {
	    var isMiddleVertexDeleted = false;
	    if (this$1.isDeletable(index, midIndex, lastIndex, this$1._distanceTol)) {
	      this$1._isDeleted[midIndex] = BufferInputLineSimplifier.DELETE;
	      isMiddleVertexDeleted = true;
	      isChanged = true;
	    }
	    if (isMiddleVertexDeleted) { index = lastIndex; } else { index = midIndex; }
	    midIndex = this$1.findNextNonDeletedIndex(index);
	    lastIndex = this$1.findNextNonDeletedIndex(midIndex);
	  }
	  return isChanged
	};
	BufferInputLineSimplifier.prototype.isShallowConcavity = function isShallowConcavity (p0, p1, p2, distanceTol) {
	  var orientation = CGAlgorithms.computeOrientation(p0, p1, p2);
	  var isAngleToSimplify = orientation === this._angleOrientation;
	  if (!isAngleToSimplify) { return false }
	  var dist = CGAlgorithms.distancePointLine(p1, p0, p2);
	  return dist < distanceTol
	};
	BufferInputLineSimplifier.prototype.isShallowSampled = function isShallowSampled (p0, p2, i0, i2, distanceTol) {
	    var this$1 = this;

	  var inc = Math.trunc((i2 - i0) / BufferInputLineSimplifier.NUM_PTS_TO_CHECK);
	  if (inc <= 0) { inc = 1; }
	  for (var i = i0; i < i2; i += inc) {
	    if (!this$1.isShallow(p0, p2, this$1._inputLine[i], distanceTol)) { return false }
	  }
	  return true
	};
	BufferInputLineSimplifier.prototype.isConcave = function isConcave (p0, p1, p2) {
	  var orientation = CGAlgorithms.computeOrientation(p0, p1, p2);
	  var isConcave = orientation === this._angleOrientation;
	  return isConcave
	};
	BufferInputLineSimplifier.prototype.simplify = function simplify (distanceTol) {
	    var this$1 = this;

	  this._distanceTol = Math.abs(distanceTol);
	  if (distanceTol < 0) { this._angleOrientation = CGAlgorithms.CLOCKWISE; }
	  this._isDeleted = new Array(this._inputLine.length).fill(null);
	  var isChanged = false;
	  do {
	    isChanged = this$1.deleteShallowConcavities();
	  } while (isChanged)
	  return this.collapseLine()
	};
	BufferInputLineSimplifier.prototype.findNextNonDeletedIndex = function findNextNonDeletedIndex (index) {
	  var next = index + 1;
	  while (next < this._inputLine.length && this._isDeleted[next] === BufferInputLineSimplifier.DELETE) { next++; }
	  return next
	};
	BufferInputLineSimplifier.prototype.isShallow = function isShallow (p0, p1, p2, distanceTol) {
	  var dist = CGAlgorithms.distancePointLine(p1, p0, p2);
	  return dist < distanceTol
	};
	BufferInputLineSimplifier.prototype.collapseLine = function collapseLine () {
	    var this$1 = this;

	  var coordList = new CoordinateList();
	  for (var i = 0; i < this._inputLine.length; i++) {
	    if (this$1._isDeleted[i] !== BufferInputLineSimplifier.DELETE) { coordList.add(this$1._inputLine[i]); }
	  }
	  return coordList.toCoordinateArray()
	};
	BufferInputLineSimplifier.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	BufferInputLineSimplifier.prototype.getClass = function getClass () {
	  return BufferInputLineSimplifier
	};
	BufferInputLineSimplifier.simplify = function simplify (inputLine, distanceTol) {
	  var simp = new BufferInputLineSimplifier(inputLine);
	  return simp.simplify(distanceTol)
	};
	staticAccessors$26.INIT.get = function () { return 0 };
	staticAccessors$26.DELETE.get = function () { return 1 };
	staticAccessors$26.KEEP.get = function () { return 1 };
	staticAccessors$26.NUM_PTS_TO_CHECK.get = function () { return 10 };

	Object.defineProperties( BufferInputLineSimplifier, staticAccessors$26 );

	var OffsetSegmentString = function OffsetSegmentString () {
	  this._ptList = null;
	  this._precisionModel = null;
	  this._minimimVertexDistance = 0.0;
	  this._ptList = new ArrayList();
	};

	var staticAccessors$28 = { COORDINATE_ARRAY_TYPE: { configurable: true } };
	OffsetSegmentString.prototype.getCoordinates = function getCoordinates () {
	  var coord = this._ptList.toArray(OffsetSegmentString.COORDINATE_ARRAY_TYPE);
	  return coord
	};
	OffsetSegmentString.prototype.setPrecisionModel = function setPrecisionModel (precisionModel) {
	  this._precisionModel = precisionModel;
	};
	OffsetSegmentString.prototype.addPt = function addPt (pt) {
	  var bufPt = new Coordinate(pt);
	  this._precisionModel.makePrecise(bufPt);
	  if (this.isRedundant(bufPt)) { return null }
	  this._ptList.add(bufPt);
	};
	OffsetSegmentString.prototype.revere = function revere () {};
	OffsetSegmentString.prototype.addPts = function addPts (pt, isForward) {
	    var this$1 = this;

	  if (isForward) {
	    for (var i = 0; i < pt.length; i++) {
	      this$1.addPt(pt[i]);
	    }
	  } else {
	    for (var i$1 = pt.length - 1; i$1 >= 0; i$1--) {
	      this$1.addPt(pt[i$1]);
	    }
	  }
	};
	OffsetSegmentString.prototype.isRedundant = function isRedundant (pt) {
	  if (this._ptList.size() < 1) { return false }
	  var lastPt = this._ptList.get(this._ptList.size() - 1);
	  var ptDist = pt.distance(lastPt);
	  if (ptDist < this._minimimVertexDistance) { return true }
	  return false
	};
	OffsetSegmentString.prototype.toString = function toString () {
	  var fact = new GeometryFactory();
	  var line = fact.createLineString(this.getCoordinates());
	  return line.toString()
	};
	OffsetSegmentString.prototype.closeRing = function closeRing () {
	  if (this._ptList.size() < 1) { return null }
	  var startPt = new Coordinate(this._ptList.get(0));
	  var lastPt = this._ptList.get(this._ptList.size() - 1);
	  // const last2Pt = null
	  // if (this._ptList.size() >= 2) last2Pt = this._ptList.get(this._ptList.size() - 2)
	  if (startPt.equals(lastPt)) { return null }
	  this._ptList.add(startPt);
	};
	OffsetSegmentString.prototype.setMinimumVertexDistance = function setMinimumVertexDistance (minimimVertexDistance) {
	  this._minimimVertexDistance = minimimVertexDistance;
	};
	OffsetSegmentString.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	OffsetSegmentString.prototype.getClass = function getClass () {
	  return OffsetSegmentString
	};
	staticAccessors$28.COORDINATE_ARRAY_TYPE.get = function () { return new Array(0).fill(null) };

	Object.defineProperties( OffsetSegmentString, staticAccessors$28 );

	var Angle = function Angle () {};

	var staticAccessors$29 = { PI_TIMES_2: { configurable: true },PI_OVER_2: { configurable: true },PI_OVER_4: { configurable: true },COUNTERCLOCKWISE: { configurable: true },CLOCKWISE: { configurable: true },NONE: { configurable: true } };

	Angle.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Angle.prototype.getClass = function getClass () {
	  return Angle
	};
	Angle.toDegrees = function toDegrees (radians) {
	  return radians * 180 / Math.PI
	};
	Angle.normalize = function normalize (angle) {
	  while (angle > Math.PI) { angle -= Angle.PI_TIMES_2; }
	  while (angle <= -Math.PI) { angle += Angle.PI_TIMES_2; }
	  return angle
	};
	Angle.angle = function angle () {
	  if (arguments.length === 1) {
	    var p = arguments[0];
	    return Math.atan2(p.y, p.x)
	  } else if (arguments.length === 2) {
	    var p0 = arguments[0];
	    var p1 = arguments[1];
	    var dx = p1.x - p0.x;
	    var dy = p1.y - p0.y;
	    return Math.atan2(dy, dx)
	  }
	};
	Angle.isAcute = function isAcute (p0, p1, p2) {
	  var dx0 = p0.x - p1.x;
	  var dy0 = p0.y - p1.y;
	  var dx1 = p2.x - p1.x;
	  var dy1 = p2.y - p1.y;
	  var dotprod = dx0 * dx1 + dy0 * dy1;
	  return dotprod > 0
	};
	Angle.isObtuse = function isObtuse (p0, p1, p2) {
	  var dx0 = p0.x - p1.x;
	  var dy0 = p0.y - p1.y;
	  var dx1 = p2.x - p1.x;
	  var dy1 = p2.y - p1.y;
	  var dotprod = dx0 * dx1 + dy0 * dy1;
	  return dotprod < 0
	};
	Angle.interiorAngle = function interiorAngle (p0, p1, p2) {
	  var anglePrev = Angle.angle(p1, p0);
	  var angleNext = Angle.angle(p1, p2);
	  return Math.abs(angleNext - anglePrev)
	};
	Angle.normalizePositive = function normalizePositive (angle) {
	  if (angle < 0.0) {
	    while (angle < 0.0) { angle += Angle.PI_TIMES_2; }
	    if (angle >= Angle.PI_TIMES_2) { angle = 0.0; }
	  } else {
	    while (angle >= Angle.PI_TIMES_2) { angle -= Angle.PI_TIMES_2; }
	    if (angle < 0.0) { angle = 0.0; }
	  }
	  return angle
	};
	Angle.angleBetween = function angleBetween (tip1, tail, tip2) {
	  var a1 = Angle.angle(tail, tip1);
	  var a2 = Angle.angle(tail, tip2);
	  return Angle.diff(a1, a2)
	};
	Angle.diff = function diff (ang1, ang2) {
	  var delAngle = null;
	  if (ang1 < ang2) {
	    delAngle = ang2 - ang1;
	  } else {
	    delAngle = ang1 - ang2;
	  }
	  if (delAngle > Math.PI) {
	    delAngle = 2 * Math.PI - delAngle;
	  }
	  return delAngle
	};
	Angle.toRadians = function toRadians (angleDegrees) {
	  return angleDegrees * Math.PI / 180.0
	};
	Angle.getTurn = function getTurn (ang1, ang2) {
	  var crossproduct = Math.sin(ang2 - ang1);
	  if (crossproduct > 0) {
	    return Angle.COUNTERCLOCKWISE
	  }
	  if (crossproduct < 0) {
	    return Angle.CLOCKWISE
	  }
	  return Angle.NONE
	};
	Angle.angleBetweenOriented = function angleBetweenOriented (tip1, tail, tip2) {
	  var a1 = Angle.angle(tail, tip1);
	  var a2 = Angle.angle(tail, tip2);
	  var angDel = a2 - a1;
	  if (angDel <= -Math.PI) { return angDel + Angle.PI_TIMES_2 }
	  if (angDel > Math.PI) { return angDel - Angle.PI_TIMES_2 }
	  return angDel
	};
	staticAccessors$29.PI_TIMES_2.get = function () { return 2.0 * Math.PI };
	staticAccessors$29.PI_OVER_2.get = function () { return Math.PI / 2.0 };
	staticAccessors$29.PI_OVER_4.get = function () { return Math.PI / 4.0 };
	staticAccessors$29.COUNTERCLOCKWISE.get = function () { return CGAlgorithms.COUNTERCLOCKWISE };
	staticAccessors$29.CLOCKWISE.get = function () { return CGAlgorithms.CLOCKWISE };
	staticAccessors$29.NONE.get = function () { return CGAlgorithms.COLLINEAR };

	Object.defineProperties( Angle, staticAccessors$29 );

	var OffsetSegmentGenerator = function OffsetSegmentGenerator () {
	  this._maxCurveSegmentError = 0.0;
	  this._filletAngleQuantum = null;
	  this._closingSegLengthFactor = 1;
	  this._segList = null;
	  this._distance = 0.0;
	  this._precisionModel = null;
	  this._bufParams = null;
	  this._li = null;
	  this._s0 = null;
	  this._s1 = null;
	  this._s2 = null;
	  this._seg0 = new LineSegment();
	  this._seg1 = new LineSegment();
	  this._offset0 = new LineSegment();
	  this._offset1 = new LineSegment();
	  this._side = 0;
	  this._hasNarrowConcaveAngle = false;
	  var precisionModel = arguments[0];
	  var bufParams = arguments[1];
	  var distance = arguments[2];
	  this._precisionModel = precisionModel;
	  this._bufParams = bufParams;
	  this._li = new RobustLineIntersector();
	  this._filletAngleQuantum = Math.PI / 2.0 / bufParams.getQuadrantSegments();
	  if (bufParams.getQuadrantSegments() >= 8 && bufParams.getJoinStyle() === BufferParameters.JOIN_ROUND) { this._closingSegLengthFactor = OffsetSegmentGenerator.MAX_CLOSING_SEG_LEN_FACTOR; }
	  this.init(distance);
	};

	var staticAccessors$27 = { OFFSET_SEGMENT_SEPARATION_FACTOR: { configurable: true },INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR: { configurable: true },CURVE_VERTEX_SNAP_DISTANCE_FACTOR: { configurable: true },MAX_CLOSING_SEG_LEN_FACTOR: { configurable: true } };
	OffsetSegmentGenerator.prototype.addNextSegment = function addNextSegment (p, addStartPoint) {
	  this._s0 = this._s1;
	  this._s1 = this._s2;
	  this._s2 = p;
	  this._seg0.setCoordinates(this._s0, this._s1);
	  this.computeOffsetSegment(this._seg0, this._side, this._distance, this._offset0);
	  this._seg1.setCoordinates(this._s1, this._s2);
	  this.computeOffsetSegment(this._seg1, this._side, this._distance, this._offset1);
	  if (this._s1.equals(this._s2)) { return null }
	  var orientation = CGAlgorithms.computeOrientation(this._s0, this._s1, this._s2);
	  var outsideTurn = (orientation === CGAlgorithms.CLOCKWISE && this._side === Position.LEFT) || (orientation === CGAlgorithms.COUNTERCLOCKWISE && this._side === Position.RIGHT);
	  if (orientation === 0) {
	    this.addCollinear(addStartPoint);
	  } else if (outsideTurn) {
	    this.addOutsideTurn(orientation, addStartPoint);
	  } else {
	    this.addInsideTurn(orientation, addStartPoint);
	  }
	};
	OffsetSegmentGenerator.prototype.addLineEndCap = function addLineEndCap (p0, p1) {
	  var seg = new LineSegment(p0, p1);
	  var offsetL = new LineSegment();
	  this.computeOffsetSegment(seg, Position.LEFT, this._distance, offsetL);
	  var offsetR = new LineSegment();
	  this.computeOffsetSegment(seg, Position.RIGHT, this._distance, offsetR);
	  var dx = p1.x - p0.x;
	  var dy = p1.y - p0.y;
	  var angle = Math.atan2(dy, dx);
	  switch (this._bufParams.getEndCapStyle()) {
	    case BufferParameters.CAP_ROUND:
	      this._segList.addPt(offsetL.p1);
	      this.addFilletArc(p1, angle + Math.PI / 2, angle - Math.PI / 2, CGAlgorithms.CLOCKWISE, this._distance);
	      this._segList.addPt(offsetR.p1);
	      break
	    case BufferParameters.CAP_FLAT:
	      this._segList.addPt(offsetL.p1);
	      this._segList.addPt(offsetR.p1);
	      break
	    case BufferParameters.CAP_SQUARE:
	      var squareCapSideOffset = new Coordinate();
	      squareCapSideOffset.x = Math.abs(this._distance) * Math.cos(angle);
	      squareCapSideOffset.y = Math.abs(this._distance) * Math.sin(angle);
	      var squareCapLOffset = new Coordinate(offsetL.p1.x + squareCapSideOffset.x, offsetL.p1.y + squareCapSideOffset.y);
	      var squareCapROffset = new Coordinate(offsetR.p1.x + squareCapSideOffset.x, offsetR.p1.y + squareCapSideOffset.y);
	      this._segList.addPt(squareCapLOffset);
	      this._segList.addPt(squareCapROffset);
	      break
	  }
	};
	OffsetSegmentGenerator.prototype.getCoordinates = function getCoordinates () {
	  var pts = this._segList.getCoordinates();
	  return pts
	};
	OffsetSegmentGenerator.prototype.addMitreJoin = function addMitreJoin (p, offset0, offset1, distance) {
	  var isMitreWithinLimit = true;
	  var intPt = null;
	  try {
	    intPt = HCoordinate.intersection(offset0.p0, offset0.p1, offset1.p0, offset1.p1);
	    var mitreRatio = distance <= 0.0 ? 1.0 : intPt.distance(p) / Math.abs(distance);
	    if (mitreRatio > this._bufParams.getMitreLimit()) { isMitreWithinLimit = false; }
	  } catch (ex) {
	    if (ex instanceof NotRepresentableException) {
	      intPt = new Coordinate(0, 0);
	      isMitreWithinLimit = false;
	    } else { throw ex }
	  } finally {}
	  if (isMitreWithinLimit) {
	    this._segList.addPt(intPt);
	  } else {
	    this.addLimitedMitreJoin(offset0, offset1, distance, this._bufParams.getMitreLimit());
	  }
	};
	OffsetSegmentGenerator.prototype.addFilletCorner = function addFilletCorner (p, p0, p1, direction, radius) {
	  var dx0 = p0.x - p.x;
	  var dy0 = p0.y - p.y;
	  var startAngle = Math.atan2(dy0, dx0);
	  var dx1 = p1.x - p.x;
	  var dy1 = p1.y - p.y;
	  var endAngle = Math.atan2(dy1, dx1);
	  if (direction === CGAlgorithms.CLOCKWISE) {
	    if (startAngle <= endAngle) { startAngle += 2.0 * Math.PI; }
	  } else {
	    if (startAngle >= endAngle) { startAngle -= 2.0 * Math.PI; }
	  }
	  this._segList.addPt(p0);
	  this.addFilletArc(p, startAngle, endAngle, direction, radius);
	  this._segList.addPt(p1);
	};
	OffsetSegmentGenerator.prototype.addOutsideTurn = function addOutsideTurn (orientation, addStartPoint) {
	  if (this._offset0.p1.distance(this._offset1.p0) < this._distance * OffsetSegmentGenerator.OFFSET_SEGMENT_SEPARATION_FACTOR) {
	    this._segList.addPt(this._offset0.p1);
	    return null
	  }
	  if (this._bufParams.getJoinStyle() === BufferParameters.JOIN_MITRE) {
	    this.addMitreJoin(this._s1, this._offset0, this._offset1, this._distance);
	  } else if (this._bufParams.getJoinStyle() === BufferParameters.JOIN_BEVEL) {
	    this.addBevelJoin(this._offset0, this._offset1);
	  } else {
	    if (addStartPoint) { this._segList.addPt(this._offset0.p1); }
	    this.addFilletCorner(this._s1, this._offset0.p1, this._offset1.p0, orientation, this._distance);
	    this._segList.addPt(this._offset1.p0);
	  }
	};
	OffsetSegmentGenerator.prototype.createSquare = function createSquare (p) {
	  this._segList.addPt(new Coordinate(p.x + this._distance, p.y + this._distance));
	  this._segList.addPt(new Coordinate(p.x + this._distance, p.y - this._distance));
	  this._segList.addPt(new Coordinate(p.x - this._distance, p.y - this._distance));
	  this._segList.addPt(new Coordinate(p.x - this._distance, p.y + this._distance));
	  this._segList.closeRing();
	};
	OffsetSegmentGenerator.prototype.addSegments = function addSegments (pt, isForward) {
	  this._segList.addPts(pt, isForward);
	};
	OffsetSegmentGenerator.prototype.addFirstSegment = function addFirstSegment () {
	  this._segList.addPt(this._offset1.p0);
	};
	OffsetSegmentGenerator.prototype.addLastSegment = function addLastSegment () {
	  this._segList.addPt(this._offset1.p1);
	};
	OffsetSegmentGenerator.prototype.initSideSegments = function initSideSegments (s1, s2, side) {
	  this._s1 = s1;
	  this._s2 = s2;
	  this._side = side;
	  this._seg1.setCoordinates(s1, s2);
	  this.computeOffsetSegment(this._seg1, side, this._distance, this._offset1);
	};
	OffsetSegmentGenerator.prototype.addLimitedMitreJoin = function addLimitedMitreJoin (offset0, offset1, distance, mitreLimit) {
	  var basePt = this._seg0.p1;
	  var ang0 = Angle.angle(basePt, this._seg0.p0);
	  // const ang1 = Angle.angle(basePt, this._seg1.p1)
	  var angDiff = Angle.angleBetweenOriented(this._seg0.p0, basePt, this._seg1.p1);
	  var angDiffHalf = angDiff / 2;
	  var midAng = Angle.normalize(ang0 + angDiffHalf);
	  var mitreMidAng = Angle.normalize(midAng + Math.PI);
	  var mitreDist = mitreLimit * distance;
	  var bevelDelta = mitreDist * Math.abs(Math.sin(angDiffHalf));
	  var bevelHalfLen = distance - bevelDelta;
	  var bevelMidX = basePt.x + mitreDist * Math.cos(mitreMidAng);
	  var bevelMidY = basePt.y + mitreDist * Math.sin(mitreMidAng);
	  var bevelMidPt = new Coordinate(bevelMidX, bevelMidY);
	  var mitreMidLine = new LineSegment(basePt, bevelMidPt);
	  var bevelEndLeft = mitreMidLine.pointAlongOffset(1.0, bevelHalfLen);
	  var bevelEndRight = mitreMidLine.pointAlongOffset(1.0, -bevelHalfLen);
	  if (this._side === Position.LEFT) {
	    this._segList.addPt(bevelEndLeft);
	    this._segList.addPt(bevelEndRight);
	  } else {
	    this._segList.addPt(bevelEndRight);
	    this._segList.addPt(bevelEndLeft);
	  }
	};
	OffsetSegmentGenerator.prototype.computeOffsetSegment = function computeOffsetSegment (seg, side, distance, offset) {
	  var sideSign = side === Position.LEFT ? 1 : -1;
	  var dx = seg.p1.x - seg.p0.x;
	  var dy = seg.p1.y - seg.p0.y;
	  var len = Math.sqrt(dx * dx + dy * dy);
	  var ux = sideSign * distance * dx / len;
	  var uy = sideSign * distance * dy / len;
	  offset.p0.x = seg.p0.x - uy;
	  offset.p0.y = seg.p0.y + ux;
	  offset.p1.x = seg.p1.x - uy;
	  offset.p1.y = seg.p1.y + ux;
	};
	OffsetSegmentGenerator.prototype.addFilletArc = function addFilletArc (p, startAngle, endAngle, direction, radius) {
	    var this$1 = this;

	  var directionFactor = direction === CGAlgorithms.CLOCKWISE ? -1 : 1;
	  var totalAngle = Math.abs(startAngle - endAngle);
	  var nSegs = Math.trunc(totalAngle / this._filletAngleQuantum + 0.5);
	  if (nSegs < 1) { return null }
	  var initAngle = 0.0;
	  var currAngleInc = totalAngle / nSegs;
	  var currAngle = initAngle;
	  var pt = new Coordinate();
	  while (currAngle < totalAngle) {
	    var angle = startAngle + directionFactor * currAngle;
	    pt.x = p.x + radius * Math.cos(angle);
	    pt.y = p.y + radius * Math.sin(angle);
	    this$1._segList.addPt(pt);
	    currAngle += currAngleInc;
	  }
	};
	OffsetSegmentGenerator.prototype.addInsideTurn = function addInsideTurn (orientation, addStartPoint) {
	  this._li.computeIntersection(this._offset0.p0, this._offset0.p1, this._offset1.p0, this._offset1.p1);
	  if (this._li.hasIntersection()) {
	    this._segList.addPt(this._li.getIntersection(0));
	  } else {
	    this._hasNarrowConcaveAngle = true;
	    if (this._offset0.p1.distance(this._offset1.p0) < this._distance * OffsetSegmentGenerator.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR) {
	      this._segList.addPt(this._offset0.p1);
	    } else {
	      this._segList.addPt(this._offset0.p1);
	      if (this._closingSegLengthFactor > 0) {
	        var mid0 = new Coordinate((this._closingSegLengthFactor * this._offset0.p1.x + this._s1.x) / (this._closingSegLengthFactor + 1), (this._closingSegLengthFactor * this._offset0.p1.y + this._s1.y) / (this._closingSegLengthFactor + 1));
	        this._segList.addPt(mid0);
	        var mid1 = new Coordinate((this._closingSegLengthFactor * this._offset1.p0.x + this._s1.x) / (this._closingSegLengthFactor + 1), (this._closingSegLengthFactor * this._offset1.p0.y + this._s1.y) / (this._closingSegLengthFactor + 1));
	        this._segList.addPt(mid1);
	      } else {
	        this._segList.addPt(this._s1);
	      }
	      this._segList.addPt(this._offset1.p0);
	    }
	  }
	};
	OffsetSegmentGenerator.prototype.createCircle = function createCircle (p) {
	  var pt = new Coordinate(p.x + this._distance, p.y);
	  this._segList.addPt(pt);
	  this.addFilletArc(p, 0.0, 2.0 * Math.PI, -1, this._distance);
	  this._segList.closeRing();
	};
	OffsetSegmentGenerator.prototype.addBevelJoin = function addBevelJoin (offset0, offset1) {
	  this._segList.addPt(offset0.p1);
	  this._segList.addPt(offset1.p0);
	};
	OffsetSegmentGenerator.prototype.init = function init (distance) {
	  this._distance = distance;
	  this._maxCurveSegmentError = distance * (1 - Math.cos(this._filletAngleQuantum / 2.0));
	  this._segList = new OffsetSegmentString();
	  this._segList.setPrecisionModel(this._precisionModel);
	  this._segList.setMinimumVertexDistance(distance * OffsetSegmentGenerator.CURVE_VERTEX_SNAP_DISTANCE_FACTOR);
	};
	OffsetSegmentGenerator.prototype.addCollinear = function addCollinear (addStartPoint) {
	  this._li.computeIntersection(this._s0, this._s1, this._s1, this._s2);
	  var numInt = this._li.getIntersectionNum();
	  if (numInt >= 2) {
	    if (this._bufParams.getJoinStyle() === BufferParameters.JOIN_BEVEL || this._bufParams.getJoinStyle() === BufferParameters.JOIN_MITRE) {
	      if (addStartPoint) { this._segList.addPt(this._offset0.p1); }
	      this._segList.addPt(this._offset1.p0);
	    } else {
	      this.addFilletCorner(this._s1, this._offset0.p1, this._offset1.p0, CGAlgorithms.CLOCKWISE, this._distance);
	    }
	  }
	};
	OffsetSegmentGenerator.prototype.closeRing = function closeRing () {
	  this._segList.closeRing();
	};
	OffsetSegmentGenerator.prototype.hasNarrowConcaveAngle = function hasNarrowConcaveAngle () {
	  return this._hasNarrowConcaveAngle
	};
	OffsetSegmentGenerator.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	OffsetSegmentGenerator.prototype.getClass = function getClass () {
	  return OffsetSegmentGenerator
	};
	staticAccessors$27.OFFSET_SEGMENT_SEPARATION_FACTOR.get = function () { return 1.0E-3 };
	staticAccessors$27.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR.get = function () { return 1.0E-3 };
	staticAccessors$27.CURVE_VERTEX_SNAP_DISTANCE_FACTOR.get = function () { return 1.0E-6 };
	staticAccessors$27.MAX_CLOSING_SEG_LEN_FACTOR.get = function () { return 80 };

	Object.defineProperties( OffsetSegmentGenerator, staticAccessors$27 );

	var OffsetCurveBuilder = function OffsetCurveBuilder () {
	  this._distance = 0.0;
	  this._precisionModel = null;
	  this._bufParams = null;
	  var precisionModel = arguments[0];
	  var bufParams = arguments[1];
	  this._precisionModel = precisionModel;
	  this._bufParams = bufParams;
	};
	OffsetCurveBuilder.prototype.getOffsetCurve = function getOffsetCurve (inputPts, distance) {
	  this._distance = distance;
	  if (distance === 0.0) { return null }
	  var isRightSide = distance < 0.0;
	  var posDistance = Math.abs(distance);
	  var segGen = this.getSegGen(posDistance);
	  if (inputPts.length <= 1) {
	    this.computePointCurve(inputPts[0], segGen);
	  } else {
	    this.computeOffsetCurve(inputPts, isRightSide, segGen);
	  }
	  var curvePts = segGen.getCoordinates();
	  if (isRightSide) { CoordinateArrays.reverse(curvePts); }
	  return curvePts
	};
	OffsetCurveBuilder.prototype.computeSingleSidedBufferCurve = function computeSingleSidedBufferCurve (inputPts, isRightSide, segGen) {
	  var distTol = this.simplifyTolerance(this._distance);
	  if (isRightSide) {
	    segGen.addSegments(inputPts, true);
	    var simp2 = BufferInputLineSimplifier.simplify(inputPts, -distTol);
	    var n2 = simp2.length - 1;
	    segGen.initSideSegments(simp2[n2], simp2[n2 - 1], Position.LEFT);
	    segGen.addFirstSegment();
	    for (var i = n2 - 2; i >= 0; i--) {
	      segGen.addNextSegment(simp2[i], true);
	    }
	  } else {
	    segGen.addSegments(inputPts, false);
	    var simp1 = BufferInputLineSimplifier.simplify(inputPts, distTol);
	    var n1 = simp1.length - 1;
	    segGen.initSideSegments(simp1[0], simp1[1], Position.LEFT);
	    segGen.addFirstSegment();
	    for (var i$1 = 2; i$1 <= n1; i$1++) {
	      segGen.addNextSegment(simp1[i$1], true);
	    }
	  }
	  segGen.addLastSegment();
	  segGen.closeRing();
	};
	OffsetCurveBuilder.prototype.computeRingBufferCurve = function computeRingBufferCurve (inputPts, side, segGen) {
	  var distTol = this.simplifyTolerance(this._distance);
	  if (side === Position.RIGHT) { distTol = -distTol; }
	  var simp = BufferInputLineSimplifier.simplify(inputPts, distTol);
	  var n = simp.length - 1;
	  segGen.initSideSegments(simp[n - 1], simp[0], side);
	  for (var i = 1; i <= n; i++) {
	    var addStartPoint = i !== 1;
	    segGen.addNextSegment(simp[i], addStartPoint);
	  }
	  segGen.closeRing();
	};
	OffsetCurveBuilder.prototype.computeLineBufferCurve = function computeLineBufferCurve (inputPts, segGen) {
	  var distTol = this.simplifyTolerance(this._distance);
	  var simp1 = BufferInputLineSimplifier.simplify(inputPts, distTol);
	  var n1 = simp1.length - 1;
	  segGen.initSideSegments(simp1[0], simp1[1], Position.LEFT);
	  for (var i = 2; i <= n1; i++) {
	    segGen.addNextSegment(simp1[i], true);
	  }
	  segGen.addLastSegment();
	  segGen.addLineEndCap(simp1[n1 - 1], simp1[n1]);
	  var simp2 = BufferInputLineSimplifier.simplify(inputPts, -distTol);
	  var n2 = simp2.length - 1;
	  segGen.initSideSegments(simp2[n2], simp2[n2 - 1], Position.LEFT);
	  for (var i$1 = n2 - 2; i$1 >= 0; i$1--) {
	    segGen.addNextSegment(simp2[i$1], true);
	  }
	  segGen.addLastSegment();
	  segGen.addLineEndCap(simp2[1], simp2[0]);
	  segGen.closeRing();
	};
	OffsetCurveBuilder.prototype.computePointCurve = function computePointCurve (pt, segGen) {
	  switch (this._bufParams.getEndCapStyle()) {
	    case BufferParameters.CAP_ROUND:
	      segGen.createCircle(pt);
	      break
	    case BufferParameters.CAP_SQUARE:
	      segGen.createSquare(pt);
	      break
	  }
	};
	OffsetCurveBuilder.prototype.getLineCurve = function getLineCurve (inputPts, distance) {
	  this._distance = distance;
	  if (distance < 0.0 && !this._bufParams.isSingleSided()) { return null }
	  if (distance === 0.0) { return null }
	  var posDistance = Math.abs(distance);
	  var segGen = this.getSegGen(posDistance);
	  if (inputPts.length <= 1) {
	    this.computePointCurve(inputPts[0], segGen);
	  } else {
	    if (this._bufParams.isSingleSided()) {
	      var isRightSide = distance < 0.0;
	      this.computeSingleSidedBufferCurve(inputPts, isRightSide, segGen);
	    } else { this.computeLineBufferCurve(inputPts, segGen); }
	  }
	  var lineCoord = segGen.getCoordinates();
	  return lineCoord
	};
	OffsetCurveBuilder.prototype.getBufferParameters = function getBufferParameters () {
	  return this._bufParams
	};
	OffsetCurveBuilder.prototype.simplifyTolerance = function simplifyTolerance (bufDistance) {
	  return bufDistance * this._bufParams.getSimplifyFactor()
	};
	OffsetCurveBuilder.prototype.getRingCurve = function getRingCurve (inputPts, side, distance) {
	  this._distance = distance;
	  if (inputPts.length <= 2) { return this.getLineCurve(inputPts, distance) }
	  if (distance === 0.0) {
	    return OffsetCurveBuilder.copyCoordinates(inputPts)
	  }
	  var segGen = this.getSegGen(distance);
	  this.computeRingBufferCurve(inputPts, side, segGen);
	  return segGen.getCoordinates()
	};
	OffsetCurveBuilder.prototype.computeOffsetCurve = function computeOffsetCurve (inputPts, isRightSide, segGen) {
	  var distTol = this.simplifyTolerance(this._distance);
	  if (isRightSide) {
	    var simp2 = BufferInputLineSimplifier.simplify(inputPts, -distTol);
	    var n2 = simp2.length - 1;
	    segGen.initSideSegments(simp2[n2], simp2[n2 - 1], Position.LEFT);
	    segGen.addFirstSegment();
	    for (var i = n2 - 2; i >= 0; i--) {
	      segGen.addNextSegment(simp2[i], true);
	    }
	  } else {
	    var simp1 = BufferInputLineSimplifier.simplify(inputPts, distTol);
	    var n1 = simp1.length - 1;
	    segGen.initSideSegments(simp1[0], simp1[1], Position.LEFT);
	    segGen.addFirstSegment();
	    for (var i$1 = 2; i$1 <= n1; i$1++) {
	      segGen.addNextSegment(simp1[i$1], true);
	    }
	  }
	  segGen.addLastSegment();
	};
	OffsetCurveBuilder.prototype.getSegGen = function getSegGen (distance) {
	  return new OffsetSegmentGenerator(this._precisionModel, this._bufParams, distance)
	};
	OffsetCurveBuilder.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	OffsetCurveBuilder.prototype.getClass = function getClass () {
	  return OffsetCurveBuilder
	};
	OffsetCurveBuilder.copyCoordinates = function copyCoordinates (pts) {
	  var copy = new Array(pts.length).fill(null);
	  for (var i = 0; i < copy.length; i++) {
	    copy[i] = new Coordinate(pts[i]);
	  }
	  return copy
	};

	var SubgraphDepthLocater = function SubgraphDepthLocater () {
	  this._subgraphs = null;
	  this._seg = new LineSegment();
	  this._cga = new CGAlgorithms();
	  var subgraphs = arguments[0];
	  this._subgraphs = subgraphs;
	};

	var staticAccessors$30 = { DepthSegment: { configurable: true } };
	SubgraphDepthLocater.prototype.findStabbedSegments = function findStabbedSegments () {
	    var this$1 = this;

	  if (arguments.length === 1) {
	    var stabbingRayLeftPt = arguments[0];
	    var stabbedSegments = new ArrayList();
	    for (var i = this._subgraphs.iterator(); i.hasNext();) {
	      var bsg = i.next();
	      var env = bsg.getEnvelope();
	      if (stabbingRayLeftPt.y < env.getMinY() || stabbingRayLeftPt.y > env.getMaxY()) { continue }
	      this$1.findStabbedSegments(stabbingRayLeftPt, bsg.getDirectedEdges(), stabbedSegments);
	    }
	    return stabbedSegments
	  } else if (arguments.length === 3) {
	    if (hasInterface(arguments[2], List) && (arguments[0] instanceof Coordinate && arguments[1] instanceof DirectedEdge)) {
	      var stabbingRayLeftPt$1 = arguments[0];
	      var dirEdge = arguments[1];
	      var stabbedSegments$1 = arguments[2];
	      var pts = dirEdge.getEdge().getCoordinates();
	      for (var i$1 = 0; i$1 < pts.length - 1; i$1++) {
	        this$1._seg.p0 = pts[i$1];
	        this$1._seg.p1 = pts[i$1 + 1];
	        if (this$1._seg.p0.y > this$1._seg.p1.y) { this$1._seg.reverse(); }
	        var maxx = Math.max(this$1._seg.p0.x, this$1._seg.p1.x);
	        if (maxx < stabbingRayLeftPt$1.x) { continue }
	        if (this$1._seg.isHorizontal()) { continue }
	        if (stabbingRayLeftPt$1.y < this$1._seg.p0.y || stabbingRayLeftPt$1.y > this$1._seg.p1.y) { continue }
	        if (CGAlgorithms.computeOrientation(this$1._seg.p0, this$1._seg.p1, stabbingRayLeftPt$1) === CGAlgorithms.RIGHT) { continue }
	        var depth = dirEdge.getDepth(Position.LEFT);
	        if (!this$1._seg.p0.equals(pts[i$1])) { depth = dirEdge.getDepth(Position.RIGHT); }
	        var ds = new DepthSegment(this$1._seg, depth);
	        stabbedSegments$1.add(ds);
	      }
	    } else if (hasInterface(arguments[2], List) && (arguments[0] instanceof Coordinate && hasInterface(arguments[1], List))) {
	      var stabbingRayLeftPt$2 = arguments[0];
	      var dirEdges = arguments[1];
	      var stabbedSegments$2 = arguments[2];
	      for (var i$2 = dirEdges.iterator(); i$2.hasNext();) {
	        var de = i$2.next();
	        if (!de.isForward()) { continue }
	        this$1.findStabbedSegments(stabbingRayLeftPt$2, de, stabbedSegments$2);
	      }
	    }
	  }
	};
	SubgraphDepthLocater.prototype.getDepth = function getDepth (p) {
	  var stabbedSegments = this.findStabbedSegments(p);
	  if (stabbedSegments.size() === 0) { return 0 }
	  var ds = Collections.min(stabbedSegments);
	  return ds._leftDepth
	};
	SubgraphDepthLocater.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	SubgraphDepthLocater.prototype.getClass = function getClass () {
	  return SubgraphDepthLocater
	};
	staticAccessors$30.DepthSegment.get = function () { return DepthSegment };

	Object.defineProperties( SubgraphDepthLocater, staticAccessors$30 );

	var DepthSegment = function DepthSegment () {
	  this._upwardSeg = null;
	  this._leftDepth = null;
	  var seg = arguments[0];
	  var depth = arguments[1];
	  this._upwardSeg = new LineSegment(seg);
	  this._leftDepth = depth;
	};
	DepthSegment.prototype.compareTo = function compareTo (obj) {
	  var other = obj;
	  if (this._upwardSeg.minX() >= other._upwardSeg.maxX()) { return 1 }
	  if (this._upwardSeg.maxX() <= other._upwardSeg.minX()) { return -1 }
	  var orientIndex = this._upwardSeg.orientationIndex(other._upwardSeg);
	  if (orientIndex !== 0) { return orientIndex }
	  orientIndex = -1 * other._upwardSeg.orientationIndex(this._upwardSeg);
	  if (orientIndex !== 0) { return orientIndex }
	  return this._upwardSeg.compareTo(other._upwardSeg)
	};
	DepthSegment.prototype.compareX = function compareX (seg0, seg1) {
	  var compare0 = seg0.p0.compareTo(seg1.p0);
	  if (compare0 !== 0) { return compare0 }
	  return seg0.p1.compareTo(seg1.p1)
	};
	DepthSegment.prototype.toString = function toString () {
	  return this._upwardSeg.toString()
	};
	DepthSegment.prototype.interfaces_ = function interfaces_ () {
	  return [Comparable]
	};
	DepthSegment.prototype.getClass = function getClass () {
	  return DepthSegment
	};

	var Triangle = function Triangle (p0, p1, p2) {
	  this.p0 = p0 || null;
	  this.p1 = p1 || null;
	  this.p2 = p2 || null;
	};
	Triangle.prototype.area = function area () {
	  return Triangle.area(this.p0, this.p1, this.p2)
	};
	Triangle.prototype.signedArea = function signedArea () {
	  return Triangle.signedArea(this.p0, this.p1, this.p2)
	};
	Triangle.prototype.interpolateZ = function interpolateZ (p) {
	  if (p === null) { throw new IllegalArgumentException('Supplied point is null.') }
	  return Triangle.interpolateZ(p, this.p0, this.p1, this.p2)
	};
	Triangle.prototype.longestSideLength = function longestSideLength () {
	  return Triangle.longestSideLength(this.p0, this.p1, this.p2)
	};
	Triangle.prototype.isAcute = function isAcute () {
	  return Triangle.isAcute(this.p0, this.p1, this.p2)
	};
	Triangle.prototype.circumcentre = function circumcentre () {
	  return Triangle.circumcentre(this.p0, this.p1, this.p2)
	};
	Triangle.prototype.area3D = function area3D () {
	  return Triangle.area3D(this.p0, this.p1, this.p2)
	};
	Triangle.prototype.centroid = function centroid () {
	  return Triangle.centroid(this.p0, this.p1, this.p2)
	};
	Triangle.prototype.inCentre = function inCentre () {
	  return Triangle.inCentre(this.p0, this.p1, this.p2)
	};
	Triangle.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Triangle.prototype.getClass = function getClass () {
	  return Triangle
	};
	Triangle.area = function area (a, b, c) {
	  return Math.abs(((c.x - a.x) * (b.y - a.y) - (b.x - a.x) * (c.y - a.y)) / 2)
	};
	Triangle.signedArea = function signedArea (a, b, c) {
	  return ((c.x - a.x) * (b.y - a.y) - (b.x - a.x) * (c.y - a.y)) / 2
	};
	Triangle.det = function det (m00, m01, m10, m11) {
	  return m00 * m11 - m01 * m10
	};
	Triangle.interpolateZ = function interpolateZ (p, v0, v1, v2) {
	  var x0 = v0.x;
	  var y0 = v0.y;
	  var a = v1.x - x0;
	  var b = v2.x - x0;
	  var c = v1.y - y0;
	  var d = v2.y - y0;
	  var det = a * d - b * c;
	  var dx = p.x - x0;
	  var dy = p.y - y0;
	  var t = (d * dx - b * dy) / det;
	  var u = (-c * dx + a * dy) / det;
	  var z = v0.z + t * (v1.z - v0.z) + u * (v2.z - v0.z);
	  return z
	};
	Triangle.longestSideLength = function longestSideLength (a, b, c) {
	  var lenAB = a.distance(b);
	  var lenBC = b.distance(c);
	  var lenCA = c.distance(a);
	  var maxLen = lenAB;
	  if (lenBC > maxLen) { maxLen = lenBC; }
	  if (lenCA > maxLen) { maxLen = lenCA; }
	  return maxLen
	};
	Triangle.isAcute = function isAcute (a, b, c) {
	  if (!Angle.isAcute(a, b, c)) { return false }
	  if (!Angle.isAcute(b, c, a)) { return false }
	  if (!Angle.isAcute(c, a, b)) { return false }
	  return true
	};
	Triangle.circumcentre = function circumcentre (a, b, c) {
	  var cx = c.x;
	  var cy = c.y;
	  var ax = a.x - cx;
	  var ay = a.y - cy;
	  var bx = b.x - cx;
	  var by = b.y - cy;
	  var denom = 2 * Triangle.det(ax, ay, bx, by);
	  var numx = Triangle.det(ay, ax * ax + ay * ay, by, bx * bx + by * by);
	  var numy = Triangle.det(ax, ax * ax + ay * ay, bx, bx * bx + by * by);
	  var ccx = cx - numx / denom;
	  var ccy = cy + numy / denom;
	  return new Coordinate(ccx, ccy)
	};
	Triangle.perpendicularBisector = function perpendicularBisector (a, b) {
	  var dx = b.x - a.x;
	  var dy = b.y - a.y;
	  var l1 = new HCoordinate(a.x + dx / 2.0, a.y + dy / 2.0, 1.0);
	  var l2 = new HCoordinate(a.x - dy + dx / 2.0, a.y + dx + dy / 2.0, 1.0);
	  return new HCoordinate(l1, l2)
	};
	Triangle.angleBisector = function angleBisector (a, b, c) {
	  var len0 = b.distance(a);
	  var len2 = b.distance(c);
	  var frac = len0 / (len0 + len2);
	  var dx = c.x - a.x;
	  var dy = c.y - a.y;
	  var splitPt = new Coordinate(a.x + frac * dx, a.y + frac * dy);
	  return splitPt
	};
	Triangle.area3D = function area3D (a, b, c) {
	  var ux = b.x - a.x;
	  var uy = b.y - a.y;
	  var uz = b.z - a.z;
	  var vx = c.x - a.x;
	  var vy = c.y - a.y;
	  var vz = c.z - a.z;
	  var crossx = uy * vz - uz * vy;
	  var crossy = uz * vx - ux * vz;
	  var crossz = ux * vy - uy * vx;
	  var absSq = crossx * crossx + crossy * crossy + crossz * crossz;
	  var area3D = Math.sqrt(absSq) / 2;
	  return area3D
	};
	Triangle.centroid = function centroid (a, b, c) {
	  var x = (a.x + b.x + c.x) / 3;
	  var y = (a.y + b.y + c.y) / 3;
	  return new Coordinate(x, y)
	};
	Triangle.inCentre = function inCentre (a, b, c) {
	  var len0 = b.distance(c);
	  var len1 = a.distance(c);
	  var len2 = a.distance(b);
	  var circum = len0 + len1 + len2;
	  var inCentreX = (len0 * a.x + len1 * b.x + len2 * c.x) / circum;
	  var inCentreY = (len0 * a.y + len1 * b.y + len2 * c.y) / circum;
	  return new Coordinate(inCentreX, inCentreY)
	};

	var OffsetCurveSetBuilder = function OffsetCurveSetBuilder () {
	  this._inputGeom = null;
	  this._distance = null;
	  this._curveBuilder = null;
	  this._curveList = new ArrayList();
	  var inputGeom = arguments[0];
	  var distance = arguments[1];
	  var curveBuilder = arguments[2];
	  this._inputGeom = inputGeom;
	  this._distance = distance;
	  this._curveBuilder = curveBuilder;
	};
	OffsetCurveSetBuilder.prototype.addPoint = function addPoint (p) {
	  if (this._distance <= 0.0) { return null }
	  var coord = p.getCoordinates();
	  var curve = this._curveBuilder.getLineCurve(coord, this._distance);
	  this.addCurve(curve, Location.EXTERIOR, Location.INTERIOR);
	};
	OffsetCurveSetBuilder.prototype.addPolygon = function addPolygon (p) {
	    var this$1 = this;

	  var offsetDistance = this._distance;
	  var offsetSide = Position.LEFT;
	  if (this._distance < 0.0) {
	    offsetDistance = -this._distance;
	    offsetSide = Position.RIGHT;
	  }
	  var shell = p.getExteriorRing();
	  var shellCoord = CoordinateArrays.removeRepeatedPoints(shell.getCoordinates());
	  if (this._distance < 0.0 && this.isErodedCompletely(shell, this._distance)) { return null }
	  if (this._distance <= 0.0 && shellCoord.length < 3) { return null }
	  this.addPolygonRing(shellCoord, offsetDistance, offsetSide, Location.EXTERIOR, Location.INTERIOR);
	  for (var i = 0; i < p.getNumInteriorRing(); i++) {
	    var hole = p.getInteriorRingN(i);
	    var holeCoord = CoordinateArrays.removeRepeatedPoints(hole.getCoordinates());
	    if (this$1._distance > 0.0 && this$1.isErodedCompletely(hole, -this$1._distance)) { continue }
	    this$1.addPolygonRing(holeCoord, offsetDistance, Position.opposite(offsetSide), Location.INTERIOR, Location.EXTERIOR);
	  }
	};
	OffsetCurveSetBuilder.prototype.isTriangleErodedCompletely = function isTriangleErodedCompletely (triangleCoord, bufferDistance) {
	  var tri = new Triangle(triangleCoord[0], triangleCoord[1], triangleCoord[2]);
	  var inCentre = tri.inCentre();
	  var distToCentre = CGAlgorithms.distancePointLine(inCentre, tri.p0, tri.p1);
	  return distToCentre < Math.abs(bufferDistance)
	};
	OffsetCurveSetBuilder.prototype.addLineString = function addLineString (line) {
	  if (this._distance <= 0.0 && !this._curveBuilder.getBufferParameters().isSingleSided()) { return null }
	  var coord = CoordinateArrays.removeRepeatedPoints(line.getCoordinates());
	  var curve = this._curveBuilder.getLineCurve(coord, this._distance);
	  this.addCurve(curve, Location.EXTERIOR, Location.INTERIOR);
	};
	OffsetCurveSetBuilder.prototype.addCurve = function addCurve (coord, leftLoc, rightLoc) {
	  if (coord === null || coord.length < 2) { return null }
	  var e = new NodedSegmentString(coord, new Label(0, Location.BOUNDARY, leftLoc, rightLoc));
	  this._curveList.add(e);
	};
	OffsetCurveSetBuilder.prototype.getCurves = function getCurves () {
	  this.add(this._inputGeom);
	  return this._curveList
	};
	OffsetCurveSetBuilder.prototype.addPolygonRing = function addPolygonRing (coord, offsetDistance, side, cwLeftLoc, cwRightLoc) {
	  if (offsetDistance === 0.0 && coord.length < LinearRing.MINIMUM_VALID_SIZE) { return null }
	  var leftLoc = cwLeftLoc;
	  var rightLoc = cwRightLoc;
	  if (coord.length >= LinearRing.MINIMUM_VALID_SIZE && CGAlgorithms.isCCW(coord)) {
	    leftLoc = cwRightLoc;
	    rightLoc = cwLeftLoc;
	    side = Position.opposite(side);
	  }
	  var curve = this._curveBuilder.getRingCurve(coord, side, offsetDistance);
	  this.addCurve(curve, leftLoc, rightLoc);
	};
	OffsetCurveSetBuilder.prototype.add = function add (g) {
	  if (g.isEmpty()) { return null }
	  if (g instanceof Polygon) { this.addPolygon(g); }
	  else if (g instanceof LineString) { this.addLineString(g); }
	  else if (g instanceof Point) { this.addPoint(g); }
	  else if (g instanceof MultiPoint) { this.addCollection(g); }
	  else if (g instanceof MultiLineString) { this.addCollection(g); }
	  else if (g instanceof MultiPolygon) { this.addCollection(g); }
	  else if (g instanceof GeometryCollection) { this.addCollection(g); }
	  // else throw new UnsupportedOperationException(g.getClass().getName())
	};
	OffsetCurveSetBuilder.prototype.isErodedCompletely = function isErodedCompletely (ring, bufferDistance) {
	  var ringCoord = ring.getCoordinates();
	  // const minDiam = 0.0
	  if (ringCoord.length < 4) { return bufferDistance < 0 }
	  if (ringCoord.length === 4) { return this.isTriangleErodedCompletely(ringCoord, bufferDistance) }
	  var env = ring.getEnvelopeInternal();
	  var envMinDimension = Math.min(env.getHeight(), env.getWidth());
	  if (bufferDistance < 0.0 && 2 * Math.abs(bufferDistance) > envMinDimension) { return true }
	  return false
	};
	OffsetCurveSetBuilder.prototype.addCollection = function addCollection (gc) {
	    var this$1 = this;

	  for (var i = 0; i < gc.getNumGeometries(); i++) {
	    var g = gc.getGeometryN(i);
	    this$1.add(g);
	  }
	};
	OffsetCurveSetBuilder.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	OffsetCurveSetBuilder.prototype.getClass = function getClass () {
	  return OffsetCurveSetBuilder
	};

	var PointOnGeometryLocator = function PointOnGeometryLocator () {};

	PointOnGeometryLocator.prototype.locate = function locate (p) {};
	PointOnGeometryLocator.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	PointOnGeometryLocator.prototype.getClass = function getClass () {
	  return PointOnGeometryLocator
	};

	var GeometryCollectionIterator = function GeometryCollectionIterator () {
	  this._parent = null;
	  this._atStart = null;
	  this._max = null;
	  this._index = null;
	  this._subcollectionIterator = null;
	  var parent = arguments[0];
	  this._parent = parent;
	  this._atStart = true;
	  this._index = 0;
	  this._max = parent.getNumGeometries();
	};
	GeometryCollectionIterator.prototype.next = function next () {
	  if (this._atStart) {
	    this._atStart = false;
	    if (GeometryCollectionIterator.isAtomic(this._parent)) { this._index++; }
	    return this._parent
	  }
	  if (this._subcollectionIterator !== null) {
	    if (this._subcollectionIterator.hasNext()) {
	      return this._subcollectionIterator.next()
	    } else {
	      this._subcollectionIterator = null;
	    }
	  }
	  if (this._index >= this._max) {
	    throw new NoSuchElementException()
	  }
	  var obj = this._parent.getGeometryN(this._index++);
	  if (obj instanceof GeometryCollection) {
	    this._subcollectionIterator = new GeometryCollectionIterator(obj);
	    return this._subcollectionIterator.next()
	  }
	  return obj
	};
	GeometryCollectionIterator.prototype.remove = function remove () {
	  throw new Error(this.getClass().getName())
	};
	GeometryCollectionIterator.prototype.hasNext = function hasNext () {
	  if (this._atStart) {
	    return true
	  }
	  if (this._subcollectionIterator !== null) {
	    if (this._subcollectionIterator.hasNext()) {
	      return true
	    }
	    this._subcollectionIterator = null;
	  }
	  if (this._index >= this._max) {
	    return false
	  }
	  return true
	};
	GeometryCollectionIterator.prototype.interfaces_ = function interfaces_ () {
	  return [Iterator]
	};
	GeometryCollectionIterator.prototype.getClass = function getClass () {
	  return GeometryCollectionIterator
	};
	GeometryCollectionIterator.isAtomic = function isAtomic (geom) {
	  return !(geom instanceof GeometryCollection)
	};

	var SimplePointInAreaLocator = function SimplePointInAreaLocator () {
	  this._geom = null;
	  var geom = arguments[0];
	  this._geom = geom;
	};
	SimplePointInAreaLocator.prototype.locate = function locate (p) {
	  return SimplePointInAreaLocator.locate(p, this._geom)
	};
	SimplePointInAreaLocator.prototype.interfaces_ = function interfaces_ () {
	  return [PointOnGeometryLocator]
	};
	SimplePointInAreaLocator.prototype.getClass = function getClass () {
	  return SimplePointInAreaLocator
	};
	SimplePointInAreaLocator.isPointInRing = function isPointInRing (p, ring) {
	  if (!ring.getEnvelopeInternal().intersects(p)) { return false }
	  return CGAlgorithms.isPointInRing(p, ring.getCoordinates())
	};
	SimplePointInAreaLocator.containsPointInPolygon = function containsPointInPolygon (p, poly) {
	  if (poly.isEmpty()) { return false }
	  var shell = poly.getExteriorRing();
	  if (!SimplePointInAreaLocator.isPointInRing(p, shell)) { return false }
	  for (var i = 0; i < poly.getNumInteriorRing(); i++) {
	    var hole = poly.getInteriorRingN(i);
	    if (SimplePointInAreaLocator.isPointInRing(p, hole)) { return false }
	  }
	  return true
	};
	SimplePointInAreaLocator.containsPoint = function containsPoint (p, geom) {
	  if (geom instanceof Polygon) {
	    return SimplePointInAreaLocator.containsPointInPolygon(p, geom)
	  } else if (geom instanceof GeometryCollection) {
	    var geomi = new GeometryCollectionIterator(geom);
	    while (geomi.hasNext()) {
	      var g2 = geomi.next();
	      if (g2 !== geom) { if (SimplePointInAreaLocator.containsPoint(p, g2)) { return true } }
	    }
	  }
	  return false
	};
	SimplePointInAreaLocator.locate = function locate (p, geom) {
	  if (geom.isEmpty()) { return Location.EXTERIOR }
	  if (SimplePointInAreaLocator.containsPoint(p, geom)) { return Location.INTERIOR }
	  return Location.EXTERIOR
	};

	var EdgeEndStar = function EdgeEndStar () {
	  this._edgeMap = new TreeMap();
	  this._edgeList = null;
	  this._ptInAreaLocation = [Location.NONE, Location.NONE];
	};
	EdgeEndStar.prototype.getNextCW = function getNextCW (ee) {
	  this.getEdges();
	  var i = this._edgeList.indexOf(ee);
	  var iNextCW = i - 1;
	  if (i === 0) { iNextCW = this._edgeList.size() - 1; }
	  return this._edgeList.get(iNextCW)
	};
	EdgeEndStar.prototype.propagateSideLabels = function propagateSideLabels (geomIndex) {
	  var startLoc = Location.NONE;
	  for (var it = this.iterator(); it.hasNext();) {
	    var e = it.next();
	    var label = e.getLabel();
	    if (label.isArea(geomIndex) && label.getLocation(geomIndex, Position.LEFT) !== Location.NONE) { startLoc = label.getLocation(geomIndex, Position.LEFT); }
	  }
	  if (startLoc === Location.NONE) { return null }
	  var currLoc = startLoc;
	  for (var it$1 = this.iterator(); it$1.hasNext();) {
	    var e$1 = it$1.next();
	    var label$1 = e$1.getLabel();
	    if (label$1.getLocation(geomIndex, Position.ON) === Location.NONE) { label$1.setLocation(geomIndex, Position.ON, currLoc); }
	    if (label$1.isArea(geomIndex)) {
	      var leftLoc = label$1.getLocation(geomIndex, Position.LEFT);
	      var rightLoc = label$1.getLocation(geomIndex, Position.RIGHT);
	      if (rightLoc !== Location.NONE) {
	        if (rightLoc !== currLoc) { throw new TopologyException('side location conflict', e$1.getCoordinate()) }
	        if (leftLoc === Location.NONE) {
	          Assert.shouldNeverReachHere('found single null side (at ' + e$1.getCoordinate() + ')');
	        }
	        currLoc = leftLoc;
	      } else {
	        Assert.isTrue(label$1.getLocation(geomIndex, Position.LEFT) === Location.NONE, 'found single null side');
	        label$1.setLocation(geomIndex, Position.RIGHT, currLoc);
	        label$1.setLocation(geomIndex, Position.LEFT, currLoc);
	      }
	    }
	  }
	};
	EdgeEndStar.prototype.getCoordinate = function getCoordinate () {
	  var it = this.iterator();
	  if (!it.hasNext()) { return null }
	  var e = it.next();
	  return e.getCoordinate()
	};
	EdgeEndStar.prototype.print = function print (out) {
	  System.out.println('EdgeEndStar:   ' + this.getCoordinate());
	  for (var it = this.iterator(); it.hasNext();) {
	    var e = it.next();
	    e.print(out);
	  }
	};
	EdgeEndStar.prototype.isAreaLabelsConsistent = function isAreaLabelsConsistent (geomGraph) {
	  this.computeEdgeEndLabels(geomGraph.getBoundaryNodeRule());
	  return this.checkAreaLabelsConsistent(0)
	};
	EdgeEndStar.prototype.checkAreaLabelsConsistent = function checkAreaLabelsConsistent (geomIndex) {
	  var edges = this.getEdges();
	  if (edges.size() <= 0) { return true }
	  var lastEdgeIndex = edges.size() - 1;
	  var startLabel = edges.get(lastEdgeIndex).getLabel();
	  var startLoc = startLabel.getLocation(geomIndex, Position.LEFT);
	  Assert.isTrue(startLoc !== Location.NONE, 'Found unlabelled area edge');
	  var currLoc = startLoc;
	  for (var it = this.iterator(); it.hasNext();) {
	    var e = it.next();
	    var label = e.getLabel();
	    Assert.isTrue(label.isArea(geomIndex), 'Found non-area edge');
	    var leftLoc = label.getLocation(geomIndex, Position.LEFT);
	    var rightLoc = label.getLocation(geomIndex, Position.RIGHT);
	    if (leftLoc === rightLoc) {
	      return false
	    }
	    if (rightLoc !== currLoc) {
	      return false
	    }
	    currLoc = leftLoc;
	  }
	  return true
	};
	EdgeEndStar.prototype.findIndex = function findIndex (eSearch) {
	    var this$1 = this;

	  this.iterator();
	  for (var i = 0; i < this._edgeList.size(); i++) {
	    var e = this$1._edgeList.get(i);
	    if (e === eSearch) { return i }
	  }
	  return -1
	};
	EdgeEndStar.prototype.iterator = function iterator () {
	  return this.getEdges().iterator()
	};
	EdgeEndStar.prototype.getEdges = function getEdges () {
	  if (this._edgeList === null) {
	    this._edgeList = new ArrayList(this._edgeMap.values());
	  }
	  return this._edgeList
	};
	EdgeEndStar.prototype.getLocation = function getLocation (geomIndex, p, geom) {
	  if (this._ptInAreaLocation[geomIndex] === Location.NONE) {
	    this._ptInAreaLocation[geomIndex] = SimplePointInAreaLocator.locate(p, geom[geomIndex].getGeometry());
	  }
	  return this._ptInAreaLocation[geomIndex]
	};
	EdgeEndStar.prototype.toString = function toString () {
	  var buf = new StringBuffer();
	  buf.append('EdgeEndStar:   ' + this.getCoordinate());
	  buf.append('\n');
	  for (var it = this.iterator(); it.hasNext();) {
	    var e = it.next();
	    buf.append(e);
	    buf.append('\n');
	  }
	  return buf.toString()
	};
	EdgeEndStar.prototype.computeEdgeEndLabels = function computeEdgeEndLabels (boundaryNodeRule) {
	  for (var it = this.iterator(); it.hasNext();) {
	    var ee = it.next();
	    ee.computeLabel(boundaryNodeRule);
	  }
	};
	EdgeEndStar.prototype.computeLabelling = function computeLabelling (geomGraph) {
	    var this$1 = this;

	  this.computeEdgeEndLabels(geomGraph[0].getBoundaryNodeRule());
	  this.propagateSideLabels(0);
	  this.propagateSideLabels(1);
	  var hasDimensionalCollapseEdge = [false, false];
	  for (var it = this.iterator(); it.hasNext();) {
	    var e = it.next();
	    var label = e.getLabel();
	    for (var geomi = 0; geomi < 2; geomi++) {
	      if (label.isLine(geomi) && label.getLocation(geomi) === Location.BOUNDARY) { hasDimensionalCollapseEdge[geomi] = true; }
	    }
	  }
	  for (var it$1 = this.iterator(); it$1.hasNext();) {
	    var e$1 = it$1.next();
	    var label$1 = e$1.getLabel();
	    for (var geomi$1 = 0; geomi$1 < 2; geomi$1++) {
	      if (label$1.isAnyNull(geomi$1)) {
	        var loc = Location.NONE;
	        if (hasDimensionalCollapseEdge[geomi$1]) {
	          loc = Location.EXTERIOR;
	        } else {
	          var p = e$1.getCoordinate();
	          loc = this$1.getLocation(geomi$1, p, geomGraph);
	        }
	        label$1.setAllLocationsIfNull(geomi$1, loc);
	      }
	    }
	  }
	};
	EdgeEndStar.prototype.getDegree = function getDegree () {
	  return this._edgeMap.size()
	};
	EdgeEndStar.prototype.insertEdgeEnd = function insertEdgeEnd (e, obj) {
	  this._edgeMap.put(e, obj);
	  this._edgeList = null;
	};
	EdgeEndStar.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	EdgeEndStar.prototype.getClass = function getClass () {
	  return EdgeEndStar
	};

	var DirectedEdgeStar = (function (EdgeEndStar$$1) {
	  function DirectedEdgeStar () {
	    EdgeEndStar$$1.call(this);
	    this._resultAreaEdgeList = null;
	    this._label = null;
	    this._SCANNING_FOR_INCOMING = 1;
	    this._LINKING_TO_OUTGOING = 2;
	  }

	  if ( EdgeEndStar$$1 ) DirectedEdgeStar.__proto__ = EdgeEndStar$$1;
	  DirectedEdgeStar.prototype = Object.create( EdgeEndStar$$1 && EdgeEndStar$$1.prototype );
	  DirectedEdgeStar.prototype.constructor = DirectedEdgeStar;
	  DirectedEdgeStar.prototype.linkResultDirectedEdges = function linkResultDirectedEdges () {
	    var this$1 = this;

	    this.getResultAreaEdges();
	    var firstOut = null;
	    var incoming = null;
	    var state = this._SCANNING_FOR_INCOMING;
	    for (var i = 0; i < this._resultAreaEdgeList.size(); i++) {
	      var nextOut = this$1._resultAreaEdgeList.get(i);
	      var nextIn = nextOut.getSym();
	      if (!nextOut.getLabel().isArea()) { continue }
	      if (firstOut === null && nextOut.isInResult()) { firstOut = nextOut; }
	      switch (state) {
	        case this$1._SCANNING_FOR_INCOMING:
	          if (!nextIn.isInResult()) { continue }
	          incoming = nextIn;
	          state = this$1._LINKING_TO_OUTGOING;
	          break
	        case this$1._LINKING_TO_OUTGOING:
	          if (!nextOut.isInResult()) { continue }
	          incoming.setNext(nextOut);
	          state = this$1._SCANNING_FOR_INCOMING;
	          break
	      }
	    }
	    if (state === this._LINKING_TO_OUTGOING) {
	      if (firstOut === null) { throw new TopologyException('no outgoing dirEdge found', this.getCoordinate()) }
	      Assert.isTrue(firstOut.isInResult(), 'unable to link last incoming dirEdge');
	      incoming.setNext(firstOut);
	    }
	  };
	  DirectedEdgeStar.prototype.insert = function insert (ee) {
	    var de = ee;
	    this.insertEdgeEnd(de, de);
	  };
	  DirectedEdgeStar.prototype.getRightmostEdge = function getRightmostEdge () {
	    var edges = this.getEdges();
	    var size = edges.size();
	    if (size < 1) { return null }
	    var de0 = edges.get(0);
	    if (size === 1) { return de0 }
	    var deLast = edges.get(size - 1);
	    var quad0 = de0.getQuadrant();
	    var quad1 = deLast.getQuadrant();
	    if (Quadrant.isNorthern(quad0) && Quadrant.isNorthern(quad1)) { return de0; } else if (!Quadrant.isNorthern(quad0) && !Quadrant.isNorthern(quad1)) { return deLast; } else {
	      // const nonHorizontalEdge = null
	      if (de0.getDy() !== 0) { return de0; } else if (deLast.getDy() !== 0) { return deLast }
	    }
	    Assert.shouldNeverReachHere('found two horizontal edges incident on node');
	    return null
	  };
	  DirectedEdgeStar.prototype.print = function print (out) {
	    System.out.println('DirectedEdgeStar: ' + this.getCoordinate());
	    for (var it = this.iterator(); it.hasNext();) {
	      var de = it.next();
	      out.print('out ');
	      de.print(out);
	      out.println();
	      out.print('in ');
	      de.getSym().print(out);
	      out.println();
	    }
	  };
	  DirectedEdgeStar.prototype.getResultAreaEdges = function getResultAreaEdges () {
	    var this$1 = this;

	    if (this._resultAreaEdgeList !== null) { return this._resultAreaEdgeList }
	    this._resultAreaEdgeList = new ArrayList();
	    for (var it = this.iterator(); it.hasNext();) {
	      var de = it.next();
	      if (de.isInResult() || de.getSym().isInResult()) { this$1._resultAreaEdgeList.add(de); }
	    }
	    return this._resultAreaEdgeList
	  };
	  DirectedEdgeStar.prototype.updateLabelling = function updateLabelling (nodeLabel) {
	    for (var it = this.iterator(); it.hasNext();) {
	      var de = it.next();
	      var label = de.getLabel();
	      label.setAllLocationsIfNull(0, nodeLabel.getLocation(0));
	      label.setAllLocationsIfNull(1, nodeLabel.getLocation(1));
	    }
	  };
	  DirectedEdgeStar.prototype.linkAllDirectedEdges = function linkAllDirectedEdges () {
	    var this$1 = this;

	    this.getEdges();
	    var prevOut = null;
	    var firstIn = null;
	    for (var i = this._edgeList.size() - 1; i >= 0; i--) {
	      var nextOut = this$1._edgeList.get(i);
	      var nextIn = nextOut.getSym();
	      if (firstIn === null) { firstIn = nextIn; }
	      if (prevOut !== null) { nextIn.setNext(prevOut); }
	      prevOut = nextOut;
	    }
	    firstIn.setNext(prevOut);
	  };
	  DirectedEdgeStar.prototype.computeDepths = function computeDepths () {
	    var this$1 = this;

	    if (arguments.length === 1) {
	      var de = arguments[0];
	      var edgeIndex = this.findIndex(de);
	      // const label = de.getLabel()
	      var startDepth = de.getDepth(Position.LEFT);
	      var targetLastDepth = de.getDepth(Position.RIGHT);
	      var nextDepth = this.computeDepths(edgeIndex + 1, this._edgeList.size(), startDepth);
	      var lastDepth = this.computeDepths(0, edgeIndex, nextDepth);
	      if (lastDepth !== targetLastDepth) { throw new TopologyException('depth mismatch at ' + de.getCoordinate()) }
	    } else if (arguments.length === 3) {
	      var startIndex = arguments[0];
	      var endIndex = arguments[1];
	      var startDepth$1 = arguments[2];
	      var currDepth = startDepth$1;
	      for (var i = startIndex; i < endIndex; i++) {
	        var nextDe = this$1._edgeList.get(i);
	        // const label = nextDe.getLabel()
	        nextDe.setEdgeDepths(Position.RIGHT, currDepth);
	        currDepth = nextDe.getDepth(Position.LEFT);
	      }
	      return currDepth
	    }
	  };
	  DirectedEdgeStar.prototype.mergeSymLabels = function mergeSymLabels () {
	    for (var it = this.iterator(); it.hasNext();) {
	      var de = it.next();
	      var label = de.getLabel();
	      label.merge(de.getSym().getLabel());
	    }
	  };
	  DirectedEdgeStar.prototype.linkMinimalDirectedEdges = function linkMinimalDirectedEdges (er) {
	    var this$1 = this;

	    var firstOut = null;
	    var incoming = null;
	    var state = this._SCANNING_FOR_INCOMING;
	    for (var i = this._resultAreaEdgeList.size() - 1; i >= 0; i--) {
	      var nextOut = this$1._resultAreaEdgeList.get(i);
	      var nextIn = nextOut.getSym();
	      if (firstOut === null && nextOut.getEdgeRing() === er) { firstOut = nextOut; }
	      switch (state) {
	        case this$1._SCANNING_FOR_INCOMING:
	          if (nextIn.getEdgeRing() !== er) { continue }
	          incoming = nextIn;
	          state = this$1._LINKING_TO_OUTGOING;
	          break
	        case this$1._LINKING_TO_OUTGOING:
	          if (nextOut.getEdgeRing() !== er) { continue }
	          incoming.setNextMin(nextOut);
	          state = this$1._SCANNING_FOR_INCOMING;
	          break
	      }
	    }
	    if (state === this._LINKING_TO_OUTGOING) {
	      Assert.isTrue(firstOut !== null, 'found null for first outgoing dirEdge');
	      Assert.isTrue(firstOut.getEdgeRing() === er, 'unable to link last incoming dirEdge');
	      incoming.setNextMin(firstOut);
	    }
	  };
	  DirectedEdgeStar.prototype.getOutgoingDegree = function getOutgoingDegree () {
	    if (arguments.length === 0) {
	      var degree = 0;
	      for (var it = this.iterator(); it.hasNext();) {
	        var de = it.next();
	        if (de.isInResult()) { degree++; }
	      }
	      return degree
	    } else if (arguments.length === 1) {
	      var er = arguments[0];
	      var degree$1 = 0;
	      for (var it$1 = this.iterator(); it$1.hasNext();) {
	        var de$1 = it$1.next();
	        if (de$1.getEdgeRing() === er) { degree$1++; }
	      }
	      return degree$1
	    }
	  };
	  DirectedEdgeStar.prototype.getLabel = function getLabel () {
	    return this._label
	  };
	  DirectedEdgeStar.prototype.findCoveredLineEdges = function findCoveredLineEdges () {
	    var startLoc = Location.NONE;
	    for (var it = this.iterator(); it.hasNext();) {
	      var nextOut = it.next();
	      var nextIn = nextOut.getSym();
	      if (!nextOut.isLineEdge()) {
	        if (nextOut.isInResult()) {
	          startLoc = Location.INTERIOR;
	          break
	        }
	        if (nextIn.isInResult()) {
	          startLoc = Location.EXTERIOR;
	          break
	        }
	      }
	    }
	    if (startLoc === Location.NONE) { return null }
	    var currLoc = startLoc;
	    for (var it$1 = this.iterator(); it$1.hasNext();) {
	      var nextOut$1 = it$1.next();
	      var nextIn$1 = nextOut$1.getSym();
	      if (nextOut$1.isLineEdge()) {
	        nextOut$1.getEdge().setCovered(currLoc === Location.INTERIOR);
	      } else {
	        if (nextOut$1.isInResult()) { currLoc = Location.EXTERIOR; }
	        if (nextIn$1.isInResult()) { currLoc = Location.INTERIOR; }
	      }
	    }
	  };
	  DirectedEdgeStar.prototype.computeLabelling = function computeLabelling (geom) {
	    var this$1 = this;

	    EdgeEndStar$$1.prototype.computeLabelling.call(this, geom);
	    this._label = new Label(Location.NONE);
	    for (var it = this.iterator(); it.hasNext();) {
	      var ee = it.next();
	      var e = ee.getEdge();
	      var eLabel = e.getLabel();
	      for (var i = 0; i < 2; i++) {
	        var eLoc = eLabel.getLocation(i);
	        if (eLoc === Location.INTERIOR || eLoc === Location.BOUNDARY) { this$1._label.setLocation(i, Location.INTERIOR); }
	      }
	    }
	  };
	  DirectedEdgeStar.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  DirectedEdgeStar.prototype.getClass = function getClass () {
	    return DirectedEdgeStar
	  };

	  return DirectedEdgeStar;
	}(EdgeEndStar));

	var OverlayNodeFactory = (function (NodeFactory$$1) {
	  function OverlayNodeFactory () {
	    NodeFactory$$1.apply(this, arguments);
	  }

	  if ( NodeFactory$$1 ) OverlayNodeFactory.__proto__ = NodeFactory$$1;
	  OverlayNodeFactory.prototype = Object.create( NodeFactory$$1 && NodeFactory$$1.prototype );
	  OverlayNodeFactory.prototype.constructor = OverlayNodeFactory;

	  OverlayNodeFactory.prototype.createNode = function createNode (coord) {
	    return new Node(coord, new DirectedEdgeStar())
	  };
	  OverlayNodeFactory.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  OverlayNodeFactory.prototype.getClass = function getClass () {
	    return OverlayNodeFactory
	  };

	  return OverlayNodeFactory;
	}(NodeFactory));

	var OrientedCoordinateArray = function OrientedCoordinateArray () {
	  this._pts = null;
	  this._orientation = null;
	  var pts = arguments[0];
	  this._pts = pts;
	  this._orientation = OrientedCoordinateArray.orientation(pts);
	};
	OrientedCoordinateArray.prototype.compareTo = function compareTo (o1) {
	  var oca = o1;
	  var comp = OrientedCoordinateArray.compareOriented(this._pts, this._orientation, oca._pts, oca._orientation);
	  return comp
	};
	OrientedCoordinateArray.prototype.interfaces_ = function interfaces_ () {
	  return [Comparable]
	};
	OrientedCoordinateArray.prototype.getClass = function getClass () {
	  return OrientedCoordinateArray
	};
	OrientedCoordinateArray.orientation = function orientation (pts) {
	  return CoordinateArrays.increasingDirection(pts) === 1
	};
	OrientedCoordinateArray.compareOriented = function compareOriented (pts1, orientation1, pts2, orientation2) {
	  var dir1 = orientation1 ? 1 : -1;
	  var dir2 = orientation2 ? 1 : -1;
	  var limit1 = orientation1 ? pts1.length : -1;
	  var limit2 = orientation2 ? pts2.length : -1;
	  var i1 = orientation1 ? 0 : pts1.length - 1;
	  var i2 = orientation2 ? 0 : pts2.length - 1;
	  // const comp = 0
	  while (true) {
	    var compPt = pts1[i1].compareTo(pts2[i2]);
	    if (compPt !== 0) { return compPt }
	    i1 += dir1;
	    i2 += dir2;
	    var done1 = i1 === limit1;
	    var done2 = i2 === limit2;
	    if (done1 && !done2) { return -1 }
	    if (!done1 && done2) { return 1 }
	    if (done1 && done2) { return 0 }
	  }
	};

	var EdgeList = function EdgeList () {
	  this._edges = new ArrayList();
	  this._ocaMap = new TreeMap();
	};
	EdgeList.prototype.print = function print (out) {
	    var this$1 = this;

	  out.print('MULTILINESTRING ( ');
	  for (var j = 0; j < this._edges.size(); j++) {
	    var e = this$1._edges.get(j);
	    if (j > 0) { out.print(','); }
	    out.print('(');
	    var pts = e.getCoordinates();
	    for (var i = 0; i < pts.length; i++) {
	      if (i > 0) { out.print(','); }
	      out.print(pts[i].x + ' ' + pts[i].y);
	    }
	    out.println(')');
	  }
	  out.print(')  ');
	};
	EdgeList.prototype.addAll = function addAll (edgeColl) {
	    var this$1 = this;

	  for (var i = edgeColl.iterator(); i.hasNext();) {
	    this$1.add(i.next());
	  }
	};
	EdgeList.prototype.findEdgeIndex = function findEdgeIndex (e) {
	    var this$1 = this;

	  for (var i = 0; i < this._edges.size(); i++) {
	    if (this$1._edges.get(i).equals(e)) { return i }
	  }
	  return -1
	};
	EdgeList.prototype.iterator = function iterator () {
	  return this._edges.iterator()
	};
	EdgeList.prototype.getEdges = function getEdges () {
	  return this._edges
	};
	EdgeList.prototype.get = function get (i) {
	  return this._edges.get(i)
	};
	EdgeList.prototype.findEqualEdge = function findEqualEdge (e) {
	  var oca = new OrientedCoordinateArray(e.getCoordinates());
	  var matchEdge = this._ocaMap.get(oca);
	  return matchEdge
	};
	EdgeList.prototype.add = function add (e) {
	  this._edges.add(e);
	  var oca = new OrientedCoordinateArray(e.getCoordinates());
	  this._ocaMap.put(oca, e);
	};
	EdgeList.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	EdgeList.prototype.getClass = function getClass () {
	  return EdgeList
	};

	var SegmentIntersector = function SegmentIntersector () {};

	SegmentIntersector.prototype.processIntersections = function processIntersections (e0, segIndex0, e1, segIndex1) {};
	SegmentIntersector.prototype.isDone = function isDone () {};
	SegmentIntersector.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	SegmentIntersector.prototype.getClass = function getClass () {
	  return SegmentIntersector
	};

	var IntersectionAdder = function IntersectionAdder () {
	  this._hasIntersection = false;
	  this._hasProper = false;
	  this._hasProperInterior = false;
	  this._hasInterior = false;
	  this._properIntersectionPoint = null;
	  this._li = null;
	  this._isSelfIntersection = null;
	  this.numIntersections = 0;
	  this.numInteriorIntersections = 0;
	  this.numProperIntersections = 0;
	  this.numTests = 0;
	  var li = arguments[0];
	  this._li = li;
	};
	IntersectionAdder.prototype.isTrivialIntersection = function isTrivialIntersection (e0, segIndex0, e1, segIndex1) {
	  if (e0 === e1) {
	    if (this._li.getIntersectionNum() === 1) {
	      if (IntersectionAdder.isAdjacentSegments(segIndex0, segIndex1)) { return true }
	      if (e0.isClosed()) {
	        var maxSegIndex = e0.size() - 1;
	        if ((segIndex0 === 0 && segIndex1 === maxSegIndex) ||
	            (segIndex1 === 0 && segIndex0 === maxSegIndex)) {
	          return true
	        }
	      }
	    }
	  }
	  return false
	};
	IntersectionAdder.prototype.getProperIntersectionPoint = function getProperIntersectionPoint () {
	  return this._properIntersectionPoint
	};
	IntersectionAdder.prototype.hasProperInteriorIntersection = function hasProperInteriorIntersection () {
	  return this._hasProperInterior
	};
	IntersectionAdder.prototype.getLineIntersector = function getLineIntersector () {
	  return this._li
	};
	IntersectionAdder.prototype.hasProperIntersection = function hasProperIntersection () {
	  return this._hasProper
	};
	IntersectionAdder.prototype.processIntersections = function processIntersections (e0, segIndex0, e1, segIndex1) {
	  if (e0 === e1 && segIndex0 === segIndex1) { return null }
	  this.numTests++;
	  var p00 = e0.getCoordinates()[segIndex0];
	  var p01 = e0.getCoordinates()[segIndex0 + 1];
	  var p10 = e1.getCoordinates()[segIndex1];
	  var p11 = e1.getCoordinates()[segIndex1 + 1];
	  this._li.computeIntersection(p00, p01, p10, p11);
	  if (this._li.hasIntersection()) {
	    this.numIntersections++;
	    if (this._li.isInteriorIntersection()) {
	      this.numInteriorIntersections++;
	      this._hasInterior = true;
	    }
	    if (!this.isTrivialIntersection(e0, segIndex0, e1, segIndex1)) {
	      this._hasIntersection = true;
	      e0.addIntersections(this._li, segIndex0, 0);
	      e1.addIntersections(this._li, segIndex1, 1);
	      if (this._li.isProper()) {
	        this.numProperIntersections++;
	        this._hasProper = true;
	        this._hasProperInterior = true;
	      }
	    }
	  }
	};
	IntersectionAdder.prototype.hasIntersection = function hasIntersection () {
	  return this._hasIntersection
	};
	IntersectionAdder.prototype.isDone = function isDone () {
	  return false
	};
	IntersectionAdder.prototype.hasInteriorIntersection = function hasInteriorIntersection () {
	  return this._hasInterior
	};
	IntersectionAdder.prototype.interfaces_ = function interfaces_ () {
	  return [SegmentIntersector]
	};
	IntersectionAdder.prototype.getClass = function getClass () {
	  return IntersectionAdder
	};
	IntersectionAdder.isAdjacentSegments = function isAdjacentSegments (i1, i2) {
	  return Math.abs(i1 - i2) === 1
	};

	var EdgeIntersection = function EdgeIntersection () {
	  this.coord = null;
	  this.segmentIndex = null;
	  this.dist = null;
	  var coord = arguments[0];
	  var segmentIndex = arguments[1];
	  var dist = arguments[2];
	  this.coord = new Coordinate(coord);
	  this.segmentIndex = segmentIndex;
	  this.dist = dist;
	};
	EdgeIntersection.prototype.getSegmentIndex = function getSegmentIndex () {
	  return this.segmentIndex
	};
	EdgeIntersection.prototype.getCoordinate = function getCoordinate () {
	  return this.coord
	};
	EdgeIntersection.prototype.print = function print (out) {
	  out.print(this.coord);
	  out.print(' seg # = ' + this.segmentIndex);
	  out.println(' dist = ' + this.dist);
	};
	EdgeIntersection.prototype.compareTo = function compareTo (obj) {
	  var other = obj;
	  return this.compare(other.segmentIndex, other.dist)
	};
	EdgeIntersection.prototype.isEndPoint = function isEndPoint (maxSegmentIndex) {
	  if (this.segmentIndex === 0 && this.dist === 0.0) { return true }
	  if (this.segmentIndex === maxSegmentIndex) { return true }
	  return false
	};
	EdgeIntersection.prototype.toString = function toString () {
	  return this.coord + ' seg # = ' + this.segmentIndex + ' dist = ' + this.dist
	};
	EdgeIntersection.prototype.getDistance = function getDistance () {
	  return this.dist
	};
	EdgeIntersection.prototype.compare = function compare (segmentIndex, dist) {
	  if (this.segmentIndex < segmentIndex) { return -1 }
	  if (this.segmentIndex > segmentIndex) { return 1 }
	  if (this.dist < dist) { return -1 }
	  if (this.dist > dist) { return 1 }
	  return 0
	};
	EdgeIntersection.prototype.interfaces_ = function interfaces_ () {
	  return [Comparable]
	};
	EdgeIntersection.prototype.getClass = function getClass () {
	  return EdgeIntersection
	};

	var EdgeIntersectionList = function EdgeIntersectionList () {
	  this._nodeMap = new TreeMap();
	  this.edge = null;
	  var edge = arguments[0];
	  this.edge = edge;
	};
	EdgeIntersectionList.prototype.print = function print (out) {
	  out.println('Intersections:');
	  for (var it = this.iterator(); it.hasNext();) {
	    var ei = it.next();
	    ei.print(out);
	  }
	};
	EdgeIntersectionList.prototype.iterator = function iterator () {
	  return this._nodeMap.values().iterator()
	};
	EdgeIntersectionList.prototype.addSplitEdges = function addSplitEdges (edgeList) {
	    var this$1 = this;

	  this.addEndpoints();
	  var it = this.iterator();
	  var eiPrev = it.next();
	  while (it.hasNext()) {
	    var ei = it.next();
	    var newEdge = this$1.createSplitEdge(eiPrev, ei);
	    edgeList.add(newEdge);
	    eiPrev = ei;
	  }
	};
	EdgeIntersectionList.prototype.addEndpoints = function addEndpoints () {
	  var maxSegIndex = this.edge.pts.length - 1;
	  this.add(this.edge.pts[0], 0, 0.0);
	  this.add(this.edge.pts[maxSegIndex], maxSegIndex, 0.0);
	};
	EdgeIntersectionList.prototype.createSplitEdge = function createSplitEdge (ei0, ei1) {
	    var this$1 = this;

	  var npts = ei1.segmentIndex - ei0.segmentIndex + 2;
	  var lastSegStartPt = this.edge.pts[ei1.segmentIndex];
	  var useIntPt1 = ei1.dist > 0.0 || !ei1.coord.equals2D(lastSegStartPt);
	  if (!useIntPt1) {
	    npts--;
	  }
	  var pts = new Array(npts).fill(null);
	  var ipt = 0;
	  pts[ipt++] = new Coordinate(ei0.coord);
	  for (var i = ei0.segmentIndex + 1; i <= ei1.segmentIndex; i++) {
	    pts[ipt++] = this$1.edge.pts[i];
	  }
	  if (useIntPt1) { pts[ipt] = ei1.coord; }
	  return new Edge(pts, new Label(this.edge._label))
	};
	EdgeIntersectionList.prototype.add = function add (intPt, segmentIndex, dist) {
	  var eiNew = new EdgeIntersection(intPt, segmentIndex, dist);
	  var ei = this._nodeMap.get(eiNew);
	  if (ei !== null) {
	    return ei
	  }
	  this._nodeMap.put(eiNew, eiNew);
	  return eiNew
	};
	EdgeIntersectionList.prototype.isIntersection = function isIntersection (pt) {
	  for (var it = this.iterator(); it.hasNext();) {
	    var ei = it.next();
	    if (ei.coord.equals(pt)) { return true }
	  }
	  return false
	};
	EdgeIntersectionList.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	EdgeIntersectionList.prototype.getClass = function getClass () {
	  return EdgeIntersectionList
	};

	var MonotoneChainIndexer = function MonotoneChainIndexer () {};

	MonotoneChainIndexer.prototype.getChainStartIndices = function getChainStartIndices (pts) {
	    var this$1 = this;

	  var start = 0;
	  var startIndexList = new ArrayList();
	  startIndexList.add(new Integer(start));
	  do {
	    var last = this$1.findChainEnd(pts, start);
	    startIndexList.add(new Integer(last));
	    start = last;
	  } while (start < pts.length - 1)
	  var startIndex = MonotoneChainIndexer.toIntArray(startIndexList);
	  return startIndex
	};
	MonotoneChainIndexer.prototype.findChainEnd = function findChainEnd (pts, start) {
	  var chainQuad = Quadrant.quadrant(pts[start], pts[start + 1]);
	  var last = start + 1;
	  while (last < pts.length) {
	    var quad = Quadrant.quadrant(pts[last - 1], pts[last]);
	    if (quad !== chainQuad) { break }
	    last++;
	  }
	  return last - 1
	};
	MonotoneChainIndexer.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	MonotoneChainIndexer.prototype.getClass = function getClass () {
	  return MonotoneChainIndexer
	};
	MonotoneChainIndexer.toIntArray = function toIntArray (list) {
	  var array = new Array(list.size()).fill(null);
	  for (var i = 0; i < array.length; i++) {
	    array[i] = list.get(i).intValue();
	  }
	  return array
	};

	var MonotoneChainEdge = function MonotoneChainEdge () {
	  this.e = null;
	  this.pts = null;
	  this.startIndex = null;
	  this.env1 = new Envelope();
	  this.env2 = new Envelope();
	  var e = arguments[0];
	  this.e = e;
	  this.pts = e.getCoordinates();
	  var mcb = new MonotoneChainIndexer();
	  this.startIndex = mcb.getChainStartIndices(this.pts);
	};
	MonotoneChainEdge.prototype.getCoordinates = function getCoordinates () {
	  return this.pts
	};
	MonotoneChainEdge.prototype.getMaxX = function getMaxX (chainIndex) {
	  var x1 = this.pts[this.startIndex[chainIndex]].x;
	  var x2 = this.pts[this.startIndex[chainIndex + 1]].x;
	  return x1 > x2 ? x1 : x2
	};
	MonotoneChainEdge.prototype.getMinX = function getMinX (chainIndex) {
	  var x1 = this.pts[this.startIndex[chainIndex]].x;
	  var x2 = this.pts[this.startIndex[chainIndex + 1]].x;
	  return x1 < x2 ? x1 : x2
	};
	MonotoneChainEdge.prototype.computeIntersectsForChain = function computeIntersectsForChain () {
	  if (arguments.length === 4) {
	    var chainIndex0 = arguments[0];
	    var mce = arguments[1];
	    var chainIndex1 = arguments[2];
	    var si = arguments[3];
	    this.computeIntersectsForChain(this.startIndex[chainIndex0], this.startIndex[chainIndex0 + 1], mce, mce.startIndex[chainIndex1], mce.startIndex[chainIndex1 + 1], si);
	  } else if (arguments.length === 6) {
	    var start0 = arguments[0];
	    var end0 = arguments[1];
	    var mce$1 = arguments[2];
	    var start1 = arguments[3];
	    var end1 = arguments[4];
	    var ei = arguments[5];
	    var p00 = this.pts[start0];
	    var p01 = this.pts[end0];
	    var p10 = mce$1.pts[start1];
	    var p11 = mce$1.pts[end1];
	    if (end0 - start0 === 1 && end1 - start1 === 1) {
	      ei.addIntersections(this.e, start0, mce$1.e, start1);
	      return null
	    }
	    this.env1.init(p00, p01);
	    this.env2.init(p10, p11);
	    if (!this.env1.intersects(this.env2)) { return null }
	    var mid0 = Math.trunc((start0 + end0) / 2);
	    var mid1 = Math.trunc((start1 + end1) / 2);
	    if (start0 < mid0) {
	      if (start1 < mid1) { this.computeIntersectsForChain(start0, mid0, mce$1, start1, mid1, ei); }
	      if (mid1 < end1) { this.computeIntersectsForChain(start0, mid0, mce$1, mid1, end1, ei); }
	    }
	    if (mid0 < end0) {
	      if (start1 < mid1) { this.computeIntersectsForChain(mid0, end0, mce$1, start1, mid1, ei); }
	      if (mid1 < end1) { this.computeIntersectsForChain(mid0, end0, mce$1, mid1, end1, ei); }
	    }
	  }
	};
	MonotoneChainEdge.prototype.getStartIndexes = function getStartIndexes () {
	  return this.startIndex
	};
	MonotoneChainEdge.prototype.computeIntersects = function computeIntersects (mce, si) {
	    var this$1 = this;

	  for (var i = 0; i < this.startIndex.length - 1; i++) {
	    for (var j = 0; j < mce.startIndex.length - 1; j++) {
	      this$1.computeIntersectsForChain(i, mce, j, si);
	    }
	  }
	};
	MonotoneChainEdge.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	MonotoneChainEdge.prototype.getClass = function getClass () {
	  return MonotoneChainEdge
	};

	var Depth = function Depth () {
	  var this$1 = this;

	  this._depth = Array(2).fill().map(function () { return Array(3); });
	  for (var i = 0; i < 2; i++) {
	    for (var j = 0; j < 3; j++) {
	      this$1._depth[i][j] = Depth.NULL_VALUE;
	    }
	  }
	};

	var staticAccessors$31 = { NULL_VALUE: { configurable: true } };
	Depth.prototype.getDepth = function getDepth (geomIndex, posIndex) {
	  return this._depth[geomIndex][posIndex]
	};
	Depth.prototype.setDepth = function setDepth (geomIndex, posIndex, depthValue) {
	  this._depth[geomIndex][posIndex] = depthValue;
	};
	Depth.prototype.isNull = function isNull () {
	    var this$1 = this;

	  if (arguments.length === 0) {
	    for (var i = 0; i < 2; i++) {
	      for (var j = 0; j < 3; j++) {
	        if (this$1._depth[i][j] !== Depth.NULL_VALUE) { return false }
	      }
	    }
	    return true
	  } else if (arguments.length === 1) {
	    var geomIndex = arguments[0];
	    return this._depth[geomIndex][1] === Depth.NULL_VALUE
	  } else if (arguments.length === 2) {
	    var geomIndex$1 = arguments[0];
	    var posIndex = arguments[1];
	    return this._depth[geomIndex$1][posIndex] === Depth.NULL_VALUE
	  }
	};
	Depth.prototype.normalize = function normalize () {
	    var this$1 = this;

	  for (var i = 0; i < 2; i++) {
	    if (!this$1.isNull(i)) {
	      var minDepth = this$1._depth[i][1];
	      if (this$1._depth[i][2] < minDepth) { minDepth = this$1._depth[i][2]; }
	      if (minDepth < 0) { minDepth = 0; }
	      for (var j = 1; j < 3; j++) {
	        var newValue = 0;
	        if (this$1._depth[i][j] > minDepth) { newValue = 1; }
	        this$1._depth[i][j] = newValue;
	      }
	    }
	  }
	};
	Depth.prototype.getDelta = function getDelta (geomIndex) {
	  return this._depth[geomIndex][Position.RIGHT] - this._depth[geomIndex][Position.LEFT]
	};
	Depth.prototype.getLocation = function getLocation (geomIndex, posIndex) {
	  if (this._depth[geomIndex][posIndex] <= 0) { return Location.EXTERIOR }
	  return Location.INTERIOR
	};
	Depth.prototype.toString = function toString () {
	  return 'A: ' + this._depth[0][1] + ',' + this._depth[0][2] + ' B: ' + this._depth[1][1] + ',' + this._depth[1][2]
	};
	Depth.prototype.add = function add () {
	    var this$1 = this;

	  if (arguments.length === 1) {
	    var lbl = arguments[0];
	    for (var i = 0; i < 2; i++) {
	      for (var j = 1; j < 3; j++) {
	        var loc = lbl.getLocation(i, j);
	        if (loc === Location.EXTERIOR || loc === Location.INTERIOR) {
	          if (this$1.isNull(i, j)) {
	            this$1._depth[i][j] = Depth.depthAtLocation(loc);
	          } else { this$1._depth[i][j] += Depth.depthAtLocation(loc); }
	        }
	      }
	    }
	  } else if (arguments.length === 3) {
	    var geomIndex = arguments[0];
	    var posIndex = arguments[1];
	    var location = arguments[2];
	    if (location === Location.INTERIOR) { this._depth[geomIndex][posIndex]++; }
	  }
	};
	Depth.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	Depth.prototype.getClass = function getClass () {
	  return Depth
	};
	Depth.depthAtLocation = function depthAtLocation (location) {
	  if (location === Location.EXTERIOR) { return 0 }
	  if (location === Location.INTERIOR) { return 1 }
	  return Depth.NULL_VALUE
	};
	staticAccessors$31.NULL_VALUE.get = function () { return -1 };

	Object.defineProperties( Depth, staticAccessors$31 );

	var Edge = (function (GraphComponent$$1) {
	  function Edge () {
	    GraphComponent$$1.call(this);
	    this.pts = null;
	    this._env = null;
	    this.eiList = new EdgeIntersectionList(this);
	    this._name = null;
	    this._mce = null;
	    this._isIsolated = true;
	    this._depth = new Depth();
	    this._depthDelta = 0;
	    if (arguments.length === 1) {
	      var pts = arguments[0];
	      Edge.call(this, pts, null);
	    } else if (arguments.length === 2) {
	      var pts$1 = arguments[0];
	      var label = arguments[1];
	      this.pts = pts$1;
	      this._label = label;
	    }
	  }

	  if ( GraphComponent$$1 ) Edge.__proto__ = GraphComponent$$1;
	  Edge.prototype = Object.create( GraphComponent$$1 && GraphComponent$$1.prototype );
	  Edge.prototype.constructor = Edge;
	  Edge.prototype.getDepth = function getDepth () {
	    return this._depth
	  };
	  Edge.prototype.getCollapsedEdge = function getCollapsedEdge () {
	    var newPts = new Array(2).fill(null);
	    newPts[0] = this.pts[0];
	    newPts[1] = this.pts[1];
	    var newe = new Edge(newPts, Label.toLineLabel(this._label));
	    return newe
	  };
	  Edge.prototype.isIsolated = function isIsolated () {
	    return this._isIsolated
	  };
	  Edge.prototype.getCoordinates = function getCoordinates () {
	    return this.pts
	  };
	  Edge.prototype.setIsolated = function setIsolated (isIsolated) {
	    this._isIsolated = isIsolated;
	  };
	  Edge.prototype.setName = function setName (name) {
	    this._name = name;
	  };
	  Edge.prototype.equals = function equals (o) {
	    var this$1 = this;

	    if (!(o instanceof Edge)) { return false }
	    var e = o;
	    if (this.pts.length !== e.pts.length) { return false }
	    var isEqualForward = true;
	    var isEqualReverse = true;
	    var iRev = this.pts.length;
	    for (var i = 0; i < this.pts.length; i++) {
	      if (!this$1.pts[i].equals2D(e.pts[i])) {
	        isEqualForward = false;
	      }
	      if (!this$1.pts[i].equals2D(e.pts[--iRev])) {
	        isEqualReverse = false;
	      }
	      if (!isEqualForward && !isEqualReverse) { return false }
	    }
	    return true
	  };
	  Edge.prototype.getCoordinate = function getCoordinate () {
	    if (arguments.length === 0) {
	      if (this.pts.length > 0) { return this.pts[0] }
	      return null
	    } else if (arguments.length === 1) {
	      var i = arguments[0];
	      return this.pts[i]
	    }
	  };
	  Edge.prototype.print = function print (out) {
	    var this$1 = this;

	    out.print('edge ' + this._name + ': ');
	    out.print('LINESTRING (');
	    for (var i = 0; i < this.pts.length; i++) {
	      if (i > 0) { out.print(','); }
	      out.print(this$1.pts[i].x + ' ' + this$1.pts[i].y);
	    }
	    out.print(')  ' + this._label + ' ' + this._depthDelta);
	  };
	  Edge.prototype.computeIM = function computeIM (im) {
	    Edge.updateIM(this._label, im);
	  };
	  Edge.prototype.isCollapsed = function isCollapsed () {
	    if (!this._label.isArea()) { return false }
	    if (this.pts.length !== 3) { return false }
	    if (this.pts[0].equals(this.pts[2])) { return true }
	    return false
	  };
	  Edge.prototype.isClosed = function isClosed () {
	    return this.pts[0].equals(this.pts[this.pts.length - 1])
	  };
	  Edge.prototype.getMaximumSegmentIndex = function getMaximumSegmentIndex () {
	    return this.pts.length - 1
	  };
	  Edge.prototype.getDepthDelta = function getDepthDelta () {
	    return this._depthDelta
	  };
	  Edge.prototype.getNumPoints = function getNumPoints () {
	    return this.pts.length
	  };
	  Edge.prototype.printReverse = function printReverse (out) {
	    var this$1 = this;

	    out.print('edge ' + this._name + ': ');
	    for (var i = this.pts.length - 1; i >= 0; i--) {
	      out.print(this$1.pts[i] + ' ');
	    }
	    out.println('');
	  };
	  Edge.prototype.getMonotoneChainEdge = function getMonotoneChainEdge () {
	    if (this._mce === null) { this._mce = new MonotoneChainEdge(this); }
	    return this._mce
	  };
	  Edge.prototype.getEnvelope = function getEnvelope () {
	    var this$1 = this;

	    if (this._env === null) {
	      this._env = new Envelope();
	      for (var i = 0; i < this.pts.length; i++) {
	        this$1._env.expandToInclude(this$1.pts[i]);
	      }
	    }
	    return this._env
	  };
	  Edge.prototype.addIntersection = function addIntersection (li, segmentIndex, geomIndex, intIndex) {
	    var intPt = new Coordinate(li.getIntersection(intIndex));
	    var normalizedSegmentIndex = segmentIndex;
	    var dist = li.getEdgeDistance(geomIndex, intIndex);
	    var nextSegIndex = normalizedSegmentIndex + 1;
	    if (nextSegIndex < this.pts.length) {
	      var nextPt = this.pts[nextSegIndex];
	      if (intPt.equals2D(nextPt)) {
	        normalizedSegmentIndex = nextSegIndex;
	        dist = 0.0;
	      }
	    }
	    this.eiList.add(intPt, normalizedSegmentIndex, dist);
	  };
	  Edge.prototype.toString = function toString () {
	    var this$1 = this;

	    var buf = new StringBuffer();
	    buf.append('edge ' + this._name + ': ');
	    buf.append('LINESTRING (');
	    for (var i = 0; i < this.pts.length; i++) {
	      if (i > 0) { buf.append(','); }
	      buf.append(this$1.pts[i].x + ' ' + this$1.pts[i].y);
	    }
	    buf.append(')  ' + this._label + ' ' + this._depthDelta);
	    return buf.toString()
	  };
	  Edge.prototype.isPointwiseEqual = function isPointwiseEqual (e) {
	    var this$1 = this;

	    if (this.pts.length !== e.pts.length) { return false }
	    for (var i = 0; i < this.pts.length; i++) {
	      if (!this$1.pts[i].equals2D(e.pts[i])) {
	        return false
	      }
	    }
	    return true
	  };
	  Edge.prototype.setDepthDelta = function setDepthDelta (depthDelta) {
	    this._depthDelta = depthDelta;
	  };
	  Edge.prototype.getEdgeIntersectionList = function getEdgeIntersectionList () {
	    return this.eiList
	  };
	  Edge.prototype.addIntersections = function addIntersections (li, segmentIndex, geomIndex) {
	    var this$1 = this;

	    for (var i = 0; i < li.getIntersectionNum(); i++) {
	      this$1.addIntersection(li, segmentIndex, geomIndex, i);
	    }
	  };
	  Edge.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  Edge.prototype.getClass = function getClass () {
	    return Edge
	  };
	  Edge.updateIM = function updateIM () {
	    if (arguments.length === 2) {
	      var label = arguments[0];
	      var im = arguments[1];
	      im.setAtLeastIfValid(label.getLocation(0, Position.ON), label.getLocation(1, Position.ON), 1);
	      if (label.isArea()) {
	        im.setAtLeastIfValid(label.getLocation(0, Position.LEFT), label.getLocation(1, Position.LEFT), 2);
	        im.setAtLeastIfValid(label.getLocation(0, Position.RIGHT), label.getLocation(1, Position.RIGHT), 2);
	      }
	    } else { return GraphComponent$$1.prototype.updateIM.apply(this, arguments) }
	  };

	  return Edge;
	}(GraphComponent));

	var BufferBuilder = function BufferBuilder (bufParams) {
	  this._workingPrecisionModel = null;
	  this._workingNoder = null;
	  this._geomFact = null;
	  this._graph = null;
	  this._edgeList = new EdgeList();
	  this._bufParams = bufParams || null;
	};
	BufferBuilder.prototype.setWorkingPrecisionModel = function setWorkingPrecisionModel (pm) {
	  this._workingPrecisionModel = pm;
	};
	BufferBuilder.prototype.insertUniqueEdge = function insertUniqueEdge (e) {
	  var existingEdge = this._edgeList.findEqualEdge(e);
	  if (existingEdge !== null) {
	    var existingLabel = existingEdge.getLabel();
	    var labelToMerge = e.getLabel();
	    if (!existingEdge.isPointwiseEqual(e)) {
	      labelToMerge = new Label(e.getLabel());
	      labelToMerge.flip();
	    }
	    existingLabel.merge(labelToMerge);
	    var mergeDelta = BufferBuilder.depthDelta(labelToMerge);
	    var existingDelta = existingEdge.getDepthDelta();
	    var newDelta = existingDelta + mergeDelta;
	    existingEdge.setDepthDelta(newDelta);
	  } else {
	    this._edgeList.add(e);
	    e.setDepthDelta(BufferBuilder.depthDelta(e.getLabel()));
	  }
	};
	BufferBuilder.prototype.buildSubgraphs = function buildSubgraphs (subgraphList, polyBuilder) {
	  var processedGraphs = new ArrayList();
	  for (var i = subgraphList.iterator(); i.hasNext();) {
	    var subgraph = i.next();
	    var p = subgraph.getRightmostCoordinate();
	    var locater = new SubgraphDepthLocater(processedGraphs);
	    var outsideDepth = locater.getDepth(p);
	    subgraph.computeDepth(outsideDepth);
	    subgraph.findResultEdges();
	    processedGraphs.add(subgraph);
	    polyBuilder.add(subgraph.getDirectedEdges(), subgraph.getNodes());
	  }
	};
	BufferBuilder.prototype.createSubgraphs = function createSubgraphs (graph) {
	  var subgraphList = new ArrayList();
	  for (var i = graph.getNodes().iterator(); i.hasNext();) {
	    var node = i.next();
	    if (!node.isVisited()) {
	      var subgraph = new BufferSubgraph();
	      subgraph.create(node);
	      subgraphList.add(subgraph);
	    }
	  }
	  Collections.sort(subgraphList, Collections.reverseOrder());
	  return subgraphList
	};
	BufferBuilder.prototype.createEmptyResultGeometry = function createEmptyResultGeometry () {
	  var emptyGeom = this._geomFact.createPolygon();
	  return emptyGeom
	};
	BufferBuilder.prototype.getNoder = function getNoder (precisionModel) {
	  if (this._workingNoder !== null) { return this._workingNoder }
	  var noder = new MCIndexNoder();
	  var li = new RobustLineIntersector();
	  li.setPrecisionModel(precisionModel);
	  noder.setSegmentIntersector(new IntersectionAdder(li));
	  return noder
	};
	BufferBuilder.prototype.buffer = function buffer (g, distance) {
	  var precisionModel = this._workingPrecisionModel;
	  if (precisionModel === null) { precisionModel = g.getPrecisionModel(); }
	  this._geomFact = g.getFactory();
	  var curveBuilder = new OffsetCurveBuilder(precisionModel, this._bufParams);
	  var curveSetBuilder = new OffsetCurveSetBuilder(g, distance, curveBuilder);
	  var bufferSegStrList = curveSetBuilder.getCurves();
	  if (bufferSegStrList.size() <= 0) {
	    return this.createEmptyResultGeometry()
	  }
	  this.computeNodedEdges(bufferSegStrList, precisionModel);
	  this._graph = new PlanarGraph(new OverlayNodeFactory());
	  this._graph.addEdges(this._edgeList.getEdges());
	  var subgraphList = this.createSubgraphs(this._graph);
	  var polyBuilder = new PolygonBuilder(this._geomFact);
	  this.buildSubgraphs(subgraphList, polyBuilder);
	  var resultPolyList = polyBuilder.getPolygons();
	  if (resultPolyList.size() <= 0) {
	    return this.createEmptyResultGeometry()
	  }
	  var resultGeom = this._geomFact.buildGeometry(resultPolyList);
	  return resultGeom
	};
	BufferBuilder.prototype.computeNodedEdges = function computeNodedEdges (bufferSegStrList, precisionModel) {
	    var this$1 = this;

	  var noder = this.getNoder(precisionModel);
	  noder.computeNodes(bufferSegStrList);
	  var nodedSegStrings = noder.getNodedSubstrings();
	  for (var i = nodedSegStrings.iterator(); i.hasNext();) {
	    var segStr = i.next();
	    var pts = segStr.getCoordinates();
	    if (pts.length === 2 && pts[0].equals2D(pts[1])) { continue }
	    var oldLabel = segStr.getData();
	    var edge = new Edge(segStr.getCoordinates(), new Label(oldLabel));
	    this$1.insertUniqueEdge(edge);
	  }
	};
	BufferBuilder.prototype.setNoder = function setNoder (noder) {
	  this._workingNoder = noder;
	};
	BufferBuilder.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	BufferBuilder.prototype.getClass = function getClass () {
	  return BufferBuilder
	};
	BufferBuilder.depthDelta = function depthDelta (label) {
	  var lLoc = label.getLocation(0, Position.LEFT);
	  var rLoc = label.getLocation(0, Position.RIGHT);
	  if (lLoc === Location.INTERIOR && rLoc === Location.EXTERIOR) { return 1; } else if (lLoc === Location.EXTERIOR && rLoc === Location.INTERIOR) { return -1 }
	  return 0
	};
	BufferBuilder.convertSegStrings = function convertSegStrings (it) {
	  var fact = new GeometryFactory();
	  var lines = new ArrayList();
	  while (it.hasNext()) {
	    var ss = it.next();
	    var line = fact.createLineString(ss.getCoordinates());
	    lines.add(line);
	  }
	  return fact.buildGeometry(lines)
	};

	var ScaledNoder = function ScaledNoder () {
	  this._noder = null;
	  this._scaleFactor = null;
	  this._offsetX = null;
	  this._offsetY = null;
	  this._isScaled = false;
	  if (arguments.length === 2) {
	    var noder = arguments[0];
	    var scaleFactor = arguments[1];
	    this._noder = noder;
	    this._scaleFactor = scaleFactor;
	    this._offsetX = 0.0;
	    this._offsetY = 0.0;
	    this._isScaled = !this.isIntegerPrecision();
	  } else if (arguments.length === 4) {
	    var noder$1 = arguments[0];
	    var scaleFactor$1 = arguments[1];
	    var offsetX = arguments[2];
	    var offsetY = arguments[3];
	    this._noder = noder$1;
	    this._scaleFactor = scaleFactor$1;
	    this._offsetX = offsetX;
	    this._offsetY = offsetY;
	    this._isScaled = !this.isIntegerPrecision();
	  }
	};
	ScaledNoder.prototype.rescale = function rescale () {
	    var this$1 = this;

	  if (hasInterface(arguments[0], Collection)) {
	    var segStrings = arguments[0];
	    for (var i = segStrings.iterator(); i.hasNext();) {
	      var ss = i.next();
	      this$1.rescale(ss.getCoordinates());
	    }
	  } else if (arguments[0] instanceof Array) {
	    var pts = arguments[0];
	    // let p0 = null
	    // let p1 = null
	    // if (pts.length === 2) {
	    // p0 = new Coordinate(pts[0])
	    // p1 = new Coordinate(pts[1])
	    // }
	    for (var i$1 = 0; i$1 < pts.length; i$1++) {
	      pts[i$1].x = pts[i$1].x / this$1._scaleFactor + this$1._offsetX;
	      pts[i$1].y = pts[i$1].y / this$1._scaleFactor + this$1._offsetY;
	    }
	    if (pts.length === 2 && pts[0].equals2D(pts[1])) {
	      System.out.println(pts);
	    }
	  }
	};
	ScaledNoder.prototype.scale = function scale () {
	    var this$1 = this;

	  if (hasInterface(arguments[0], Collection)) {
	    var segStrings = arguments[0];
	    var nodedSegmentStrings = new ArrayList();
	    for (var i = segStrings.iterator(); i.hasNext();) {
	      var ss = i.next();
	      nodedSegmentStrings.add(new NodedSegmentString(this$1.scale(ss.getCoordinates()), ss.getData()));
	    }
	    return nodedSegmentStrings
	  } else if (arguments[0] instanceof Array) {
	    var pts = arguments[0];
	    var roundPts = new Array(pts.length).fill(null);
	    for (var i$1 = 0; i$1 < pts.length; i$1++) {
	      roundPts[i$1] = new Coordinate(Math.round((pts[i$1].x - this$1._offsetX) * this$1._scaleFactor), Math.round((pts[i$1].y - this$1._offsetY) * this$1._scaleFactor), pts[i$1].z);
	    }
	    var roundPtsNoDup = CoordinateArrays.removeRepeatedPoints(roundPts);
	    return roundPtsNoDup
	  }
	};
	ScaledNoder.prototype.isIntegerPrecision = function isIntegerPrecision () {
	  return this._scaleFactor === 1.0
	};
	ScaledNoder.prototype.getNodedSubstrings = function getNodedSubstrings () {
	  var splitSS = this._noder.getNodedSubstrings();
	  if (this._isScaled) { this.rescale(splitSS); }
	  return splitSS
	};
	ScaledNoder.prototype.computeNodes = function computeNodes (inputSegStrings) {
	  var intSegStrings = inputSegStrings;
	  if (this._isScaled) { intSegStrings = this.scale(inputSegStrings); }
	  this._noder.computeNodes(intSegStrings);
	};
	ScaledNoder.prototype.interfaces_ = function interfaces_ () {
	  return [Noder]
	};
	ScaledNoder.prototype.getClass = function getClass () {
	  return ScaledNoder
	};

	var NodingValidator = function NodingValidator () {
	  this._li = new RobustLineIntersector();
	  this._segStrings = null;
	  var segStrings = arguments[0];
	  this._segStrings = segStrings;
	};

	var staticAccessors$33 = { fact: { configurable: true } };
	NodingValidator.prototype.checkEndPtVertexIntersections = function checkEndPtVertexIntersections () {
	    var this$1 = this;

	  if (arguments.length === 0) {
	    for (var i = this._segStrings.iterator(); i.hasNext();) {
	      var ss = i.next();
	      var pts = ss.getCoordinates();
	      this$1.checkEndPtVertexIntersections(pts[0], this$1._segStrings);
	      this$1.checkEndPtVertexIntersections(pts[pts.length - 1], this$1._segStrings);
	    }
	  } else if (arguments.length === 2) {
	    var testPt = arguments[0];
	    var segStrings = arguments[1];
	    for (var i$1 = segStrings.iterator(); i$1.hasNext();) {
	      var ss$1 = i$1.next();
	      var pts$1 = ss$1.getCoordinates();
	      for (var j = 1; j < pts$1.length - 1; j++) {
	        if (pts$1[j].equals(testPt)) { throw new RuntimeException('found endpt/interior pt intersection at index ' + j + ' :pt ' + testPt) }
	      }
	    }
	  }
	};
	NodingValidator.prototype.checkInteriorIntersections = function checkInteriorIntersections () {
	    var this$1 = this;

	  if (arguments.length === 0) {
	    for (var i = this._segStrings.iterator(); i.hasNext();) {
	      var ss0 = i.next();
	      for (var j = this._segStrings.iterator(); j.hasNext();) {
	        var ss1 = j.next();
	        this$1.checkInteriorIntersections(ss0, ss1);
	      }
	    }
	  } else if (arguments.length === 2) {
	    var ss0$1 = arguments[0];
	    var ss1$1 = arguments[1];
	    var pts0 = ss0$1.getCoordinates();
	    var pts1 = ss1$1.getCoordinates();
	    for (var i0 = 0; i0 < pts0.length - 1; i0++) {
	      for (var i1 = 0; i1 < pts1.length - 1; i1++) {
	        this$1.checkInteriorIntersections(ss0$1, i0, ss1$1, i1);
	      }
	    }
	  } else if (arguments.length === 4) {
	    var e0 = arguments[0];
	    var segIndex0 = arguments[1];
	    var e1 = arguments[2];
	    var segIndex1 = arguments[3];
	    if (e0 === e1 && segIndex0 === segIndex1) { return null }
	    var p00 = e0.getCoordinates()[segIndex0];
	    var p01 = e0.getCoordinates()[segIndex0 + 1];
	    var p10 = e1.getCoordinates()[segIndex1];
	    var p11 = e1.getCoordinates()[segIndex1 + 1];
	    this._li.computeIntersection(p00, p01, p10, p11);
	    if (this._li.hasIntersection()) {
	      if (this._li.isProper() || this.hasInteriorIntersection(this._li, p00, p01) || this.hasInteriorIntersection(this._li, p10, p11)) {
	        throw new RuntimeException('found non-noded intersection at ' + p00 + '-' + p01 + ' and ' + p10 + '-' + p11)
	      }
	    }
	  }
	};
	NodingValidator.prototype.checkValid = function checkValid () {
	  this.checkEndPtVertexIntersections();
	  this.checkInteriorIntersections();
	  this.checkCollapses();
	};
	NodingValidator.prototype.checkCollapses = function checkCollapses () {
	    var this$1 = this;

	  if (arguments.length === 0) {
	    for (var i = this._segStrings.iterator(); i.hasNext();) {
	      var ss = i.next();
	      this$1.checkCollapses(ss);
	    }
	  } else if (arguments.length === 1) {
	    var ss$1 = arguments[0];
	    var pts = ss$1.getCoordinates();
	    for (var i$1 = 0; i$1 < pts.length - 2; i$1++) {
	      this$1.checkCollapse(pts[i$1], pts[i$1 + 1], pts[i$1 + 2]);
	    }
	  }
	};
	NodingValidator.prototype.hasInteriorIntersection = function hasInteriorIntersection (li, p0, p1) {
	  for (var i = 0; i < li.getIntersectionNum(); i++) {
	    var intPt = li.getIntersection(i);
	    if (!(intPt.equals(p0) || intPt.equals(p1))) { return true }
	  }
	  return false
	};
	NodingValidator.prototype.checkCollapse = function checkCollapse (p0, p1, p2) {
	  if (p0.equals(p2)) { throw new RuntimeException('found non-noded collapse at ' + NodingValidator.fact.createLineString([p0, p1, p2])) }
	};
	NodingValidator.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	NodingValidator.prototype.getClass = function getClass () {
	  return NodingValidator
	};
	staticAccessors$33.fact.get = function () { return new GeometryFactory() };

	Object.defineProperties( NodingValidator, staticAccessors$33 );

	var HotPixel = function HotPixel () {
	  this._li = null;
	  this._pt = null;
	  this._originalPt = null;
	  this._ptScaled = null;
	  this._p0Scaled = null;
	  this._p1Scaled = null;
	  this._scaleFactor = null;
	  this._minx = null;
	  this._maxx = null;
	  this._miny = null;
	  this._maxy = null;
	  this._corner = new Array(4).fill(null);
	  this._safeEnv = null;
	  var pt = arguments[0];
	  var scaleFactor = arguments[1];
	  var li = arguments[2];
	  this._originalPt = pt;
	  this._pt = pt;
	  this._scaleFactor = scaleFactor;
	  this._li = li;
	  if (scaleFactor <= 0) { throw new IllegalArgumentException('Scale factor must be non-zero') }
	  if (scaleFactor !== 1.0) {
	    this._pt = new Coordinate(this.scale(pt.x), this.scale(pt.y));
	    this._p0Scaled = new Coordinate();
	    this._p1Scaled = new Coordinate();
	  }
	  this.initCorners(this._pt);
	};

	var staticAccessors$34 = { SAFE_ENV_EXPANSION_FACTOR: { configurable: true } };
	HotPixel.prototype.intersectsScaled = function intersectsScaled (p0, p1) {
	  var segMinx = Math.min(p0.x, p1.x);
	  var segMaxx = Math.max(p0.x, p1.x);
	  var segMiny = Math.min(p0.y, p1.y);
	  var segMaxy = Math.max(p0.y, p1.y);
	  var isOutsidePixelEnv = this._maxx < segMinx || this._minx > segMaxx || this._maxy < segMiny || this._miny > segMaxy;
	  if (isOutsidePixelEnv) { return false }
	  var intersects = this.intersectsToleranceSquare(p0, p1);
	  Assert.isTrue(!(isOutsidePixelEnv && intersects), 'Found bad envelope test');
	  return intersects
	};
	HotPixel.prototype.initCorners = function initCorners (pt) {
	  var tolerance = 0.5;
	  this._minx = pt.x - tolerance;
	  this._maxx = pt.x + tolerance;
	  this._miny = pt.y - tolerance;
	  this._maxy = pt.y + tolerance;
	  this._corner[0] = new Coordinate(this._maxx, this._maxy);
	  this._corner[1] = new Coordinate(this._minx, this._maxy);
	  this._corner[2] = new Coordinate(this._minx, this._miny);
	  this._corner[3] = new Coordinate(this._maxx, this._miny);
	};
	HotPixel.prototype.intersects = function intersects (p0, p1) {
	  if (this._scaleFactor === 1.0) { return this.intersectsScaled(p0, p1) }
	  this.copyScaled(p0, this._p0Scaled);
	  this.copyScaled(p1, this._p1Scaled);
	  return this.intersectsScaled(this._p0Scaled, this._p1Scaled)
	};
	HotPixel.prototype.scale = function scale (val) {
	  return Math.round(val * this._scaleFactor)
	};
	HotPixel.prototype.getCoordinate = function getCoordinate () {
	  return this._originalPt
	};
	HotPixel.prototype.copyScaled = function copyScaled (p, pScaled) {
	  pScaled.x = this.scale(p.x);
	  pScaled.y = this.scale(p.y);
	};
	HotPixel.prototype.getSafeEnvelope = function getSafeEnvelope () {
	  if (this._safeEnv === null) {
	    var safeTolerance = HotPixel.SAFE_ENV_EXPANSION_FACTOR / this._scaleFactor;
	    this._safeEnv = new Envelope(this._originalPt.x - safeTolerance, this._originalPt.x + safeTolerance, this._originalPt.y - safeTolerance, this._originalPt.y + safeTolerance);
	  }
	  return this._safeEnv
	};
	HotPixel.prototype.intersectsPixelClosure = function intersectsPixelClosure (p0, p1) {
	  this._li.computeIntersection(p0, p1, this._corner[0], this._corner[1]);
	  if (this._li.hasIntersection()) { return true }
	  this._li.computeIntersection(p0, p1, this._corner[1], this._corner[2]);
	  if (this._li.hasIntersection()) { return true }
	  this._li.computeIntersection(p0, p1, this._corner[2], this._corner[3]);
	  if (this._li.hasIntersection()) { return true }
	  this._li.computeIntersection(p0, p1, this._corner[3], this._corner[0]);
	  if (this._li.hasIntersection()) { return true }
	  return false
	};
	HotPixel.prototype.intersectsToleranceSquare = function intersectsToleranceSquare (p0, p1) {
	  var intersectsLeft = false;
	  var intersectsBottom = false;
	  this._li.computeIntersection(p0, p1, this._corner[0], this._corner[1]);
	  if (this._li.isProper()) { return true }
	  this._li.computeIntersection(p0, p1, this._corner[1], this._corner[2]);
	  if (this._li.isProper()) { return true }
	  if (this._li.hasIntersection()) { intersectsLeft = true; }
	  this._li.computeIntersection(p0, p1, this._corner[2], this._corner[3]);
	  if (this._li.isProper()) { return true }
	  if (this._li.hasIntersection()) { intersectsBottom = true; }
	  this._li.computeIntersection(p0, p1, this._corner[3], this._corner[0]);
	  if (this._li.isProper()) { return true }
	  if (intersectsLeft && intersectsBottom) { return true }
	  if (p0.equals(this._pt)) { return true }
	  if (p1.equals(this._pt)) { return true }
	  return false
	};
	HotPixel.prototype.addSnappedNode = function addSnappedNode (segStr, segIndex) {
	  var p0 = segStr.getCoordinate(segIndex);
	  var p1 = segStr.getCoordinate(segIndex + 1);
	  if (this.intersects(p0, p1)) {
	    segStr.addIntersection(this.getCoordinate(), segIndex);
	    return true
	  }
	  return false
	};
	HotPixel.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	HotPixel.prototype.getClass = function getClass () {
	  return HotPixel
	};
	staticAccessors$34.SAFE_ENV_EXPANSION_FACTOR.get = function () { return 0.75 };

	Object.defineProperties( HotPixel, staticAccessors$34 );

	var MonotoneChainSelectAction = function MonotoneChainSelectAction () {
	  this.tempEnv1 = new Envelope();
	  this.selectedSegment = new LineSegment();
	};
	MonotoneChainSelectAction.prototype.select = function select () {
	  if (arguments.length === 1) ; else if (arguments.length === 2) {
	    var mc = arguments[0];
	    var startIndex = arguments[1];
	    mc.getLineSegment(startIndex, this.selectedSegment);
	    this.select(this.selectedSegment);
	  }
	};
	MonotoneChainSelectAction.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	MonotoneChainSelectAction.prototype.getClass = function getClass () {
	  return MonotoneChainSelectAction
	};

	var MCIndexPointSnapper = function MCIndexPointSnapper () {
	  this._index = null;
	  var index = arguments[0];
	  this._index = index;
	};

	var staticAccessors$35 = { HotPixelSnapAction: { configurable: true } };
	MCIndexPointSnapper.prototype.snap = function snap () {
	  if (arguments.length === 1) {
	    var hotPixel = arguments[0];
	    return this.snap(hotPixel, null, -1)
	  } else if (arguments.length === 3) {
	    var hotPixel$1 = arguments[0];
	    var parentEdge = arguments[1];
	    var hotPixelVertexIndex = arguments[2];
	    var pixelEnv = hotPixel$1.getSafeEnvelope();
	    var hotPixelSnapAction = new HotPixelSnapAction(hotPixel$1, parentEdge, hotPixelVertexIndex);
	    this._index.query(pixelEnv, {
	      interfaces_: function () {
	        return [ItemVisitor]
	      },
	      visitItem: function (item) {
	        var testChain = item;
	        testChain.select(pixelEnv, hotPixelSnapAction);
	      }
	    });
	    return hotPixelSnapAction.isNodeAdded()
	  }
	};
	MCIndexPointSnapper.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	MCIndexPointSnapper.prototype.getClass = function getClass () {
	  return MCIndexPointSnapper
	};
	staticAccessors$35.HotPixelSnapAction.get = function () { return HotPixelSnapAction };

	Object.defineProperties( MCIndexPointSnapper, staticAccessors$35 );

	var HotPixelSnapAction = (function (MonotoneChainSelectAction$$1) {
	  function HotPixelSnapAction () {
	    MonotoneChainSelectAction$$1.call(this);
	    this._hotPixel = null;
	    this._parentEdge = null;
	    this._hotPixelVertexIndex = null;
	    this._isNodeAdded = false;
	    var hotPixel = arguments[0];
	    var parentEdge = arguments[1];
	    var hotPixelVertexIndex = arguments[2];
	    this._hotPixel = hotPixel;
	    this._parentEdge = parentEdge;
	    this._hotPixelVertexIndex = hotPixelVertexIndex;
	  }

	  if ( MonotoneChainSelectAction$$1 ) HotPixelSnapAction.__proto__ = MonotoneChainSelectAction$$1;
	  HotPixelSnapAction.prototype = Object.create( MonotoneChainSelectAction$$1 && MonotoneChainSelectAction$$1.prototype );
	  HotPixelSnapAction.prototype.constructor = HotPixelSnapAction;
	  HotPixelSnapAction.prototype.isNodeAdded = function isNodeAdded () {
	    return this._isNodeAdded
	  };
	  HotPixelSnapAction.prototype.select = function select () {
	    if (arguments.length === 2) {
	      var mc = arguments[0];
	      var startIndex = arguments[1];
	      var ss = mc.getContext();
	      if (this._parentEdge !== null) {
	        if (ss === this._parentEdge && startIndex === this._hotPixelVertexIndex) { return null }
	      }
	      this._isNodeAdded = this._hotPixel.addSnappedNode(ss, startIndex);
	    } else { return MonotoneChainSelectAction$$1.prototype.select.apply(this, arguments) }
	  };
	  HotPixelSnapAction.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  HotPixelSnapAction.prototype.getClass = function getClass () {
	    return HotPixelSnapAction
	  };

	  return HotPixelSnapAction;
	}(MonotoneChainSelectAction));

	var InteriorIntersectionFinderAdder = function InteriorIntersectionFinderAdder () {
	  this._li = null;
	  this._interiorIntersections = null;
	  var li = arguments[0];
	  this._li = li;
	  this._interiorIntersections = new ArrayList();
	};
	InteriorIntersectionFinderAdder.prototype.processIntersections = function processIntersections (e0, segIndex0, e1, segIndex1) {
	    var this$1 = this;

	  if (e0 === e1 && segIndex0 === segIndex1) { return null }
	  var p00 = e0.getCoordinates()[segIndex0];
	  var p01 = e0.getCoordinates()[segIndex0 + 1];
	  var p10 = e1.getCoordinates()[segIndex1];
	  var p11 = e1.getCoordinates()[segIndex1 + 1];
	  this._li.computeIntersection(p00, p01, p10, p11);
	  if (this._li.hasIntersection()) {
	    if (this._li.isInteriorIntersection()) {
	      for (var intIndex = 0; intIndex < this._li.getIntersectionNum(); intIndex++) {
	        this$1._interiorIntersections.add(this$1._li.getIntersection(intIndex));
	      }
	      e0.addIntersections(this._li, segIndex0, 0);
	      e1.addIntersections(this._li, segIndex1, 1);
	    }
	  }
	};
	InteriorIntersectionFinderAdder.prototype.isDone = function isDone () {
	  return false
	};
	InteriorIntersectionFinderAdder.prototype.getInteriorIntersections = function getInteriorIntersections () {
	  return this._interiorIntersections
	};
	InteriorIntersectionFinderAdder.prototype.interfaces_ = function interfaces_ () {
	  return [SegmentIntersector]
	};
	InteriorIntersectionFinderAdder.prototype.getClass = function getClass () {
	  return InteriorIntersectionFinderAdder
	};

	var MCIndexSnapRounder = function MCIndexSnapRounder () {
	  this._pm = null;
	  this._li = null;
	  this._scaleFactor = null;
	  this._noder = null;
	  this._pointSnapper = null;
	  this._nodedSegStrings = null;
	  var pm = arguments[0];
	  this._pm = pm;
	  this._li = new RobustLineIntersector();
	  this._li.setPrecisionModel(pm);
	  this._scaleFactor = pm.getScale();
	};
	MCIndexSnapRounder.prototype.checkCorrectness = function checkCorrectness (inputSegmentStrings) {
	  var resultSegStrings = NodedSegmentString.getNodedSubstrings(inputSegmentStrings);
	  var nv = new NodingValidator(resultSegStrings);
	  try {
	    nv.checkValid();
	  } catch (ex) {
	    if (ex instanceof Exception) {
	      ex.printStackTrace();
	    } else { throw ex }
	  } finally {}
	};
	MCIndexSnapRounder.prototype.getNodedSubstrings = function getNodedSubstrings () {
	  return NodedSegmentString.getNodedSubstrings(this._nodedSegStrings)
	};
	MCIndexSnapRounder.prototype.snapRound = function snapRound (segStrings, li) {
	  var intersections = this.findInteriorIntersections(segStrings, li);
	  this.computeIntersectionSnaps(intersections);
	  this.computeVertexSnaps(segStrings);
	};
	MCIndexSnapRounder.prototype.findInteriorIntersections = function findInteriorIntersections (segStrings, li) {
	  var intFinderAdder = new InteriorIntersectionFinderAdder(li);
	  this._noder.setSegmentIntersector(intFinderAdder);
	  this._noder.computeNodes(segStrings);
	  return intFinderAdder.getInteriorIntersections()
	};
	MCIndexSnapRounder.prototype.computeVertexSnaps = function computeVertexSnaps () {
	    var this$1 = this;

	  if (hasInterface(arguments[0], Collection)) {
	    var edges = arguments[0];
	    for (var i0 = edges.iterator(); i0.hasNext();) {
	      var edge0 = i0.next();
	      this$1.computeVertexSnaps(edge0);
	    }
	  } else if (arguments[0] instanceof NodedSegmentString) {
	    var e = arguments[0];
	    var pts0 = e.getCoordinates();
	    for (var i = 0; i < pts0.length; i++) {
	      var hotPixel = new HotPixel(pts0[i], this$1._scaleFactor, this$1._li);
	      var isNodeAdded = this$1._pointSnapper.snap(hotPixel, e, i);
	      if (isNodeAdded) {
	        e.addIntersection(pts0[i], i);
	      }
	    }
	  }
	};
	MCIndexSnapRounder.prototype.computeNodes = function computeNodes (inputSegmentStrings) {
	  this._nodedSegStrings = inputSegmentStrings;
	  this._noder = new MCIndexNoder();
	  this._pointSnapper = new MCIndexPointSnapper(this._noder.getIndex());
	  this.snapRound(inputSegmentStrings, this._li);
	};
	MCIndexSnapRounder.prototype.computeIntersectionSnaps = function computeIntersectionSnaps (snapPts) {
	    var this$1 = this;

	  for (var it = snapPts.iterator(); it.hasNext();) {
	    var snapPt = it.next();
	    var hotPixel = new HotPixel(snapPt, this$1._scaleFactor, this$1._li);
	    this$1._pointSnapper.snap(hotPixel);
	  }
	};
	MCIndexSnapRounder.prototype.interfaces_ = function interfaces_ () {
	  return [Noder]
	};
	MCIndexSnapRounder.prototype.getClass = function getClass () {
	  return MCIndexSnapRounder
	};

	var BufferOp = function BufferOp () {
	  this._argGeom = null;
	  this._distance = null;
	  this._bufParams = new BufferParameters();
	  this._resultGeometry = null;
	  this._saveException = null;
	  if (arguments.length === 1) {
	    var g = arguments[0];
	    this._argGeom = g;
	  } else if (arguments.length === 2) {
	    var g$1 = arguments[0];
	    var bufParams = arguments[1];
	    this._argGeom = g$1;
	    this._bufParams = bufParams;
	  }
	};

	var staticAccessors$32 = { CAP_ROUND: { configurable: true },CAP_BUTT: { configurable: true },CAP_FLAT: { configurable: true },CAP_SQUARE: { configurable: true },MAX_PRECISION_DIGITS: { configurable: true } };
	BufferOp.prototype.bufferFixedPrecision = function bufferFixedPrecision (fixedPM) {
	  var noder = new ScaledNoder(new MCIndexSnapRounder(new PrecisionModel(1.0)), fixedPM.getScale());
	  var bufBuilder = new BufferBuilder(this._bufParams);
	  bufBuilder.setWorkingPrecisionModel(fixedPM);
	  bufBuilder.setNoder(noder);
	  this._resultGeometry = bufBuilder.buffer(this._argGeom, this._distance);
	};
	BufferOp.prototype.bufferReducedPrecision = function bufferReducedPrecision () {
	    var this$1 = this;

	  if (arguments.length === 0) {
	    for (var precDigits = BufferOp.MAX_PRECISION_DIGITS; precDigits >= 0; precDigits--) {
	      try {
	        this$1.bufferReducedPrecision(precDigits);
	      } catch (ex) {
	        if (ex instanceof TopologyException) {
	          this$1._saveException = ex;
	        } else { throw ex }
	      } finally {}
	      if (this$1._resultGeometry !== null) { return null }
	    }
	    throw this._saveException
	  } else if (arguments.length === 1) {
	    var precisionDigits = arguments[0];
	    var sizeBasedScaleFactor = BufferOp.precisionScaleFactor(this._argGeom, this._distance, precisionDigits);
	    var fixedPM = new PrecisionModel(sizeBasedScaleFactor);
	    this.bufferFixedPrecision(fixedPM);
	  }
	};
	BufferOp.prototype.computeGeometry = function computeGeometry () {
	  this.bufferOriginalPrecision();
	  if (this._resultGeometry !== null) { return null }
	  var argPM = this._argGeom.getFactory().getPrecisionModel();
	  if (argPM.getType() === PrecisionModel.FIXED) { this.bufferFixedPrecision(argPM); } else { this.bufferReducedPrecision(); }
	};
	BufferOp.prototype.setQuadrantSegments = function setQuadrantSegments (quadrantSegments) {
	  this._bufParams.setQuadrantSegments(quadrantSegments);
	};
	BufferOp.prototype.bufferOriginalPrecision = function bufferOriginalPrecision () {
	  try {
	    var bufBuilder = new BufferBuilder(this._bufParams);
	    this._resultGeometry = bufBuilder.buffer(this._argGeom, this._distance);
	  } catch (ex) {
	    if (ex instanceof RuntimeException) {
	      this._saveException = ex;
	    } else { throw ex }
	  } finally {}
	};
	BufferOp.prototype.getResultGeometry = function getResultGeometry (distance) {
	  this._distance = distance;
	  this.computeGeometry();
	  return this._resultGeometry
	};
	BufferOp.prototype.setEndCapStyle = function setEndCapStyle (endCapStyle) {
	  this._bufParams.setEndCapStyle(endCapStyle);
	};
	BufferOp.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	BufferOp.prototype.getClass = function getClass () {
	  return BufferOp
	};
	BufferOp.bufferOp = function bufferOp () {
	  if (arguments.length === 2) {
	    var g = arguments[0];
	    var distance = arguments[1];
	    var gBuf = new BufferOp(g);
	    var geomBuf = gBuf.getResultGeometry(distance);
	    return geomBuf
	  } else if (arguments.length === 3) {
	    if (Number.isInteger(arguments[2]) && (arguments[0] instanceof Geometry && typeof arguments[1] === 'number')) {
	      var g$1 = arguments[0];
	      var distance$1 = arguments[1];
	      var quadrantSegments = arguments[2];
	      var bufOp = new BufferOp(g$1);
	      bufOp.setQuadrantSegments(quadrantSegments);
	      var geomBuf$1 = bufOp.getResultGeometry(distance$1);
	      return geomBuf$1
	    } else if (arguments[2] instanceof BufferParameters && (arguments[0] instanceof Geometry && typeof arguments[1] === 'number')) {
	      var g$2 = arguments[0];
	      var distance$2 = arguments[1];
	      var params = arguments[2];
	      var bufOp$1 = new BufferOp(g$2, params);
	      var geomBuf$2 = bufOp$1.getResultGeometry(distance$2);
	      return geomBuf$2
	    }
	  } else if (arguments.length === 4) {
	    var g$3 = arguments[0];
	    var distance$3 = arguments[1];
	    var quadrantSegments$1 = arguments[2];
	    var endCapStyle = arguments[3];
	    var bufOp$2 = new BufferOp(g$3);
	    bufOp$2.setQuadrantSegments(quadrantSegments$1);
	    bufOp$2.setEndCapStyle(endCapStyle);
	    var geomBuf$3 = bufOp$2.getResultGeometry(distance$3);
	    return geomBuf$3
	  }
	};
	BufferOp.precisionScaleFactor = function precisionScaleFactor (g, distance, maxPrecisionDigits) {
	  var env = g.getEnvelopeInternal();
	  var envMax = MathUtil.max(Math.abs(env.getMaxX()), Math.abs(env.getMaxY()), Math.abs(env.getMinX()), Math.abs(env.getMinY()));
	  var expandByDistance = distance > 0.0 ? distance : 0.0;
	  var bufEnvMax = envMax + 2 * expandByDistance;
	  var bufEnvPrecisionDigits = Math.trunc(Math.log(bufEnvMax) / Math.log(10) + 1.0);
	  var minUnitLog10 = maxPrecisionDigits - bufEnvPrecisionDigits;
	  var scaleFactor = Math.pow(10.0, minUnitLog10);
	  return scaleFactor
	};
	staticAccessors$32.CAP_ROUND.get = function () { return BufferParameters.CAP_ROUND };
	staticAccessors$32.CAP_BUTT.get = function () { return BufferParameters.CAP_FLAT };
	staticAccessors$32.CAP_FLAT.get = function () { return BufferParameters.CAP_FLAT };
	staticAccessors$32.CAP_SQUARE.get = function () { return BufferParameters.CAP_SQUARE };
	staticAccessors$32.MAX_PRECISION_DIGITS.get = function () { return 12 };

	Object.defineProperties( BufferOp, staticAccessors$32 );

	var PointPairDistance = function PointPairDistance () {
	  this._pt = [new Coordinate(), new Coordinate()];
	  this._distance = Double.NaN;
	  this._isNull = true;
	};
	PointPairDistance.prototype.getCoordinates = function getCoordinates () {
	  return this._pt
	};
	PointPairDistance.prototype.getCoordinate = function getCoordinate (i) {
	  return this._pt[i]
	};
	PointPairDistance.prototype.setMinimum = function setMinimum () {
	  if (arguments.length === 1) {
	    var ptDist = arguments[0];
	    this.setMinimum(ptDist._pt[0], ptDist._pt[1]);
	  } else if (arguments.length === 2) {
	    var p0 = arguments[0];
	    var p1 = arguments[1];
	    if (this._isNull) {
	      this.initialize(p0, p1);
	      return null
	    }
	    var dist = p0.distance(p1);
	    if (dist < this._distance) { this.initialize(p0, p1, dist); }
	  }
	};
	PointPairDistance.prototype.initialize = function initialize () {
	  if (arguments.length === 0) {
	    this._isNull = true;
	  } else if (arguments.length === 2) {
	    var p0 = arguments[0];
	    var p1 = arguments[1];
	    this._pt[0].setCoordinate(p0);
	    this._pt[1].setCoordinate(p1);
	    this._distance = p0.distance(p1);
	    this._isNull = false;
	  } else if (arguments.length === 3) {
	    var p0$1 = arguments[0];
	    var p1$1 = arguments[1];
	    var distance = arguments[2];
	    this._pt[0].setCoordinate(p0$1);
	    this._pt[1].setCoordinate(p1$1);
	    this._distance = distance;
	    this._isNull = false;
	  }
	};
	PointPairDistance.prototype.getDistance = function getDistance () {
	  return this._distance
	};
	PointPairDistance.prototype.setMaximum = function setMaximum () {
	  if (arguments.length === 1) {
	    var ptDist = arguments[0];
	    this.setMaximum(ptDist._pt[0], ptDist._pt[1]);
	  } else if (arguments.length === 2) {
	    var p0 = arguments[0];
	    var p1 = arguments[1];
	    if (this._isNull) {
	      this.initialize(p0, p1);
	      return null
	    }
	    var dist = p0.distance(p1);
	    if (dist > this._distance) { this.initialize(p0, p1, dist); }
	  }
	};
	PointPairDistance.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	PointPairDistance.prototype.getClass = function getClass () {
	  return PointPairDistance
	};

	var DistanceToPointFinder = function DistanceToPointFinder () {};

	DistanceToPointFinder.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	DistanceToPointFinder.prototype.getClass = function getClass () {
	  return DistanceToPointFinder
	};
	DistanceToPointFinder.computeDistance = function computeDistance () {
	  if (arguments[2] instanceof PointPairDistance && (arguments[0] instanceof LineString && arguments[1] instanceof Coordinate)) {
	    var line = arguments[0];
	    var pt = arguments[1];
	    var ptDist = arguments[2];
	    var coords = line.getCoordinates();
	    var tempSegment = new LineSegment();
	    for (var i = 0; i < coords.length - 1; i++) {
	      tempSegment.setCoordinates(coords[i], coords[i + 1]);
	      var closestPt = tempSegment.closestPoint(pt);
	      ptDist.setMinimum(closestPt, pt);
	    }
	  } else if (arguments[2] instanceof PointPairDistance && (arguments[0] instanceof Polygon && arguments[1] instanceof Coordinate)) {
	    var poly = arguments[0];
	    var pt$1 = arguments[1];
	    var ptDist$1 = arguments[2];
	    DistanceToPointFinder.computeDistance(poly.getExteriorRing(), pt$1, ptDist$1);
	    for (var i$1 = 0; i$1 < poly.getNumInteriorRing(); i$1++) {
	      DistanceToPointFinder.computeDistance(poly.getInteriorRingN(i$1), pt$1, ptDist$1);
	    }
	  } else if (arguments[2] instanceof PointPairDistance && (arguments[0] instanceof Geometry && arguments[1] instanceof Coordinate)) {
	    var geom = arguments[0];
	    var pt$2 = arguments[1];
	    var ptDist$2 = arguments[2];
	    if (geom instanceof LineString) {
	      DistanceToPointFinder.computeDistance(geom, pt$2, ptDist$2);
	    } else if (geom instanceof Polygon) {
	      DistanceToPointFinder.computeDistance(geom, pt$2, ptDist$2);
	    } else if (geom instanceof GeometryCollection) {
	      var gc = geom;
	      for (var i$2 = 0; i$2 < gc.getNumGeometries(); i$2++) {
	        var g = gc.getGeometryN(i$2);
	        DistanceToPointFinder.computeDistance(g, pt$2, ptDist$2);
	      }
	    } else {
	      ptDist$2.setMinimum(geom.getCoordinate(), pt$2);
	    }
	  } else if (arguments[2] instanceof PointPairDistance && (arguments[0] instanceof LineSegment && arguments[1] instanceof Coordinate)) {
	    var segment = arguments[0];
	    var pt$3 = arguments[1];
	    var ptDist$3 = arguments[2];
	    var closestPt$1 = segment.closestPoint(pt$3);
	    ptDist$3.setMinimum(closestPt$1, pt$3);
	  }
	};

	var BufferCurveMaximumDistanceFinder = function BufferCurveMaximumDistanceFinder (inputGeom) {
	  this._maxPtDist = new PointPairDistance();
	  this._inputGeom = inputGeom || null;
	};

	var staticAccessors$36 = { MaxPointDistanceFilter: { configurable: true },MaxMidpointDistanceFilter: { configurable: true } };
	BufferCurveMaximumDistanceFinder.prototype.computeMaxMidpointDistance = function computeMaxMidpointDistance (curve) {
	  var distFilter = new MaxMidpointDistanceFilter(this._inputGeom);
	  curve.apply(distFilter);
	  this._maxPtDist.setMaximum(distFilter.getMaxPointDistance());
	};
	BufferCurveMaximumDistanceFinder.prototype.computeMaxVertexDistance = function computeMaxVertexDistance (curve) {
	  var distFilter = new MaxPointDistanceFilter(this._inputGeom);
	  curve.apply(distFilter);
	  this._maxPtDist.setMaximum(distFilter.getMaxPointDistance());
	};
	BufferCurveMaximumDistanceFinder.prototype.findDistance = function findDistance (bufferCurve) {
	  this.computeMaxVertexDistance(bufferCurve);
	  this.computeMaxMidpointDistance(bufferCurve);
	  return this._maxPtDist.getDistance()
	};
	BufferCurveMaximumDistanceFinder.prototype.getDistancePoints = function getDistancePoints () {
	  return this._maxPtDist
	};
	BufferCurveMaximumDistanceFinder.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	BufferCurveMaximumDistanceFinder.prototype.getClass = function getClass () {
	  return BufferCurveMaximumDistanceFinder
	};
	staticAccessors$36.MaxPointDistanceFilter.get = function () { return MaxPointDistanceFilter };
	staticAccessors$36.MaxMidpointDistanceFilter.get = function () { return MaxMidpointDistanceFilter };

	Object.defineProperties( BufferCurveMaximumDistanceFinder, staticAccessors$36 );

	var MaxPointDistanceFilter = function MaxPointDistanceFilter (geom) {
	  this._maxPtDist = new PointPairDistance();
	  this._minPtDist = new PointPairDistance();
	  this._geom = geom || null;
	};
	MaxPointDistanceFilter.prototype.filter = function filter (pt) {
	  this._minPtDist.initialize();
	  DistanceToPointFinder.computeDistance(this._geom, pt, this._minPtDist);
	  this._maxPtDist.setMaximum(this._minPtDist);
	};
	MaxPointDistanceFilter.prototype.getMaxPointDistance = function getMaxPointDistance () {
	  return this._maxPtDist
	};
	MaxPointDistanceFilter.prototype.interfaces_ = function interfaces_ () {
	  return [CoordinateFilter]
	};
	MaxPointDistanceFilter.prototype.getClass = function getClass () {
	  return MaxPointDistanceFilter
	};

	var MaxMidpointDistanceFilter = function MaxMidpointDistanceFilter (geom) {
	  this._maxPtDist = new PointPairDistance();
	  this._minPtDist = new PointPairDistance();
	  this._geom = geom || null;
	};
	MaxMidpointDistanceFilter.prototype.filter = function filter (seq, index) {
	  if (index === 0) { return null }
	  var p0 = seq.getCoordinate(index - 1);
	  var p1 = seq.getCoordinate(index);
	  var midPt = new Coordinate((p0.x + p1.x) / 2, (p0.y + p1.y) / 2);
	  this._minPtDist.initialize();
	  DistanceToPointFinder.computeDistance(this._geom, midPt, this._minPtDist);
	  this._maxPtDist.setMaximum(this._minPtDist);
	};
	MaxMidpointDistanceFilter.prototype.isDone = function isDone () {
	  return false
	};
	MaxMidpointDistanceFilter.prototype.isGeometryChanged = function isGeometryChanged () {
	  return false
	};
	MaxMidpointDistanceFilter.prototype.getMaxPointDistance = function getMaxPointDistance () {
	  return this._maxPtDist
	};
	MaxMidpointDistanceFilter.prototype.interfaces_ = function interfaces_ () {
	  return [CoordinateSequenceFilter]
	};
	MaxMidpointDistanceFilter.prototype.getClass = function getClass () {
	  return MaxMidpointDistanceFilter
	};

	var PolygonExtracter = function PolygonExtracter (comps) {
	  this._comps = comps || null;
	};
	PolygonExtracter.prototype.filter = function filter (geom) {
	  if (geom instanceof Polygon) { this._comps.add(geom); }
	};
	PolygonExtracter.prototype.interfaces_ = function interfaces_ () {
	  return [GeometryFilter]
	};
	PolygonExtracter.prototype.getClass = function getClass () {
	  return PolygonExtracter
	};
	PolygonExtracter.getPolygons = function getPolygons () {
	  if (arguments.length === 1) {
	    var geom = arguments[0];
	    return PolygonExtracter.getPolygons(geom, new ArrayList())
	  } else if (arguments.length === 2) {
	    var geom$1 = arguments[0];
	    var list = arguments[1];
	    if (geom$1 instanceof Polygon) {
	      list.add(geom$1);
	    } else if (geom$1 instanceof GeometryCollection) {
	      geom$1.apply(new PolygonExtracter(list));
	    }
	    return list
	  }
	};

	var LinearComponentExtracter = function LinearComponentExtracter () {
	  this._lines = null;
	  this._isForcedToLineString = false;
	  if (arguments.length === 1) {
	    var lines = arguments[0];
	    this._lines = lines;
	  } else if (arguments.length === 2) {
	    var lines$1 = arguments[0];
	    var isForcedToLineString = arguments[1];
	    this._lines = lines$1;
	    this._isForcedToLineString = isForcedToLineString;
	  }
	};
	LinearComponentExtracter.prototype.filter = function filter (geom) {
	  if (this._isForcedToLineString && geom instanceof LinearRing) {
	    var line = geom.getFactory().createLineString(geom.getCoordinateSequence());
	    this._lines.add(line);
	    return null
	  }
	  if (geom instanceof LineString) { this._lines.add(geom); }
	};
	LinearComponentExtracter.prototype.setForceToLineString = function setForceToLineString (isForcedToLineString) {
	  this._isForcedToLineString = isForcedToLineString;
	};
	LinearComponentExtracter.prototype.interfaces_ = function interfaces_ () {
	  return [GeometryComponentFilter]
	};
	LinearComponentExtracter.prototype.getClass = function getClass () {
	  return LinearComponentExtracter
	};
	LinearComponentExtracter.getGeometry = function getGeometry () {
	  if (arguments.length === 1) {
	    var geom = arguments[0];
	    return geom.getFactory().buildGeometry(LinearComponentExtracter.getLines(geom))
	  } else if (arguments.length === 2) {
	    var geom$1 = arguments[0];
	    var forceToLineString = arguments[1];
	    return geom$1.getFactory().buildGeometry(LinearComponentExtracter.getLines(geom$1, forceToLineString))
	  }
	};
	LinearComponentExtracter.getLines = function getLines () {
	  if (arguments.length === 1) {
	    var geom = arguments[0];
	    return LinearComponentExtracter.getLines(geom, false)
	  } else if (arguments.length === 2) {
	    if (hasInterface(arguments[0], Collection) && hasInterface(arguments[1], Collection)) {
	      var geoms = arguments[0];
	      var lines$1 = arguments[1];
	      for (var i = geoms.iterator(); i.hasNext();) {
	        var g = i.next();
	        LinearComponentExtracter.getLines(g, lines$1);
	      }
	      return lines$1
	    } else if (arguments[0] instanceof Geometry && typeof arguments[1] === 'boolean') {
	      var geom$1 = arguments[0];
	      var forceToLineString = arguments[1];
	      var lines = new ArrayList();
	      geom$1.apply(new LinearComponentExtracter(lines, forceToLineString));
	      return lines
	    } else if (arguments[0] instanceof Geometry && hasInterface(arguments[1], Collection)) {
	      var geom$2 = arguments[0];
	      var lines$2 = arguments[1];
	      if (geom$2 instanceof LineString) {
	        lines$2.add(geom$2);
	      } else {
	        geom$2.apply(new LinearComponentExtracter(lines$2));
	      }
	      return lines$2
	    }
	  } else if (arguments.length === 3) {
	    if (typeof arguments[2] === 'boolean' && (hasInterface(arguments[0], Collection) && hasInterface(arguments[1], Collection))) {
	      var geoms$1 = arguments[0];
	      var lines$3 = arguments[1];
	      var forceToLineString$1 = arguments[2];
	      for (var i$1 = geoms$1.iterator(); i$1.hasNext();) {
	        var g$1 = i$1.next();
	        LinearComponentExtracter.getLines(g$1, lines$3, forceToLineString$1);
	      }
	      return lines$3
	    } else if (typeof arguments[2] === 'boolean' && (arguments[0] instanceof Geometry && hasInterface(arguments[1], Collection))) {
	      var geom$3 = arguments[0];
	      var lines$4 = arguments[1];
	      var forceToLineString$2 = arguments[2];
	      geom$3.apply(new LinearComponentExtracter(lines$4, forceToLineString$2));
	      return lines$4
	    }
	  }
	};

	var PointLocator = function PointLocator () {
	  this._boundaryRule = BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE;
	  this._isIn = null;
	  this._numBoundaries = null;
	  if (arguments.length === 0) ; else if (arguments.length === 1) {
	    var boundaryRule = arguments[0];
	    if (boundaryRule === null) { throw new IllegalArgumentException('Rule must be non-null') }
	    this._boundaryRule = boundaryRule;
	  }
	};
	PointLocator.prototype.locateInternal = function locateInternal () {
	    var this$1 = this;

	  if (arguments[0] instanceof Coordinate && arguments[1] instanceof Polygon) {
	    var p = arguments[0];
	    var poly = arguments[1];
	    if (poly.isEmpty()) { return Location.EXTERIOR }
	    var shell = poly.getExteriorRing();
	    var shellLoc = this.locateInPolygonRing(p, shell);
	    if (shellLoc === Location.EXTERIOR) { return Location.EXTERIOR }
	    if (shellLoc === Location.BOUNDARY) { return Location.BOUNDARY }
	    for (var i = 0; i < poly.getNumInteriorRing(); i++) {
	      var hole = poly.getInteriorRingN(i);
	      var holeLoc = this$1.locateInPolygonRing(p, hole);
	      if (holeLoc === Location.INTERIOR) { return Location.EXTERIOR }
	      if (holeLoc === Location.BOUNDARY) { return Location.BOUNDARY }
	    }
	    return Location.INTERIOR
	  } else if (arguments[0] instanceof Coordinate && arguments[1] instanceof LineString) {
	    var p$1 = arguments[0];
	    var l = arguments[1];
	    if (!l.getEnvelopeInternal().intersects(p$1)) { return Location.EXTERIOR }
	    var pt = l.getCoordinates();
	    if (!l.isClosed()) {
	      if (p$1.equals(pt[0]) || p$1.equals(pt[pt.length - 1])) {
	        return Location.BOUNDARY
	      }
	    }
	    if (CGAlgorithms.isOnLine(p$1, pt)) { return Location.INTERIOR }
	    return Location.EXTERIOR
	  } else if (arguments[0] instanceof Coordinate && arguments[1] instanceof Point) {
	    var p$2 = arguments[0];
	    var pt$1 = arguments[1];
	    var ptCoord = pt$1.getCoordinate();
	    if (ptCoord.equals2D(p$2)) { return Location.INTERIOR }
	    return Location.EXTERIOR
	  }
	};
	PointLocator.prototype.locateInPolygonRing = function locateInPolygonRing (p, ring) {
	  if (!ring.getEnvelopeInternal().intersects(p)) { return Location.EXTERIOR }
	  return CGAlgorithms.locatePointInRing(p, ring.getCoordinates())
	};
	PointLocator.prototype.intersects = function intersects (p, geom) {
	  return this.locate(p, geom) !== Location.EXTERIOR
	};
	PointLocator.prototype.updateLocationInfo = function updateLocationInfo (loc) {
	  if (loc === Location.INTERIOR) { this._isIn = true; }
	  if (loc === Location.BOUNDARY) { this._numBoundaries++; }
	};
	PointLocator.prototype.computeLocation = function computeLocation (p, geom) {
	    var this$1 = this;

	  if (geom instanceof Point) {
	    this.updateLocationInfo(this.locateInternal(p, geom));
	  }
	  if (geom instanceof LineString) {
	    this.updateLocationInfo(this.locateInternal(p, geom));
	  } else if (geom instanceof Polygon) {
	    this.updateLocationInfo(this.locateInternal(p, geom));
	  } else if (geom instanceof MultiLineString) {
	    var ml = geom;
	    for (var i = 0; i < ml.getNumGeometries(); i++) {
	      var l = ml.getGeometryN(i);
	      this$1.updateLocationInfo(this$1.locateInternal(p, l));
	    }
	  } else if (geom instanceof MultiPolygon) {
	    var mpoly = geom;
	    for (var i$1 = 0; i$1 < mpoly.getNumGeometries(); i$1++) {
	      var poly = mpoly.getGeometryN(i$1);
	      this$1.updateLocationInfo(this$1.locateInternal(p, poly));
	    }
	  } else if (geom instanceof GeometryCollection) {
	    var geomi = new GeometryCollectionIterator(geom);
	    while (geomi.hasNext()) {
	      var g2 = geomi.next();
	      if (g2 !== geom) { this$1.computeLocation(p, g2); }
	    }
	  }
	};
	PointLocator.prototype.locate = function locate (p, geom) {
	  if (geom.isEmpty()) { return Location.EXTERIOR }
	  if (geom instanceof LineString) {
	    return this.locateInternal(p, geom)
	  } else if (geom instanceof Polygon) {
	    return this.locateInternal(p, geom)
	  }
	  this._isIn = false;
	  this._numBoundaries = 0;
	  this.computeLocation(p, geom);
	  if (this._boundaryRule.isInBoundary(this._numBoundaries)) { return Location.BOUNDARY }
	  if (this._numBoundaries > 0 || this._isIn) { return Location.INTERIOR }
	  return Location.EXTERIOR
	};
	PointLocator.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	PointLocator.prototype.getClass = function getClass () {
	  return PointLocator
	};

	var GeometryLocation = function GeometryLocation () {
	  this._component = null;
	  this._segIndex = null;
	  this._pt = null;
	  if (arguments.length === 2) {
	    var component = arguments[0];
	    var pt = arguments[1];
	    GeometryLocation.call(this, component, GeometryLocation.INSIDE_AREA, pt);
	  } else if (arguments.length === 3) {
	    var component$1 = arguments[0];
	    var segIndex = arguments[1];
	    var pt$1 = arguments[2];
	    this._component = component$1;
	    this._segIndex = segIndex;
	    this._pt = pt$1;
	  }
	};

	var staticAccessors$38 = { INSIDE_AREA: { configurable: true } };
	GeometryLocation.prototype.isInsideArea = function isInsideArea () {
	  return this._segIndex === GeometryLocation.INSIDE_AREA
	};
	GeometryLocation.prototype.getCoordinate = function getCoordinate () {
	  return this._pt
	};
	GeometryLocation.prototype.getGeometryComponent = function getGeometryComponent () {
	  return this._component
	};
	GeometryLocation.prototype.getSegmentIndex = function getSegmentIndex () {
	  return this._segIndex
	};
	GeometryLocation.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	GeometryLocation.prototype.getClass = function getClass () {
	  return GeometryLocation
	};
	staticAccessors$38.INSIDE_AREA.get = function () { return -1 };

	Object.defineProperties( GeometryLocation, staticAccessors$38 );

	var PointExtracter = function PointExtracter (pts) {
	  this._pts = pts || null;
	};
	PointExtracter.prototype.filter = function filter (geom) {
	  if (geom instanceof Point) { this._pts.add(geom); }
	};
	PointExtracter.prototype.interfaces_ = function interfaces_ () {
	  return [GeometryFilter]
	};
	PointExtracter.prototype.getClass = function getClass () {
	  return PointExtracter
	};
	PointExtracter.getPoints = function getPoints () {
	  if (arguments.length === 1) {
	    var geom = arguments[0];
	    if (geom instanceof Point) {
	      return Collections.singletonList(geom)
	    }
	    return PointExtracter.getPoints(geom, new ArrayList())
	  } else if (arguments.length === 2) {
	    var geom$1 = arguments[0];
	    var list = arguments[1];
	    if (geom$1 instanceof Point) {
	      list.add(geom$1);
	    } else if (geom$1 instanceof GeometryCollection) {
	      geom$1.apply(new PointExtracter(list));
	    }
	    return list
	  }
	};

	var ConnectedElementLocationFilter = function ConnectedElementLocationFilter () {
	  this._locations = null;
	  var locations = arguments[0];
	  this._locations = locations;
	};
	ConnectedElementLocationFilter.prototype.filter = function filter (geom) {
	  if (geom instanceof Point || geom instanceof LineString || geom instanceof Polygon) { this._locations.add(new GeometryLocation(geom, 0, geom.getCoordinate())); }
	};
	ConnectedElementLocationFilter.prototype.interfaces_ = function interfaces_ () {
	  return [GeometryFilter]
	};
	ConnectedElementLocationFilter.prototype.getClass = function getClass () {
	  return ConnectedElementLocationFilter
	};
	ConnectedElementLocationFilter.getLocations = function getLocations (geom) {
	  var locations = new ArrayList();
	  geom.apply(new ConnectedElementLocationFilter(locations));
	  return locations
	};

	var DistanceOp = function DistanceOp () {
	  this._geom = null;
	  this._terminateDistance = 0.0;
	  this._ptLocator = new PointLocator();
	  this._minDistanceLocation = null;
	  this._minDistance = Double.MAX_VALUE;
	  if (arguments.length === 2) {
	    var g0 = arguments[0];
	    var g1 = arguments[1];
	    this._geom = [g0, g1];
	    this._terminateDistance = 0.0;
	  } else if (arguments.length === 3) {
	    var g0$1 = arguments[0];
	    var g1$1 = arguments[1];
	    var terminateDistance = arguments[2];
	    this._geom = new Array(2).fill(null);
	    this._geom[0] = g0$1;
	    this._geom[1] = g1$1;
	    this._terminateDistance = terminateDistance;
	  }
	};
	DistanceOp.prototype.computeContainmentDistance = function computeContainmentDistance () {
	    var this$1 = this;

	  if (arguments.length === 0) {
	    var locPtPoly = new Array(2).fill(null);
	    this.computeContainmentDistance(0, locPtPoly);
	    if (this._minDistance <= this._terminateDistance) { return null }
	    this.computeContainmentDistance(1, locPtPoly);
	  } else if (arguments.length === 2) {
	    var polyGeomIndex = arguments[0];
	    var locPtPoly$1 = arguments[1];
	    var locationsIndex = 1 - polyGeomIndex;
	    var polys = PolygonExtracter.getPolygons(this._geom[polyGeomIndex]);
	    if (polys.size() > 0) {
	      var insideLocs = ConnectedElementLocationFilter.getLocations(this._geom[locationsIndex]);
	      this.computeContainmentDistance(insideLocs, polys, locPtPoly$1);
	      if (this._minDistance <= this._terminateDistance) {
	        this._minDistanceLocation[locationsIndex] = locPtPoly$1[0];
	        this._minDistanceLocation[polyGeomIndex] = locPtPoly$1[1];
	        return null
	      }
	    }
	  } else if (arguments.length === 3) {
	    if (arguments[2] instanceof Array && (hasInterface(arguments[0], List) && hasInterface(arguments[1], List))) {
	      var locs = arguments[0];
	      var polys$1 = arguments[1];
	      var locPtPoly$2 = arguments[2];
	      for (var i = 0; i < locs.size(); i++) {
	        var loc = locs.get(i);
	        for (var j = 0; j < polys$1.size(); j++) {
	          this$1.computeContainmentDistance(loc, polys$1.get(j), locPtPoly$2);
	          if (this$1._minDistance <= this$1._terminateDistance) { return null }
	        }
	      }
	    } else if (arguments[2] instanceof Array && (arguments[0] instanceof GeometryLocation && arguments[1] instanceof Polygon)) {
	      var ptLoc = arguments[0];
	      var poly = arguments[1];
	      var locPtPoly$3 = arguments[2];
	      var pt = ptLoc.getCoordinate();
	      if (Location.EXTERIOR !== this._ptLocator.locate(pt, poly)) {
	        this._minDistance = 0.0;
	        locPtPoly$3[0] = ptLoc;
	        locPtPoly$3[1] = new GeometryLocation(poly, pt);

	        return null
	      }
	    }
	  }
	};
	DistanceOp.prototype.computeMinDistanceLinesPoints = function computeMinDistanceLinesPoints (lines, points, locGeom) {
	    var this$1 = this;

	  for (var i = 0; i < lines.size(); i++) {
	    var line = lines.get(i);
	    for (var j = 0; j < points.size(); j++) {
	      var pt = points.get(j);
	      this$1.computeMinDistance(line, pt, locGeom);
	      if (this$1._minDistance <= this$1._terminateDistance) { return null }
	    }
	  }
	};
	DistanceOp.prototype.computeFacetDistance = function computeFacetDistance () {
	  var locGeom = new Array(2).fill(null);
	  var lines0 = LinearComponentExtracter.getLines(this._geom[0]);
	  var lines1 = LinearComponentExtracter.getLines(this._geom[1]);
	  var pts0 = PointExtracter.getPoints(this._geom[0]);
	  var pts1 = PointExtracter.getPoints(this._geom[1]);
	  this.computeMinDistanceLines(lines0, lines1, locGeom);
	  this.updateMinDistance(locGeom, false);
	  if (this._minDistance <= this._terminateDistance) { return null }
	  locGeom[0] = null;
	  locGeom[1] = null;
	  this.computeMinDistanceLinesPoints(lines0, pts1, locGeom);
	  this.updateMinDistance(locGeom, false);
	  if (this._minDistance <= this._terminateDistance) { return null }
	  locGeom[0] = null;
	  locGeom[1] = null;
	  this.computeMinDistanceLinesPoints(lines1, pts0, locGeom);
	  this.updateMinDistance(locGeom, true);
	  if (this._minDistance <= this._terminateDistance) { return null }
	  locGeom[0] = null;
	  locGeom[1] = null;
	  this.computeMinDistancePoints(pts0, pts1, locGeom);
	  this.updateMinDistance(locGeom, false);
	};
	DistanceOp.prototype.nearestLocations = function nearestLocations () {
	  this.computeMinDistance();
	  return this._minDistanceLocation
	};
	DistanceOp.prototype.updateMinDistance = function updateMinDistance (locGeom, flip) {
	  if (locGeom[0] === null) { return null }
	  if (flip) {
	    this._minDistanceLocation[0] = locGeom[1];
	    this._minDistanceLocation[1] = locGeom[0];
	  } else {
	    this._minDistanceLocation[0] = locGeom[0];
	    this._minDistanceLocation[1] = locGeom[1];
	  }
	};
	DistanceOp.prototype.nearestPoints = function nearestPoints () {
	  this.computeMinDistance();
	  var nearestPts = [this._minDistanceLocation[0].getCoordinate(), this._minDistanceLocation[1].getCoordinate()];
	  return nearestPts
	};
	DistanceOp.prototype.computeMinDistance = function computeMinDistance () {
	    var this$1 = this;

	  if (arguments.length === 0) {
	    if (this._minDistanceLocation !== null) { return null }
	    this._minDistanceLocation = new Array(2).fill(null);
	    this.computeContainmentDistance();
	    if (this._minDistance <= this._terminateDistance) { return null }
	    this.computeFacetDistance();
	  } else if (arguments.length === 3) {
	    if (arguments[2] instanceof Array && (arguments[0] instanceof LineString && arguments[1] instanceof Point)) {
	      var line = arguments[0];
	      var pt = arguments[1];
	      var locGeom = arguments[2];
	      if (line.getEnvelopeInternal().distance(pt.getEnvelopeInternal()) > this._minDistance) { return null }
	      var coord0 = line.getCoordinates();
	      var coord = pt.getCoordinate();
	      for (var i = 0; i < coord0.length - 1; i++) {
	        var dist = CGAlgorithms.distancePointLine(coord, coord0[i], coord0[i + 1]);
	        if (dist < this$1._minDistance) {
	          this$1._minDistance = dist;
	          var seg = new LineSegment(coord0[i], coord0[i + 1]);
	          var segClosestPoint = seg.closestPoint(coord);
	          locGeom[0] = new GeometryLocation(line, i, segClosestPoint);
	          locGeom[1] = new GeometryLocation(pt, 0, coord);
	        }
	        if (this$1._minDistance <= this$1._terminateDistance) { return null }
	      }
	    } else if (arguments[2] instanceof Array && (arguments[0] instanceof LineString && arguments[1] instanceof LineString)) {
	      var line0 = arguments[0];
	      var line1 = arguments[1];
	      var locGeom$1 = arguments[2];
	      if (line0.getEnvelopeInternal().distance(line1.getEnvelopeInternal()) > this._minDistance) { return null }
	      var coord0$1 = line0.getCoordinates();
	      var coord1 = line1.getCoordinates();
	      for (var i$1 = 0; i$1 < coord0$1.length - 1; i$1++) {
	        for (var j = 0; j < coord1.length - 1; j++) {
	          var dist$1 = CGAlgorithms.distanceLineLine(coord0$1[i$1], coord0$1[i$1 + 1], coord1[j], coord1[j + 1]);
	          if (dist$1 < this$1._minDistance) {
	            this$1._minDistance = dist$1;
	            var seg0 = new LineSegment(coord0$1[i$1], coord0$1[i$1 + 1]);
	            var seg1 = new LineSegment(coord1[j], coord1[j + 1]);
	            var closestPt = seg0.closestPoints(seg1);
	            locGeom$1[0] = new GeometryLocation(line0, i$1, closestPt[0]);
	            locGeom$1[1] = new GeometryLocation(line1, j, closestPt[1]);
	          }
	          if (this$1._minDistance <= this$1._terminateDistance) { return null }
	        }
	      }
	    }
	  }
	};
	DistanceOp.prototype.computeMinDistancePoints = function computeMinDistancePoints (points0, points1, locGeom) {
	    var this$1 = this;

	  for (var i = 0; i < points0.size(); i++) {
	    var pt0 = points0.get(i);
	    for (var j = 0; j < points1.size(); j++) {
	      var pt1 = points1.get(j);
	      var dist = pt0.getCoordinate().distance(pt1.getCoordinate());
	      if (dist < this$1._minDistance) {
	        this$1._minDistance = dist;
	        locGeom[0] = new GeometryLocation(pt0, 0, pt0.getCoordinate());
	        locGeom[1] = new GeometryLocation(pt1, 0, pt1.getCoordinate());
	      }
	      if (this$1._minDistance <= this$1._terminateDistance) { return null }
	    }
	  }
	};
	DistanceOp.prototype.distance = function distance () {
	  if (this._geom[0] === null || this._geom[1] === null) { throw new IllegalArgumentException('null geometries are not supported') }
	  if (this._geom[0].isEmpty() || this._geom[1].isEmpty()) { return 0.0 }
	  this.computeMinDistance();
	  return this._minDistance
	};
	DistanceOp.prototype.computeMinDistanceLines = function computeMinDistanceLines (lines0, lines1, locGeom) {
	    var this$1 = this;

	  for (var i = 0; i < lines0.size(); i++) {
	    var line0 = lines0.get(i);
	    for (var j = 0; j < lines1.size(); j++) {
	      var line1 = lines1.get(j);
	      this$1.computeMinDistance(line0, line1, locGeom);
	      if (this$1._minDistance <= this$1._terminateDistance) { return null }
	    }
	  }
	};
	DistanceOp.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	DistanceOp.prototype.getClass = function getClass () {
	  return DistanceOp
	};
	DistanceOp.distance = function distance (g0, g1) {
	  var distOp = new DistanceOp(g0, g1);
	  return distOp.distance()
	};
	DistanceOp.isWithinDistance = function isWithinDistance (g0, g1, distance) {
	  var distOp = new DistanceOp(g0, g1, distance);
	  return distOp.distance() <= distance
	};
	DistanceOp.nearestPoints = function nearestPoints (g0, g1) {
	  var distOp = new DistanceOp(g0, g1);
	  return distOp.nearestPoints()
	};

	var PointPairDistance$2 = function PointPairDistance () {
	  this._pt = [new Coordinate(), new Coordinate()];
	  this._distance = Double.NaN;
	  this._isNull = true;
	};
	PointPairDistance$2.prototype.getCoordinates = function getCoordinates () {
	  return this._pt
	};
	PointPairDistance$2.prototype.getCoordinate = function getCoordinate (i) {
	  return this._pt[i]
	};
	PointPairDistance$2.prototype.setMinimum = function setMinimum () {
	  if (arguments.length === 1) {
	    var ptDist = arguments[0];
	    this.setMinimum(ptDist._pt[0], ptDist._pt[1]);
	  } else if (arguments.length === 2) {
	    var p0 = arguments[0];
	    var p1 = arguments[1];
	    if (this._isNull) {
	      this.initialize(p0, p1);
	      return null
	    }
	    var dist = p0.distance(p1);
	    if (dist < this._distance) { this.initialize(p0, p1, dist); }
	  }
	};
	PointPairDistance$2.prototype.initialize = function initialize () {
	  if (arguments.length === 0) {
	    this._isNull = true;
	  } else if (arguments.length === 2) {
	    var p0 = arguments[0];
	    var p1 = arguments[1];
	    this._pt[0].setCoordinate(p0);
	    this._pt[1].setCoordinate(p1);
	    this._distance = p0.distance(p1);
	    this._isNull = false;
	  } else if (arguments.length === 3) {
	    var p0$1 = arguments[0];
	    var p1$1 = arguments[1];
	    var distance = arguments[2];
	    this._pt[0].setCoordinate(p0$1);
	    this._pt[1].setCoordinate(p1$1);
	    this._distance = distance;
	    this._isNull = false;
	  }
	};
	PointPairDistance$2.prototype.toString = function toString () {
	  return WKTWriter.toLineString(this._pt[0], this._pt[1])
	};
	PointPairDistance$2.prototype.getDistance = function getDistance () {
	  return this._distance
	};
	PointPairDistance$2.prototype.setMaximum = function setMaximum () {
	  if (arguments.length === 1) {
	    var ptDist = arguments[0];
	    this.setMaximum(ptDist._pt[0], ptDist._pt[1]);
	  } else if (arguments.length === 2) {
	    var p0 = arguments[0];
	    var p1 = arguments[1];
	    if (this._isNull) {
	      this.initialize(p0, p1);
	      return null
	    }
	    var dist = p0.distance(p1);
	    if (dist > this._distance) { this.initialize(p0, p1, dist); }
	  }
	};
	PointPairDistance$2.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	PointPairDistance$2.prototype.getClass = function getClass () {
	  return PointPairDistance$2
	};

	var DistanceToPoint = function DistanceToPoint () {};

	DistanceToPoint.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	DistanceToPoint.prototype.getClass = function getClass () {
	  return DistanceToPoint
	};
	DistanceToPoint.computeDistance = function computeDistance () {
	  if (arguments[2] instanceof PointPairDistance$2 && (arguments[0] instanceof LineString && arguments[1] instanceof Coordinate)) {
	    var line = arguments[0];
	    var pt = arguments[1];
	    var ptDist = arguments[2];
	    var tempSegment = new LineSegment();
	    var coords = line.getCoordinates();
	    for (var i = 0; i < coords.length - 1; i++) {
	      tempSegment.setCoordinates(coords[i], coords[i + 1]);
	      var closestPt = tempSegment.closestPoint(pt);
	      ptDist.setMinimum(closestPt, pt);
	    }
	  } else if (arguments[2] instanceof PointPairDistance$2 && (arguments[0] instanceof Polygon && arguments[1] instanceof Coordinate)) {
	    var poly = arguments[0];
	    var pt$1 = arguments[1];
	    var ptDist$1 = arguments[2];
	    DistanceToPoint.computeDistance(poly.getExteriorRing(), pt$1, ptDist$1);
	    for (var i$1 = 0; i$1 < poly.getNumInteriorRing(); i$1++) {
	      DistanceToPoint.computeDistance(poly.getInteriorRingN(i$1), pt$1, ptDist$1);
	    }
	  } else if (arguments[2] instanceof PointPairDistance$2 && (arguments[0] instanceof Geometry && arguments[1] instanceof Coordinate)) {
	    var geom = arguments[0];
	    var pt$2 = arguments[1];
	    var ptDist$2 = arguments[2];
	    if (geom instanceof LineString) {
	      DistanceToPoint.computeDistance(geom, pt$2, ptDist$2);
	    } else if (geom instanceof Polygon) {
	      DistanceToPoint.computeDistance(geom, pt$2, ptDist$2);
	    } else if (geom instanceof GeometryCollection) {
	      var gc = geom;
	      for (var i$2 = 0; i$2 < gc.getNumGeometries(); i$2++) {
	        var g = gc.getGeometryN(i$2);
	        DistanceToPoint.computeDistance(g, pt$2, ptDist$2);
	      }
	    } else {
	      ptDist$2.setMinimum(geom.getCoordinate(), pt$2);
	    }
	  } else if (arguments[2] instanceof PointPairDistance$2 && (arguments[0] instanceof LineSegment && arguments[1] instanceof Coordinate)) {
	    var segment = arguments[0];
	    var pt$3 = arguments[1];
	    var ptDist$3 = arguments[2];
	    var closestPt$1 = segment.closestPoint(pt$3);
	    ptDist$3.setMinimum(closestPt$1, pt$3);
	  }
	};

	var DiscreteHausdorffDistance = function DiscreteHausdorffDistance () {
	  this._g0 = null;
	  this._g1 = null;
	  this._ptDist = new PointPairDistance$2();
	  this._densifyFrac = 0.0;
	  var g0 = arguments[0];
	  var g1 = arguments[1];
	  this._g0 = g0;
	  this._g1 = g1;
	};

	var staticAccessors$39 = { MaxPointDistanceFilter: { configurable: true },MaxDensifiedByFractionDistanceFilter: { configurable: true } };
	DiscreteHausdorffDistance.prototype.getCoordinates = function getCoordinates () {
	  return this._ptDist.getCoordinates()
	};
	DiscreteHausdorffDistance.prototype.setDensifyFraction = function setDensifyFraction (densifyFrac) {
	  if (densifyFrac > 1.0 || densifyFrac <= 0.0) { throw new IllegalArgumentException('Fraction is not in range (0.0 - 1.0]') }
	  this._densifyFrac = densifyFrac;
	};
	DiscreteHausdorffDistance.prototype.compute = function compute (g0, g1) {
	  this.computeOrientedDistance(g0, g1, this._ptDist);
	  this.computeOrientedDistance(g1, g0, this._ptDist);
	};
	DiscreteHausdorffDistance.prototype.distance = function distance () {
	  this.compute(this._g0, this._g1);
	  return this._ptDist.getDistance()
	};
	DiscreteHausdorffDistance.prototype.computeOrientedDistance = function computeOrientedDistance (discreteGeom, geom, ptDist) {
	  var distFilter = new MaxPointDistanceFilter$1(geom);
	  discreteGeom.apply(distFilter);
	  ptDist.setMaximum(distFilter.getMaxPointDistance());
	  if (this._densifyFrac > 0) {
	    var fracFilter = new MaxDensifiedByFractionDistanceFilter(geom, this._densifyFrac);
	    discreteGeom.apply(fracFilter);
	    ptDist.setMaximum(fracFilter.getMaxPointDistance());
	  }
	};
	DiscreteHausdorffDistance.prototype.orientedDistance = function orientedDistance () {
	  this.computeOrientedDistance(this._g0, this._g1, this._ptDist);
	  return this._ptDist.getDistance()
	};
	DiscreteHausdorffDistance.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	DiscreteHausdorffDistance.prototype.getClass = function getClass () {
	  return DiscreteHausdorffDistance
	};
	DiscreteHausdorffDistance.distance = function distance () {
	  if (arguments.length === 2) {
	    var g0 = arguments[0];
	    var g1 = arguments[1];
	    var dist = new DiscreteHausdorffDistance(g0, g1);
	    return dist.distance()
	  } else if (arguments.length === 3) {
	    var g0$1 = arguments[0];
	    var g1$1 = arguments[1];
	    var densifyFrac = arguments[2];
	    var dist$1 = new DiscreteHausdorffDistance(g0$1, g1$1);
	    dist$1.setDensifyFraction(densifyFrac);
	    return dist$1.distance()
	  }
	};
	staticAccessors$39.MaxPointDistanceFilter.get = function () { return MaxPointDistanceFilter$1 };
	staticAccessors$39.MaxDensifiedByFractionDistanceFilter.get = function () { return MaxDensifiedByFractionDistanceFilter };

	Object.defineProperties( DiscreteHausdorffDistance, staticAccessors$39 );

	var MaxPointDistanceFilter$1 = function MaxPointDistanceFilter () {
	  this._maxPtDist = new PointPairDistance$2();
	  this._minPtDist = new PointPairDistance$2();
	  this._euclideanDist = new DistanceToPoint();
	  this._geom = null;
	  var geom = arguments[0];
	  this._geom = geom;
	};
	MaxPointDistanceFilter$1.prototype.filter = function filter (pt) {
	  this._minPtDist.initialize();
	  DistanceToPoint.computeDistance(this._geom, pt, this._minPtDist);
	  this._maxPtDist.setMaximum(this._minPtDist);
	};
	MaxPointDistanceFilter$1.prototype.getMaxPointDistance = function getMaxPointDistance () {
	  return this._maxPtDist
	};
	MaxPointDistanceFilter$1.prototype.interfaces_ = function interfaces_ () {
	  return [CoordinateFilter]
	};
	MaxPointDistanceFilter$1.prototype.getClass = function getClass () {
	  return MaxPointDistanceFilter$1
	};

	var MaxDensifiedByFractionDistanceFilter = function MaxDensifiedByFractionDistanceFilter () {
	  this._maxPtDist = new PointPairDistance$2();
	  this._minPtDist = new PointPairDistance$2();
	  this._geom = null;
	  this._numSubSegs = 0;
	  var geom = arguments[0];
	  var fraction = arguments[1];
	  this._geom = geom;
	  this._numSubSegs = Math.trunc(Math.round(1.0 / fraction));
	};
	MaxDensifiedByFractionDistanceFilter.prototype.filter = function filter (seq, index) {
	    var this$1 = this;

	  if (index === 0) { return null }
	  var p0 = seq.getCoordinate(index - 1);
	  var p1 = seq.getCoordinate(index);
	  var delx = (p1.x - p0.x) / this._numSubSegs;
	  var dely = (p1.y - p0.y) / this._numSubSegs;
	  for (var i = 0; i < this._numSubSegs; i++) {
	    var x = p0.x + i * delx;
	    var y = p0.y + i * dely;
	    var pt = new Coordinate(x, y);
	    this$1._minPtDist.initialize();
	    DistanceToPoint.computeDistance(this$1._geom, pt, this$1._minPtDist);
	    this$1._maxPtDist.setMaximum(this$1._minPtDist);
	  }
	};
	MaxDensifiedByFractionDistanceFilter.prototype.isDone = function isDone () {
	  return false
	};
	MaxDensifiedByFractionDistanceFilter.prototype.isGeometryChanged = function isGeometryChanged () {
	  return false
	};
	MaxDensifiedByFractionDistanceFilter.prototype.getMaxPointDistance = function getMaxPointDistance () {
	  return this._maxPtDist
	};
	MaxDensifiedByFractionDistanceFilter.prototype.interfaces_ = function interfaces_ () {
	  return [CoordinateSequenceFilter]
	};
	MaxDensifiedByFractionDistanceFilter.prototype.getClass = function getClass () {
	  return MaxDensifiedByFractionDistanceFilter
	};

	var BufferDistanceValidator = function BufferDistanceValidator (input, bufDistance, result) {
	  this._minValidDistance = null;
	  this._maxValidDistance = null;
	  this._minDistanceFound = null;
	  this._maxDistanceFound = null;
	  this._isValid = true;
	  this._errMsg = null;
	  this._errorLocation = null;
	  this._errorIndicator = null;
	  this._input = input || null;
	  this._bufDistance = bufDistance || null;
	  this._result = result || null;
	};

	var staticAccessors$37 = { VERBOSE: { configurable: true },MAX_DISTANCE_DIFF_FRAC: { configurable: true } };
	BufferDistanceValidator.prototype.checkMaximumDistance = function checkMaximumDistance (input, bufCurve, maxDist) {
	  var haus = new DiscreteHausdorffDistance(bufCurve, input);
	  haus.setDensifyFraction(0.25);
	  this._maxDistanceFound = haus.orientedDistance();
	  if (this._maxDistanceFound > maxDist) {
	    this._isValid = false;
	    var pts = haus.getCoordinates();
	    this._errorLocation = pts[1];
	    this._errorIndicator = input.getFactory().createLineString(pts);
	    this._errMsg = 'Distance between buffer curve and input is too large (' + this._maxDistanceFound + ' at ' + WKTWriter.toLineString(pts[0], pts[1]) + ')';
	  }
	};
	BufferDistanceValidator.prototype.isValid = function isValid () {
	  var posDistance = Math.abs(this._bufDistance);
	  var distDelta = BufferDistanceValidator.MAX_DISTANCE_DIFF_FRAC * posDistance;
	  this._minValidDistance = posDistance - distDelta;
	  this._maxValidDistance = posDistance + distDelta;
	  if (this._input.isEmpty() || this._result.isEmpty()) { return true }
	  if (this._bufDistance > 0.0) {
	    this.checkPositiveValid();
	  } else {
	    this.checkNegativeValid();
	  }
	  if (BufferDistanceValidator.VERBOSE) {
	    System.out.println('Min Dist= ' + this._minDistanceFound + '  err= ' + (1.0 - this._minDistanceFound / this._bufDistance) + '  Max Dist= ' + this._maxDistanceFound + '  err= ' + (this._maxDistanceFound / this._bufDistance - 1.0));
	  }
	  return this._isValid
	};
	BufferDistanceValidator.prototype.checkNegativeValid = function checkNegativeValid () {
	  if (!(this._input instanceof Polygon || this._input instanceof MultiPolygon || this._input instanceof GeometryCollection)) {
	    return null
	  }
	  var inputCurve = this.getPolygonLines(this._input);
	  this.checkMinimumDistance(inputCurve, this._result, this._minValidDistance);
	  if (!this._isValid) { return null }
	  this.checkMaximumDistance(inputCurve, this._result, this._maxValidDistance);
	};
	BufferDistanceValidator.prototype.getErrorIndicator = function getErrorIndicator () {
	  return this._errorIndicator
	};
	BufferDistanceValidator.prototype.checkMinimumDistance = function checkMinimumDistance (g1, g2, minDist) {
	  var distOp = new DistanceOp(g1, g2, minDist);
	  this._minDistanceFound = distOp.distance();
	  if (this._minDistanceFound < minDist) {
	    this._isValid = false;
	    var pts = distOp.nearestPoints();
	    this._errorLocation = distOp.nearestPoints()[1];
	    this._errorIndicator = g1.getFactory().createLineString(pts);
	    this._errMsg = 'Distance between buffer curve and input is too small (' + this._minDistanceFound + ' at ' + WKTWriter.toLineString(pts[0], pts[1]) + ' )';
	  }
	};
	BufferDistanceValidator.prototype.checkPositiveValid = function checkPositiveValid () {
	  var bufCurve = this._result.getBoundary();
	  this.checkMinimumDistance(this._input, bufCurve, this._minValidDistance);
	  if (!this._isValid) { return null }
	  this.checkMaximumDistance(this._input, bufCurve, this._maxValidDistance);
	};
	BufferDistanceValidator.prototype.getErrorLocation = function getErrorLocation () {
	  return this._errorLocation
	};
	BufferDistanceValidator.prototype.getPolygonLines = function getPolygonLines (g) {
	  var lines = new ArrayList();
	  var lineExtracter = new LinearComponentExtracter(lines);
	  var polys = PolygonExtracter.getPolygons(g);
	  for (var i = polys.iterator(); i.hasNext();) {
	    var poly = i.next();
	    poly.apply(lineExtracter);
	  }
	  return g.getFactory().buildGeometry(lines)
	};
	BufferDistanceValidator.prototype.getErrorMessage = function getErrorMessage () {
	  return this._errMsg
	};
	BufferDistanceValidator.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	BufferDistanceValidator.prototype.getClass = function getClass () {
	  return BufferDistanceValidator
	};
	staticAccessors$37.VERBOSE.get = function () { return false };
	staticAccessors$37.MAX_DISTANCE_DIFF_FRAC.get = function () { return 0.012 };

	Object.defineProperties( BufferDistanceValidator, staticAccessors$37 );

	var BufferResultValidator = function BufferResultValidator (input, distance, result) {
	  this._isValid = true;
	  this._errorMsg = null;
	  this._errorLocation = null;
	  this._errorIndicator = null;
	  this._input = input || null;
	  this._distance = distance || null;
	  this._result = result || null;
	};

	var staticAccessors$40 = { VERBOSE: { configurable: true },MAX_ENV_DIFF_FRAC: { configurable: true } };
	BufferResultValidator.prototype.isValid = function isValid () {
	  this.checkPolygonal();
	  if (!this._isValid) { return this._isValid }
	  this.checkExpectedEmpty();
	  if (!this._isValid) { return this._isValid }
	  this.checkEnvelope();
	  if (!this._isValid) { return this._isValid }
	  this.checkArea();
	  if (!this._isValid) { return this._isValid }
	  this.checkDistance();
	  return this._isValid
	};
	BufferResultValidator.prototype.checkEnvelope = function checkEnvelope () {
	  if (this._distance < 0.0) { return null }
	  var padding = this._distance * BufferResultValidator.MAX_ENV_DIFF_FRAC;
	  if (padding === 0.0) { padding = 0.001; }
	  var expectedEnv = new Envelope(this._input.getEnvelopeInternal());
	  expectedEnv.expandBy(this._distance);
	  var bufEnv = new Envelope(this._result.getEnvelopeInternal());
	  bufEnv.expandBy(padding);
	  if (!bufEnv.contains(expectedEnv)) {
	    this._isValid = false;
	    this._errorMsg = 'Buffer envelope is incorrect';
	    this._errorIndicator = this._input.getFactory().toGeometry(bufEnv);
	  }
	  this.report('Envelope');
	};
	BufferResultValidator.prototype.checkDistance = function checkDistance () {
	  var distValid = new BufferDistanceValidator(this._input, this._distance, this._result);
	  if (!distValid.isValid()) {
	    this._isValid = false;
	    this._errorMsg = distValid.getErrorMessage();
	    this._errorLocation = distValid.getErrorLocation();
	    this._errorIndicator = distValid.getErrorIndicator();
	  }
	  this.report('Distance');
	};
	BufferResultValidator.prototype.checkArea = function checkArea () {
	  var inputArea = this._input.getArea();
	  var resultArea = this._result.getArea();
	  if (this._distance > 0.0 && inputArea > resultArea) {
	    this._isValid = false;
	    this._errorMsg = 'Area of positive buffer is smaller than input';
	    this._errorIndicator = this._result;
	  }
	  if (this._distance < 0.0 && inputArea < resultArea) {
	    this._isValid = false;
	    this._errorMsg = 'Area of negative buffer is larger than input';
	    this._errorIndicator = this._result;
	  }
	  this.report('Area');
	};
	BufferResultValidator.prototype.checkPolygonal = function checkPolygonal () {
	  if (!(this._result instanceof Polygon || this._result instanceof MultiPolygon)) { this._isValid = false; }
	  this._errorMsg = 'Result is not polygonal';
	  this._errorIndicator = this._result;
	  this.report('Polygonal');
	};
	BufferResultValidator.prototype.getErrorIndicator = function getErrorIndicator () {
	  return this._errorIndicator
	};
	BufferResultValidator.prototype.getErrorLocation = function getErrorLocation () {
	  return this._errorLocation
	};
	BufferResultValidator.prototype.checkExpectedEmpty = function checkExpectedEmpty () {
	  if (this._input.getDimension() >= 2) { return null }
	  if (this._distance > 0.0) { return null }
	  if (!this._result.isEmpty()) {
	    this._isValid = false;
	    this._errorMsg = 'Result is non-empty';
	    this._errorIndicator = this._result;
	  }
	  this.report('ExpectedEmpty');
	};
	BufferResultValidator.prototype.report = function report (checkName) {
	  if (!BufferResultValidator.VERBOSE) { return null }
	  System.out.println('Check ' + checkName + ': ' + (this._isValid ? 'passed' : 'FAILED'));
	};
	BufferResultValidator.prototype.getErrorMessage = function getErrorMessage () {
	  return this._errorMsg
	};
	BufferResultValidator.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	BufferResultValidator.prototype.getClass = function getClass () {
	  return BufferResultValidator
	};
	BufferResultValidator.isValidMsg = function isValidMsg (g, distance, result) {
	  var validator = new BufferResultValidator(g, distance, result);
	  if (!validator.isValid()) { return validator.getErrorMessage() }
	  return null
	};
	BufferResultValidator.isValid = function isValid (g, distance, result) {
	  var validator = new BufferResultValidator(g, distance, result);
	  if (validator.isValid()) { return true }
	  return false
	};
	staticAccessors$40.VERBOSE.get = function () { return false };
	staticAccessors$40.MAX_ENV_DIFF_FRAC.get = function () { return 0.012 };

	Object.defineProperties( BufferResultValidator, staticAccessors$40 );

	// operation.buffer

	var BasicSegmentString = function BasicSegmentString () {
	  this._pts = null;
	  this._data = null;
	  var pts = arguments[0];
	  var data = arguments[1];
	  this._pts = pts;
	  this._data = data;
	};
	BasicSegmentString.prototype.getCoordinates = function getCoordinates () {
	  return this._pts
	};
	BasicSegmentString.prototype.size = function size () {
	  return this._pts.length
	};
	BasicSegmentString.prototype.getCoordinate = function getCoordinate (i) {
	  return this._pts[i]
	};
	BasicSegmentString.prototype.isClosed = function isClosed () {
	  return this._pts[0].equals(this._pts[this._pts.length - 1])
	};
	BasicSegmentString.prototype.getSegmentOctant = function getSegmentOctant (index) {
	  if (index === this._pts.length - 1) { return -1 }
	  return Octant.octant(this.getCoordinate(index), this.getCoordinate(index + 1))
	};
	BasicSegmentString.prototype.setData = function setData (data) {
	  this._data = data;
	};
	BasicSegmentString.prototype.getData = function getData () {
	  return this._data
	};
	BasicSegmentString.prototype.toString = function toString () {
	  return WKTWriter.toLineString(new CoordinateArraySequence(this._pts))
	};
	BasicSegmentString.prototype.interfaces_ = function interfaces_ () {
	  return [SegmentString]
	};
	BasicSegmentString.prototype.getClass = function getClass () {
	  return BasicSegmentString
	};

	var InteriorIntersectionFinder = function InteriorIntersectionFinder () {
	  this._findAllIntersections = false;
	  this._isCheckEndSegmentsOnly = false;
	  this._li = null;
	  this._interiorIntersection = null;
	  this._intSegments = null;
	  this._intersections = new ArrayList();
	  this._intersectionCount = 0;
	  this._keepIntersections = true;
	  var li = arguments[0];
	  this._li = li;
	  this._interiorIntersection = null;
	};
	InteriorIntersectionFinder.prototype.getInteriorIntersection = function getInteriorIntersection () {
	  return this._interiorIntersection
	};
	InteriorIntersectionFinder.prototype.setCheckEndSegmentsOnly = function setCheckEndSegmentsOnly (isCheckEndSegmentsOnly) {
	  this._isCheckEndSegmentsOnly = isCheckEndSegmentsOnly;
	};
	InteriorIntersectionFinder.prototype.getIntersectionSegments = function getIntersectionSegments () {
	  return this._intSegments
	};
	InteriorIntersectionFinder.prototype.count = function count () {
	  return this._intersectionCount
	};
	InteriorIntersectionFinder.prototype.getIntersections = function getIntersections () {
	  return this._intersections
	};
	InteriorIntersectionFinder.prototype.setFindAllIntersections = function setFindAllIntersections (findAllIntersections) {
	  this._findAllIntersections = findAllIntersections;
	};
	InteriorIntersectionFinder.prototype.setKeepIntersections = function setKeepIntersections (keepIntersections) {
	  this._keepIntersections = keepIntersections;
	};
	InteriorIntersectionFinder.prototype.processIntersections = function processIntersections (e0, segIndex0, e1, segIndex1) {
	  if (!this._findAllIntersections && this.hasIntersection()) { return null }
	  if (e0 === e1 && segIndex0 === segIndex1) { return null }
	  if (this._isCheckEndSegmentsOnly) {
	    var isEndSegPresent = this.isEndSegment(e0, segIndex0) || this.isEndSegment(e1, segIndex1);
	    if (!isEndSegPresent) { return null }
	  }
	  var p00 = e0.getCoordinates()[segIndex0];
	  var p01 = e0.getCoordinates()[segIndex0 + 1];
	  var p10 = e1.getCoordinates()[segIndex1];
	  var p11 = e1.getCoordinates()[segIndex1 + 1];
	  this._li.computeIntersection(p00, p01, p10, p11);
	  if (this._li.hasIntersection()) {
	    if (this._li.isInteriorIntersection()) {
	      this._intSegments = new Array(4).fill(null);
	      this._intSegments[0] = p00;
	      this._intSegments[1] = p01;
	      this._intSegments[2] = p10;
	      this._intSegments[3] = p11;
	      this._interiorIntersection = this._li.getIntersection(0);
	      if (this._keepIntersections) { this._intersections.add(this._interiorIntersection); }
	      this._intersectionCount++;
	    }
	  }
	};
	InteriorIntersectionFinder.prototype.isEndSegment = function isEndSegment (segStr, index) {
	  if (index === 0) { return true }
	  if (index >= segStr.size() - 2) { return true }
	  return false
	};
	InteriorIntersectionFinder.prototype.hasIntersection = function hasIntersection () {
	  return this._interiorIntersection !== null
	};
	InteriorIntersectionFinder.prototype.isDone = function isDone () {
	  if (this._findAllIntersections) { return false }
	  return this._interiorIntersection !== null
	};
	InteriorIntersectionFinder.prototype.interfaces_ = function interfaces_ () {
	  return [SegmentIntersector]
	};
	InteriorIntersectionFinder.prototype.getClass = function getClass () {
	  return InteriorIntersectionFinder
	};
	InteriorIntersectionFinder.createAllIntersectionsFinder = function createAllIntersectionsFinder (li) {
	  var finder = new InteriorIntersectionFinder(li);
	  finder.setFindAllIntersections(true);
	  return finder
	};
	InteriorIntersectionFinder.createAnyIntersectionFinder = function createAnyIntersectionFinder (li) {
	  return new InteriorIntersectionFinder(li)
	};
	InteriorIntersectionFinder.createIntersectionCounter = function createIntersectionCounter (li) {
	  var finder = new InteriorIntersectionFinder(li);
	  finder.setFindAllIntersections(true);
	  finder.setKeepIntersections(false);
	  return finder
	};

	var FastNodingValidator = function FastNodingValidator () {
	  this._li = new RobustLineIntersector();
	  this._segStrings = null;
	  this._findAllIntersections = false;
	  this._segInt = null;
	  this._isValid = true;
	  var segStrings = arguments[0];
	  this._segStrings = segStrings;
	};
	FastNodingValidator.prototype.execute = function execute () {
	  if (this._segInt !== null) { return null }
	  this.checkInteriorIntersections();
	};
	FastNodingValidator.prototype.getIntersections = function getIntersections () {
	  return this._segInt.getIntersections()
	};
	FastNodingValidator.prototype.isValid = function isValid () {
	  this.execute();
	  return this._isValid
	};
	FastNodingValidator.prototype.setFindAllIntersections = function setFindAllIntersections (findAllIntersections) {
	  this._findAllIntersections = findAllIntersections;
	};
	FastNodingValidator.prototype.checkInteriorIntersections = function checkInteriorIntersections () {
	  this._isValid = true;
	  this._segInt = new InteriorIntersectionFinder(this._li);
	  this._segInt.setFindAllIntersections(this._findAllIntersections);
	  var noder = new MCIndexNoder();
	  noder.setSegmentIntersector(this._segInt);
	  noder.computeNodes(this._segStrings);
	  if (this._segInt.hasIntersection()) {
	    this._isValid = false;
	    return null
	  }
	};
	FastNodingValidator.prototype.checkValid = function checkValid () {
	  this.execute();
	  if (!this._isValid) { throw new TopologyException(this.getErrorMessage(), this._segInt.getInteriorIntersection()) }
	};
	FastNodingValidator.prototype.getErrorMessage = function getErrorMessage () {
	  if (this._isValid) { return 'no intersections found' }
	  var intSegs = this._segInt.getIntersectionSegments();
	  return 'found non-noded intersection between ' + WKTWriter.toLineString(intSegs[0], intSegs[1]) + ' and ' + WKTWriter.toLineString(intSegs[2], intSegs[3])
	};
	FastNodingValidator.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	FastNodingValidator.prototype.getClass = function getClass () {
	  return FastNodingValidator
	};
	FastNodingValidator.computeIntersections = function computeIntersections (segStrings) {
	  var nv = new FastNodingValidator(segStrings);
	  nv.setFindAllIntersections(true);
	  nv.isValid();
	  return nv.getIntersections()
	};

	var EdgeNodingValidator = function EdgeNodingValidator () {
	  this._nv = null;
	  var edges = arguments[0];
	  this._nv = new FastNodingValidator(EdgeNodingValidator.toSegmentStrings(edges));
	};
	EdgeNodingValidator.prototype.checkValid = function checkValid () {
	  this._nv.checkValid();
	};
	EdgeNodingValidator.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	EdgeNodingValidator.prototype.getClass = function getClass () {
	  return EdgeNodingValidator
	};
	EdgeNodingValidator.toSegmentStrings = function toSegmentStrings (edges) {
	  var segStrings = new ArrayList();
	  for (var i = edges.iterator(); i.hasNext();) {
	    var e = i.next();
	    segStrings.add(new BasicSegmentString(e.getCoordinates(), e));
	  }
	  return segStrings
	};
	EdgeNodingValidator.checkValid = function checkValid (edges) {
	  var validator = new EdgeNodingValidator(edges);
	  validator.checkValid();
	};

	var GeometryCollectionMapper = function GeometryCollectionMapper (mapOp) {
	  this._mapOp = mapOp;
	};
	GeometryCollectionMapper.prototype.map = function map (gc) {
	    var this$1 = this;

	  var mapped = new ArrayList();
	  for (var i = 0; i < gc.getNumGeometries(); i++) {
	    var g = this$1._mapOp.map(gc.getGeometryN(i));
	    if (!g.isEmpty()) { mapped.add(g); }
	  }
	  return gc.getFactory().createGeometryCollection(GeometryFactory.toGeometryArray(mapped))
	};
	GeometryCollectionMapper.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	GeometryCollectionMapper.prototype.getClass = function getClass () {
	  return GeometryCollectionMapper
	};
	GeometryCollectionMapper.map = function map (gc, op) {
	  var mapper = new GeometryCollectionMapper(op);
	  return mapper.map(gc)
	};

	var LineBuilder = function LineBuilder () {
	  this._op = null;
	  this._geometryFactory = null;
	  this._ptLocator = null;
	  this._lineEdgesList = new ArrayList();
	  this._resultLineList = new ArrayList();
	  var op = arguments[0];
	  var geometryFactory = arguments[1];
	  var ptLocator = arguments[2];
	  this._op = op;
	  this._geometryFactory = geometryFactory;
	  this._ptLocator = ptLocator;
	};
	LineBuilder.prototype.collectLines = function collectLines (opCode) {
	    var this$1 = this;

	  for (var it = this._op.getGraph().getEdgeEnds().iterator(); it.hasNext();) {
	    var de = it.next();
	    this$1.collectLineEdge(de, opCode, this$1._lineEdgesList);
	    this$1.collectBoundaryTouchEdge(de, opCode, this$1._lineEdgesList);
	  }
	};
	LineBuilder.prototype.labelIsolatedLine = function labelIsolatedLine (e, targetIndex) {
	  var loc = this._ptLocator.locate(e.getCoordinate(), this._op.getArgGeometry(targetIndex));
	  e.getLabel().setLocation(targetIndex, loc);
	};
	LineBuilder.prototype.build = function build (opCode) {
	  this.findCoveredLineEdges();
	  this.collectLines(opCode);
	  this.buildLines(opCode);
	  return this._resultLineList
	};
	LineBuilder.prototype.collectLineEdge = function collectLineEdge (de, opCode, edges) {
	  var label = de.getLabel();
	  var e = de.getEdge();
	  if (de.isLineEdge()) {
	    if (!de.isVisited() && OverlayOp.isResultOfOp(label, opCode) && !e.isCovered()) {
	      edges.add(e);
	      de.setVisitedEdge(true);
	    }
	  }
	};
	LineBuilder.prototype.findCoveredLineEdges = function findCoveredLineEdges () {
	    var this$1 = this;

	  for (var nodeit = this._op.getGraph().getNodes().iterator(); nodeit.hasNext();) {
	    var node = nodeit.next();
	    node.getEdges().findCoveredLineEdges();
	  }
	  for (var it = this._op.getGraph().getEdgeEnds().iterator(); it.hasNext();) {
	    var de = it.next();
	    var e = de.getEdge();
	    if (de.isLineEdge() && !e.isCoveredSet()) {
	      var isCovered = this$1._op.isCoveredByA(de.getCoordinate());
	      e.setCovered(isCovered);
	    }
	  }
	};
	LineBuilder.prototype.labelIsolatedLines = function labelIsolatedLines (edgesList) {
	    var this$1 = this;

	  for (var it = edgesList.iterator(); it.hasNext();) {
	    var e = it.next();
	    var label = e.getLabel();
	    if (e.isIsolated()) {
	      if (label.isNull(0)) { this$1.labelIsolatedLine(e, 0); } else { this$1.labelIsolatedLine(e, 1); }
	    }
	  }
	};
	LineBuilder.prototype.buildLines = function buildLines (opCode) {
	    var this$1 = this;

	  for (var it = this._lineEdgesList.iterator(); it.hasNext();) {
	    var e = it.next();
	    // const label = e.getLabel()
	    var line = this$1._geometryFactory.createLineString(e.getCoordinates());
	    this$1._resultLineList.add(line);
	    e.setInResult(true);
	  }
	};
	LineBuilder.prototype.collectBoundaryTouchEdge = function collectBoundaryTouchEdge (de, opCode, edges) {
	  var label = de.getLabel();
	  if (de.isLineEdge()) { return null }
	  if (de.isVisited()) { return null }
	  if (de.isInteriorAreaEdge()) { return null }
	  if (de.getEdge().isInResult()) { return null }
	  Assert.isTrue(!(de.isInResult() || de.getSym().isInResult()) || !de.getEdge().isInResult());
	  if (OverlayOp.isResultOfOp(label, opCode) && opCode === OverlayOp.INTERSECTION) {
	    edges.add(de.getEdge());
	    de.setVisitedEdge(true);
	  }
	};
	LineBuilder.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	LineBuilder.prototype.getClass = function getClass () {
	  return LineBuilder
	};

	var PointBuilder = function PointBuilder () {
	  this._op = null;
	  this._geometryFactory = null;
	  this._resultPointList = new ArrayList();
	  var op = arguments[0];
	  var geometryFactory = arguments[1];
	  // const ptLocator = arguments[2]
	  this._op = op;
	  this._geometryFactory = geometryFactory;
	};
	PointBuilder.prototype.filterCoveredNodeToPoint = function filterCoveredNodeToPoint (n) {
	  var coord = n.getCoordinate();
	  if (!this._op.isCoveredByLA(coord)) {
	    var pt = this._geometryFactory.createPoint(coord);
	    this._resultPointList.add(pt);
	  }
	};
	PointBuilder.prototype.extractNonCoveredResultNodes = function extractNonCoveredResultNodes (opCode) {
	    var this$1 = this;

	  for (var nodeit = this._op.getGraph().getNodes().iterator(); nodeit.hasNext();) {
	    var n = nodeit.next();
	    if (n.isInResult()) { continue }
	    if (n.isIncidentEdgeInResult()) { continue }
	    if (n.getEdges().getDegree() === 0 || opCode === OverlayOp.INTERSECTION) {
	      var label = n.getLabel();
	      if (OverlayOp.isResultOfOp(label, opCode)) {
	        this$1.filterCoveredNodeToPoint(n);
	      }
	    }
	  }
	};
	PointBuilder.prototype.build = function build (opCode) {
	  this.extractNonCoveredResultNodes(opCode);
	  return this._resultPointList
	};
	PointBuilder.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	PointBuilder.prototype.getClass = function getClass () {
	  return PointBuilder
	};

	var GeometryTransformer = function GeometryTransformer () {
	  this._inputGeom = null;
	  this._factory = null;
	  this._pruneEmptyGeometry = true;
	  this._preserveGeometryCollectionType = true;
	  this._preserveCollections = false;
	  this._preserveType = false;
	};
	GeometryTransformer.prototype.transformPoint = function transformPoint (geom, parent) {
	  return this._factory.createPoint(this.transformCoordinates(geom.getCoordinateSequence(), geom))
	};
	GeometryTransformer.prototype.transformPolygon = function transformPolygon (geom, parent) {
	    var this$1 = this;

	  var isAllValidLinearRings = true;
	  var shell = this.transformLinearRing(geom.getExteriorRing(), geom);
	  if (shell === null || !(shell instanceof LinearRing) || shell.isEmpty()) { isAllValidLinearRings = false; }
	  var holes = new ArrayList();
	  for (var i = 0; i < geom.getNumInteriorRing(); i++) {
	    var hole = this$1.transformLinearRing(geom.getInteriorRingN(i), geom);
	    if (hole === null || hole.isEmpty()) {
	      continue
	    }
	    if (!(hole instanceof LinearRing)) { isAllValidLinearRings = false; }
	    holes.add(hole);
	  }
	  if (isAllValidLinearRings) { return this._factory.createPolygon(shell, holes.toArray([])); } else {
	    var components = new ArrayList();
	    if (shell !== null) { components.add(shell); }
	    components.addAll(holes);
	    return this._factory.buildGeometry(components)
	  }
	};
	GeometryTransformer.prototype.createCoordinateSequence = function createCoordinateSequence (coords) {
	  return this._factory.getCoordinateSequenceFactory().create(coords)
	};
	GeometryTransformer.prototype.getInputGeometry = function getInputGeometry () {
	  return this._inputGeom
	};
	GeometryTransformer.prototype.transformMultiLineString = function transformMultiLineString (geom, parent) {
	    var this$1 = this;

	  var transGeomList = new ArrayList();
	  for (var i = 0; i < geom.getNumGeometries(); i++) {
	    var transformGeom = this$1.transformLineString(geom.getGeometryN(i), geom);
	    if (transformGeom === null) { continue }
	    if (transformGeom.isEmpty()) { continue }
	    transGeomList.add(transformGeom);
	  }
	  return this._factory.buildGeometry(transGeomList)
	};
	GeometryTransformer.prototype.transformCoordinates = function transformCoordinates (coords, parent) {
	  return this.copy(coords)
	};
	GeometryTransformer.prototype.transformLineString = function transformLineString (geom, parent) {
	  return this._factory.createLineString(this.transformCoordinates(geom.getCoordinateSequence(), geom))
	};
	GeometryTransformer.prototype.transformMultiPoint = function transformMultiPoint (geom, parent) {
	    var this$1 = this;

	  var transGeomList = new ArrayList();
	  for (var i = 0; i < geom.getNumGeometries(); i++) {
	    var transformGeom = this$1.transformPoint(geom.getGeometryN(i), geom);
	    if (transformGeom === null) { continue }
	    if (transformGeom.isEmpty()) { continue }
	    transGeomList.add(transformGeom);
	  }
	  return this._factory.buildGeometry(transGeomList)
	};
	GeometryTransformer.prototype.transformMultiPolygon = function transformMultiPolygon (geom, parent) {
	    var this$1 = this;

	  var transGeomList = new ArrayList();
	  for (var i = 0; i < geom.getNumGeometries(); i++) {
	    var transformGeom = this$1.transformPolygon(geom.getGeometryN(i), geom);
	    if (transformGeom === null) { continue }
	    if (transformGeom.isEmpty()) { continue }
	    transGeomList.add(transformGeom);
	  }
	  return this._factory.buildGeometry(transGeomList)
	};
	GeometryTransformer.prototype.copy = function copy (seq) {
	  return seq.copy()
	};
	GeometryTransformer.prototype.transformGeometryCollection = function transformGeometryCollection (geom, parent) {
	    var this$1 = this;

	  var transGeomList = new ArrayList();
	  for (var i = 0; i < geom.getNumGeometries(); i++) {
	    var transformGeom = this$1.transform(geom.getGeometryN(i));
	    if (transformGeom === null) { continue }
	    if (this$1._pruneEmptyGeometry && transformGeom.isEmpty()) { continue }
	    transGeomList.add(transformGeom);
	  }
	  if (this._preserveGeometryCollectionType) { return this._factory.createGeometryCollection(GeometryFactory.toGeometryArray(transGeomList)) }
	  return this._factory.buildGeometry(transGeomList)
	};
	GeometryTransformer.prototype.transform = function transform (inputGeom) {
	  this._inputGeom = inputGeom;
	  this._factory = inputGeom.getFactory();
	  if (inputGeom instanceof Point) { return this.transformPoint(inputGeom, null) }
	  if (inputGeom instanceof MultiPoint) { return this.transformMultiPoint(inputGeom, null) }
	  if (inputGeom instanceof LinearRing) { return this.transformLinearRing(inputGeom, null) }
	  if (inputGeom instanceof LineString) { return this.transformLineString(inputGeom, null) }
	  if (inputGeom instanceof MultiLineString) { return this.transformMultiLineString(inputGeom, null) }
	  if (inputGeom instanceof Polygon) { return this.transformPolygon(inputGeom, null) }
	  if (inputGeom instanceof MultiPolygon) { return this.transformMultiPolygon(inputGeom, null) }
	  if (inputGeom instanceof GeometryCollection) { return this.transformGeometryCollection(inputGeom, null) }
	  throw new IllegalArgumentException('Unknown Geometry subtype: ' + inputGeom.getClass().getName())
	};
	GeometryTransformer.prototype.transformLinearRing = function transformLinearRing (geom, parent) {
	  var seq = this.transformCoordinates(geom.getCoordinateSequence(), geom);
	  if (seq === null) { return this._factory.createLinearRing(null) }
	  var seqSize = seq.size();
	  if (seqSize > 0 && seqSize < 4 && !this._preserveType) { return this._factory.createLineString(seq) }
	  return this._factory.createLinearRing(seq)
	};
	GeometryTransformer.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	GeometryTransformer.prototype.getClass = function getClass () {
	  return GeometryTransformer
	};

	var LineStringSnapper = function LineStringSnapper () {
	  this._snapTolerance = 0.0;
	  this._srcPts = null;
	  this._seg = new LineSegment();
	  this._allowSnappingToSourceVertices = false;
	  this._isClosed = false;
	  if (arguments[0] instanceof LineString && typeof arguments[1] === 'number') {
	    var srcLine = arguments[0];
	    var snapTolerance = arguments[1];
	    LineStringSnapper.call(this, srcLine.getCoordinates(), snapTolerance);
	  } else if (arguments[0] instanceof Array && typeof arguments[1] === 'number') {
	    var srcPts = arguments[0];
	    var snapTolerance$1 = arguments[1];
	    this._srcPts = srcPts;
	    this._isClosed = LineStringSnapper.isClosed(srcPts);
	    this._snapTolerance = snapTolerance$1;
	  }
	};
	LineStringSnapper.prototype.snapVertices = function snapVertices (srcCoords, snapPts) {
	    var this$1 = this;

	  var end = this._isClosed ? srcCoords.size() - 1 : srcCoords.size();
	  for (var i = 0; i < end; i++) {
	    var srcPt = srcCoords.get(i);
	    var snapVert = this$1.findSnapForVertex(srcPt, snapPts);
	    if (snapVert !== null) {
	      srcCoords.set(i, new Coordinate(snapVert));
	      if (i === 0 && this$1._isClosed) { srcCoords.set(srcCoords.size() - 1, new Coordinate(snapVert)); }
	    }
	  }
	};
	LineStringSnapper.prototype.findSnapForVertex = function findSnapForVertex (pt, snapPts) {
	    var this$1 = this;

	  for (var i = 0; i < snapPts.length; i++) {
	    if (pt.equals2D(snapPts[i])) { return null }
	    if (pt.distance(snapPts[i]) < this$1._snapTolerance) { return snapPts[i] }
	  }
	  return null
	};
	LineStringSnapper.prototype.snapTo = function snapTo (snapPts) {
	  var coordList = new CoordinateList(this._srcPts);
	  this.snapVertices(coordList, snapPts);
	  this.snapSegments(coordList, snapPts);
	  var newPts = coordList.toCoordinateArray();
	  return newPts
	};
	LineStringSnapper.prototype.snapSegments = function snapSegments (srcCoords, snapPts) {
	    var this$1 = this;

	  if (snapPts.length === 0) { return null }
	  var distinctPtCount = snapPts.length;
	  if (snapPts[0].equals2D(snapPts[snapPts.length - 1])) { distinctPtCount = snapPts.length - 1; }
	  for (var i = 0; i < distinctPtCount; i++) {
	    var snapPt = snapPts[i];
	    var index = this$1.findSegmentIndexToSnap(snapPt, srcCoords);
	    if (index >= 0) {
	      srcCoords.add(index + 1, new Coordinate(snapPt), false);
	    }
	  }
	};
	LineStringSnapper.prototype.findSegmentIndexToSnap = function findSegmentIndexToSnap (snapPt, srcCoords) {
	    var this$1 = this;

	  var minDist = Double.MAX_VALUE;
	  var snapIndex = -1;
	  for (var i = 0; i < srcCoords.size() - 1; i++) {
	    this$1._seg.p0 = srcCoords.get(i);
	    this$1._seg.p1 = srcCoords.get(i + 1);
	    if (this$1._seg.p0.equals2D(snapPt) || this$1._seg.p1.equals2D(snapPt)) {
	      if (this$1._allowSnappingToSourceVertices) { continue; } else { return -1 }
	    }
	    var dist = this$1._seg.distance(snapPt);
	    if (dist < this$1._snapTolerance && dist < minDist) {
	      minDist = dist;
	      snapIndex = i;
	    }
	  }
	  return snapIndex
	};
	LineStringSnapper.prototype.setAllowSnappingToSourceVertices = function setAllowSnappingToSourceVertices (allowSnappingToSourceVertices) {
	  this._allowSnappingToSourceVertices = allowSnappingToSourceVertices;
	};
	LineStringSnapper.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	LineStringSnapper.prototype.getClass = function getClass () {
	  return LineStringSnapper
	};
	LineStringSnapper.isClosed = function isClosed (pts) {
	  if (pts.length <= 1) { return false }
	  return pts[0].equals2D(pts[pts.length - 1])
	};

	var GeometrySnapper = function GeometrySnapper (srcGeom) {
	  this._srcGeom = srcGeom || null;
	};

	var staticAccessors$41 = { SNAP_PRECISION_FACTOR: { configurable: true } };
	GeometrySnapper.prototype.snapTo = function snapTo (snapGeom, snapTolerance) {
	  var snapPts = this.extractTargetCoordinates(snapGeom);
	  var snapTrans = new SnapTransformer(snapTolerance, snapPts);
	  return snapTrans.transform(this._srcGeom)
	};
	GeometrySnapper.prototype.snapToSelf = function snapToSelf (snapTolerance, cleanResult) {
	  var snapPts = this.extractTargetCoordinates(this._srcGeom);
	  var snapTrans = new SnapTransformer(snapTolerance, snapPts, true);
	  var snappedGeom = snapTrans.transform(this._srcGeom);
	  var result = snappedGeom;
	  if (cleanResult && hasInterface(result, Polygonal)) {
	    result = snappedGeom.buffer(0);
	  }
	  return result
	};
	GeometrySnapper.prototype.computeSnapTolerance = function computeSnapTolerance (ringPts) {
	  var minSegLen = this.computeMinimumSegmentLength(ringPts);
	  var snapTol = minSegLen / 10;
	  return snapTol
	};
	GeometrySnapper.prototype.extractTargetCoordinates = function extractTargetCoordinates (g) {
	  var ptSet = new TreeSet();
	  var pts = g.getCoordinates();
	  for (var i = 0; i < pts.length; i++) {
	    ptSet.add(pts[i]);
	  }
	  return ptSet.toArray(new Array(0).fill(null))
	};
	GeometrySnapper.prototype.computeMinimumSegmentLength = function computeMinimumSegmentLength (pts) {
	  var minSegLen = Double.MAX_VALUE;
	  for (var i = 0; i < pts.length - 1; i++) {
	    var segLen = pts[i].distance(pts[i + 1]);
	    if (segLen < minSegLen) { minSegLen = segLen; }
	  }
	  return minSegLen
	};
	GeometrySnapper.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	GeometrySnapper.prototype.getClass = function getClass () {
	  return GeometrySnapper
	};
	GeometrySnapper.snap = function snap (g0, g1, snapTolerance) {
	  var snapGeom = new Array(2).fill(null);
	  var snapper0 = new GeometrySnapper(g0);
	  snapGeom[0] = snapper0.snapTo(g1, snapTolerance);
	  var snapper1 = new GeometrySnapper(g1);
	  snapGeom[1] = snapper1.snapTo(snapGeom[0], snapTolerance);
	  return snapGeom
	};
	GeometrySnapper.computeOverlaySnapTolerance = function computeOverlaySnapTolerance () {
	  if (arguments.length === 1) {
	    var g = arguments[0];
	    var snapTolerance = GeometrySnapper.computeSizeBasedSnapTolerance(g);
	    var pm = g.getPrecisionModel();
	    if (pm.getType() === PrecisionModel.FIXED) {
	      var fixedSnapTol = 1 / pm.getScale() * 2 / 1.415;
	      if (fixedSnapTol > snapTolerance) { snapTolerance = fixedSnapTol; }
	    }
	    return snapTolerance
	  } else if (arguments.length === 2) {
	    var g0 = arguments[0];
	    var g1 = arguments[1];
	    return Math.min(GeometrySnapper.computeOverlaySnapTolerance(g0), GeometrySnapper.computeOverlaySnapTolerance(g1))
	  }
	};
	GeometrySnapper.computeSizeBasedSnapTolerance = function computeSizeBasedSnapTolerance (g) {
	  var env = g.getEnvelopeInternal();
	  var minDimension = Math.min(env.getHeight(), env.getWidth());
	  var snapTol = minDimension * GeometrySnapper.SNAP_PRECISION_FACTOR;
	  return snapTol
	};
	GeometrySnapper.snapToSelf = function snapToSelf (geom, snapTolerance, cleanResult) {
	  var snapper0 = new GeometrySnapper(geom);
	  return snapper0.snapToSelf(snapTolerance, cleanResult)
	};
	staticAccessors$41.SNAP_PRECISION_FACTOR.get = function () { return 1e-9 };

	Object.defineProperties( GeometrySnapper, staticAccessors$41 );

	var SnapTransformer = (function (GeometryTransformer$$1) {
	  function SnapTransformer (snapTolerance, snapPts, isSelfSnap) {
	    GeometryTransformer$$1.call(this);
	    this._snapTolerance = snapTolerance || null;
	    this._snapPts = snapPts || null;
	    this._isSelfSnap = (isSelfSnap !== undefined) ? isSelfSnap : false;
	  }

	  if ( GeometryTransformer$$1 ) SnapTransformer.__proto__ = GeometryTransformer$$1;
	  SnapTransformer.prototype = Object.create( GeometryTransformer$$1 && GeometryTransformer$$1.prototype );
	  SnapTransformer.prototype.constructor = SnapTransformer;
	  SnapTransformer.prototype.snapLine = function snapLine (srcPts, snapPts) {
	    var snapper = new LineStringSnapper(srcPts, this._snapTolerance);
	    snapper.setAllowSnappingToSourceVertices(this._isSelfSnap);
	    return snapper.snapTo(snapPts)
	  };
	  SnapTransformer.prototype.transformCoordinates = function transformCoordinates (coords, parent) {
	    var srcPts = coords.toCoordinateArray();
	    var newPts = this.snapLine(srcPts, this._snapPts);
	    return this._factory.getCoordinateSequenceFactory().create(newPts)
	  };
	  SnapTransformer.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  SnapTransformer.prototype.getClass = function getClass () {
	    return SnapTransformer
	  };

	  return SnapTransformer;
	}(GeometryTransformer));

	var CommonBits = function CommonBits () {
	  this._isFirst = true;
	  this._commonMantissaBitsCount = 53;
	  this._commonBits = 0;
	  this._commonSignExp = null;
	};
	CommonBits.prototype.getCommon = function getCommon () {
	  return Double.longBitsToDouble(this._commonBits)
	};
	CommonBits.prototype.add = function add (num) {
	  var numBits = Double.doubleToLongBits(num);
	  if (this._isFirst) {
	    this._commonBits = numBits;
	    this._commonSignExp = CommonBits.signExpBits(this._commonBits);
	    this._isFirst = false;
	    return null
	  }
	  var numSignExp = CommonBits.signExpBits(numBits);
	  if (numSignExp !== this._commonSignExp) {
	    this._commonBits = 0;
	    return null
	  }
	  this._commonMantissaBitsCount = CommonBits.numCommonMostSigMantissaBits(this._commonBits, numBits);
	  this._commonBits = CommonBits.zeroLowerBits(this._commonBits, 64 - (12 + this._commonMantissaBitsCount));
	};
	CommonBits.prototype.toString = function toString () {
	  if (arguments.length === 1) {
	    var bits = arguments[0];
	    var x = Double.longBitsToDouble(bits);
	    var numStr = Double.toBinaryString(bits);
	    var padStr = '0000000000000000000000000000000000000000000000000000000000000000' + numStr;
	    var bitStr = padStr.substring(padStr.length - 64);
	    var str = bitStr.substring(0, 1) + '  ' + bitStr.substring(1, 12) + '(exp) ' + bitStr.substring(12) + ' [ ' + x + ' ]';
	    return str
	  }
	};
	CommonBits.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	CommonBits.prototype.getClass = function getClass () {
	  return CommonBits
	};
	CommonBits.getBit = function getBit (bits, i) {
	  var mask = 1 << i;
	  return (bits & mask) !== 0 ? 1 : 0
	};
	CommonBits.signExpBits = function signExpBits (num) {
	  return num >> 52
	};
	CommonBits.zeroLowerBits = function zeroLowerBits (bits, nBits) {
	  var invMask = (1 << nBits) - 1;
	  var mask = ~invMask;
	  var zeroed = bits & mask;
	  return zeroed
	};
	CommonBits.numCommonMostSigMantissaBits = function numCommonMostSigMantissaBits (num1, num2) {
	  var count = 0;
	  for (var i = 52; i >= 0; i--) {
	    if (CommonBits.getBit(num1, i) !== CommonBits.getBit(num2, i)) { return count }
	    count++;
	  }
	  return 52
	};

	var CommonBitsRemover = function CommonBitsRemover () {
	  this._commonCoord = null;
	  this._ccFilter = new CommonCoordinateFilter();
	};

	var staticAccessors$42 = { CommonCoordinateFilter: { configurable: true },Translater: { configurable: true } };
	CommonBitsRemover.prototype.addCommonBits = function addCommonBits (geom) {
	  var trans = new Translater(this._commonCoord);
	  geom.apply(trans);
	  geom.geometryChanged();
	};
	CommonBitsRemover.prototype.removeCommonBits = function removeCommonBits (geom) {
	  if (this._commonCoord.x === 0.0 && this._commonCoord.y === 0.0) { return geom }
	  var invCoord = new Coordinate(this._commonCoord);
	  invCoord.x = -invCoord.x;
	  invCoord.y = -invCoord.y;
	  var trans = new Translater(invCoord);
	  geom.apply(trans);
	  geom.geometryChanged();
	  return geom
	};
	CommonBitsRemover.prototype.getCommonCoordinate = function getCommonCoordinate () {
	  return this._commonCoord
	};
	CommonBitsRemover.prototype.add = function add (geom) {
	  geom.apply(this._ccFilter);
	  this._commonCoord = this._ccFilter.getCommonCoordinate();
	};
	CommonBitsRemover.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	CommonBitsRemover.prototype.getClass = function getClass () {
	  return CommonBitsRemover
	};
	staticAccessors$42.CommonCoordinateFilter.get = function () { return CommonCoordinateFilter };
	staticAccessors$42.Translater.get = function () { return Translater };

	Object.defineProperties( CommonBitsRemover, staticAccessors$42 );

	var CommonCoordinateFilter = function CommonCoordinateFilter () {
	  this._commonBitsX = new CommonBits();
	  this._commonBitsY = new CommonBits();
	};
	CommonCoordinateFilter.prototype.filter = function filter (coord) {
	  this._commonBitsX.add(coord.x);
	  this._commonBitsY.add(coord.y);
	};
	CommonCoordinateFilter.prototype.getCommonCoordinate = function getCommonCoordinate () {
	  return new Coordinate(this._commonBitsX.getCommon(), this._commonBitsY.getCommon())
	};
	CommonCoordinateFilter.prototype.interfaces_ = function interfaces_ () {
	  return [CoordinateFilter]
	};
	CommonCoordinateFilter.prototype.getClass = function getClass () {
	  return CommonCoordinateFilter
	};

	var Translater = function Translater () {
	  this.trans = null;
	  var trans = arguments[0];
	  this.trans = trans;
	};
	Translater.prototype.filter = function filter (seq, i) {
	  var xp = seq.getOrdinate(i, 0) + this.trans.x;
	  var yp = seq.getOrdinate(i, 1) + this.trans.y;
	  seq.setOrdinate(i, 0, xp);
	  seq.setOrdinate(i, 1, yp);
	};
	Translater.prototype.isDone = function isDone () {
	  return false
	};
	Translater.prototype.isGeometryChanged = function isGeometryChanged () {
	  return true
	};
	Translater.prototype.interfaces_ = function interfaces_ () {
	  return [CoordinateSequenceFilter]
	};
	Translater.prototype.getClass = function getClass () {
	  return Translater
	};

	var SnapOverlayOp = function SnapOverlayOp (g1, g2) {
	  this._geom = new Array(2).fill(null);
	  this._snapTolerance = null;
	  this._cbr = null;
	  this._geom[0] = g1;
	  this._geom[1] = g2;
	  this.computeSnapTolerance();
	};
	SnapOverlayOp.prototype.selfSnap = function selfSnap (geom) {
	  var snapper0 = new GeometrySnapper(geom);
	  var snapGeom = snapper0.snapTo(geom, this._snapTolerance);
	  return snapGeom
	};
	SnapOverlayOp.prototype.removeCommonBits = function removeCommonBits (geom) {
	  this._cbr = new CommonBitsRemover();
	  this._cbr.add(geom[0]);
	  this._cbr.add(geom[1]);
	  var remGeom = new Array(2).fill(null);
	  remGeom[0] = this._cbr.removeCommonBits(geom[0].copy());
	  remGeom[1] = this._cbr.removeCommonBits(geom[1].copy());
	  return remGeom
	};
	SnapOverlayOp.prototype.prepareResult = function prepareResult (geom) {
	  this._cbr.addCommonBits(geom);
	  return geom
	};
	SnapOverlayOp.prototype.getResultGeometry = function getResultGeometry (opCode) {
	  var prepGeom = this.snap(this._geom);
	  var result = OverlayOp.overlayOp(prepGeom[0], prepGeom[1], opCode);
	  return this.prepareResult(result)
	};
	SnapOverlayOp.prototype.checkValid = function checkValid (g) {
	  if (!g.isValid()) {
	    System.out.println('Snapped geometry is invalid');
	  }
	};
	SnapOverlayOp.prototype.computeSnapTolerance = function computeSnapTolerance () {
	  this._snapTolerance = GeometrySnapper.computeOverlaySnapTolerance(this._geom[0], this._geom[1]);
	};
	SnapOverlayOp.prototype.snap = function snap (geom) {
	  var remGeom = this.removeCommonBits(geom);
	  var snapGeom = GeometrySnapper.snap(remGeom[0], remGeom[1], this._snapTolerance);
	  return snapGeom
	};
	SnapOverlayOp.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	SnapOverlayOp.prototype.getClass = function getClass () {
	  return SnapOverlayOp
	};
	SnapOverlayOp.overlayOp = function overlayOp (g0, g1, opCode) {
	  var op = new SnapOverlayOp(g0, g1);
	  return op.getResultGeometry(opCode)
	};
	SnapOverlayOp.union = function union (g0, g1) {
	  return SnapOverlayOp.overlayOp(g0, g1, OverlayOp.UNION)
	};
	SnapOverlayOp.intersection = function intersection (g0, g1) {
	  return SnapOverlayOp.overlayOp(g0, g1, OverlayOp.INTERSECTION)
	};
	SnapOverlayOp.symDifference = function symDifference (g0, g1) {
	  return SnapOverlayOp.overlayOp(g0, g1, OverlayOp.SYMDIFFERENCE)
	};
	SnapOverlayOp.difference = function difference (g0, g1) {
	  return SnapOverlayOp.overlayOp(g0, g1, OverlayOp.DIFFERENCE)
	};

	var SnapIfNeededOverlayOp = function SnapIfNeededOverlayOp (g1, g2) {
	  this._geom = new Array(2).fill(null);
	  this._geom[0] = g1;
	  this._geom[1] = g2;
	};
	SnapIfNeededOverlayOp.prototype.getResultGeometry = function getResultGeometry (opCode) {
	  var result = null;
	  var isSuccess = false;
	  var savedException = null;
	  try {
	    result = OverlayOp.overlayOp(this._geom[0], this._geom[1], opCode);
	    var isValid = true;
	    if (isValid) { isSuccess = true; }
	  } catch (ex) {
	    if (ex instanceof RuntimeException) {
	      savedException = ex;
	    } else { throw ex }
	  } finally {}
	  if (!isSuccess) {
	    try {
	      result = SnapOverlayOp.overlayOp(this._geom[0], this._geom[1], opCode);
	    } catch (ex) {
	      if (ex instanceof RuntimeException) {
	        throw savedException
	      } else { throw ex }
	    } finally {}
	  }
	  return result
	};
	SnapIfNeededOverlayOp.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	SnapIfNeededOverlayOp.prototype.getClass = function getClass () {
	  return SnapIfNeededOverlayOp
	};
	SnapIfNeededOverlayOp.overlayOp = function overlayOp (g0, g1, opCode) {
	  var op = new SnapIfNeededOverlayOp(g0, g1);
	  return op.getResultGeometry(opCode)
	};
	SnapIfNeededOverlayOp.union = function union (g0, g1) {
	  return SnapIfNeededOverlayOp.overlayOp(g0, g1, OverlayOp.UNION)
	};
	SnapIfNeededOverlayOp.intersection = function intersection (g0, g1) {
	  return SnapIfNeededOverlayOp.overlayOp(g0, g1, OverlayOp.INTERSECTION)
	};
	SnapIfNeededOverlayOp.symDifference = function symDifference (g0, g1) {
	  return SnapIfNeededOverlayOp.overlayOp(g0, g1, OverlayOp.SYMDIFFERENCE)
	};
	SnapIfNeededOverlayOp.difference = function difference (g0, g1) {
	  return SnapIfNeededOverlayOp.overlayOp(g0, g1, OverlayOp.DIFFERENCE)
	};

	var MonotoneChain$2 = function MonotoneChain () {
	  this.mce = null;
	  this.chainIndex = null;
	  var mce = arguments[0];
	  var chainIndex = arguments[1];
	  this.mce = mce;
	  this.chainIndex = chainIndex;
	};
	MonotoneChain$2.prototype.computeIntersections = function computeIntersections (mc, si) {
	  this.mce.computeIntersectsForChain(this.chainIndex, mc.mce, mc.chainIndex, si);
	};
	MonotoneChain$2.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	MonotoneChain$2.prototype.getClass = function getClass () {
	  return MonotoneChain$2
	};

	var SweepLineEvent = function SweepLineEvent () {
	  this._label = null;
	  this._xValue = null;
	  this._eventType = null;
	  this._insertEvent = null;
	  this._deleteEventIndex = null;
	  this._obj = null;
	  if (arguments.length === 2) {
	    var x = arguments[0];
	    var insertEvent = arguments[1];
	    this._eventType = SweepLineEvent.DELETE;
	    this._xValue = x;
	    this._insertEvent = insertEvent;
	  } else if (arguments.length === 3) {
	    var label = arguments[0];
	    var x$1 = arguments[1];
	    var obj = arguments[2];
	    this._eventType = SweepLineEvent.INSERT;
	    this._label = label;
	    this._xValue = x$1;
	    this._obj = obj;
	  }
	};

	var staticAccessors$43 = { INSERT: { configurable: true },DELETE: { configurable: true } };
	SweepLineEvent.prototype.isDelete = function isDelete () {
	  return this._eventType === SweepLineEvent.DELETE
	};
	SweepLineEvent.prototype.setDeleteEventIndex = function setDeleteEventIndex (deleteEventIndex) {
	  this._deleteEventIndex = deleteEventIndex;
	};
	SweepLineEvent.prototype.getObject = function getObject () {
	  return this._obj
	};
	SweepLineEvent.prototype.compareTo = function compareTo (o) {
	  var pe = o;
	  if (this._xValue < pe._xValue) { return -1 }
	  if (this._xValue > pe._xValue) { return 1 }
	  if (this._eventType < pe._eventType) { return -1 }
	  if (this._eventType > pe._eventType) { return 1 }
	  return 0
	};
	SweepLineEvent.prototype.getInsertEvent = function getInsertEvent () {
	  return this._insertEvent
	};
	SweepLineEvent.prototype.isInsert = function isInsert () {
	  return this._eventType === SweepLineEvent.INSERT
	};
	SweepLineEvent.prototype.isSameLabel = function isSameLabel (ev) {
	  if (this._label === null) { return false }
	  return this._label === ev._label
	};
	SweepLineEvent.prototype.getDeleteEventIndex = function getDeleteEventIndex () {
	  return this._deleteEventIndex
	};
	SweepLineEvent.prototype.interfaces_ = function interfaces_ () {
	  return [Comparable]
	};
	SweepLineEvent.prototype.getClass = function getClass () {
	  return SweepLineEvent
	};
	staticAccessors$43.INSERT.get = function () { return 1 };
	staticAccessors$43.DELETE.get = function () { return 2 };

	Object.defineProperties( SweepLineEvent, staticAccessors$43 );

	var EdgeSetIntersector = function EdgeSetIntersector () {};

	EdgeSetIntersector.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	EdgeSetIntersector.prototype.getClass = function getClass () {
	  return EdgeSetIntersector
	};

	var SegmentIntersector$2 = function SegmentIntersector () {
	  this._hasIntersection = false;
	  this._hasProper = false;
	  this._hasProperInterior = false;
	  this._properIntersectionPoint = null;
	  this._li = null;
	  this._includeProper = null;
	  this._recordIsolated = null;
	  this._isSelfIntersection = null;
	  this._numIntersections = 0;
	  this.numTests = 0;
	  this._bdyNodes = null;
	  this._isDone = false;
	  this._isDoneWhenProperInt = false;
	  var li = arguments[0];
	  var includeProper = arguments[1];
	  var recordIsolated = arguments[2];
	  this._li = li;
	  this._includeProper = includeProper;
	  this._recordIsolated = recordIsolated;
	};
	SegmentIntersector$2.prototype.isTrivialIntersection = function isTrivialIntersection (e0, segIndex0, e1, segIndex1) {
	  if (e0 === e1) {
	    if (this._li.getIntersectionNum() === 1) {
	      if (SegmentIntersector$2.isAdjacentSegments(segIndex0, segIndex1)) { return true }
	      if (e0.isClosed()) {
	        var maxSegIndex = e0.getNumPoints() - 1;
	        if ((segIndex0 === 0 && segIndex1 === maxSegIndex) ||
	            (segIndex1 === 0 && segIndex0 === maxSegIndex)) {
	          return true
	        }
	      }
	    }
	  }
	  return false
	};
	SegmentIntersector$2.prototype.getProperIntersectionPoint = function getProperIntersectionPoint () {
	  return this._properIntersectionPoint
	};
	SegmentIntersector$2.prototype.setIsDoneIfProperInt = function setIsDoneIfProperInt (isDoneWhenProperInt) {
	  this._isDoneWhenProperInt = isDoneWhenProperInt;
	};
	SegmentIntersector$2.prototype.hasProperInteriorIntersection = function hasProperInteriorIntersection () {
	  return this._hasProperInterior
	};
	SegmentIntersector$2.prototype.isBoundaryPointInternal = function isBoundaryPointInternal (li, bdyNodes) {
	  for (var i = bdyNodes.iterator(); i.hasNext();) {
	    var node = i.next();
	    var pt = node.getCoordinate();
	    if (li.isIntersection(pt)) { return true }
	  }
	  return false
	};
	SegmentIntersector$2.prototype.hasProperIntersection = function hasProperIntersection () {
	  return this._hasProper
	};
	SegmentIntersector$2.prototype.hasIntersection = function hasIntersection () {
	  return this._hasIntersection
	};
	SegmentIntersector$2.prototype.isDone = function isDone () {
	  return this._isDone
	};
	SegmentIntersector$2.prototype.isBoundaryPoint = function isBoundaryPoint (li, bdyNodes) {
	  if (bdyNodes === null) { return false }
	  if (this.isBoundaryPointInternal(li, bdyNodes[0])) { return true }
	  if (this.isBoundaryPointInternal(li, bdyNodes[1])) { return true }
	  return false
	};
	SegmentIntersector$2.prototype.setBoundaryNodes = function setBoundaryNodes (bdyNodes0, bdyNodes1) {
	  this._bdyNodes = new Array(2).fill(null);
	  this._bdyNodes[0] = bdyNodes0;
	  this._bdyNodes[1] = bdyNodes1;
	};
	SegmentIntersector$2.prototype.addIntersections = function addIntersections (e0, segIndex0, e1, segIndex1) {
	  if (e0 === e1 && segIndex0 === segIndex1) { return null }
	  this.numTests++;
	  var p00 = e0.getCoordinates()[segIndex0];
	  var p01 = e0.getCoordinates()[segIndex0 + 1];
	  var p10 = e1.getCoordinates()[segIndex1];
	  var p11 = e1.getCoordinates()[segIndex1 + 1];
	  this._li.computeIntersection(p00, p01, p10, p11);
	  if (this._li.hasIntersection()) {
	    if (this._recordIsolated) {
	      e0.setIsolated(false);
	      e1.setIsolated(false);
	    }
	    this._numIntersections++;
	    if (!this.isTrivialIntersection(e0, segIndex0, e1, segIndex1)) {
	      this._hasIntersection = true;
	      if (this._includeProper || !this._li.isProper()) {
	        e0.addIntersections(this._li, segIndex0, 0);
	        e1.addIntersections(this._li, segIndex1, 1);
	      }
	      if (this._li.isProper()) {
	        this._properIntersectionPoint = this._li.getIntersection(0).copy();
	        this._hasProper = true;
	        if (this._isDoneWhenProperInt) {
	          this._isDone = true;
	        }
	        if (!this.isBoundaryPoint(this._li, this._bdyNodes)) { this._hasProperInterior = true; }
	      }
	    }
	  }
	};
	SegmentIntersector$2.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	SegmentIntersector$2.prototype.getClass = function getClass () {
	  return SegmentIntersector$2
	};
	SegmentIntersector$2.isAdjacentSegments = function isAdjacentSegments (i1, i2) {
	  return Math.abs(i1 - i2) === 1
	};

	var SimpleMCSweepLineIntersector = (function (EdgeSetIntersector$$1) {
	  function SimpleMCSweepLineIntersector () {
	    EdgeSetIntersector$$1.call(this);
	    this.events = new ArrayList();
	    this.nOverlaps = null;
	  }

	  if ( EdgeSetIntersector$$1 ) SimpleMCSweepLineIntersector.__proto__ = EdgeSetIntersector$$1;
	  SimpleMCSweepLineIntersector.prototype = Object.create( EdgeSetIntersector$$1 && EdgeSetIntersector$$1.prototype );
	  SimpleMCSweepLineIntersector.prototype.constructor = SimpleMCSweepLineIntersector;
	  SimpleMCSweepLineIntersector.prototype.prepareEvents = function prepareEvents () {
	    var this$1 = this;

	    Collections.sort(this.events);
	    for (var i = 0; i < this.events.size(); i++) {
	      var ev = this$1.events.get(i);
	      if (ev.isDelete()) {
	        ev.getInsertEvent().setDeleteEventIndex(i);
	      }
	    }
	  };
	  SimpleMCSweepLineIntersector.prototype.computeIntersections = function computeIntersections () {
	    var this$1 = this;

	    if (arguments.length === 1) {
	      var si = arguments[0];
	      this.nOverlaps = 0;
	      this.prepareEvents();
	      for (var i = 0; i < this.events.size(); i++) {
	        var ev = this$1.events.get(i);
	        if (ev.isInsert()) {
	          this$1.processOverlaps(i, ev.getDeleteEventIndex(), ev, si);
	        }
	        if (si.isDone()) {
	          break
	        }
	      }
	    } else if (arguments.length === 3) {
	      if (arguments[2] instanceof SegmentIntersector$2 && (hasInterface(arguments[0], List) && hasInterface(arguments[1], List))) {
	        var edges0 = arguments[0];
	        var edges1 = arguments[1];
	        var si$1 = arguments[2];
	        this.addEdges(edges0, edges0);
	        this.addEdges(edges1, edges1);
	        this.computeIntersections(si$1);
	      } else if (typeof arguments[2] === 'boolean' && (hasInterface(arguments[0], List) && arguments[1] instanceof SegmentIntersector$2)) {
	        var edges = arguments[0];
	        var si$2 = arguments[1];
	        var testAllSegments = arguments[2];
	        if (testAllSegments) { this.addEdges(edges, null); } else { this.addEdges(edges); }
	        this.computeIntersections(si$2);
	      }
	    }
	  };
	  SimpleMCSweepLineIntersector.prototype.addEdge = function addEdge (edge, edgeSet) {
	    var this$1 = this;

	    var mce = edge.getMonotoneChainEdge();
	    var startIndex = mce.getStartIndexes();
	    for (var i = 0; i < startIndex.length - 1; i++) {
	      var mc = new MonotoneChain$2(mce, i);
	      var insertEvent = new SweepLineEvent(edgeSet, mce.getMinX(i), mc);
	      this$1.events.add(insertEvent);
	      this$1.events.add(new SweepLineEvent(mce.getMaxX(i), insertEvent));
	    }
	  };
	  SimpleMCSweepLineIntersector.prototype.processOverlaps = function processOverlaps (start, end, ev0, si) {
	    var this$1 = this;

	    var mc0 = ev0.getObject();
	    for (var i = start; i < end; i++) {
	      var ev1 = this$1.events.get(i);
	      if (ev1.isInsert()) {
	        var mc1 = ev1.getObject();
	        if (!ev0.isSameLabel(ev1)) {
	          mc0.computeIntersections(mc1, si);
	          this$1.nOverlaps++;
	        }
	      }
	    }
	  };
	  SimpleMCSweepLineIntersector.prototype.addEdges = function addEdges () {
	    var this$1 = this;

	    if (arguments.length === 1) {
	      var edges = arguments[0];
	      for (var i = edges.iterator(); i.hasNext();) {
	        var edge = i.next();
	        this$1.addEdge(edge, edge);
	      }
	    } else if (arguments.length === 2) {
	      var edges$1 = arguments[0];
	      var edgeSet = arguments[1];
	      for (var i$1 = edges$1.iterator(); i$1.hasNext();) {
	        var edge$1 = i$1.next();
	        this$1.addEdge(edge$1, edgeSet);
	      }
	    }
	  };
	  SimpleMCSweepLineIntersector.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  SimpleMCSweepLineIntersector.prototype.getClass = function getClass () {
	    return SimpleMCSweepLineIntersector
	  };

	  return SimpleMCSweepLineIntersector;
	}(EdgeSetIntersector));

	var IntervalRTreeNode = function IntervalRTreeNode () {
	  this._min = Double.POSITIVE_INFINITY;
	  this._max = Double.NEGATIVE_INFINITY;
	};

	var staticAccessors$45 = { NodeComparator: { configurable: true } };
	IntervalRTreeNode.prototype.getMin = function getMin () {
	  return this._min
	};
	IntervalRTreeNode.prototype.intersects = function intersects (queryMin, queryMax) {
	  if (this._min > queryMax || this._max < queryMin) { return false }
	  return true
	};
	IntervalRTreeNode.prototype.getMax = function getMax () {
	  return this._max
	};
	IntervalRTreeNode.prototype.toString = function toString () {
	  return WKTWriter.toLineString(new Coordinate(this._min, 0), new Coordinate(this._max, 0))
	};
	IntervalRTreeNode.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	IntervalRTreeNode.prototype.getClass = function getClass () {
	  return IntervalRTreeNode
	};
	staticAccessors$45.NodeComparator.get = function () { return NodeComparator };

	Object.defineProperties( IntervalRTreeNode, staticAccessors$45 );

	var NodeComparator = function NodeComparator () {};

	NodeComparator.prototype.compare = function compare (o1, o2) {
	  var n1 = o1;
	  var n2 = o2;
	  var mid1 = (n1._min + n1._max) / 2;
	  var mid2 = (n2._min + n2._max) / 2;
	  if (mid1 < mid2) { return -1 }
	  if (mid1 > mid2) { return 1 }
	  return 0
	};
	NodeComparator.prototype.interfaces_ = function interfaces_ () {
	  return [Comparator]
	};
	NodeComparator.prototype.getClass = function getClass () {
	  return NodeComparator
	};

	var IntervalRTreeLeafNode = (function (IntervalRTreeNode$$1) {
	  function IntervalRTreeLeafNode () {
	    IntervalRTreeNode$$1.call(this);
	    this._item = null;
	    var min = arguments[0];
	    var max = arguments[1];
	    var item = arguments[2];
	    this._min = min;
	    this._max = max;
	    this._item = item;
	  }

	  if ( IntervalRTreeNode$$1 ) IntervalRTreeLeafNode.__proto__ = IntervalRTreeNode$$1;
	  IntervalRTreeLeafNode.prototype = Object.create( IntervalRTreeNode$$1 && IntervalRTreeNode$$1.prototype );
	  IntervalRTreeLeafNode.prototype.constructor = IntervalRTreeLeafNode;
	  IntervalRTreeLeafNode.prototype.query = function query (queryMin, queryMax, visitor) {
	    if (!this.intersects(queryMin, queryMax)) { return null }
	    visitor.visitItem(this._item);
	  };
	  IntervalRTreeLeafNode.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  IntervalRTreeLeafNode.prototype.getClass = function getClass () {
	    return IntervalRTreeLeafNode
	  };

	  return IntervalRTreeLeafNode;
	}(IntervalRTreeNode));

	var IntervalRTreeBranchNode = (function (IntervalRTreeNode$$1) {
	  function IntervalRTreeBranchNode () {
	    IntervalRTreeNode$$1.call(this);
	    this._node1 = null;
	    this._node2 = null;
	    var n1 = arguments[0];
	    var n2 = arguments[1];
	    this._node1 = n1;
	    this._node2 = n2;
	    this.buildExtent(this._node1, this._node2);
	  }

	  if ( IntervalRTreeNode$$1 ) IntervalRTreeBranchNode.__proto__ = IntervalRTreeNode$$1;
	  IntervalRTreeBranchNode.prototype = Object.create( IntervalRTreeNode$$1 && IntervalRTreeNode$$1.prototype );
	  IntervalRTreeBranchNode.prototype.constructor = IntervalRTreeBranchNode;
	  IntervalRTreeBranchNode.prototype.buildExtent = function buildExtent (n1, n2) {
	    this._min = Math.min(n1._min, n2._min);
	    this._max = Math.max(n1._max, n2._max);
	  };
	  IntervalRTreeBranchNode.prototype.query = function query (queryMin, queryMax, visitor) {
	    if (!this.intersects(queryMin, queryMax)) {
	      return null
	    }
	    if (this._node1 !== null) { this._node1.query(queryMin, queryMax, visitor); }
	    if (this._node2 !== null) { this._node2.query(queryMin, queryMax, visitor); }
	  };
	  IntervalRTreeBranchNode.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  IntervalRTreeBranchNode.prototype.getClass = function getClass () {
	    return IntervalRTreeBranchNode
	  };

	  return IntervalRTreeBranchNode;
	}(IntervalRTreeNode));

	var SortedPackedIntervalRTree = function SortedPackedIntervalRTree () {
	  this._leaves = new ArrayList();
	  this._root = null;
	  this._level = 0;
	};
	SortedPackedIntervalRTree.prototype.buildTree = function buildTree () {
	    var this$1 = this;

	  Collections.sort(this._leaves, new IntervalRTreeNode.NodeComparator());
	  var src = this._leaves;
	  var temp = null;
	  var dest = new ArrayList();
	  while (true) {
	    this$1.buildLevel(src, dest);
	    if (dest.size() === 1) { return dest.get(0) }
	    temp = src;
	    src = dest;
	    dest = temp;
	  }
	};
	SortedPackedIntervalRTree.prototype.insert = function insert (min, max, item) {
	  if (this._root !== null) { throw new Error('Index cannot be added to once it has been queried') }
	  this._leaves.add(new IntervalRTreeLeafNode(min, max, item));
	};
	SortedPackedIntervalRTree.prototype.query = function query (min, max, visitor) {
	  this.init();
	  this._root.query(min, max, visitor);
	};
	SortedPackedIntervalRTree.prototype.buildRoot = function buildRoot () {
	  if (this._root !== null) { return null }
	  this._root = this.buildTree();
	};
	SortedPackedIntervalRTree.prototype.printNode = function printNode (node) {
	  System.out.println(WKTWriter.toLineString(new Coordinate(node._min, this._level), new Coordinate(node._max, this._level)));
	};
	SortedPackedIntervalRTree.prototype.init = function init () {
	  if (this._root !== null) { return null }
	  this.buildRoot();
	};
	SortedPackedIntervalRTree.prototype.buildLevel = function buildLevel (src, dest) {
	  this._level++;
	  dest.clear();
	  for (var i = 0; i < src.size(); i += 2) {
	    var n1 = src.get(i);
	    var n2 = i + 1 < src.size() ? src.get(i) : null;
	    if (n2 === null) {
	      dest.add(n1);
	    } else {
	      var node = new IntervalRTreeBranchNode(src.get(i), src.get(i + 1));
	      dest.add(node);
	    }
	  }
	};
	SortedPackedIntervalRTree.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	SortedPackedIntervalRTree.prototype.getClass = function getClass () {
	  return SortedPackedIntervalRTree
	};

	var ArrayListVisitor = function ArrayListVisitor () {
	  this._items = new ArrayList();
	};
	ArrayListVisitor.prototype.visitItem = function visitItem (item) {
	  this._items.add(item);
	};
	ArrayListVisitor.prototype.getItems = function getItems () {
	  return this._items
	};
	ArrayListVisitor.prototype.interfaces_ = function interfaces_ () {
	  return [ItemVisitor]
	};
	ArrayListVisitor.prototype.getClass = function getClass () {
	  return ArrayListVisitor
	};

	var IndexedPointInAreaLocator = function IndexedPointInAreaLocator () {
	  this._index = null;
	  var g = arguments[0];
	  if (!hasInterface(g, Polygonal)) { throw new IllegalArgumentException('Argument must be Polygonal') }
	  this._index = new IntervalIndexedGeometry(g);
	};

	var staticAccessors$44 = { SegmentVisitor: { configurable: true },IntervalIndexedGeometry: { configurable: true } };
	IndexedPointInAreaLocator.prototype.locate = function locate (p) {
	  var rcc = new RayCrossingCounter(p);
	  var visitor = new SegmentVisitor(rcc);
	  this._index.query(p.y, p.y, visitor);
	  return rcc.getLocation()
	};
	IndexedPointInAreaLocator.prototype.interfaces_ = function interfaces_ () {
	  return [PointOnGeometryLocator]
	};
	IndexedPointInAreaLocator.prototype.getClass = function getClass () {
	  return IndexedPointInAreaLocator
	};
	staticAccessors$44.SegmentVisitor.get = function () { return SegmentVisitor };
	staticAccessors$44.IntervalIndexedGeometry.get = function () { return IntervalIndexedGeometry };

	Object.defineProperties( IndexedPointInAreaLocator, staticAccessors$44 );

	var SegmentVisitor = function SegmentVisitor () {
	  this._counter = null;
	  var counter = arguments[0];
	  this._counter = counter;
	};
	SegmentVisitor.prototype.visitItem = function visitItem (item) {
	  var seg = item;
	  this._counter.countSegment(seg.getCoordinate(0), seg.getCoordinate(1));
	};
	SegmentVisitor.prototype.interfaces_ = function interfaces_ () {
	  return [ItemVisitor]
	};
	SegmentVisitor.prototype.getClass = function getClass () {
	  return SegmentVisitor
	};

	var IntervalIndexedGeometry = function IntervalIndexedGeometry () {
	  this._index = new SortedPackedIntervalRTree();
	  var geom = arguments[0];
	  this.init(geom);
	};
	IntervalIndexedGeometry.prototype.init = function init (geom) {
	    var this$1 = this;

	  var lines = LinearComponentExtracter.getLines(geom);
	  for (var i = lines.iterator(); i.hasNext();) {
	    var line = i.next();
	    var pts = line.getCoordinates();
	    this$1.addLine(pts);
	  }
	};
	IntervalIndexedGeometry.prototype.addLine = function addLine (pts) {
	    var this$1 = this;

	  for (var i = 1; i < pts.length; i++) {
	    var seg = new LineSegment(pts[i - 1], pts[i]);
	    var min = Math.min(seg.p0.y, seg.p1.y);
	    var max = Math.max(seg.p0.y, seg.p1.y);
	    this$1._index.insert(min, max, seg);
	  }
	};
	IntervalIndexedGeometry.prototype.query = function query () {
	  if (arguments.length === 2) {
	    var min = arguments[0];
	    var max = arguments[1];
	    var visitor = new ArrayListVisitor();
	    this._index.query(min, max, visitor);
	    return visitor.getItems()
	  } else if (arguments.length === 3) {
	    var min$1 = arguments[0];
	    var max$1 = arguments[1];
	    var visitor$1 = arguments[2];
	    this._index.query(min$1, max$1, visitor$1);
	  }
	};
	IntervalIndexedGeometry.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	IntervalIndexedGeometry.prototype.getClass = function getClass () {
	  return IntervalIndexedGeometry
	};

	var GeometryGraph = (function (PlanarGraph$$1) {
	  function GeometryGraph () {
	    PlanarGraph$$1.call(this);
	    this._parentGeom = null;
	    this._lineEdgeMap = new HashMap();
	    this._boundaryNodeRule = null;
	    this._useBoundaryDeterminationRule = true;
	    this._argIndex = null;
	    this._boundaryNodes = null;
	    this._hasTooFewPoints = false;
	    this._invalidPoint = null;
	    this._areaPtLocator = null;
	    this._ptLocator = new PointLocator();
	    if (arguments.length === 2) {
	      var argIndex = arguments[0];
	      var parentGeom = arguments[1];
	      var boundaryNodeRule = BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE;
	      this._argIndex = argIndex;
	      this._parentGeom = parentGeom;
	      this._boundaryNodeRule = boundaryNodeRule;
	      if (parentGeom !== null) {
	        this.add(parentGeom);
	      }
	    } else if (arguments.length === 3) {
	      var argIndex$1 = arguments[0];
	      var parentGeom$1 = arguments[1];
	      var boundaryNodeRule$1 = arguments[2];
	      this._argIndex = argIndex$1;
	      this._parentGeom = parentGeom$1;
	      this._boundaryNodeRule = boundaryNodeRule$1;
	      if (parentGeom$1 !== null) {
	        this.add(parentGeom$1);
	      }
	    }
	  }

	  if ( PlanarGraph$$1 ) GeometryGraph.__proto__ = PlanarGraph$$1;
	  GeometryGraph.prototype = Object.create( PlanarGraph$$1 && PlanarGraph$$1.prototype );
	  GeometryGraph.prototype.constructor = GeometryGraph;
	  GeometryGraph.prototype.insertBoundaryPoint = function insertBoundaryPoint (argIndex, coord) {
	    var n = this._nodes.addNode(coord);
	    var lbl = n.getLabel();
	    var boundaryCount = 1;
	    var loc = Location.NONE;
	    loc = lbl.getLocation(argIndex, Position.ON);
	    if (loc === Location.BOUNDARY) { boundaryCount++; }
	    var newLoc = GeometryGraph.determineBoundary(this._boundaryNodeRule, boundaryCount);
	    lbl.setLocation(argIndex, newLoc);
	  };
	  GeometryGraph.prototype.computeSelfNodes = function computeSelfNodes () {
	    if (arguments.length === 2) {
	      var li = arguments[0];
	      var computeRingSelfNodes = arguments[1];
	      return this.computeSelfNodes(li, computeRingSelfNodes, false)
	    } else if (arguments.length === 3) {
	      var li$1 = arguments[0];
	      var computeRingSelfNodes$1 = arguments[1];
	      var isDoneIfProperInt = arguments[2];
	      var si = new SegmentIntersector$2(li$1, true, false);
	      si.setIsDoneIfProperInt(isDoneIfProperInt);
	      var esi = this.createEdgeSetIntersector();
	      var isRings = this._parentGeom instanceof LinearRing || this._parentGeom instanceof Polygon || this._parentGeom instanceof MultiPolygon;
	      var computeAllSegments = computeRingSelfNodes$1 || !isRings;
	      esi.computeIntersections(this._edges, si, computeAllSegments);
	      this.addSelfIntersectionNodes(this._argIndex);
	      return si
	    }
	  };
	  GeometryGraph.prototype.computeSplitEdges = function computeSplitEdges (edgelist) {
	    for (var i = this._edges.iterator(); i.hasNext();) {
	      var e = i.next();
	      e.eiList.addSplitEdges(edgelist);
	    }
	  };
	  GeometryGraph.prototype.computeEdgeIntersections = function computeEdgeIntersections (g, li, includeProper) {
	    var si = new SegmentIntersector$2(li, includeProper, true);
	    si.setBoundaryNodes(this.getBoundaryNodes(), g.getBoundaryNodes());
	    var esi = this.createEdgeSetIntersector();
	    esi.computeIntersections(this._edges, g._edges, si);
	    return si
	  };
	  GeometryGraph.prototype.getGeometry = function getGeometry () {
	    return this._parentGeom
	  };
	  GeometryGraph.prototype.getBoundaryNodeRule = function getBoundaryNodeRule () {
	    return this._boundaryNodeRule
	  };
	  GeometryGraph.prototype.hasTooFewPoints = function hasTooFewPoints () {
	    return this._hasTooFewPoints
	  };
	  GeometryGraph.prototype.addPoint = function addPoint () {
	    if (arguments[0] instanceof Point) {
	      var p = arguments[0];
	      var coord = p.getCoordinate();
	      this.insertPoint(this._argIndex, coord, Location.INTERIOR);
	    } else if (arguments[0] instanceof Coordinate) {
	      var pt = arguments[0];
	      this.insertPoint(this._argIndex, pt, Location.INTERIOR);
	    }
	  };
	  GeometryGraph.prototype.addPolygon = function addPolygon (p) {
	    var this$1 = this;

	    this.addPolygonRing(p.getExteriorRing(), Location.EXTERIOR, Location.INTERIOR);
	    for (var i = 0; i < p.getNumInteriorRing(); i++) {
	      var hole = p.getInteriorRingN(i);
	      this$1.addPolygonRing(hole, Location.INTERIOR, Location.EXTERIOR);
	    }
	  };
	  GeometryGraph.prototype.addEdge = function addEdge (e) {
	    this.insertEdge(e);
	    var coord = e.getCoordinates();
	    this.insertPoint(this._argIndex, coord[0], Location.BOUNDARY);
	    this.insertPoint(this._argIndex, coord[coord.length - 1], Location.BOUNDARY);
	  };
	  GeometryGraph.prototype.addLineString = function addLineString (line) {
	    var coord = CoordinateArrays.removeRepeatedPoints(line.getCoordinates());
	    if (coord.length < 2) {
	      this._hasTooFewPoints = true;
	      this._invalidPoint = coord[0];
	      return null
	    }
	    var e = new Edge(coord, new Label(this._argIndex, Location.INTERIOR));
	    this._lineEdgeMap.put(line, e);
	    this.insertEdge(e);
	    Assert.isTrue(coord.length >= 2, 'found LineString with single point');
	    this.insertBoundaryPoint(this._argIndex, coord[0]);
	    this.insertBoundaryPoint(this._argIndex, coord[coord.length - 1]);
	  };
	  GeometryGraph.prototype.getInvalidPoint = function getInvalidPoint () {
	    return this._invalidPoint
	  };
	  GeometryGraph.prototype.getBoundaryPoints = function getBoundaryPoints () {
	    var coll = this.getBoundaryNodes();
	    var pts = new Array(coll.size()).fill(null);
	    var i = 0;
	    for (var it = coll.iterator(); it.hasNext();) {
	      var node = it.next();
	      pts[i++] = node.getCoordinate().copy();
	    }
	    return pts
	  };
	  GeometryGraph.prototype.getBoundaryNodes = function getBoundaryNodes () {
	    if (this._boundaryNodes === null) { this._boundaryNodes = this._nodes.getBoundaryNodes(this._argIndex); }
	    return this._boundaryNodes
	  };
	  GeometryGraph.prototype.addSelfIntersectionNode = function addSelfIntersectionNode (argIndex, coord, loc) {
	    if (this.isBoundaryNode(argIndex, coord)) { return null }
	    if (loc === Location.BOUNDARY && this._useBoundaryDeterminationRule) { this.insertBoundaryPoint(argIndex, coord); } else { this.insertPoint(argIndex, coord, loc); }
	  };
	  GeometryGraph.prototype.addPolygonRing = function addPolygonRing (lr, cwLeft, cwRight) {
	    if (lr.isEmpty()) { return null }
	    var coord = CoordinateArrays.removeRepeatedPoints(lr.getCoordinates());
	    if (coord.length < 4) {
	      this._hasTooFewPoints = true;
	      this._invalidPoint = coord[0];
	      return null
	    }
	    var left = cwLeft;
	    var right = cwRight;
	    if (CGAlgorithms.isCCW(coord)) {
	      left = cwRight;
	      right = cwLeft;
	    }
	    var e = new Edge(coord, new Label(this._argIndex, Location.BOUNDARY, left, right));
	    this._lineEdgeMap.put(lr, e);
	    this.insertEdge(e);
	    this.insertPoint(this._argIndex, coord[0], Location.BOUNDARY);
	  };
	  GeometryGraph.prototype.insertPoint = function insertPoint (argIndex, coord, onLocation) {
	    var n = this._nodes.addNode(coord);
	    var lbl = n.getLabel();
	    if (lbl === null) {
	      n._label = new Label(argIndex, onLocation);
	    } else { lbl.setLocation(argIndex, onLocation); }
	  };
	  GeometryGraph.prototype.createEdgeSetIntersector = function createEdgeSetIntersector () {
	    return new SimpleMCSweepLineIntersector()
	  };
	  GeometryGraph.prototype.addSelfIntersectionNodes = function addSelfIntersectionNodes (argIndex) {
	    var this$1 = this;

	    for (var i = this._edges.iterator(); i.hasNext();) {
	      var e = i.next();
	      var eLoc = e.getLabel().getLocation(argIndex);
	      for (var eiIt = e.eiList.iterator(); eiIt.hasNext();) {
	        var ei = eiIt.next();
	        this$1.addSelfIntersectionNode(argIndex, ei.coord, eLoc);
	      }
	    }
	  };
	  GeometryGraph.prototype.add = function add () {
	    if (arguments.length === 1) {
	      var g = arguments[0];
	      if (g.isEmpty()) { return null }
	      if (g instanceof MultiPolygon) { this._useBoundaryDeterminationRule = false; }
	      if (g instanceof Polygon) { this.addPolygon(g); }
	      else if (g instanceof LineString) { this.addLineString(g); }
	      else if (g instanceof Point) { this.addPoint(g); }
	      else if (g instanceof MultiPoint) { this.addCollection(g); }
	      else if (g instanceof MultiLineString) { this.addCollection(g); }
	      else if (g instanceof MultiPolygon) { this.addCollection(g); }
	      else if (g instanceof GeometryCollection) { this.addCollection(g); }
	      else { throw new Error(g.getClass().getName()) }
	    } else { return PlanarGraph$$1.prototype.add.apply(this, arguments) }
	  };
	  GeometryGraph.prototype.addCollection = function addCollection (gc) {
	    var this$1 = this;

	    for (var i = 0; i < gc.getNumGeometries(); i++) {
	      var g = gc.getGeometryN(i);
	      this$1.add(g);
	    }
	  };
	  GeometryGraph.prototype.locate = function locate (pt) {
	    if (hasInterface(this._parentGeom, Polygonal) && this._parentGeom.getNumGeometries() > 50) {
	      if (this._areaPtLocator === null) {
	        this._areaPtLocator = new IndexedPointInAreaLocator(this._parentGeom);
	      }
	      return this._areaPtLocator.locate(pt)
	    }
	    return this._ptLocator.locate(pt, this._parentGeom)
	  };
	  GeometryGraph.prototype.findEdge = function findEdge () {
	    if (arguments.length === 1) {
	      var line = arguments[0];
	      return this._lineEdgeMap.get(line)
	    } else { return PlanarGraph$$1.prototype.findEdge.apply(this, arguments) }
	  };
	  GeometryGraph.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  GeometryGraph.prototype.getClass = function getClass () {
	    return GeometryGraph
	  };
	  GeometryGraph.determineBoundary = function determineBoundary (boundaryNodeRule, boundaryCount) {
	    return boundaryNodeRule.isInBoundary(boundaryCount) ? Location.BOUNDARY : Location.INTERIOR
	  };

	  return GeometryGraph;
	}(PlanarGraph));

	var GeometryGraphOp = function GeometryGraphOp () {
	  this._li = new RobustLineIntersector();
	  this._resultPrecisionModel = null;
	  this._arg = null;
	  if (arguments.length === 1) {
	    var g0 = arguments[0];
	    this.setComputationPrecision(g0.getPrecisionModel());
	    this._arg = new Array(1).fill(null);
	    this._arg[0] = new GeometryGraph(0, g0);
	  } else if (arguments.length === 2) {
	    var g0$1 = arguments[0];
	    var g1 = arguments[1];
	    var boundaryNodeRule = BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE;
	    if (g0$1.getPrecisionModel().compareTo(g1.getPrecisionModel()) >= 0) { this.setComputationPrecision(g0$1.getPrecisionModel()); } else { this.setComputationPrecision(g1.getPrecisionModel()); }
	    this._arg = new Array(2).fill(null);
	    this._arg[0] = new GeometryGraph(0, g0$1, boundaryNodeRule);
	    this._arg[1] = new GeometryGraph(1, g1, boundaryNodeRule);
	  } else if (arguments.length === 3) {
	    var g0$2 = arguments[0];
	    var g1$1 = arguments[1];
	    var boundaryNodeRule$1 = arguments[2];
	    if (g0$2.getPrecisionModel().compareTo(g1$1.getPrecisionModel()) >= 0) { this.setComputationPrecision(g0$2.getPrecisionModel()); } else { this.setComputationPrecision(g1$1.getPrecisionModel()); }
	    this._arg = new Array(2).fill(null);
	    this._arg[0] = new GeometryGraph(0, g0$2, boundaryNodeRule$1);
	    this._arg[1] = new GeometryGraph(1, g1$1, boundaryNodeRule$1);
	  }
	};
	GeometryGraphOp.prototype.getArgGeometry = function getArgGeometry (i) {
	  return this._arg[i].getGeometry()
	};
	GeometryGraphOp.prototype.setComputationPrecision = function setComputationPrecision (pm) {
	  this._resultPrecisionModel = pm;
	  this._li.setPrecisionModel(this._resultPrecisionModel);
	};
	GeometryGraphOp.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	GeometryGraphOp.prototype.getClass = function getClass () {
	  return GeometryGraphOp
	};

	// operation.geometrygraph

	var GeometryMapper = function GeometryMapper () {};

	GeometryMapper.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	GeometryMapper.prototype.getClass = function getClass () {
	  return GeometryMapper
	};
	GeometryMapper.map = function map () {
	  if (arguments[0] instanceof Geometry && hasInterface(arguments[1], GeometryMapper.MapOp)) {
	    var geom = arguments[0];
	    var op = arguments[1];
	    var mapped = new ArrayList();
	    for (var i = 0; i < geom.getNumGeometries(); i++) {
	      var g = op.map(geom.getGeometryN(i));
	      if (g !== null) { mapped.add(g); }
	    }
	    return geom.getFactory().buildGeometry(mapped)
	  } else if (hasInterface(arguments[0], Collection) && hasInterface(arguments[1], GeometryMapper.MapOp)) {
	    var geoms = arguments[0];
	    var op$1 = arguments[1];
	    var mapped$1 = new ArrayList();
	    for (var i$1 = geoms.iterator(); i$1.hasNext();) {
	      var g$1 = i$1.next();
	      var gr = op$1.map(g$1);
	      if (gr !== null) { mapped$1.add(gr); }
	    }
	    return mapped$1
	  }
	};
	GeometryMapper.MapOp = function MapOp () {};

	var OverlayOp = (function (GeometryGraphOp) {
	  function OverlayOp () {
	    var g0 = arguments[0];
	    var g1 = arguments[1];
	    GeometryGraphOp.call(this, g0, g1);
	    this._ptLocator = new PointLocator();
	    this._geomFact = null;
	    this._resultGeom = null;
	    this._graph = null;
	    this._edgeList = new EdgeList();
	    this._resultPolyList = new ArrayList();
	    this._resultLineList = new ArrayList();
	    this._resultPointList = new ArrayList();
	    this._graph = new PlanarGraph(new OverlayNodeFactory());
	    this._geomFact = g0.getFactory();
	  }

	  if ( GeometryGraphOp ) OverlayOp.__proto__ = GeometryGraphOp;
	  OverlayOp.prototype = Object.create( GeometryGraphOp && GeometryGraphOp.prototype );
	  OverlayOp.prototype.constructor = OverlayOp;
	  OverlayOp.prototype.insertUniqueEdge = function insertUniqueEdge (e) {
	    var existingEdge = this._edgeList.findEqualEdge(e);
	    if (existingEdge !== null) {
	      var existingLabel = existingEdge.getLabel();
	      var labelToMerge = e.getLabel();
	      if (!existingEdge.isPointwiseEqual(e)) {
	        labelToMerge = new Label(e.getLabel());
	        labelToMerge.flip();
	      }
	      var depth = existingEdge.getDepth();
	      if (depth.isNull()) {
	        depth.add(existingLabel);
	      }
	      depth.add(labelToMerge);
	      existingLabel.merge(labelToMerge);
	    } else {
	      this._edgeList.add(e);
	    }
	  };
	  OverlayOp.prototype.getGraph = function getGraph () {
	    return this._graph
	  };
	  OverlayOp.prototype.cancelDuplicateResultEdges = function cancelDuplicateResultEdges () {
	    for (var it = this._graph.getEdgeEnds().iterator(); it.hasNext();) {
	      var de = it.next();
	      var sym = de.getSym();
	      if (de.isInResult() && sym.isInResult()) {
	        de.setInResult(false);
	        sym.setInResult(false);
	      }
	    }
	  };
	  OverlayOp.prototype.isCoveredByLA = function isCoveredByLA (coord) {
	    if (this.isCovered(coord, this._resultLineList)) { return true }
	    if (this.isCovered(coord, this._resultPolyList)) { return true }
	    return false
	  };
	  OverlayOp.prototype.computeGeometry = function computeGeometry (resultPointList, resultLineList, resultPolyList, opcode) {
	    var geomList = new ArrayList();
	    geomList.addAll(resultPointList);
	    geomList.addAll(resultLineList);
	    geomList.addAll(resultPolyList);
	    if (geomList.isEmpty()) { return OverlayOp.createEmptyResult(opcode, this._arg[0].getGeometry(), this._arg[1].getGeometry(), this._geomFact) }
	    return this._geomFact.buildGeometry(geomList)
	  };
	  OverlayOp.prototype.mergeSymLabels = function mergeSymLabels () {
	    for (var nodeit = this._graph.getNodes().iterator(); nodeit.hasNext();) {
	      var node = nodeit.next();
	      node.getEdges().mergeSymLabels();
	    }
	  };
	  OverlayOp.prototype.isCovered = function isCovered (coord, geomList) {
	    var this$1 = this;

	    for (var it = geomList.iterator(); it.hasNext();) {
	      var geom = it.next();
	      var loc = this$1._ptLocator.locate(coord, geom);
	      if (loc !== Location.EXTERIOR) { return true }
	    }
	    return false
	  };
	  OverlayOp.prototype.replaceCollapsedEdges = function replaceCollapsedEdges () {
	    var newEdges = new ArrayList();
	    for (var it = this._edgeList.iterator(); it.hasNext();) {
	      var e = it.next();
	      if (e.isCollapsed()) {
	        it.remove();
	        newEdges.add(e.getCollapsedEdge());
	      }
	    }
	    this._edgeList.addAll(newEdges);
	  };
	  OverlayOp.prototype.updateNodeLabelling = function updateNodeLabelling () {
	    for (var nodeit = this._graph.getNodes().iterator(); nodeit.hasNext();) {
	      var node = nodeit.next();
	      var lbl = node.getEdges().getLabel();
	      node.getLabel().merge(lbl);
	    }
	  };
	  OverlayOp.prototype.getResultGeometry = function getResultGeometry (overlayOpCode) {
	    this.computeOverlay(overlayOpCode);
	    return this._resultGeom
	  };
	  OverlayOp.prototype.insertUniqueEdges = function insertUniqueEdges (edges) {
	    var this$1 = this;

	    for (var i = edges.iterator(); i.hasNext();) {
	      var e = i.next();
	      this$1.insertUniqueEdge(e);
	    }
	  };
	  OverlayOp.prototype.computeOverlay = function computeOverlay (opCode) {
	    this.copyPoints(0);
	    this.copyPoints(1);
	    this._arg[0].computeSelfNodes(this._li, false);
	    this._arg[1].computeSelfNodes(this._li, false);
	    this._arg[0].computeEdgeIntersections(this._arg[1], this._li, true);
	    var baseSplitEdges = new ArrayList();
	    this._arg[0].computeSplitEdges(baseSplitEdges);
	    this._arg[1].computeSplitEdges(baseSplitEdges);
	    // const splitEdges = baseSplitEdges
	    this.insertUniqueEdges(baseSplitEdges);
	    this.computeLabelsFromDepths();
	    this.replaceCollapsedEdges();
	    EdgeNodingValidator.checkValid(this._edgeList.getEdges());
	    this._graph.addEdges(this._edgeList.getEdges());
	    this.computeLabelling();
	    this.labelIncompleteNodes();
	    this.findResultAreaEdges(opCode);
	    this.cancelDuplicateResultEdges();
	    var polyBuilder = new PolygonBuilder(this._geomFact);
	    polyBuilder.add(this._graph);
	    this._resultPolyList = polyBuilder.getPolygons();
	    var lineBuilder = new LineBuilder(this, this._geomFact, this._ptLocator);
	    this._resultLineList = lineBuilder.build(opCode);
	    var pointBuilder = new PointBuilder(this, this._geomFact, this._ptLocator);
	    this._resultPointList = pointBuilder.build(opCode);
	    this._resultGeom = this.computeGeometry(this._resultPointList, this._resultLineList, this._resultPolyList, opCode);
	  };
	  OverlayOp.prototype.labelIncompleteNode = function labelIncompleteNode (n, targetIndex) {
	    var loc = this._ptLocator.locate(n.getCoordinate(), this._arg[targetIndex].getGeometry());
	    n.getLabel().setLocation(targetIndex, loc);
	  };
	  OverlayOp.prototype.copyPoints = function copyPoints (argIndex) {
	    var this$1 = this;

	    for (var i = this._arg[argIndex].getNodeIterator(); i.hasNext();) {
	      var graphNode = i.next();
	      var newNode = this$1._graph.addNode(graphNode.getCoordinate());
	      newNode.setLabel(argIndex, graphNode.getLabel().getLocation(argIndex));
	    }
	  };
	  OverlayOp.prototype.findResultAreaEdges = function findResultAreaEdges (opCode) {
	    for (var it = this._graph.getEdgeEnds().iterator(); it.hasNext();) {
	      var de = it.next();
	      var label = de.getLabel();
	      if (label.isArea() && !de.isInteriorAreaEdge() && OverlayOp.isResultOfOp(label.getLocation(0, Position.RIGHT), label.getLocation(1, Position.RIGHT), opCode)) {
	        de.setInResult(true);
	      }
	    }
	  };
	  OverlayOp.prototype.computeLabelsFromDepths = function computeLabelsFromDepths () {
	    for (var it = this._edgeList.iterator(); it.hasNext();) {
	      var e = it.next();
	      var lbl = e.getLabel();
	      var depth = e.getDepth();
	      if (!depth.isNull()) {
	        depth.normalize();
	        for (var i = 0; i < 2; i++) {
	          if (!lbl.isNull(i) && lbl.isArea() && !depth.isNull(i)) {
	            if (depth.getDelta(i) === 0) {
	              lbl.toLine(i);
	            } else {
	              Assert.isTrue(!depth.isNull(i, Position.LEFT), 'depth of LEFT side has not been initialized');
	              lbl.setLocation(i, Position.LEFT, depth.getLocation(i, Position.LEFT));
	              Assert.isTrue(!depth.isNull(i, Position.RIGHT), 'depth of RIGHT side has not been initialized');
	              lbl.setLocation(i, Position.RIGHT, depth.getLocation(i, Position.RIGHT));
	            }
	          }
	        }
	      }
	    }
	  };
	  OverlayOp.prototype.computeLabelling = function computeLabelling () {
	    var this$1 = this;

	    for (var nodeit = this._graph.getNodes().iterator(); nodeit.hasNext();) {
	      var node = nodeit.next();
	      node.getEdges().computeLabelling(this$1._arg);
	    }
	    this.mergeSymLabels();
	    this.updateNodeLabelling();
	  };
	  OverlayOp.prototype.labelIncompleteNodes = function labelIncompleteNodes () {
	    var this$1 = this;

	    // let nodeCount = 0
	    for (var ni = this._graph.getNodes().iterator(); ni.hasNext();) {
	      var n = ni.next();
	      var label = n.getLabel();
	      if (n.isIsolated()) {
	        // nodeCount++
	        if (label.isNull(0)) { this$1.labelIncompleteNode(n, 0); } else { this$1.labelIncompleteNode(n, 1); }
	      }
	      n.getEdges().updateLabelling(label);
	    }
	  };
	  OverlayOp.prototype.isCoveredByA = function isCoveredByA (coord) {
	    if (this.isCovered(coord, this._resultPolyList)) { return true }
	    return false
	  };
	  OverlayOp.prototype.interfaces_ = function interfaces_ () {
	    return []
	  };
	  OverlayOp.prototype.getClass = function getClass () {
	    return OverlayOp
	  };

	  return OverlayOp;
	}(GeometryGraphOp));

	OverlayOp.overlayOp = function (geom0, geom1, opCode) {
	  var gov = new OverlayOp(geom0, geom1);
	  var geomOv = gov.getResultGeometry(opCode);
	  return geomOv
	};
	OverlayOp.intersection = function (g, other) {
	  if (g.isEmpty() || other.isEmpty()) { return OverlayOp.createEmptyResult(OverlayOp.INTERSECTION, g, other, g.getFactory()) }
	  if (g.isGeometryCollection()) {
	    var g2 = other;
	    return GeometryCollectionMapper.map(g, {
	      interfaces_: function () {
	        return [GeometryMapper.MapOp]
	      },
	      map: function (g) {
	        return g.intersection(g2)
	      }
	    })
	  }
	  g.checkNotGeometryCollection(g);
	  g.checkNotGeometryCollection(other);
	  return SnapIfNeededOverlayOp.overlayOp(g, other, OverlayOp.INTERSECTION)
	};
	OverlayOp.symDifference = function (g, other) {
	  if (g.isEmpty() || other.isEmpty()) {
	    if (g.isEmpty() && other.isEmpty()) { return OverlayOp.createEmptyResult(OverlayOp.SYMDIFFERENCE, g, other, g.getFactory()) }
	    if (g.isEmpty()) { return other.copy() }
	    if (other.isEmpty()) { return g.copy() }
	  }
	  g.checkNotGeometryCollection(g);
	  g.checkNotGeometryCollection(other);
	  return SnapIfNeededOverlayOp.overlayOp(g, other, OverlayOp.SYMDIFFERENCE)
	};
	OverlayOp.resultDimension = function (opCode, g0, g1) {
	  var dim0 = g0.getDimension();
	  var dim1 = g1.getDimension();
	  var resultDimension = -1;
	  switch (opCode) {
	    case OverlayOp.INTERSECTION:
	      resultDimension = Math.min(dim0, dim1);
	      break
	    case OverlayOp.UNION:
	      resultDimension = Math.max(dim0, dim1);
	      break
	    case OverlayOp.DIFFERENCE:
	      resultDimension = dim0;
	      break
	    case OverlayOp.SYMDIFFERENCE:
	      resultDimension = Math.max(dim0, dim1);
	      break
	  }
	  return resultDimension
	};
	OverlayOp.createEmptyResult = function (overlayOpCode, a, b, geomFact) {
	  var result = null;
	  switch (OverlayOp.resultDimension(overlayOpCode, a, b)) {
	    case -1:
	      result = geomFact.createGeometryCollection(new Array(0).fill(null));
	      break
	    case 0:
	      result = geomFact.createPoint();
	      break
	    case 1:
	      result = geomFact.createLineString();
	      break
	    case 2:
	      result = geomFact.createPolygon();
	      break
	  }
	  return result
	};
	OverlayOp.difference = function (g, other) {
	  if (g.isEmpty()) { return OverlayOp.createEmptyResult(OverlayOp.DIFFERENCE, g, other, g.getFactory()) }
	  if (other.isEmpty()) { return g.copy() }
	  g.checkNotGeometryCollection(g);
	  g.checkNotGeometryCollection(other);
	  return SnapIfNeededOverlayOp.overlayOp(g, other, OverlayOp.DIFFERENCE)
	};
	OverlayOp.isResultOfOp = function () {
	  if (arguments.length === 2) {
	    var label = arguments[0];
	    var opCode = arguments[1];
	    var loc0 = label.getLocation(0);
	    var loc1 = label.getLocation(1);
	    return OverlayOp.isResultOfOp(loc0, loc1, opCode)
	  } else if (arguments.length === 3) {
	    var loc0$1 = arguments[0];
	    var loc1$1 = arguments[1];
	    var overlayOpCode = arguments[2];
	    if (loc0$1 === Location.BOUNDARY) { loc0$1 = Location.INTERIOR; }
	    if (loc1$1 === Location.BOUNDARY) { loc1$1 = Location.INTERIOR; }
	    switch (overlayOpCode) {
	      case OverlayOp.INTERSECTION:
	        return loc0$1 === Location.INTERIOR && loc1$1 === Location.INTERIOR
	      case OverlayOp.UNION:
	        return loc0$1 === Location.INTERIOR || loc1$1 === Location.INTERIOR
	      case OverlayOp.DIFFERENCE:
	        return loc0$1 === Location.INTERIOR && loc1$1 !== Location.INTERIOR
	      case OverlayOp.SYMDIFFERENCE:
	        return (loc0$1 === Location.INTERIOR && loc1$1 !== Location.INTERIOR) || (loc0$1 !== Location.INTERIOR && loc1$1 === Location.INTERIOR)
	    }
	    return false
	  }
	};
	OverlayOp.INTERSECTION = 1;
	OverlayOp.UNION = 2;
	OverlayOp.DIFFERENCE = 3;
	OverlayOp.SYMDIFFERENCE = 4;

	var FuzzyPointLocator = function FuzzyPointLocator () {
	  this._g = null;
	  this._boundaryDistanceTolerance = null;
	  this._linework = null;
	  this._ptLocator = new PointLocator();
	  this._seg = new LineSegment();
	  var g = arguments[0];
	  var boundaryDistanceTolerance = arguments[1];
	  this._g = g;
	  this._boundaryDistanceTolerance = boundaryDistanceTolerance;
	  this._linework = this.extractLinework(g);
	};
	FuzzyPointLocator.prototype.isWithinToleranceOfBoundary = function isWithinToleranceOfBoundary (pt) {
	    var this$1 = this;

	  for (var i = 0; i < this._linework.getNumGeometries(); i++) {
	    var line = this$1._linework.getGeometryN(i);
	    var seq = line.getCoordinateSequence();
	    for (var j = 0; j < seq.size() - 1; j++) {
	      seq.getCoordinate(j, this$1._seg.p0);
	      seq.getCoordinate(j + 1, this$1._seg.p1);
	      var dist = this$1._seg.distance(pt);
	      if (dist <= this$1._boundaryDistanceTolerance) { return true }
	    }
	  }
	  return false
	};
	FuzzyPointLocator.prototype.getLocation = function getLocation (pt) {
	  if (this.isWithinToleranceOfBoundary(pt)) { return Location.BOUNDARY }
	  return this._ptLocator.locate(pt, this._g)
	};
	FuzzyPointLocator.prototype.extractLinework = function extractLinework (g) {
	  var extracter = new PolygonalLineworkExtracter();
	  g.apply(extracter);
	  var linework = extracter.getLinework();
	  var lines = GeometryFactory.toLineStringArray(linework);
	  return g.getFactory().createMultiLineString(lines)
	};
	FuzzyPointLocator.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	FuzzyPointLocator.prototype.getClass = function getClass () {
	  return FuzzyPointLocator
	};

	var PolygonalLineworkExtracter = function PolygonalLineworkExtracter () {
	  this._linework = null;
	  this._linework = new ArrayList();
	};
	PolygonalLineworkExtracter.prototype.getLinework = function getLinework () {
	  return this._linework
	};
	PolygonalLineworkExtracter.prototype.filter = function filter (g) {
	    var this$1 = this;

	  if (g instanceof Polygon) {
	    var poly = g;
	    this._linework.add(poly.getExteriorRing());
	    for (var i = 0; i < poly.getNumInteriorRing(); i++) {
	      this$1._linework.add(poly.getInteriorRingN(i));
	    }
	  }
	};
	PolygonalLineworkExtracter.prototype.interfaces_ = function interfaces_ () {
	  return [GeometryFilter]
	};
	PolygonalLineworkExtracter.prototype.getClass = function getClass () {
	  return PolygonalLineworkExtracter
	};

	var OffsetPointGenerator = function OffsetPointGenerator () {
	  this._g = null;
	  this._doLeft = true;
	  this._doRight = true;
	  var g = arguments[0];
	  this._g = g;
	};
	OffsetPointGenerator.prototype.extractPoints = function extractPoints (line, offsetDistance, offsetPts) {
	    var this$1 = this;

	  var pts = line.getCoordinates();
	  for (var i = 0; i < pts.length - 1; i++) {
	    this$1.computeOffsetPoints(pts[i], pts[i + 1], offsetDistance, offsetPts);
	  }
	};
	OffsetPointGenerator.prototype.setSidesToGenerate = function setSidesToGenerate (doLeft, doRight) {
	  this._doLeft = doLeft;
	  this._doRight = doRight;
	};
	OffsetPointGenerator.prototype.getPoints = function getPoints (offsetDistance) {
	    var this$1 = this;

	  var offsetPts = new ArrayList();
	  var lines = LinearComponentExtracter.getLines(this._g);
	  for (var i = lines.iterator(); i.hasNext();) {
	    var line = i.next();
	    this$1.extractPoints(line, offsetDistance, offsetPts);
	  }
	  return offsetPts
	};
	OffsetPointGenerator.prototype.computeOffsetPoints = function computeOffsetPoints (p0, p1, offsetDistance, offsetPts) {
	  var dx = p1.x - p0.x;
	  var dy = p1.y - p0.y;
	  var len = Math.sqrt(dx * dx + dy * dy);
	  var ux = offsetDistance * dx / len;
	  var uy = offsetDistance * dy / len;
	  var midX = (p1.x + p0.x) / 2;
	  var midY = (p1.y + p0.y) / 2;
	  if (this._doLeft) {
	    var offsetLeft = new Coordinate(midX - uy, midY + ux);
	    offsetPts.add(offsetLeft);
	  }
	  if (this._doRight) {
	    var offsetRight = new Coordinate(midX + uy, midY - ux);
	    offsetPts.add(offsetRight);
	  }
	};
	OffsetPointGenerator.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	OffsetPointGenerator.prototype.getClass = function getClass () {
	  return OffsetPointGenerator
	};

	var OverlayResultValidator = function OverlayResultValidator () {
	  this._geom = null;
	  this._locFinder = null;
	  this._location = new Array(3).fill(null);
	  this._invalidLocation = null;
	  this._boundaryDistanceTolerance = OverlayResultValidator.TOLERANCE;
	  this._testCoords = new ArrayList();
	  var a = arguments[0];
	  var b = arguments[1];
	  var result = arguments[2];
	  this._boundaryDistanceTolerance = OverlayResultValidator.computeBoundaryDistanceTolerance(a, b);
	  this._geom = [a, b, result];
	  this._locFinder = [new FuzzyPointLocator(this._geom[0], this._boundaryDistanceTolerance), new FuzzyPointLocator(this._geom[1], this._boundaryDistanceTolerance), new FuzzyPointLocator(this._geom[2], this._boundaryDistanceTolerance)];
	};

	var staticAccessors$46 = { TOLERANCE: { configurable: true } };
	OverlayResultValidator.prototype.reportResult = function reportResult (overlayOp, location, expectedInterior) {
	  System.out.println('Overlay result invalid - A:' + Location.toLocationSymbol(location[0]) + ' B:' + Location.toLocationSymbol(location[1]) + ' expected:' + (expectedInterior ? 'i' : 'e') + ' actual:' + Location.toLocationSymbol(location[2]));
	};
	OverlayResultValidator.prototype.isValid = function isValid (overlayOp) {
	  this.addTestPts(this._geom[0]);
	  this.addTestPts(this._geom[1]);
	  var isValid = this.checkValid(overlayOp);
	  return isValid
	};
	OverlayResultValidator.prototype.checkValid = function checkValid () {
	    var this$1 = this;

	  if (arguments.length === 1) {
	    var overlayOp = arguments[0];
	    for (var i = 0; i < this._testCoords.size(); i++) {
	      var pt = this$1._testCoords.get(i);
	      if (!this$1.checkValid(overlayOp, pt)) {
	        this$1._invalidLocation = pt;
	        return false
	      }
	    }
	    return true
	  } else if (arguments.length === 2) {
	    var overlayOp$1 = arguments[0];
	    var pt$1 = arguments[1];
	    this._location[0] = this._locFinder[0].getLocation(pt$1);
	    this._location[1] = this._locFinder[1].getLocation(pt$1);
	    this._location[2] = this._locFinder[2].getLocation(pt$1);
	    if (OverlayResultValidator.hasLocation(this._location, Location.BOUNDARY)) { return true }
	    return this.isValidResult(overlayOp$1, this._location)
	  }
	};
	OverlayResultValidator.prototype.addTestPts = function addTestPts (g) {
	  var ptGen = new OffsetPointGenerator(g);
	  this._testCoords.addAll(ptGen.getPoints(5 * this._boundaryDistanceTolerance));
	};
	OverlayResultValidator.prototype.isValidResult = function isValidResult (overlayOp, location) {
	  var expectedInterior = OverlayOp.isResultOfOp(location[0], location[1], overlayOp);
	  var resultInInterior = location[2] === Location.INTERIOR;
	  var isValid = !(expectedInterior ^ resultInInterior);
	  if (!isValid) { this.reportResult(overlayOp, location, expectedInterior); }
	  return isValid
	};
	OverlayResultValidator.prototype.getInvalidLocation = function getInvalidLocation () {
	  return this._invalidLocation
	};
	OverlayResultValidator.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	OverlayResultValidator.prototype.getClass = function getClass () {
	  return OverlayResultValidator
	};
	OverlayResultValidator.hasLocation = function hasLocation (location, loc) {
	  for (var i = 0; i < 3; i++) {
	    if (location[i] === loc) { return true }
	  }
	  return false
	};
	OverlayResultValidator.computeBoundaryDistanceTolerance = function computeBoundaryDistanceTolerance (g0, g1) {
	  return Math.min(GeometrySnapper.computeSizeBasedSnapTolerance(g0), GeometrySnapper.computeSizeBasedSnapTolerance(g1))
	};
	OverlayResultValidator.isValid = function isValid (a, b, overlayOp, result) {
	  var validator = new OverlayResultValidator(a, b, result);
	  return validator.isValid(overlayOp)
	};
	staticAccessors$46.TOLERANCE.get = function () { return 0.000001 };

	Object.defineProperties( OverlayResultValidator, staticAccessors$46 );

	// operation.overlay

	var GeometryCombiner = function GeometryCombiner (geoms) {
	  this._geomFactory = null;
	  this._skipEmpty = false;
	  this._inputGeoms = null;
	  this._geomFactory = GeometryCombiner.extractFactory(geoms);
	  this._inputGeoms = geoms;
	};
	GeometryCombiner.prototype.extractElements = function extractElements (geom, elems) {
	    var this$1 = this;

	  if (geom === null) { return null }
	  for (var i = 0; i < geom.getNumGeometries(); i++) {
	    var elemGeom = geom.getGeometryN(i);
	    if (this$1._skipEmpty && elemGeom.isEmpty()) { continue }
	    elems.add(elemGeom);
	  }
	};
	GeometryCombiner.prototype.combine = function combine () {
	    var this$1 = this;

	  var elems = new ArrayList();
	  for (var i = this._inputGeoms.iterator(); i.hasNext();) {
	    var g = i.next();
	    this$1.extractElements(g, elems);
	  }
	  if (elems.size() === 0) {
	    if (this._geomFactory !== null) {
	      return this._geomFactory.createGeometryCollection(null)
	    }
	    return null
	  }
	  return this._geomFactory.buildGeometry(elems)
	};
	GeometryCombiner.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	GeometryCombiner.prototype.getClass = function getClass () {
	  return GeometryCombiner
	};
	GeometryCombiner.combine = function combine () {
	  if (arguments.length === 1) {
	    var geoms = arguments[0];
	    var combiner = new GeometryCombiner(geoms);
	    return combiner.combine()
	  } else if (arguments.length === 2) {
	    var g0 = arguments[0];
	    var g1 = arguments[1];
	    var combiner$1 = new GeometryCombiner(GeometryCombiner.createList(g0, g1));
	    return combiner$1.combine()
	  } else if (arguments.length === 3) {
	    var g0$1 = arguments[0];
	    var g1$1 = arguments[1];
	    var g2 = arguments[2];
	    var combiner$2 = new GeometryCombiner(GeometryCombiner.createList(g0$1, g1$1, g2));
	    return combiner$2.combine()
	  }
	};
	GeometryCombiner.extractFactory = function extractFactory (geoms) {
	  if (geoms.isEmpty()) { return null }
	  return geoms.iterator().next().getFactory()
	};
	GeometryCombiner.createList = function createList () {
	  if (arguments.length === 2) {
	    var obj0 = arguments[0];
	    var obj1 = arguments[1];
	    var list = new ArrayList();
	    list.add(obj0);
	    list.add(obj1);
	    return list
	  } else if (arguments.length === 3) {
	    var obj0$1 = arguments[0];
	    var obj1$1 = arguments[1];
	    var obj2 = arguments[2];
	    var list$1 = new ArrayList();
	    list$1.add(obj0$1);
	    list$1.add(obj1$1);
	    list$1.add(obj2);
	    return list$1
	  }
	};

	var CascadedPolygonUnion = function CascadedPolygonUnion () {
	  this._inputPolys = null;
	  this._geomFactory = null;
	  var polys = arguments[0];
	  this._inputPolys = polys;
	  if (this._inputPolys === null) { this._inputPolys = new ArrayList(); }
	};

	var staticAccessors$47 = { STRTREE_NODE_CAPACITY: { configurable: true } };
	CascadedPolygonUnion.prototype.reduceToGeometries = function reduceToGeometries (geomTree) {
	    var this$1 = this;

	  var geoms = new ArrayList();
	  for (var i = geomTree.iterator(); i.hasNext();) {
	    var o = i.next();
	    var geom = null;
	    if (hasInterface(o, List)) {
	      geom = this$1.unionTree(o);
	    } else if (o instanceof Geometry) {
	      geom = o;
	    }
	    geoms.add(geom);
	  }
	  return geoms
	};
	CascadedPolygonUnion.prototype.extractByEnvelope = function extractByEnvelope (env, geom, disjointGeoms) {
	  var intersectingGeoms = new ArrayList();
	  for (var i = 0; i < geom.getNumGeometries(); i++) {
	    var elem = geom.getGeometryN(i);
	    if (elem.getEnvelopeInternal().intersects(env)) { intersectingGeoms.add(elem); } else { disjointGeoms.add(elem); }
	  }
	  return this._geomFactory.buildGeometry(intersectingGeoms)
	};
	CascadedPolygonUnion.prototype.unionOptimized = function unionOptimized (g0, g1) {
	  var g0Env = g0.getEnvelopeInternal();
	  var g1Env = g1.getEnvelopeInternal();
	  if (!g0Env.intersects(g1Env)) {
	    var combo = GeometryCombiner.combine(g0, g1);
	    return combo
	  }
	  if (g0.getNumGeometries() <= 1 && g1.getNumGeometries() <= 1) { return this.unionActual(g0, g1) }
	  var commonEnv = g0Env.intersection(g1Env);
	  return this.unionUsingEnvelopeIntersection(g0, g1, commonEnv)
	};
	CascadedPolygonUnion.prototype.union = function union () {
	  if (this._inputPolys === null) { throw new Error('union() method cannot be called twice') }
	  if (this._inputPolys.isEmpty()) { return null }
	  this._geomFactory = this._inputPolys.iterator().next().getFactory();
	  var index = new STRtree(CascadedPolygonUnion.STRTREE_NODE_CAPACITY);
	  for (var i = this._inputPolys.iterator(); i.hasNext();) {
	    var item = i.next();
	    index.insert(item.getEnvelopeInternal(), item);
	  }
	  this._inputPolys = null;
	  var itemTree = index.itemsTree();
	  var unionAll = this.unionTree(itemTree);
	  return unionAll
	};
	CascadedPolygonUnion.prototype.binaryUnion = function binaryUnion () {
	  if (arguments.length === 1) {
	    var geoms = arguments[0];
	    return this.binaryUnion(geoms, 0, geoms.size())
	  } else if (arguments.length === 3) {
	    var geoms$1 = arguments[0];
	    var start = arguments[1];
	    var end = arguments[2];
	    if (end - start <= 1) {
	      var g0 = CascadedPolygonUnion.getGeometry(geoms$1, start);
	      return this.unionSafe(g0, null)
	    } else if (end - start === 2) {
	      return this.unionSafe(CascadedPolygonUnion.getGeometry(geoms$1, start), CascadedPolygonUnion.getGeometry(geoms$1, start + 1))
	    } else {
	      var mid = Math.trunc((end + start) / 2);
	      var g0$1 = this.binaryUnion(geoms$1, start, mid);
	      var g1 = this.binaryUnion(geoms$1, mid, end);
	      return this.unionSafe(g0$1, g1)
	    }
	  }
	};
	CascadedPolygonUnion.prototype.repeatedUnion = function repeatedUnion (geoms) {
	  var union = null;
	  for (var i = geoms.iterator(); i.hasNext();) {
	    var g = i.next();
	    if (union === null) { union = g.copy(); } else { union = union.union(g); }
	  }
	  return union
	};
	CascadedPolygonUnion.prototype.unionSafe = function unionSafe (g0, g1) {
	  if (g0 === null && g1 === null) { return null }
	  if (g0 === null) { return g1.copy() }
	  if (g1 === null) { return g0.copy() }
	  return this.unionOptimized(g0, g1)
	};
	CascadedPolygonUnion.prototype.unionActual = function unionActual (g0, g1) {
	  return CascadedPolygonUnion.restrictToPolygons(g0.union(g1))
	};
	CascadedPolygonUnion.prototype.unionTree = function unionTree (geomTree) {
	  var geoms = this.reduceToGeometries(geomTree);
	  var union = this.binaryUnion(geoms);
	  return union
	};
	CascadedPolygonUnion.prototype.unionUsingEnvelopeIntersection = function unionUsingEnvelopeIntersection (g0, g1, common) {
	  var disjointPolys = new ArrayList();
	  var g0Int = this.extractByEnvelope(common, g0, disjointPolys);
	  var g1Int = this.extractByEnvelope(common, g1, disjointPolys);
	  var union = this.unionActual(g0Int, g1Int);
	  disjointPolys.add(union);
	  var overallUnion = GeometryCombiner.combine(disjointPolys);
	  return overallUnion
	};
	CascadedPolygonUnion.prototype.bufferUnion = function bufferUnion () {
	  if (arguments.length === 1) {
	    var geoms = arguments[0];
	    var factory = geoms.get(0).getFactory();
	    var gColl = factory.buildGeometry(geoms);
	    var unionAll = gColl.buffer(0.0);
	    return unionAll
	  } else if (arguments.length === 2) {
	    var g0 = arguments[0];
	    var g1 = arguments[1];
	    var factory$1 = g0.getFactory();
	    var gColl$1 = factory$1.createGeometryCollection([g0, g1]);
	    var unionAll$1 = gColl$1.buffer(0.0);
	    return unionAll$1
	  }
	};
	CascadedPolygonUnion.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	CascadedPolygonUnion.prototype.getClass = function getClass () {
	  return CascadedPolygonUnion
	};
	CascadedPolygonUnion.restrictToPolygons = function restrictToPolygons (g) {
	  if (hasInterface(g, Polygonal)) {
	    return g
	  }
	  var polygons = PolygonExtracter.getPolygons(g);
	  if (polygons.size() === 1) { return polygons.get(0) }
	  return g.getFactory().createMultiPolygon(GeometryFactory.toPolygonArray(polygons))
	};
	CascadedPolygonUnion.getGeometry = function getGeometry (list, index) {
	  if (index >= list.size()) { return null }
	  return list.get(index)
	};
	CascadedPolygonUnion.union = function union (polys) {
	  var op = new CascadedPolygonUnion(polys);
	  return op.union()
	};
	staticAccessors$47.STRTREE_NODE_CAPACITY.get = function () { return 4 };

	Object.defineProperties( CascadedPolygonUnion, staticAccessors$47 );

	var UnionOp = function UnionOp () {};

	UnionOp.prototype.interfaces_ = function interfaces_ () {
	  return []
	};
	UnionOp.prototype.getClass = function getClass () {
	  return UnionOp
	};
	UnionOp.union = function union (g, other) {
	  if (g.isEmpty() || other.isEmpty()) {
	    if (g.isEmpty() && other.isEmpty()) { return OverlayOp.createEmptyResult(OverlayOp.UNION, g, other, g.getFactory()) }
	    if (g.isEmpty()) { return other.copy() }
	    if (other.isEmpty()) { return g.copy() }
	  }
	  g.checkNotGeometryCollection(g);
	  g.checkNotGeometryCollection(other);
	  return SnapIfNeededOverlayOp.overlayOp(g, other, OverlayOp.UNION)
	};

	/**
	 * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.
	 */

	/**
	 * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.
	 *
	 * @name feature
	 * @param {Geometry} geometry input geometry
	 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
	 * @param {Object} [options={}] Optional Parameters
	 * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
	 * @param {string|number} [options.id] Identifier associated with the Feature
	 * @returns {Feature} a GeoJSON Feature
	 * @example
	 * var geometry = {
	 *   "type": "Point",
	 *   "coordinates": [110, 50]
	 * };
	 *
	 * var feature = turf.feature(geometry);
	 *
	 * //=feature
	 */
	function feature$1(geometry, properties, options) {
	    // Optional Parameters
	    options = options || {};
	    if (!isObject(options)) throw new Error('options is invalid');
	    var bbox = options.bbox;
	    var id = options.id;

	    // Validation
	    if (geometry === undefined) throw new Error('geometry is required');
	    if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');
	    if (bbox) validateBBox(bbox);
	    if (id) validateId(id);

	    // Main
	    var feat = {type: 'Feature'};
	    if (id) feat.id = id;
	    if (bbox) feat.bbox = bbox;
	    feat.properties = properties || {};
	    feat.geometry = geometry;
	    return feat;
	}

	/**
	 * isNumber
	 *
	 * @param {*} num Number to validate
	 * @returns {boolean} true/false
	 * @example
	 * turf.isNumber(123)
	 * //=true
	 * turf.isNumber('foo')
	 * //=false
	 */
	function isNumber(num) {
	    return !isNaN(num) && num !== null && !Array.isArray(num);
	}

	/**
	 * isObject
	 *
	 * @param {*} input variable to validate
	 * @returns {boolean} true/false
	 * @example
	 * turf.isObject({elevation: 10})
	 * //=true
	 * turf.isObject('foo')
	 * //=false
	 */
	function isObject(input) {
	    return (!!input) && (input.constructor === Object);
	}

	/**
	 * Validate BBox
	 *
	 * @private
	 * @param {Array<number>} bbox BBox to validate
	 * @returns {void}
	 * @throws Error if BBox is not valid
	 * @example
	 * validateBBox([-180, -40, 110, 50])
	 * //=OK
	 * validateBBox([-180, -40])
	 * //=Error
	 * validateBBox('Foo')
	 * //=Error
	 * validateBBox(5)
	 * //=Error
	 * validateBBox(null)
	 * //=Error
	 * validateBBox(undefined)
	 * //=Error
	 */
	function validateBBox(bbox) {
	    if (!bbox) throw new Error('bbox is required');
	    if (!Array.isArray(bbox)) throw new Error('bbox must be an Array');
	    if (bbox.length !== 4 && bbox.length !== 6) throw new Error('bbox must be an Array of 4 or 6 numbers');
	    bbox.forEach(function (num) {
	        if (!isNumber(num)) throw new Error('bbox must only contain numbers');
	    });
	}

	/**
	 * Validate Id
	 *
	 * @private
	 * @param {string|number} id Id to validate
	 * @returns {void}
	 * @throws Error if Id is not valid
	 * @example
	 * validateId([-180, -40, 110, 50])
	 * //=Error
	 * validateId([-180, -40])
	 * //=Error
	 * validateId('Foo')
	 * //=OK
	 * validateId(5)
	 * //=OK
	 * validateId(null)
	 * //=Error
	 * validateId(undefined)
	 * //=Error
	 */
	function validateId(id) {
	    if (!id) throw new Error('id is required');
	    if (['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');
	}

	/**
	 * Callback for geomEach
	 *
	 * @callback geomEachCallback
	 * @param {Geometry} currentGeometry The current Geometry being processed.
	 * @param {number} featureIndex The current index of the Feature being processed.
	 * @param {Object} featureProperties The current Feature Properties being processed.
	 * @param {Array<number>} featureBBox The current Feature BBox being processed.
	 * @param {number|string} featureId The current Feature Id being processed.
	 */

	/**
	 * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
	 *
	 * @name geomEach
	 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
	 * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
	 * @returns {void}
	 * @example
	 * var features = turf.featureCollection([
	 *     turf.point([26, 37], {foo: 'bar'}),
	 *     turf.point([36, 53], {hello: 'world'})
	 * ]);
	 *
	 * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
	 *   //=currentGeometry
	 *   //=featureIndex
	 *   //=featureProperties
	 *   //=featureBBox
	 *   //=featureId
	 * });
	 */
	function geomEach(geojson, callback) {
	    var i, j, g, geometry, stopG,
	        geometryMaybeCollection,
	        isGeometryCollection,
	        featureProperties,
	        featureBBox,
	        featureId,
	        featureIndex = 0,
	        isFeatureCollection = geojson.type === 'FeatureCollection',
	        isFeature = geojson.type === 'Feature',
	        stop = isFeatureCollection ? geojson.features.length : 1;

	    // This logic may look a little weird. The reason why it is that way
	    // is because it's trying to be fast. GeoJSON supports multiple kinds
	    // of objects at its root: FeatureCollection, Features, Geometries.
	    // This function has the responsibility of handling all of them, and that
	    // means that some of the `for` loops you see below actually just don't apply
	    // to certain inputs. For instance, if you give this just a
	    // Point geometry, then both loops are short-circuited and all we do
	    // is gradually rename the input until it's called 'geometry'.
	    //
	    // This also aims to allocate as few resources as possible: just a
	    // few numbers and booleans, rather than any temporary arrays as would
	    // be required with the normalization approach.
	    for (i = 0; i < stop; i++) {

	        geometryMaybeCollection = (isFeatureCollection ? geojson.features[i].geometry :
	            (isFeature ? geojson.geometry : geojson));
	        featureProperties = (isFeatureCollection ? geojson.features[i].properties :
	            (isFeature ? geojson.properties : {}));
	        featureBBox = (isFeatureCollection ? geojson.features[i].bbox :
	            (isFeature ? geojson.bbox : undefined));
	        featureId = (isFeatureCollection ? geojson.features[i].id :
	            (isFeature ? geojson.id : undefined));
	        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;
	        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

	        for (g = 0; g < stopG; g++) {
	            geometry = isGeometryCollection ?
	                geometryMaybeCollection.geometries[g] : geometryMaybeCollection;

	            // Handle null Geometry
	            if (geometry === null) {
	                if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
	                continue;
	            }
	            switch (geometry.type) {
	            case 'Point':
	            case 'LineString':
	            case 'MultiPoint':
	            case 'Polygon':
	            case 'MultiLineString':
	            case 'MultiPolygon': {
	                if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
	                break;
	            }
	            case 'GeometryCollection': {
	                for (j = 0; j < geometry.geometries.length; j++) {
	                    if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;
	                }
	                break;
	            }
	            default:
	                throw new Error('Unknown Geometry Type');
	            }
	        }
	        // Only increase `featureIndex` per each feature
	        featureIndex++;
	    }
	}

	/**
	 * Callback for geomReduce
	 *
	 * The first time the callback function is called, the values provided as arguments depend
	 * on whether the reduce method has an initialValue argument.
	 *
	 * If an initialValue is provided to the reduce method:
	 *  - The previousValue argument is initialValue.
	 *  - The currentValue argument is the value of the first element present in the array.
	 *
	 * If an initialValue is not provided:
	 *  - The previousValue argument is the value of the first element present in the array.
	 *  - The currentValue argument is the value of the second element present in the array.
	 *
	 * @callback geomReduceCallback
	 * @param {*} previousValue The accumulated value previously returned in the last invocation
	 * of the callback, or initialValue, if supplied.
	 * @param {Geometry} currentGeometry The current Geometry being processed.
	 * @param {number} featureIndex The current index of the Feature being processed.
	 * @param {Object} featureProperties The current Feature Properties being processed.
	 * @param {Array<number>} featureBBox The current Feature BBox being processed.
	 * @param {number|string} featureId The current Feature Id being processed.
	 */

	/**
	 * Reduce geometry in any GeoJSON object, similar to Array.reduce().
	 *
	 * @name geomReduce
	 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
	 * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
	 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
	 * @returns {*} The value that results from the reduction.
	 * @example
	 * var features = turf.featureCollection([
	 *     turf.point([26, 37], {foo: 'bar'}),
	 *     turf.point([36, 53], {hello: 'world'})
	 * ]);
	 *
	 * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
	 *   //=previousValue
	 *   //=currentGeometry
	 *   //=featureIndex
	 *   //=featureProperties
	 *   //=featureBBox
	 *   //=featureId
	 *   return currentGeometry
	 * });
	 */
	function geomReduce(geojson, callback, initialValue) {
	    var previousValue = initialValue;
	    geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
	        if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;
	        else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);
	    });
	    return previousValue;
	}

	/**
	 * Callback for flattenEach
	 *
	 * @callback flattenEachCallback
	 * @param {Feature} currentFeature The current flattened feature being processed.
	 * @param {number} featureIndex The current index of the Feature being processed.
	 * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
	 */

	/**
	 * Iterate over flattened features in any GeoJSON object, similar to
	 * Array.forEach.
	 *
	 * @name flattenEach
	 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
	 * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)
	 * @example
	 * var features = turf.featureCollection([
	 *     turf.point([26, 37], {foo: 'bar'}),
	 *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
	 * ]);
	 *
	 * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {
	 *   //=currentFeature
	 *   //=featureIndex
	 *   //=multiFeatureIndex
	 * });
	 */
	function flattenEach(geojson, callback) {
	    geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {
	        // Callback for single geometry
	        var type = (geometry === null) ? null : geometry.type;
	        switch (type) {
	        case null:
	        case 'Point':
	        case 'LineString':
	        case 'Polygon':
	            if (callback(feature$1(geometry, properties, {bbox: bbox, id: id}), featureIndex, 0) === false) return false;
	            return;
	        }

	        var geomType;

	        // Callback for multi-geometry
	        switch (type) {
	        case 'MultiPoint':
	            geomType = 'Point';
	            break;
	        case 'MultiLineString':
	            geomType = 'LineString';
	            break;
	        case 'MultiPolygon':
	            geomType = 'Polygon';
	            break;
	        }

	        for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {
	            var coordinate = geometry.coordinates[multiFeatureIndex];
	            var geom = {
	                type: geomType,
	                coordinates: coordinate
	            };
	            if (callback(feature$1(geom, properties), featureIndex, multiFeatureIndex) === false) return false;
	        }
	    });
	}

	/**
	 * Takes one or more features and returns their area in square meters.
	 *
	 * @name area
	 * @param {GeoJSON} geojson input GeoJSON feature(s)
	 * @returns {number} area in square meters
	 * @example
	 * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);
	 *
	 * var area = turf.area(polygon);
	 *
	 * //addToMap
	 * var addToMap = [polygon]
	 * polygon.properties.area = area
	 */
	function area(geojson) {
	    return geomReduce(geojson, function (value, geom) {
	        return value + calculateArea(geom);
	    }, 0);
	}

	var RADIUS$1 = 6378137;
	// var FLATTENING_DENOM = 298.257223563;
	// var FLATTENING = 1 / FLATTENING_DENOM;
	// var POLAR_RADIUS = RADIUS * (1 - FLATTENING);

	/**
	 * Calculate Area
	 *
	 * @private
	 * @param {GeoJSON} geojson GeoJSON
	 * @returns {number} area
	 */
	function calculateArea(geojson) {
	    var area = 0, i;
	    switch (geojson.type) {
	    case 'Polygon':
	        return polygonArea$1(geojson.coordinates);
	    case 'MultiPolygon':
	        for (i = 0; i < geojson.coordinates.length; i++) {
	            area += polygonArea$1(geojson.coordinates[i]);
	        }
	        return area;
	    case 'Point':
	    case 'MultiPoint':
	    case 'LineString':
	    case 'MultiLineString':
	        return 0;
	    case 'GeometryCollection':
	        for (i = 0; i < geojson.geometries.length; i++) {
	            area += calculateArea(geojson.geometries[i]);
	        }
	        return area;
	    }
	}

	function polygonArea$1(coords) {
	    var area = 0;
	    if (coords && coords.length > 0) {
	        area += Math.abs(ringArea$1(coords[0]));
	        for (var i = 1; i < coords.length; i++) {
	            area -= Math.abs(ringArea$1(coords[i]));
	        }
	    }
	    return area;
	}

	/**
	 * @private
	 * Calculate the approximate area of the polygon were it projected onto the earth.
	 * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.
	 *
	 * Reference:
	 * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for Polygons on a Sphere", JPL Publication 07-03, Jet Propulsion
	 * Laboratory, Pasadena, CA, June 2007 http://trs-new.jpl.nasa.gov/dspace/handle/2014/40409
	 *
	 * @param {Array<Array<number>>} coords Ring Coordinates
	 * @returns {number} The approximate signed geodesic area of the polygon in square meters.
	 */
	function ringArea$1(coords) {
	    var p1;
	    var p2;
	    var p3;
	    var lowerIndex;
	    var middleIndex;
	    var upperIndex;
	    var i;
	    var area = 0;
	    var coordsLength = coords.length;

	    if (coordsLength > 2) {
	        for (i = 0; i < coordsLength; i++) {
	            if (i === coordsLength - 2) { // i = N-2
	                lowerIndex = coordsLength - 2;
	                middleIndex = coordsLength - 1;
	                upperIndex = 0;
	            } else if (i === coordsLength - 1) { // i = N-1
	                lowerIndex = coordsLength - 1;
	                middleIndex = 0;
	                upperIndex = 1;
	            } else { // i = 0 to N-3
	                lowerIndex = i;
	                middleIndex = i + 1;
	                upperIndex = i + 2;
	            }
	            p1 = coords[lowerIndex];
	            p2 = coords[middleIndex];
	            p3 = coords[upperIndex];
	            area += (rad$1(p3[0]) - rad$1(p1[0])) * Math.sin(rad$1(p2[1]));
	        }

	        area = area * RADIUS$1 * RADIUS$1 / 2;
	    }

	    return area;
	}

	function rad$1(_) {
	    return _ * Math.PI / 180;
	}

	/**
	 * Get Geometry from Feature or Geometry Object
	 *
	 * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object
	 * @returns {Geometry|null} GeoJSON Geometry Object
	 * @throws {Error} if geojson is not a Feature or Geometry Object
	 * @example
	 * var point = {
	 *   "type": "Feature",
	 *   "properties": {},
	 *   "geometry": {
	 *     "type": "Point",
	 *     "coordinates": [110, 40]
	 *   }
	 * }
	 * var geom = turf.getGeom(point)
	 * //={"type": "Point", "coordinates": [110, 40]}
	 */
	function getGeom(geojson) {
	    if (!geojson) throw new Error('geojson is required');
	    if (geojson.geometry !== undefined) return geojson.geometry;
	    if (geojson.coordinates || geojson.geometries) return geojson;
	    throw new Error('geojson must be a valid Feature or Geometry Object');
	}

	/**
	 * Finds the difference between two {@link Polygon|polygons} by clipping the second polygon from the first.
	 *
	 * @name difference
	 * @param {Feature<Polygon|MultiPolygon>} polygon1 input Polygon feature
	 * @param {Feature<Polygon|MultiPolygon>} polygon2 Polygon feature to difference from polygon1
	 * @returns {Feature<Polygon|MultiPolygon>|null} a Polygon or MultiPolygon feature showing the area of `polygon1` excluding the area of `polygon2` (if empty returns `null`)
	 * @example
	 * var polygon1 = turf.polygon([[
	 *   [128, -26],
	 *   [141, -26],
	 *   [141, -21],
	 *   [128, -21],
	 *   [128, -26]
	 * ]], {
	 *   "fill": "#F00",
	 *   "fill-opacity": 0.1
	 * });
	 * var polygon2 = turf.polygon([[
	 *   [126, -28],
	 *   [140, -28],
	 *   [140, -20],
	 *   [126, -20],
	 *   [126, -28]
	 * ]], {
	 *   "fill": "#00F",
	 *   "fill-opacity": 0.1
	 * });
	 *
	 * var difference = turf.difference(polygon1, polygon2);
	 *
	 * //addToMap
	 * var addToMap = [polygon1, polygon2, difference];
	 */
	function difference(polygon1, polygon2) {
	    var geom1 = getGeom(polygon1);
	    var geom2 = getGeom(polygon2);
	    var properties = polygon1.properties || {};

	    // Issue #721 - JSTS can't handle empty polygons
	    geom1 = removeEmptyPolygon(geom1);
	    geom2 = removeEmptyPolygon(geom2);
	    if (!geom1) return null;
	    if (!geom2) return feature$1(geom1, properties);

	    // JSTS difference operation
	    var reader = new GeoJSONReader();
	    var a = reader.read(geom1);
	    var b = reader.read(geom2);
	    var differenced = OverlayOp.difference(a, b);
	    if (differenced.isEmpty()) return null;
	    var writer = new GeoJSONWriter();
	    var geom = writer.write(differenced);

	    return feature$1(geom, properties);
	}

	/**
	 * Detect Empty Polygon
	 *
	 * @private
	 * @param {Geometry<Polygon|MultiPolygon>} geom Geometry Object
	 * @returns {Geometry<Polygon|MultiPolygon>|null} removed any polygons with no areas
	 */
	function removeEmptyPolygon(geom) {
	    switch (geom.type) {
	    case 'Polygon':
	        if (area(geom) > 1) return geom;
	        return null;
	    case 'MultiPolygon':
	        var coordinates = [];
	        flattenEach(geom, function (feature$$1) {
	            if (area(feature$$1) > 1) coordinates.push(feature$$1.geometry.coordinates);
	        });
	        if (coordinates.length) return {type: 'MultiPolygon', coordinates: coordinates};
	    }
	}

	/**
	 * Takes two or more {@link Polygon|polygons} and returns a combined polygon. If the input polygons are not contiguous, this function returns a {@link MultiPolygon} feature.
	 *
	 * @name union
	 * @param {...Feature<Polygon>} A polygon to combine
	 * @returns {Feature<(Polygon|MultiPolygon)>} a combined {@link Polygon} or {@link MultiPolygon} feature
	 * @example
	 * var poly1 = turf.polygon([[
	 *     [-82.574787, 35.594087],
	 *     [-82.574787, 35.615581],
	 *     [-82.545261, 35.615581],
	 *     [-82.545261, 35.594087],
	 *     [-82.574787, 35.594087]
	 * ]], {"fill": "#0f0"});
	 * var poly2 = turf.polygon([[
	 *     [-82.560024, 35.585153],
	 *     [-82.560024, 35.602602],
	 *     [-82.52964, 35.602602],
	 *     [-82.52964, 35.585153],
	 *     [-82.560024, 35.585153]
	 * ]], {"fill": "#00f"});
	 *
	 * var union = turf.union(poly1, poly2);
	 *
	 * //addToMap
	 * var addToMap = [poly1, poly2, union];
	 */
	function union() {
	    var reader = new GeoJSONReader();
	    var result = reader.read(JSON.stringify(arguments[0].geometry));

	    for (var i = 1; i < arguments.length; i++) {
	        result = UnionOp.union(result, reader.read(JSON.stringify(arguments[i].geometry)));
	    }

	    var writer = new GeoJSONWriter();
	    result = writer.write(result);

	    return {
	        type: 'Feature',
	        geometry: result,
	        properties: arguments[0].properties
	    };
	}

	class index {

	  // constructor
	  //
	  // Optionally pass an Object of known GeoJSON features which we can use later
	  // Each feature must have a filename-like id:  `something.geojson`
	  // {
	  //  "philly_metro.geojson": {
	  //    "type": "Feature",
	  //    "id": "philly_metro.geojson",
	  //    "properties": {},
	  //    "geometry": { ... }
	  //  }
	  // }
	  constructor(features) {
	    this._cache = {};
	    this._features = features || {};

	    // Update CountryCoder world geometry to be a polygon covering the world.
	    // (yes, modifying the internal CountryCoder feature.geometry is hacky, but seems safe)
	    let world = feature('001');
	    world.geometry = {
	      type: 'Polygon',
	      coordinates: [[[-180, -90], [-180, 90], [180, 90], [180, -90], [-180, -90]]]
	    };
	  }


	  // isValidLocation
	  // Pass a `location` identifier
	  // Returns 'point', 'geojson', or 'countrycoder' if valid, false otherwise
	  isValidLocation(location) {
	    if (Array.isArray(location)) {   // a [lon,lat] coordinate pair?
	      return !!(
	        location.length === 2 && Number.isFinite(location[0]) && Number.isFinite(location[1]) &&
	        location[0] >= -180 && location[0] <= 180 && location[1] >= -90 && location[1] <= 90
	      ) && 'point';

	    } else if (/^\S+\.geojson$/i.test(location)) {   // a .geojson filename?
	      return !!this._features[location] && 'geojson';

	    } else {    // a country-coder string?
	      let ccmatch = feature(location);
	      return !!ccmatch && 'countrycoder';
	    }
	  }


	  // locationToFeature
	  //
	  // Pass a `location` identifier
	  // Returns a GeoJSON feature
	  locationToFeature(location) {
	    // a [lon,lat] coordinate pair?
	    if (Array.isArray(location)) {
	      if (location.length === 2 && Number.isFinite(location[0]) && Number.isFinite(location[1]) &&
	        location[0] >= -180 && location[0] <= 180 && location[1] >= -90 && location[1] <= 90
	      ) {
	        const RADIUS = 25000;  // meters
	        const EDGES = 10;
	        const id = 'point:' + location.toString();
	        const area = Math.PI * RADIUS * RADIUS / 1e6;     // m² to km²

	        let feature = this._cache[id];
	        if (!feature) {
	          feature = this._cache[id] = geojsonPrecision({
	            type: 'Feature',
	            id: id,
	            properties: { id: id, area: Number(area.toFixed(2)) },
	            geometry: circleToPolygon(location, RADIUS, EDGES)
	          }, 3);
	        }
	        return { type: 'point', feature: feature };
	      } else {
	        return null;
	      }

	     // a .geojson filename?
	     } else if (/^\S+\.geojson$/i.test(location)) {
	      let feature = this._features[location];
	      if (feature) {
	        feature.properties = feature.properties || {};
	        if (!feature.properties.area) {                          // ensure area property
	          let area = geojsonArea.geometry(feature.geometry) / 1e6;  // m² to km²
	          feature.properties.area = Number(area.toFixed(2));
	        }
	        return { type: 'geojson', feature: feature };
	      } else {
	        return null;
	      }

	    // a country-coder string?
	    } else {
	      let feature$1 = feature(location);
	      if (feature$1) {
	        feature$1.properties = feature$1.properties || {};
	        if (!feature$1.properties.area) {                            // ensure area property
	          const area = geojsonArea.geometry(feature$1.geometry) / 1e6;  // m² to km²
	          feature$1.properties.area = Number(area.toFixed(2));
	        }
	        return { type: 'countrycoder', feature: feature$1 };
	      } else {
	        return null;
	      }

	    }
	  }


	  // getIdentifier
	  //
	  // Pass a `locationSet` Object like:
	  //   `{ include: [ Array ], exclude: [ Array ] }`
	  // Returns a stable identifier string of the form:
	  //   "+[included]-[excluded]"
	  getIdentifier(locationSet) {
	    locationSet = locationSet || {};
	    let include = (locationSet.include || []).filter(l => this.isValidLocation(l));
	    let exclude = (locationSet.exclude || []).filter(l => this.isValidLocation(l));
	    let that = this;

	    if (include.length) {
	      include.sort(compare);
	    } else {
	      include = ['001'];   // default to 'the world'
	    }

	    let id = '+' + JSON.stringify(include).toLowerCase();

	    if (exclude.length) {
	      exclude.sort(compare);
	      id += '-' + JSON.stringify(exclude).toLowerCase();
	    }

	    return id;

	    // it's ok to sort these lists because they all end up unioned together.
	    function compare(a, b) {
	      const rank = { countrycoder: 1, geojson: 2, point: 3 };
	      const aRank = rank[that.isValidLocation(a)] || 4;
	      const bRank = rank[that.isValidLocation(b)] || 4;

	      if (aRank > bRank) return 1;
	      if (aRank < bRank) return -1;

	      // numeric sort point [lon,lat] locations
	      if (aRank === 3 && bRank === 3) {
	        return (a[0] - b[0] > 0) ? 1
	          : (a[0] - b[0] < 0) ? -1
	          : (a[1] - b[1]);
	      }

	      // lexical sort other identifiers
	      return a.localeCompare(b);
	    }
	  }


	  // resolveLocationSet()
	  //
	  // Pass a `locationSet` Object like:
	  //   `{ include: [ Array ], exclude: [ Array ] }`
	  // Returns a stable identifier string of the form:
	  //   "+[included]-[excluded]"
	  //
	  resolveLocationSet(locationSet) {
	    locationSet = locationSet || {};
	    let include = (locationSet.include || []).filter(l => this.isValidLocation(l));
	    let exclude = (locationSet.exclude || []).filter(l => this.isValidLocation(l));
	    let that = this;

	    if (include.length) {
	      include.sort(locationSorter);
	    } else {
	      include = ['001'];   // default to 'the world'
	    }

	    // exit early if a simple shape..
	    if (include.length === 1 && exclude.length === 0) {
	      return this.locationToFeature(include[0]);
	    }

	    // generate identifier
	    let id = '+' + JSON.stringify(include).toLowerCase();
	    if (exclude.length) {
	      exclude.sort(locationSorter);
	      id += '-' + JSON.stringify(exclude).toLowerCase();
	    }

	    // return cached?
	    if (this._cache[id]) {
	      return this._cache[id];
	    }

	    // resolve lists
	    let includeGeoJSON = include.reduce(locationReducer, null);
	    let excludeGeoJSON = exclude.reduce(locationReducer, null);

	    // calculate include-exclude, recalc area and return result
	    let resultGeoJSON = excludeGeoJSON ? difference(includeGeoJSON, excludeGeoJSON) : includeGeoJSON;
	    const area = geojsonArea.geometry(resultGeoJSON.geometry) / 1e6;  // m² to km²

	    resultGeoJSON.id = id;
	    resultGeoJSON.properties = { id: id, area: Number(area.toFixed(2)) };
	    this._cache[id] = resultGeoJSON;

	    return resultGeoJSON;


	    // Reduce the locations into a single GeoJSON feature
	    function locationReducer(accumulator, location) {
	      let result = that.locationToFeature(location);
	      if (!result) {
	        console.warn(`Warning:  Couldn't resolve location "${location}"`);  // eslint-disable-line no-console
	        return accumulator;
	      }

	      let feature = result.feature;

	      // -> This block of code is weird and requires some explanation. <-
	      // CountryCoder includes higher level features which are made up of members.
	      // These features don't have their own geometry, but CountryCoder provides an
	      //   `aggregateFeature` method to combine these members into a MultiPolygon.
	      // BUT, when we try to actually work with these MultiPolygons, Turf/JSTS
	      //   gets crashy because of topography bugs.
	      // SO, we'll aggregate the features ourselves by unioning them together,
	      //   then store the resulting geometry back in the CountryCoder feature itself.
	      //   (yes, modifying the internal CountryCoder feature geometry is hacky, but seems safe)
	      if (result.type === 'countrycoder' && !feature.geometry) {
	        let aggregate = feature.properties.members.reduce(locationReducer, null);
	        feature.geometry = aggregate.geometry;
	        const area = geojsonArea.geometry(feature.geometry) / 1e6;  // m² to km²
	        feature.properties.area = Number(area.toFixed(2));
	      }

	      return !accumulator ? feature : union(accumulator, feature);
	    }


	    // It's ok to sort location lists because they all end up unioned together.
	    function locationSorter(a, b) {
	      const rank = { countrycoder: 1, geojson: 2, point: 3 };
	      const aRank = rank[that.isValidLocation(a)] || 4;
	      const bRank = rank[that.isValidLocation(b)] || 4;

	      if (aRank > bRank) return 1;
	      if (aRank < bRank) return -1;

	      // numeric sort point [lon,lat] locations
	      if (aRank === 3 && bRank === 3) {
	        return (a[0] - b[0] > 0) ? 1
	          : (a[0] - b[0] < 0) ? -1
	          : (a[1] - b[1]);
	      }

	      // lexical sort other identifiers
	      return a.localeCompare(b);
	    }
	  }


	}

	return index;

})));
